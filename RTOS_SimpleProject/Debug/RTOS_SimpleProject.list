
RTOS_SimpleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a278  0800a278  0000b278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a418  0800a418  0000c010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a418  0800a418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a420  0800a420  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a420  0800a420  0000b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a424  0800a424  0000b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800a428  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a60  20000010  0800a438  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  0800a438  0000ca70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2ff  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000433c  00000000  00000000  0002b33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0002f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001500  00000000  00000000  00031180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050eb  00000000  00000000  00032680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa98  00000000  00000000  0003776b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100ac8  00000000  00000000  00057203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007438  00000000  00000000  00157d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a25c 	.word	0x0800a25c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800a25c 	.word	0x0800a25c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af04      	add	r7, sp, #16
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b299      	uxth	r1, r3
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 030f 	add.w	r3, r7, #15
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f002 ff59 	bl	8003d80 <HAL_I2C_Mem_Read>

	return Value;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	b299      	uxth	r1, r3
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	1cbb      	adds	r3, r7, #2
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	f002 fe26 	bl	8003b58 <HAL_I2C_Mem_Write>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2302      	movs	r3, #2
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	f002 ff1d 	bl	8003d80 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	7b3b      	ldrb	r3, [r7, #12]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	b29b      	uxth	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b088      	sub	sp, #32
 8000f62:	af04      	add	r7, sp, #16
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	791b      	ldrb	r3, [r3, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b299      	uxth	r1, r3
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2303      	movs	r3, #3
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f002 fef8 	bl	8003d80 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	041a      	lsls	r2, r3, #16
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	7bba      	ldrb	r2, [r7, #14]
 8000f9c:	4313      	orrs	r3, r2
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d901      	bls.n	8000fbc <BMP280_SetMode+0x16>
 8000fb8:	2303      	movs	r3, #3
 8000fba:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8000fbc:	21f4      	movs	r1, #244	@ 0xf4
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff6c 	bl	8000e9c <Read8>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8000fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	21f4      	movs	r1, #244	@ 0xf4
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff74 	bl	8000ed8 <Write8>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d901      	bls.n	800100e <BMP280_SetPressureOversampling+0x16>
 800100a:	2305      	movs	r3, #5
 800100c:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800100e:	21f4      	movs	r1, #244	@ 0xf4
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff43 	bl	8000e9c <Read8>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f023 031c 	bic.w	r3, r3, #28
 8001020:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f003 031c 	and.w	r3, r3, #28
 800102c:	b25a      	sxtb	r2, r3
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4313      	orrs	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	461a      	mov	r2, r3
 800103c:	21f4      	movs	r1, #244	@ 0xf4
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff4a 	bl	8000ed8 <Write8>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d901      	bls.n	8001062 <BMP280_SetTemperatureOversampling+0x16>
 800105e:	2305      	movs	r3, #5
 8001060:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001062:	21f4      	movs	r1, #244	@ 0xf4
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff19 	bl	8000e9c <Read8>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	b25a      	sxtb	r2, r3
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4313      	orrs	r3, r2
 8001082:	b25b      	sxtb	r3, r3
 8001084:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	21f4      	movs	r1, #244	@ 0xf4
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff23 	bl	8000ed8 <Write8>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 80010a2:	21fa      	movs	r1, #250	@ 0xfa
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff5a 	bl	8000f5e <Read24>
 80010aa:	4603      	mov	r3, r0
 80010ac:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	111b      	asrs	r3, r3, #4
 80010b2:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 80010c6:	21f7      	movs	r1, #247	@ 0xf7
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff48 	bl	8000f5e <Read24>
 80010ce:	4603      	mov	r3, r0
 80010d0:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	111b      	asrs	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffd4 	bl	800109a <BMP280_ReadTemperatureRaw>
 80010f2:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	10da      	asrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8b5b      	ldrh	r3, [r3, #26]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	12db      	asrs	r3, r3, #11
 800110c:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	111b      	asrs	r3, r3, #4
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	8b52      	ldrh	r2, [r2, #26]
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	1112      	asrs	r2, r2, #4
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	8b49      	ldrh	r1, [r1, #26]
 8001120:	1a52      	subs	r2, r2, r1
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	139b      	asrs	r3, r3, #14
 8001134:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	441a      	add	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3380      	adds	r3, #128	@ 0x80
 800114c:	121b      	asrs	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f7ff f98f 	bl	8000474 <__aeabi_i2d>
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <BMP280_ReadTemperature+0x98>)
 800115c:	f7ff fb1e 	bl	800079c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fcd0 	bl	8000b0c <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	ee07 3a90 	vmov	s15, r3
}
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40590000 	.word	0x40590000

08001180 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff ffa9 	bl	80010e4 <BMP280_ReadTemperature>
 8001192:	eef0 7a40 	vmov.f32	s15, s0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	105b      	asrs	r3, r3, #1
 80011a2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80011a6:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	109b      	asrs	r3, r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	1092      	asrs	r2, r2, #2
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	12db      	asrs	r3, r3, #11
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80011c8:	461a      	mov	r2, r3
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	109a      	asrs	r2, r3, #2
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011ee:	4619      	mov	r1, r3
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	109b      	asrs	r3, r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	1092      	asrs	r2, r2, #2
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	135b      	asrs	r3, r3, #13
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	10da      	asrs	r2, r3, #3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800120a:	4619      	mov	r1, r3
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	105b      	asrs	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	149b      	asrs	r3, r3, #18
 8001218:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	8b92      	ldrh	r2, [r2, #28]
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	13db      	asrs	r3, r3, #15
 800122a:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001232:	2301      	movs	r3, #1
 8001234:	e054      	b.n	80012e0 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff ff41 	bl	80010be <BMP280_ReadPressureRaw>
 800123c:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	131b      	asrs	r3, r3, #12
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f640 4235 	movw	r2, #3125	@ 0xc35
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db06      	blt.n	8001268 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005a      	lsls	r2, r3, #1
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e005      	b.n	8001274 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800127a:	4619      	mov	r1, r3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08db      	lsrs	r3, r3, #3
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	08d2      	lsrs	r2, r2, #3
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	0b5b      	lsrs	r3, r3, #13
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	131b      	asrs	r3, r3, #12
 8001290:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	135b      	asrs	r3, r3, #13
 80012a4:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4413      	add	r3, r2
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80012b2:	4413      	add	r3, r2
 80012b4:	111a      	asrs	r2, r3, #4
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 80012bc:	69f8      	ldr	r0, [r7, #28]
 80012be:	f7ff f8c9 	bl	8000454 <__aeabi_ui2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <BMP280_ReadPressureAndTemperature+0x168>)
 80012c8:	f7ff fa68 	bl	800079c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc1a 	bl	8000b0c <__aeabi_d2f>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	601a      	str	r2, [r3, #0]

	return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40590000 	.word	0x40590000

080012ec <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001306:	21d0      	movs	r1, #208	@ 0xd0
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fdc7 	bl	8000e9c <Read8>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b58      	cmp	r3, #88	@ 0x58
 8001316:	d001      	beq.n	800131c <BMP280_Init+0x30>
	{
		return 1;
 8001318:	2301      	movs	r3, #1
 800131a:	e06c      	b.n	80013f6 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 800131c:	2188      	movs	r1, #136	@ 0x88
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff fdf8 	bl	8000f14 <Read16>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 800132c:	218a      	movs	r1, #138	@ 0x8a
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fdf0 	bl	8000f14 <Read16>
 8001334:	4603      	mov	r3, r0
 8001336:	b21a      	sxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 800133c:	218c      	movs	r1, #140	@ 0x8c
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f7ff fde8 	bl	8000f14 <Read16>
 8001344:	4603      	mov	r3, r0
 8001346:	b21a      	sxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 800134c:	218e      	movs	r1, #142	@ 0x8e
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff fde0 	bl	8000f14 <Read16>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 800135c:	2190      	movs	r1, #144	@ 0x90
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff fdd8 	bl	8000f14 <Read16>
 8001364:	4603      	mov	r3, r0
 8001366:	b21a      	sxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 800136c:	2192      	movs	r1, #146	@ 0x92
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fdd0 	bl	8000f14 <Read16>
 8001374:	4603      	mov	r3, r0
 8001376:	b21a      	sxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 800137c:	2194      	movs	r1, #148	@ 0x94
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fdc8 	bl	8000f14 <Read16>
 8001384:	4603      	mov	r3, r0
 8001386:	b21a      	sxth	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 800138c:	2196      	movs	r1, #150	@ 0x96
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fdc0 	bl	8000f14 <Read16>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 800139c:	2198      	movs	r1, #152	@ 0x98
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fdb8 	bl	8000f14 <Read16>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 80013ac:	219a      	movs	r1, #154	@ 0x9a
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff fdb0 	bl	8000f14 <Read16>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 80013bc:	219c      	movs	r1, #156	@ 0x9c
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff fda8 	bl	8000f14 <Read16>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 80013cc:	219e      	movs	r1, #158	@ 0x9e
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff fda0 	bl	8000f14 <Read16>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 80013dc:	2105      	movs	r1, #5
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff fe34 	bl	800104c <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 80013e4:	2105      	movs	r1, #5
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff fe06 	bl	8000ff8 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 80013ec:	2103      	movs	r1, #3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fdd9 	bl	8000fa6 <BMP280_SetMode>

	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <_putchar>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void _putchar(char character)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <_putchar+0x38>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001412:	4618      	mov	r0, r3
 8001414:	f005 fead 	bl	8007172 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001418:	1df9      	adds	r1, r7, #7
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	2201      	movs	r2, #1
 8001420:	4806      	ldr	r0, [pc, #24]	@ (800143c <_putchar+0x3c>)
 8001422:	f004 ff87 	bl	8006334 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <_putchar+0x38>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f005 feec 	bl	8007208 <osMutexRelease>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000038 	.word	0x20000038
 800143c:	200000dc 	.word	0x200000dc

08001440 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001444:	480f      	ldr	r0, [pc, #60]	@ (8001484 <MX_FREERTOS_Init+0x44>)
 8001446:	f005 fe0e 	bl	8007066 <osMutexNew>
 800144a:	4603      	mov	r3, r0
 800144c:	4a0e      	ldr	r2, [pc, #56]	@ (8001488 <MX_FREERTOS_Init+0x48>)
 800144e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartbeatTask */
  HeartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &HeartbeatTask_attributes);
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <MX_FREERTOS_Init+0x4c>)
 8001452:	2100      	movs	r1, #0
 8001454:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_FREERTOS_Init+0x50>)
 8001456:	f005 fd59 	bl	8006f0c <osThreadNew>
 800145a:	4603      	mov	r3, r0
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <MX_FREERTOS_Init+0x54>)
 800145e:	6013      	str	r3, [r2, #0]

  /* creation of Bmp280Task */
  Bmp280TaskHandle = osThreadNew(StartBmp280Task, NULL, &Bmp280Task_attributes);
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <MX_FREERTOS_Init+0x58>)
 8001462:	2100      	movs	r1, #0
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <MX_FREERTOS_Init+0x5c>)
 8001466:	f005 fd51 	bl	8006f0c <osThreadNew>
 800146a:	4603      	mov	r3, r0
 800146c:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <MX_FREERTOS_Init+0x60>)
 800146e:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8001470:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <MX_FREERTOS_Init+0x64>)
 8001472:	2100      	movs	r1, #0
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_FREERTOS_Init+0x68>)
 8001476:	f005 fd49 	bl	8006f0c <osThreadNew>
 800147a:	4603      	mov	r3, r0
 800147c:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <MX_FREERTOS_Init+0x6c>)
 800147e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	0800a36c 	.word	0x0800a36c
 8001488:	20000038 	.word	0x20000038
 800148c:	0800a300 	.word	0x0800a300
 8001490:	080014b1 	.word	0x080014b1
 8001494:	2000002c 	.word	0x2000002c
 8001498:	0800a324 	.word	0x0800a324
 800149c:	080014d1 	.word	0x080014d1
 80014a0:	20000030 	.word	0x20000030
 80014a4:	0800a348 	.word	0x0800a348
 80014a8:	08001531 	.word	0x08001531
 80014ac:	20000034 	.word	0x20000034

080014b0 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014b8:	2120      	movs	r1, #32
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f002 fa95 	bl	80039ec <HAL_GPIO_TogglePin>
    osDelay(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014c6:	f005 fdb3 	bl	8007030 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014ca:	bf00      	nop
 80014cc:	e7f4      	b.n	80014b8 <StartHeartbeatTask+0x8>
	...

080014d0 <StartBmp280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp280Task */
void StartBmp280Task(void *argument)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp280Task */
	BMP280_t Bmp280;

	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2276      	movs	r2, #118	@ 0x76
 80014de:	4912      	ldr	r1, [pc, #72]	@ (8001528 <StartBmp280Task+0x58>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff03 	bl	80012ec <BMP280_Init>

	float _Pressure, _Temperature;
  /* Infinite loop */
  for(;;)
  {
    BMP280_ReadPressureAndTemperature(&Bmp280, &_Pressure, &_Temperature);
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	f107 0110 	add.w	r1, r7, #16
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe44 	bl	8001180 <BMP280_ReadPressureAndTemperature>
    printf("Temperature: %.2f, Pressure: %.2f\n\r", _Temperature, _Pressure);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffcc 	bl	8000498 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	460d      	mov	r5, r1
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffc6 	bl	8000498 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9cd 2300 	strd	r2, r3, [sp]
 8001514:	4622      	mov	r2, r4
 8001516:	462b      	mov	r3, r5
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <StartBmp280Task+0x5c>)
 800151a:	f001 fde3 	bl	80030e4 <printf_>
    osDelay(10);
 800151e:	200a      	movs	r0, #10
 8001520:	f005 fd86 	bl	8007030 <osDelay>
    BMP280_ReadPressureAndTemperature(&Bmp280, &_Pressure, &_Temperature);
 8001524:	bf00      	nop
 8001526:	e7de      	b.n	80014e6 <StartBmp280Task+0x16>
 8001528:	2000003c 	.word	0x2000003c
 800152c:	0800a2ac 	.word	0x0800a2ac

08001530 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f005 fd79 	bl	8007030 <osDelay>
 800153e:	e7fb      	b.n	8001538 <StartOledTask+0x8>

08001540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <MX_GPIO_Init+0xc4>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <MX_GPIO_Init+0xc4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <MX_GPIO_Init+0xc4>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <MX_GPIO_Init+0xc4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_GPIO_Init+0xc4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <MX_GPIO_Init+0xc4>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_GPIO_Init+0xc4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2120      	movs	r1, #32
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015be:	f002 f9fd 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	480b      	ldr	r0, [pc, #44]	@ (8001608 <MX_GPIO_Init+0xc8>)
 80015da:	f002 f845 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015de:	2320      	movs	r3, #32
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f002 f836 	bl	8003668 <HAL_GPIO_Init>

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	48000800 	.word	0x48000800

0800160c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_I2C1_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <MX_I2C1_Init+0x7c>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_I2C1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	@ (8001680 <MX_I2C1_Init+0x74>)
 8001648:	f002 f9ea 	bl	8003a20 <HAL_I2C_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001652:	f000 f8f1 	bl	8001838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4809      	ldr	r0, [pc, #36]	@ (8001680 <MX_I2C1_Init+0x74>)
 800165a:	f002 ff6d 	bl	8004538 <HAL_I2CEx_ConfigAnalogFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 f8e8 	bl	8001838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_I2C1_Init+0x74>)
 800166c:	f002 ffaf 	bl	80045ce <HAL_I2CEx_ConfigDigitalFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 f8df 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000003c 	.word	0x2000003c
 8001684:	40005400 	.word	0x40005400
 8001688:	00702991 	.word	0x00702991

0800168c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0ac      	sub	sp, #176	@ 0xb0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2288      	movs	r2, #136	@ 0x88
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f008 fd9b 	bl	800a1e8 <memset>
  if(i2cHandle->Instance==I2C1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_I2C_MspInit+0xb0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d13b      	bne.n	8001734 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016bc:	2340      	movs	r3, #64	@ 0x40
 80016be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fe63 	bl	8005394 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016d4:	f000 f8b0 	bl	8001838 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f8:	2312      	movs	r3, #18
 80016fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170a:	2304      	movs	r3, #4
 800170c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	@ (8001744 <HAL_I2C_MspInit+0xb8>)
 8001718:	f001 ffa6 	bl	8003668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 8001722:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_I2C_MspInit+0xb4>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	37b0      	adds	r7, #176	@ 0xb0
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005400 	.word	0x40005400
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f001 fe6a 	bl	8003424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f80e 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f7ff fef4 	bl	8001540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001758:	f001 fdae 	bl	80032b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800175c:	f7ff ff56 	bl	800160c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001760:	f005 fb8a 	bl	8006e78 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001764:	f7ff fe6c 	bl	8001440 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001768:	f005 fbaa 	bl	8006ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <main+0x24>

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b096      	sub	sp, #88	@ 0x58
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2244      	movs	r2, #68	@ 0x44
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f008 fd32 	bl	800a1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001792:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001796:	f002 ff75 	bl	8004684 <HAL_PWREx_ControlVoltageScaling>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017a0:	f000 f84a 	bl	8001838 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ae:	2310      	movs	r3, #16
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b6:	2302      	movs	r3, #2
 80017b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017be:	230a      	movs	r3, #10
 80017c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017c2:	2307      	movs	r3, #7
 80017c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ffac 	bl	8004730 <HAL_RCC_OscConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80017de:	f000 f82b 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e6:	2303      	movs	r3, #3
 80017e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	2104      	movs	r1, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fb74 	bl	8004ee8 <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001806:	f000 f817 	bl	8001838 <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3758      	adds	r7, #88	@ 0x58
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001826:	f001 fe1d 	bl	8003464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40014800 	.word	0x40014800

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <_out_char+0x1e>
    _putchar(character);
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdc1 	bl	8001400 <_putchar>
  }
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e002      	b.n	800189c <_strnlen_s+0x16>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3301      	adds	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <_strnlen_s+0x28>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	603a      	str	r2, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f3      	bne.n	8001896 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1ad3      	subs	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80018ce:	d904      	bls.n	80018da <_is_digit+0x1a>
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b39      	cmp	r3, #57	@ 0x39
 80018d4:	d801      	bhi.n	80018da <_is_digit+0x1a>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <_is_digit+0x1c>
 80018da:	2300      	movs	r3, #0
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80018fa:	e00e      	b.n	800191a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4618      	mov	r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1c59      	adds	r1, r3, #1
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4403      	add	r3, r0
 8001916:	3b30      	subs	r3, #48	@ 0x30
 8001918:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ffcd 	bl	80018c0 <_is_digit>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e7      	bne.n	80018fc <_atoi+0xe>
  }
  return i;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001936:	b590      	push	{r4, r7, lr}
 8001938:	b087      	sub	sp, #28
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d125      	bne.n	800199e <_out_rev+0x68>
 8001952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d120      	bne.n	800199e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800195c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	1c53      	adds	r3, r2, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	68fc      	ldr	r4, [r7, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	2020      	movs	r0, #32
 8001970:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197c:	429a      	cmp	r2, r3
 800197e:	d3f0      	bcc.n	8001962 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001980:	e00d      	b.n	800199e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001984:	3b01      	subs	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	4413      	add	r3, r2
 800198e:	7818      	ldrb	r0, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	1c53      	adds	r3, r2, #1
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	68fc      	ldr	r4, [r7, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	47a0      	blx	r4
  while (len) {
 800199e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ee      	bne.n	8001982 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80019a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <_out_rev+0x96>
    while (idx - start_idx < width) {
 80019ae:	e007      	b.n	80019c0 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	1c53      	adds	r3, r2, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	68fc      	ldr	r4, [r7, #12]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	2020      	movs	r0, #32
 80019be:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f1      	bhi.n	80019b0 <_out_rev+0x7a>
    }
  }

  return idx;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b088      	sub	sp, #32
 80019da:	af04      	add	r7, sp, #16
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80019e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d136      	bne.n	8001a5c <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80019ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d018      	beq.n	8001a26 <_ntoa_format+0x50>
 80019f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d013      	beq.n	8001a26 <_ntoa_format+0x50>
 80019fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <_ntoa_format+0x3a>
 8001a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00a      	beq.n	8001a26 <_ntoa_format+0x50>
      width--;
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	3b01      	subs	r3, #1
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a16:	e006      	b.n	8001a26 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	61fa      	str	r2, [r7, #28]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4413      	add	r3, r2
 8001a22:	2230      	movs	r2, #48	@ 0x30
 8001a24:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d20a      	bcs.n	8001a44 <_ntoa_format+0x6e>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2b1f      	cmp	r3, #31
 8001a32:	d9f1      	bls.n	8001a18 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a34:	e006      	b.n	8001a44 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	61fa      	str	r2, [r7, #28]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4413      	add	r3, r2
 8001a40:	2230      	movs	r2, #48	@ 0x30
 8001a42:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <_ntoa_format+0x86>
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d202      	bcs.n	8001a5c <_ntoa_format+0x86>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b1f      	cmp	r3, #31
 8001a5a:	d9ec      	bls.n	8001a36 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d058      	beq.n	8001b18 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d116      	bne.n	8001a9e <_ntoa_format+0xc8>
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d013      	beq.n	8001a9e <_ntoa_format+0xc8>
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d003      	beq.n	8001a86 <_ntoa_format+0xb0>
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d10b      	bne.n	8001a9e <_ntoa_format+0xc8>
      len--;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <_ntoa_format+0xc8>
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d102      	bne.n	8001a9e <_ntoa_format+0xc8>
        len--;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d10f      	bne.n	8001ac4 <_ntoa_format+0xee>
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <_ntoa_format+0xee>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	d807      	bhi.n	8001ac4 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4413      	add	r3, r2
 8001abe:	2278      	movs	r2, #120	@ 0x78
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e01f      	b.n	8001b04 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d10f      	bne.n	8001aea <_ntoa_format+0x114>
 8001aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <_ntoa_format+0x114>
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	d807      	bhi.n	8001aea <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	61fa      	str	r2, [r7, #28]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2258      	movs	r2, #88	@ 0x58
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e00c      	b.n	8001b04 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d109      	bne.n	8001b04 <_ntoa_format+0x12e>
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	d806      	bhi.n	8001b04 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4413      	add	r3, r2
 8001b00:	2262      	movs	r2, #98	@ 0x62
 8001b02:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b1f      	cmp	r3, #31
 8001b08:	d806      	bhi.n	8001b18 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	61fa      	str	r2, [r7, #28]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4413      	add	r3, r2
 8001b14:	2230      	movs	r2, #48	@ 0x30
 8001b16:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b1f      	cmp	r3, #31
 8001b1c:	d824      	bhi.n	8001b68 <_ntoa_format+0x192>
    if (negative) {
 8001b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	61fa      	str	r2, [r7, #28]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4413      	add	r3, r2
 8001b30:	222d      	movs	r2, #45	@ 0x2d
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e018      	b.n	8001b68 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	61fa      	str	r2, [r7, #28]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4413      	add	r3, r2
 8001b4a:	222b      	movs	r2, #43	@ 0x2b
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e00b      	b.n	8001b68 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	61fa      	str	r2, [r7, #28]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4413      	add	r3, r2
 8001b64:	2220      	movs	r2, #32
 8001b66:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6a:	9303      	str	r3, [sp, #12]
 8001b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fed9 	bl	8001936 <_out_rev>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b096      	sub	sp, #88	@ 0x58
 8001b92:	af08      	add	r7, sp, #32
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8001ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d103      	bne.n	8001bae <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba8:	f023 0310 	bic.w	r3, r3, #16
 8001bac:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <_ntoa_long+0x30>
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d032      	beq.n	8001c24 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001bc8:	fb01 f202 	mul.w	r2, r1, r2
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bd6:	2b09      	cmp	r3, #9
 8001bd8:	d804      	bhi.n	8001be4 <_ntoa_long+0x56>
 8001bda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bde:	3330      	adds	r3, #48	@ 0x30
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	e00d      	b.n	8001c00 <_ntoa_long+0x72>
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <_ntoa_long+0x64>
 8001bee:	2241      	movs	r2, #65	@ 0x41
 8001bf0:	e000      	b.n	8001bf4 <_ntoa_long+0x66>
 8001bf2:	2261      	movs	r2, #97	@ 0x61
 8001bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b0a      	subs	r3, #10
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c02:	1c59      	adds	r1, r3, #1
 8001c04:	6379      	str	r1, [r7, #52]	@ 0x34
 8001c06:	3338      	adds	r3, #56	@ 0x38
 8001c08:	443b      	add	r3, r7
 8001c0a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <_ntoa_long+0x96>
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c20:	2b1f      	cmp	r3, #31
 8001c22:	d9cc      	bls.n	8001bbe <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c26:	9306      	str	r3, [sp, #24]
 8001c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c2a:	9305      	str	r3, [sp, #20]
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff fec3 	bl	80019d6 <_ntoa_format>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3738      	adds	r7, #56	@ 0x38
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b096      	sub	sp, #88	@ 0x58
 8001c5e:	af08      	add	r7, sp, #32
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8001c6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c70:	4313      	orrs	r3, r2
 8001c72:	d103      	bne.n	8001c7c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c76:	f023 0310 	bic.w	r3, r3, #16
 8001c7a:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <_ntoa_long_long+0x34>
 8001c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001c8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001c92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c96:	f7fe ff89 	bl	8000bac <__aeabi_uldivmod>
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d804      	bhi.n	8001cb2 <_ntoa_long_long+0x58>
 8001ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cac:	3330      	adds	r3, #48	@ 0x30
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	e00d      	b.n	8001cce <_ntoa_long_long+0x74>
 8001cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <_ntoa_long_long+0x66>
 8001cbc:	2241      	movs	r2, #65	@ 0x41
 8001cbe:	e000      	b.n	8001cc2 <_ntoa_long_long+0x68>
 8001cc0:	2261      	movs	r2, #97	@ 0x61
 8001cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3b0a      	subs	r3, #10
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd0:	1c59      	adds	r1, r3, #1
 8001cd2:	6379      	str	r1, [r7, #52]	@ 0x34
 8001cd4:	3338      	adds	r3, #56	@ 0x38
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ce0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ce4:	f7fe ff62 	bl	8000bac <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	d002      	beq.n	8001cfe <_ntoa_long_long+0xa4>
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	2b1f      	cmp	r3, #31
 8001cfc:	d9c7      	bls.n	8001c8e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d02:	9206      	str	r2, [sp, #24]
 8001d04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001d06:	9205      	str	r2, [sp, #20]
 8001d08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d0a:	9204      	str	r2, [sp, #16]
 8001d0c:	9303      	str	r3, [sp, #12]
 8001d0e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff fe56 	bl	80019d6 <_ntoa_format>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3738      	adds	r7, #56	@ 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0000      	movs	r0, r0
	...

08001d38 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b09d      	sub	sp, #116	@ 0x74
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	6178      	str	r0, [r7, #20]
 8001d40:	6139      	str	r1, [r7, #16]
 8001d42:	60fa      	str	r2, [r7, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d62:	f7fe fe59 	bl	8000a18 <__aeabi_dcmpeq>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2303      	movs	r3, #3
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	4ba7      	ldr	r3, [pc, #668]	@ (8002018 <_ftoa+0x2e0>)
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff fdd7 	bl	8001936 <_out_rev>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	e222      	b.n	80021d2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d90:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8001d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d98:	f7fe fe48 	bl	8000a2c <__aeabi_dcmplt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00f      	beq.n	8001dc2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2304      	movs	r3, #4
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	4b9b      	ldr	r3, [pc, #620]	@ (800201c <_ftoa+0x2e4>)
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	6939      	ldr	r1, [r7, #16]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7ff fdbc 	bl	8001936 <_out_rev>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	e207      	b.n	80021d2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc6:	4b96      	ldr	r3, [pc, #600]	@ (8002020 <_ftoa+0x2e8>)
 8001dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dcc:	f7fe fe4c 	bl	8000a68 <__aeabi_dcmpgt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01d      	beq.n	8001e12 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <_ftoa+0xac>
 8001de0:	4b90      	ldr	r3, [pc, #576]	@ (8002024 <_ftoa+0x2ec>)
 8001de2:	e000      	b.n	8001de6 <_ftoa+0xae>
 8001de4:	4b90      	ldr	r3, [pc, #576]	@ (8002028 <_ftoa+0x2f0>)
 8001de6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001de8:	f002 0204 	and.w	r2, r2, #4
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d001      	beq.n	8001df4 <_ftoa+0xbc>
 8001df0:	2204      	movs	r2, #4
 8001df2:	e000      	b.n	8001df6 <_ftoa+0xbe>
 8001df4:	2203      	movs	r2, #3
 8001df6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001df8:	9103      	str	r1, [sp, #12]
 8001dfa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001dfc:	9102      	str	r1, [sp, #8]
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6939      	ldr	r1, [r7, #16]
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7ff fd94 	bl	8001936 <_out_rev>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	e1df      	b.n	80021d2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001e12:	a37d      	add	r3, pc, #500	@ (adr r3, 8002008 <_ftoa+0x2d0>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e1c:	f7fe fe24 	bl	8000a68 <__aeabi_dcmpgt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <_ftoa+0x102>
 8001e26:	a37a      	add	r3, pc, #488	@ (adr r3, 8002010 <_ftoa+0x2d8>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e30:	f7fe fdfc 	bl	8000a2c <__aeabi_dcmplt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00f      	beq.n	8001e5a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	ed97 0b00 	vldr	d0, [r7]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f000 f9c9 	bl	80021e8 <_etoa>
 8001e56:	4603      	mov	r3, r0
 8001e58:	e1bb      	b.n	80021d2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e6c:	f7fe fdde 	bl	8000a2c <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <_ftoa+0x15c>
    negative = true;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 8001e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e80:	f04f 0000 	mov.w	r0, #0
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	f7fe f9a6 	bl	80001d8 <__aeabi_dsub>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001ea2:	e00a      	b.n	8001eba <_ftoa+0x182>
    buf[len++] = '0';
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eaa:	3360      	adds	r3, #96	@ 0x60
 8001eac:	443b      	add	r3, r7
 8001eae:	2230      	movs	r2, #48	@ 0x30
 8001eb0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	d802      	bhi.n	8001ec6 <_ftoa+0x18e>
 8001ec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec2:	2b09      	cmp	r3, #9
 8001ec4:	d8ee      	bhi.n	8001ea4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eca:	f7fe fdd7 	bl	8000a7c <__aeabi_d2iz>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8001ed2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001ed4:	f7fe face 	bl	8000474 <__aeabi_i2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee0:	f7fe f97a 	bl	80001d8 <__aeabi_dsub>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <_ftoa+0x2f4>)
 8001eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb26 	bl	8000548 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8001f04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f08:	f7fe fde0 	bl	8000acc <__aeabi_d2uiz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8001f10:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f12:	f7fe fa9f 	bl	8000454 <__aeabi_ui2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f1e:	f7fe f95b 	bl	80001d8 <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <_ftoa+0x2f8>)
 8001f30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f34:	f7fe fd98 	bl	8000a68 <__aeabi_dcmpgt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <_ftoa+0x234>
    ++frac;
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f40:	3301      	adds	r3, #1
 8001f42:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001f44:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f46:	f7fe fa85 	bl	8000454 <__aeabi_ui2d>
 8001f4a:	4a38      	ldr	r2, [pc, #224]	@ (800202c <_ftoa+0x2f4>)
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fd7d 	bl	8000a54 <__aeabi_dcmpge>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01a      	beq.n	8001f96 <_ftoa+0x25e>
      frac = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8001f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f66:	3301      	adds	r3, #1
 8001f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f6a:	e014      	b.n	8001f96 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <_ftoa+0x2f8>)
 8001f72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f76:	f7fe fd59 	bl	8000a2c <__aeabi_dcmplt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <_ftoa+0x258>
 8001f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f92:	3301      	adds	r3, #1
 8001f94:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8001f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d14b      	bne.n	8002034 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001f9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f9e:	f7fe fa69 	bl	8000474 <__aeabi_i2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001faa:	f7fe f915 	bl	80001d8 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	461c      	mov	r4, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <_ftoa+0x2f8>)
 8001fc0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001fc4:	f7fe fd32 	bl	8000a2c <__aeabi_dcmplt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <_ftoa+0x29a>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	461c      	mov	r4, r3
 8001fd2:	b2e3      	uxtb	r3, r4
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <_ftoa+0x2ba>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <_ftoa+0x2f8>)
 8001fe4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001fe8:	f7fe fd3e 	bl	8000a68 <__aeabi_dcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d064      	beq.n	80020bc <_ftoa+0x384>
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8081 	beq.w	8002100 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002000:	3301      	adds	r3, #1
 8002002:	657b      	str	r3, [r7, #84]	@ 0x54
 8002004:	e07c      	b.n	8002100 <_ftoa+0x3c8>
 8002006:	bf00      	nop
 8002008:	00000000 	.word	0x00000000
 800200c:	41cdcd65 	.word	0x41cdcd65
 8002010:	00000000 	.word	0x00000000
 8002014:	c1cdcd65 	.word	0xc1cdcd65
 8002018:	0800a2d0 	.word	0x0800a2d0
 800201c:	0800a2d4 	.word	0x0800a2d4
 8002020:	7fefffff 	.word	0x7fefffff
 8002024:	0800a2dc 	.word	0x0800a2dc
 8002028:	0800a2e4 	.word	0x0800a2e4
 800202c:	0800a380 	.word	0x0800a380
 8002030:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002036:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002038:	e01f      	b.n	800207a <_ftoa+0x342>
      --count;
 800203a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800203c:	3b01      	subs	r3, #1
 800203e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002040:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002042:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <_ftoa+0x4a4>)
 8002044:	fba3 2301 	umull	r2, r3, r3, r1
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	1aca      	subs	r2, r1, r3
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	1c59      	adds	r1, r3, #1
 800205a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800205c:	3230      	adds	r2, #48	@ 0x30
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	3360      	adds	r3, #96	@ 0x60
 8002062:	443b      	add	r3, r7
 8002064:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800206a:	4a5c      	ldr	r2, [pc, #368]	@ (80021dc <_ftoa+0x4a4>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800207a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800207c:	2b1f      	cmp	r3, #31
 800207e:	d9dc      	bls.n	800203a <_ftoa+0x302>
 8002080:	e009      	b.n	8002096 <_ftoa+0x35e>
        break;
 8002082:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002084:	e007      	b.n	8002096 <_ftoa+0x35e>
      buf[len++] = '0';
 8002086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800208c:	3360      	adds	r3, #96	@ 0x60
 800208e:	443b      	add	r3, r7
 8002090:	2230      	movs	r2, #48	@ 0x30
 8002092:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002098:	2b1f      	cmp	r3, #31
 800209a:	d804      	bhi.n	80020a6 <_ftoa+0x36e>
 800209c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a8:	2b1f      	cmp	r3, #31
 80020aa:	d829      	bhi.n	8002100 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80020ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020b2:	3360      	adds	r3, #96	@ 0x60
 80020b4:	443b      	add	r3, r7
 80020b6:	222e      	movs	r2, #46	@ 0x2e
 80020b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020bc:	e020      	b.n	8002100 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80020be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020c0:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <_ftoa+0x4a8>)
 80020c2:	fb83 1302 	smull	r1, r3, r3, r2
 80020c6:	1099      	asrs	r1, r3, #2
 80020c8:	17d3      	asrs	r3, r2, #31
 80020ca:	1ac9      	subs	r1, r1, r3
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	1ad1      	subs	r1, r2, r3
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80020de:	3230      	adds	r2, #48	@ 0x30
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	3360      	adds	r3, #96	@ 0x60
 80020e4:	443b      	add	r3, r7
 80020e6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	4a3c      	ldr	r2, [pc, #240]	@ (80021e0 <_ftoa+0x4a8>)
 80020ee:	fb82 1203 	smull	r1, r2, r2, r3
 80020f2:	1092      	asrs	r2, r2, #2
 80020f4:	17db      	asrs	r3, r3, #31
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80020fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002102:	2b1f      	cmp	r3, #31
 8002104:	d9db      	bls.n	80020be <_ftoa+0x386>
 8002106:	e000      	b.n	800210a <_ftoa+0x3d2>
      break;
 8002108:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800210a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d123      	bne.n	800215c <_ftoa+0x424>
 8002114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01e      	beq.n	800215c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800211e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002120:	2b00      	cmp	r3, #0
 8002122:	d014      	beq.n	800214e <_ftoa+0x416>
 8002124:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <_ftoa+0x3fe>
 800212c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <_ftoa+0x416>
      width--;
 8002136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002138:	3b01      	subs	r3, #1
 800213a:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800213c:	e007      	b.n	800214e <_ftoa+0x416>
      buf[len++] = '0';
 800213e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002144:	3360      	adds	r3, #96	@ 0x60
 8002146:	443b      	add	r3, r7
 8002148:	2230      	movs	r2, #48	@ 0x30
 800214a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800214e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002152:	429a      	cmp	r2, r3
 8002154:	d202      	bcs.n	800215c <_ftoa+0x424>
 8002156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002158:	2b1f      	cmp	r3, #31
 800215a:	d9f0      	bls.n	800213e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800215c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800215e:	2b1f      	cmp	r3, #31
 8002160:	d827      	bhi.n	80021b2 <_ftoa+0x47a>
    if (negative) {
 8002162:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <_ftoa+0x444>
      buf[len++] = '-';
 800216a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002170:	3360      	adds	r3, #96	@ 0x60
 8002172:	443b      	add	r3, r7
 8002174:	222d      	movs	r2, #45	@ 0x2d
 8002176:	f803 2c48 	strb.w	r2, [r3, #-72]
 800217a:	e01a      	b.n	80021b2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800217c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800218c:	3360      	adds	r3, #96	@ 0x60
 800218e:	443b      	add	r3, r7
 8002190:	222b      	movs	r2, #43	@ 0x2b
 8002192:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002196:	e00c      	b.n	80021b2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <_ftoa+0x47a>
      buf[len++] = ' ';
 80021a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021a8:	3360      	adds	r3, #96	@ 0x60
 80021aa:	443b      	add	r3, r7
 80021ac:	2220      	movs	r2, #32
 80021ae:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80021b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff fbb3 	bl	8001936 <_out_rev>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3764      	adds	r7, #100	@ 0x64
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	cccccccd 	.word	0xcccccccd
 80021e0:	66666667 	.word	0x66666667
 80021e4:	00000000 	.word	0x00000000

080021e8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	b09f      	sub	sp, #124	@ 0x7c
 80021ee:	af06      	add	r7, sp, #24
 80021f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80021f2:	6239      	str	r1, [r7, #32]
 80021f4:	61fa      	str	r2, [r7, #28]
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80021fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002204:	f7fe fc08 	bl	8000a18 <__aeabi_dcmpeq>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d014      	beq.n	8002238 <_etoa+0x50>
 800220e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002212:	4bc1      	ldr	r3, [pc, #772]	@ (8002518 <_etoa+0x330>)
 8002214:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002218:	f7fe fc26 	bl	8000a68 <__aeabi_dcmpgt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <_etoa+0x50>
 8002222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002226:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 800222a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800222e:	f7fe fbfd 	bl	8000a2c <__aeabi_dcmplt>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002238:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	ed97 0b04 	vldr	d0, [r7, #16]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002256:	f7ff fd6f 	bl	8001d38 <_ftoa>
 800225a:	4603      	mov	r3, r0
 800225c:	e23f      	b.n	80026de <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800225e:	2301      	movs	r3, #1
 8002260:	461e      	mov	r6, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800226e:	f7fe fbdd 	bl	8000a2c <__aeabi_dcmplt>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <_etoa+0x94>
 8002278:	2300      	movs	r3, #0
 800227a:	461e      	mov	r6, r3
 800227c:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002280:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <_etoa+0xb4>
    value = -value;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	ed97 7b00 	vldr	d7, [r7]
 8002298:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800229c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80022a8:	2306      	movs	r3, #6
 80022aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80022ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80022b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	0d0a      	lsrs	r2, r1, #20
 80022c4:	2300      	movs	r3, #0
 80022c6:	4613      	mov	r3, r2
 80022c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022cc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80022d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80022d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022d6:	4690      	mov	r8, r2
 80022d8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80022dc:	4644      	mov	r4, r8
 80022de:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 80022e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80022e6:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80022ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80022ec:	f7fe f8c2 	bl	8000474 <__aeabi_i2d>
 80022f0:	a37d      	add	r3, pc, #500	@ (adr r3, 80024e8 <_etoa+0x300>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_dmul>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	a37b      	add	r3, pc, #492	@ (adr r3, 80024f0 <_etoa+0x308>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fd ff68 	bl	80001dc <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4b7f      	ldr	r3, [pc, #508]	@ (800251c <_etoa+0x334>)
 800231e:	f7fd ff5b 	bl	80001d8 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	a373      	add	r3, pc, #460	@ (adr r3, 80024f8 <_etoa+0x310>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe f90a 	bl	8000548 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fd ff4e 	bl	80001dc <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fb98 	bl	8000a7c <__aeabi_d2iz>
 800234c:	4603      	mov	r3, r0
 800234e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002350:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002352:	f7fe f88f 	bl	8000474 <__aeabi_i2d>
 8002356:	a36a      	add	r3, pc, #424	@ (adr r3, 8002500 <_etoa+0x318>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fe f8f4 	bl	8000548 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	4b6c      	ldr	r3, [pc, #432]	@ (8002520 <_etoa+0x338>)
 800236e:	f7fd ff35 	bl	80001dc <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fb7f 	bl	8000a7c <__aeabi_d2iz>
 800237e:	4603      	mov	r3, r0
 8002380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002382:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002384:	f7fe f876 	bl	8000474 <__aeabi_i2d>
 8002388:	a35f      	add	r3, pc, #380	@ (adr r3, 8002508 <_etoa+0x320>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe f8db 	bl	8000548 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800239c:	f7fe f86a 	bl	8000474 <__aeabi_i2d>
 80023a0:	a35b      	add	r3, pc, #364	@ (adr r3, 8002510 <_etoa+0x328>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe f8cf 	bl	8000548 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fd ff11 	bl	80001d8 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 80023be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80023d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023d4:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80023d8:	17da      	asrs	r2, r3, #31
 80023da:	469a      	mov	sl, r3
 80023dc:	4693      	mov	fp, r2
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80023ea:	2200      	movs	r2, #0
 80023ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80023f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80023f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	f7fd feee 	bl	80001dc <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4690      	mov	r8, r2
 8002406:	4699      	mov	r9, r3
 8002408:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002414:	f7fd fee0 	bl	80001d8 <__aeabi_dsub>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4692      	mov	sl, r2
 800241e:	469b      	mov	fp, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <_etoa+0x33c>)
 8002426:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800242a:	f7fe f9b7 	bl	800079c <__aeabi_ddiv>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <_etoa+0x340>)
 800243c:	f7fd fece 	bl	80001dc <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002448:	f7fe f9a8 	bl	800079c <__aeabi_ddiv>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b34      	ldr	r3, [pc, #208]	@ (800252c <_etoa+0x344>)
 800245a:	f7fd febf 	bl	80001dc <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002466:	f7fe f999 	bl	800079c <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4650      	mov	r0, sl
 8002470:	4659      	mov	r1, fp
 8002472:	f7fd feb3 	bl	80001dc <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4640      	mov	r0, r8
 800247c:	4649      	mov	r1, r9
 800247e:	f7fe f98d 	bl	800079c <__aeabi_ddiv>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <_etoa+0x348>)
 8002490:	f7fd fea4 	bl	80001dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4620      	mov	r0, r4
 800249a:	4629      	mov	r1, r5
 800249c:	f7fe f854 	bl	8000548 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80024a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b0:	f7fe fabc 	bl	8000a2c <__aeabi_dcmplt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <_etoa+0x2ee>
    expval--;
 80024ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024bc:	3b01      	subs	r3, #1
 80024be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 80024c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <_etoa+0x340>)
 80024ca:	f7fe f967 	bl	800079c <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80024d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d8:	2b63      	cmp	r3, #99	@ 0x63
 80024da:	dc2b      	bgt.n	8002534 <_etoa+0x34c>
 80024dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024de:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80024e2:	db27      	blt.n	8002534 <_etoa+0x34c>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e026      	b.n	8002536 <_etoa+0x34e>
 80024e8:	509f79fb 	.word	0x509f79fb
 80024ec:	3fd34413 	.word	0x3fd34413
 80024f0:	8b60c8b3 	.word	0x8b60c8b3
 80024f4:	3fc68a28 	.word	0x3fc68a28
 80024f8:	636f4361 	.word	0x636f4361
 80024fc:	3fd287a7 	.word	0x3fd287a7
 8002500:	0979a371 	.word	0x0979a371
 8002504:	400a934f 	.word	0x400a934f
 8002508:	bbb55516 	.word	0xbbb55516
 800250c:	40026bb1 	.word	0x40026bb1
 8002510:	fefa39ef 	.word	0xfefa39ef
 8002514:	3fe62e42 	.word	0x3fe62e42
 8002518:	7fefffff 	.word	0x7fefffff
 800251c:	3ff80000 	.word	0x3ff80000
 8002520:	3fe00000 	.word	0x3fe00000
 8002524:	402c0000 	.word	0x402c0000
 8002528:	40240000 	.word	0x40240000
 800252c:	40180000 	.word	0x40180000
 8002530:	3ff00000 	.word	0x3ff00000
 8002534:	2305      	movs	r3, #5
 8002536:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002538:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800253c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002540:	2b00      	cmp	r3, #0
 8002542:	d03d      	beq.n	80025c0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002544:	a368      	add	r3, pc, #416	@ (adr r3, 80026e8 <_etoa+0x500>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800254e:	f7fe fa81 	bl	8000a54 <__aeabi_dcmpge>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d024      	beq.n	80025a2 <_etoa+0x3ba>
 8002558:	a365      	add	r3, pc, #404	@ (adr r3, 80026f0 <_etoa+0x508>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002562:	f7fe fa63 	bl	8000a2c <__aeabi_dcmplt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01a      	beq.n	80025a2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002570:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002572:	429a      	cmp	r2, r3
 8002574:	da07      	bge.n	8002586 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002576:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800257a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002584:	e002      	b.n	800258c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800258c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025a0:	e00e      	b.n	80025c0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80025a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <_etoa+0x3d8>
 80025aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <_etoa+0x3d8>
        --prec;
 80025b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 80025c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d904      	bls.n	80025da <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80025d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80025d8:	e001      	b.n	80025de <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80025de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <_etoa+0x40c>
 80025ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 80025f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <_etoa+0x426>
    value /= conv.F;
 80025fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002602:	f7fe f8cb 	bl	800079c <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002612:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <_etoa+0x440>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e003      	b.n	8002630 <_etoa+0x448>
 8002628:	ed97 7b04 	vldr	d7, [r7, #16]
 800262c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002634:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	ed97 0b02 	vldr	d0, [r7, #8]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002650:	f7ff fb72 	bl	8001d38 <_ftoa>
 8002654:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03f      	beq.n	80026dc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800265c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_etoa+0x484>
 8002668:	2045      	movs	r0, #69	@ 0x45
 800266a:	e000      	b.n	800266e <_etoa+0x486>
 800266c:	2065      	movs	r0, #101	@ 0x65
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	1c53      	adds	r3, r2, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800267c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfb8      	it	lt
 8002682:	425b      	neglt	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002688:	0fdb      	lsrs	r3, r3, #31
 800268a:	b2db      	uxtb	r3, r3
 800268c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800268e:	3a01      	subs	r2, #1
 8002690:	2105      	movs	r1, #5
 8002692:	9105      	str	r1, [sp, #20]
 8002694:	9204      	str	r2, [sp, #16]
 8002696:	2200      	movs	r2, #0
 8002698:	9203      	str	r2, [sp, #12]
 800269a:	220a      	movs	r2, #10
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	9000      	str	r0, [sp, #0]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	6a39      	ldr	r1, [r7, #32]
 80026a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026aa:	f7ff fa70 	bl	8001b8e <_ntoa_long>
 80026ae:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80026b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00f      	beq.n	80026dc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80026bc:	e007      	b.n	80026ce <_etoa+0x4e6>
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	1c53      	adds	r3, r2, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6a39      	ldr	r1, [r7, #32]
 80026ca:	2020      	movs	r0, #32
 80026cc:	47a0      	blx	r4
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d8f0      	bhi.n	80026be <_etoa+0x4d6>
    }
  }
  return idx;
 80026dc:	69fb      	ldr	r3, [r7, #28]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3764      	adds	r7, #100	@ 0x64
 80026e2:	46bd      	mov	sp, r7
 80026e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e8:	eb1c432d 	.word	0xeb1c432d
 80026ec:	3f1a36e2 	.word	0x3f1a36e2
 80026f0:	00000000 	.word	0x00000000
 80026f4:	412e8480 	.word	0x412e8480

080026f8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80026f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fc:	b0a3      	sub	sp, #140	@ 0x8c
 80026fe:	af0a      	add	r7, sp, #40	@ 0x28
 8002700:	6178      	str	r0, [r7, #20]
 8002702:	6139      	str	r1, [r7, #16]
 8002704:	60fa      	str	r2, [r7, #12]
 8002706:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 84cf 	bne.w	80030b2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002714:	4ba8      	ldr	r3, [pc, #672]	@ (80029b8 <_vsnprintf+0x2c0>)
 8002716:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002718:	f000 bccb 	b.w	80030b2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b25      	cmp	r3, #37	@ 0x25
 8002722:	d00d      	beq.n	8002740 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	7818      	ldrb	r0, [r3, #0]
 8002728:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272a:	1c53      	adds	r3, r2, #1
 800272c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272e:	697c      	ldr	r4, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	47a0      	blx	r4
      format++;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3301      	adds	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
      continue;
 800273c:	f000 bcb9 	b.w	80030b2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3301      	adds	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	3b20      	subs	r3, #32
 8002750:	2b10      	cmp	r3, #16
 8002752:	d857      	bhi.n	8002804 <_vsnprintf+0x10c>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <_vsnprintf+0x64>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	080027dd 	.word	0x080027dd
 8002760:	08002805 	.word	0x08002805
 8002764:	08002805 	.word	0x08002805
 8002768:	080027f1 	.word	0x080027f1
 800276c:	08002805 	.word	0x08002805
 8002770:	08002805 	.word	0x08002805
 8002774:	08002805 	.word	0x08002805
 8002778:	08002805 	.word	0x08002805
 800277c:	08002805 	.word	0x08002805
 8002780:	08002805 	.word	0x08002805
 8002784:	08002805 	.word	0x08002805
 8002788:	080027c9 	.word	0x080027c9
 800278c:	08002805 	.word	0x08002805
 8002790:	080027b5 	.word	0x080027b5
 8002794:	08002805 	.word	0x08002805
 8002798:	08002805 	.word	0x08002805
 800279c:	080027a1 	.word	0x080027a1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80027a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	2301      	movs	r3, #1
 80027b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b2:	e02a      	b.n	800280a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80027b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	3301      	adds	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	2301      	movs	r3, #1
 80027c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c6:	e020      	b.n	800280a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80027c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80027da:	e016      	b.n	800280a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	2301      	movs	r3, #1
 80027ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ee:	e00c      	b.n	800280a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80027f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f2:	f043 0310 	orr.w	r3, r3, #16
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	653b      	str	r3, [r7, #80]	@ 0x50
 8002802:	e002      	b.n	800280a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002804:	2300      	movs	r3, #0
 8002806:	653b      	str	r3, [r7, #80]	@ 0x50
 8002808:	bf00      	nop
      }
    } while (n);
 800280a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800280c:	2b00      	cmp	r3, #0
 800280e:	d19c      	bne.n	800274a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f851 	bl	80018c0 <_is_digit>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f860 	bl	80018ee <_atoi>
 800282e:	65b8      	str	r0, [r7, #88]	@ 0x58
 8002830:	e01a      	b.n	8002868 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b2a      	cmp	r3, #42	@ 0x2a
 8002838:	d116      	bne.n	8002868 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800283a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8002848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	da07      	bge.n	800285e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800284e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	425b      	negs	r3, r3
 800285a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800285c:	e001      	b.n	8002862 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002860:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3301      	adds	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b2e      	cmp	r3, #46	@ 0x2e
 8002872:	d127      	bne.n	80028c4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3301      	adds	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f81a 	bl	80018c0 <_is_digit>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f829 	bl	80018ee <_atoi>
 800289c:	6578      	str	r0, [r7, #84]	@ 0x54
 800289e:	e011      	b.n	80028c4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a6:	d10d      	bne.n	80028c4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80028a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028ac:	1d1a      	adds	r2, r3, #4
 80028ae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80028b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028bc:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3b68      	subs	r3, #104	@ 0x68
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d866      	bhi.n	800299c <_vsnprintf+0x2a4>
 80028ce:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <_vsnprintf+0x1dc>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002947 	.word	0x08002947
 80028d8:	0800299d 	.word	0x0800299d
 80028dc:	0800297d 	.word	0x0800297d
 80028e0:	0800299d 	.word	0x0800299d
 80028e4:	08002921 	.word	0x08002921
 80028e8:	0800299d 	.word	0x0800299d
 80028ec:	0800299d 	.word	0x0800299d
 80028f0:	0800299d 	.word	0x0800299d
 80028f4:	0800299d 	.word	0x0800299d
 80028f8:	0800299d 	.word	0x0800299d
 80028fc:	0800299d 	.word	0x0800299d
 8002900:	0800299d 	.word	0x0800299d
 8002904:	0800296d 	.word	0x0800296d
 8002908:	0800299d 	.word	0x0800299d
 800290c:	0800299d 	.word	0x0800299d
 8002910:	0800299d 	.word	0x0800299d
 8002914:	0800299d 	.word	0x0800299d
 8002918:	0800299d 	.word	0x0800299d
 800291c:	0800298d 	.word	0x0800298d
      case 'l' :
        flags |= FLAGS_LONG;
 8002920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002926:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b6c      	cmp	r3, #108	@ 0x6c
 8002934:	d134      	bne.n	80029a0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3301      	adds	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002944:	e02c      	b.n	80029a0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b68      	cmp	r3, #104	@ 0x68
 800295a:	d123      	bne.n	80029a4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800295c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800295e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002962:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	3301      	adds	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
        }
        break;
 800296a:	e01b      	b.n	80029a4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800296c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3301      	adds	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
        break;
 800297a:	e014      	b.n	80029a6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800297c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002982:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
        break;
 800298a:	e00c      	b.n	80029a6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800298c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
        break;
 800299a:	e004      	b.n	80029a6 <_vsnprintf+0x2ae>
      default :
        break;
 800299c:	bf00      	nop
 800299e:	e002      	b.n	80029a6 <_vsnprintf+0x2ae>
        break;
 80029a0:	bf00      	nop
 80029a2:	e000      	b.n	80029a6 <_vsnprintf+0x2ae>
        break;
 80029a4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b67      	cmp	r3, #103	@ 0x67
 80029ac:	f300 80b8 	bgt.w	8002b20 <_vsnprintf+0x428>
 80029b0:	2b25      	cmp	r3, #37	@ 0x25
 80029b2:	da27      	bge.n	8002a04 <_vsnprintf+0x30c>
 80029b4:	e370      	b.n	8003098 <_vsnprintf+0x9a0>
 80029b6:	bf00      	nop
 80029b8:	08001845 	.word	0x08001845
 80029bc:	3b69      	subs	r3, #105	@ 0x69
 80029be:	2201      	movs	r2, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	f249 0241 	movw	r2, #36929	@ 0x9041
 80029c8:	401a      	ands	r2, r3
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	bf14      	ite	ne
 80029ce:	2201      	movne	r2, #1
 80029d0:	2200      	moveq	r2, #0
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	2a00      	cmp	r2, #0
 80029d6:	f040 80aa 	bne.w	8002b2e <_vsnprintf+0x436>
 80029da:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80029de:	2a00      	cmp	r2, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2201      	movne	r2, #1
 80029e4:	2200      	moveq	r2, #0
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	f040 82fb 	bne.w	8002fe4 <_vsnprintf+0x8ec>
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 828d 	bne.w	8002f1c <_vsnprintf+0x824>
 8002a02:	e349      	b.n	8003098 <_vsnprintf+0x9a0>
 8002a04:	3b25      	subs	r3, #37	@ 0x25
 8002a06:	2b42      	cmp	r3, #66	@ 0x42
 8002a08:	f200 8346 	bhi.w	8003098 <_vsnprintf+0x9a0>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <_vsnprintf+0x31c>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08003081 	.word	0x08003081
 8002a18:	08003099 	.word	0x08003099
 8002a1c:	08003099 	.word	0x08003099
 8002a20:	08003099 	.word	0x08003099
 8002a24:	08003099 	.word	0x08003099
 8002a28:	08003099 	.word	0x08003099
 8002a2c:	08003099 	.word	0x08003099
 8002a30:	08003099 	.word	0x08003099
 8002a34:	08003099 	.word	0x08003099
 8002a38:	08003099 	.word	0x08003099
 8002a3c:	08003099 	.word	0x08003099
 8002a40:	08003099 	.word	0x08003099
 8002a44:	08003099 	.word	0x08003099
 8002a48:	08003099 	.word	0x08003099
 8002a4c:	08003099 	.word	0x08003099
 8002a50:	08003099 	.word	0x08003099
 8002a54:	08003099 	.word	0x08003099
 8002a58:	08003099 	.word	0x08003099
 8002a5c:	08003099 	.word	0x08003099
 8002a60:	08003099 	.word	0x08003099
 8002a64:	08003099 	.word	0x08003099
 8002a68:	08003099 	.word	0x08003099
 8002a6c:	08003099 	.word	0x08003099
 8002a70:	08003099 	.word	0x08003099
 8002a74:	08003099 	.word	0x08003099
 8002a78:	08003099 	.word	0x08003099
 8002a7c:	08003099 	.word	0x08003099
 8002a80:	08003099 	.word	0x08003099
 8002a84:	08003099 	.word	0x08003099
 8002a88:	08003099 	.word	0x08003099
 8002a8c:	08003099 	.word	0x08003099
 8002a90:	08003099 	.word	0x08003099
 8002a94:	08002e35 	.word	0x08002e35
 8002a98:	08002de5 	.word	0x08002de5
 8002a9c:	08002e35 	.word	0x08002e35
 8002aa0:	08003099 	.word	0x08003099
 8002aa4:	08003099 	.word	0x08003099
 8002aa8:	08003099 	.word	0x08003099
 8002aac:	08003099 	.word	0x08003099
 8002ab0:	08003099 	.word	0x08003099
 8002ab4:	08003099 	.word	0x08003099
 8002ab8:	08003099 	.word	0x08003099
 8002abc:	08003099 	.word	0x08003099
 8002ac0:	08003099 	.word	0x08003099
 8002ac4:	08003099 	.word	0x08003099
 8002ac8:	08003099 	.word	0x08003099
 8002acc:	08003099 	.word	0x08003099
 8002ad0:	08003099 	.word	0x08003099
 8002ad4:	08003099 	.word	0x08003099
 8002ad8:	08003099 	.word	0x08003099
 8002adc:	08003099 	.word	0x08003099
 8002ae0:	08002b2f 	.word	0x08002b2f
 8002ae4:	08003099 	.word	0x08003099
 8002ae8:	08003099 	.word	0x08003099
 8002aec:	08003099 	.word	0x08003099
 8002af0:	08003099 	.word	0x08003099
 8002af4:	08003099 	.word	0x08003099
 8002af8:	08003099 	.word	0x08003099
 8002afc:	08003099 	.word	0x08003099
 8002b00:	08003099 	.word	0x08003099
 8002b04:	08003099 	.word	0x08003099
 8002b08:	08002b2f 	.word	0x08002b2f
 8002b0c:	08002ea5 	.word	0x08002ea5
 8002b10:	08002b2f 	.word	0x08002b2f
 8002b14:	08002e35 	.word	0x08002e35
 8002b18:	08002de5 	.word	0x08002de5
 8002b1c:	08002e35 	.word	0x08002e35
 8002b20:	2b78      	cmp	r3, #120	@ 0x78
 8002b22:	f300 82b9 	bgt.w	8003098 <_vsnprintf+0x9a0>
 8002b26:	2b69      	cmp	r3, #105	@ 0x69
 8002b28:	f6bf af48 	bge.w	80029bc <_vsnprintf+0x2c4>
 8002b2c:	e2b4      	b.n	8003098 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b78      	cmp	r3, #120	@ 0x78
 8002b34:	d003      	beq.n	8002b3e <_vsnprintf+0x446>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b58      	cmp	r3, #88	@ 0x58
 8002b3c:	d102      	bne.n	8002b44 <_vsnprintf+0x44c>
          base = 16U;
 8002b3e:	2310      	movs	r3, #16
 8002b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b42:	e013      	b.n	8002b6c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b6f      	cmp	r3, #111	@ 0x6f
 8002b4a:	d102      	bne.n	8002b52 <_vsnprintf+0x45a>
          base =  8U;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b50:	e00c      	b.n	8002b6c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b62      	cmp	r3, #98	@ 0x62
 8002b58:	d102      	bne.n	8002b60 <_vsnprintf+0x468>
          base =  2U;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b5e:	e005      	b.n	8002b6c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8002b60:	230a      	movs	r3, #10
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b66:	f023 0310 	bic.w	r3, r3, #16
 8002b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b58      	cmp	r3, #88	@ 0x58
 8002b72:	d103      	bne.n	8002b7c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8002b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b69      	cmp	r3, #105	@ 0x69
 8002b82:	d007      	beq.n	8002b94 <_vsnprintf+0x49c>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b64      	cmp	r3, #100	@ 0x64
 8002b8a:	d003      	beq.n	8002b94 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002b94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b69      	cmp	r3, #105	@ 0x69
 8002bac:	d004      	beq.n	8002bb8 <_vsnprintf+0x4c0>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	f040 8098 	bne.w	8002ce8 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d031      	beq.n	8002c26 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bc6:	3307      	adds	r3, #7
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	f103 0208 	add.w	r2, r3, #8
 8002bd0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da06      	bge.n	8002bf2 <_vsnprintf+0x4fa>
 8002be4:	2100      	movs	r1, #0
 8002be6:	f1d2 0800 	rsbs	r8, r2, #0
 8002bea:	eb61 0903 	sbc.w	r9, r1, r3
 8002bee:	4642      	mov	r2, r8
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	69f9      	ldr	r1, [r7, #28]
 8002bf4:	0fc9      	lsrs	r1, r1, #31
 8002bf6:	b2c9      	uxtb	r1, r1
 8002bf8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	4682      	mov	sl, r0
 8002bfe:	46a3      	mov	fp, r4
 8002c00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002c02:	9008      	str	r0, [sp, #32]
 8002c04:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c06:	9007      	str	r0, [sp, #28]
 8002c08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c0a:	9006      	str	r0, [sp, #24]
 8002c0c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002c10:	9102      	str	r1, [sp, #8]
 8002c12:	e9cd 2300 	strd	r2, r3, [sp]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c1a:	6939      	ldr	r1, [r7, #16]
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f7ff f81c 	bl	8001c5a <_ntoa_long_long>
 8002c22:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002c24:	e0da      	b.n	8002ddc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c34:	1d1a      	adds	r2, r3, #4
 8002c36:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bfb8      	it	lt
 8002c44:	425b      	neglt	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	0fdb      	lsrs	r3, r3, #31
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002c50:	9205      	str	r2, [sp, #20]
 8002c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c54:	9204      	str	r2, [sp, #16]
 8002c56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c58:	9203      	str	r2, [sp, #12]
 8002c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c5c:	9202      	str	r2, [sp, #8]
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	9100      	str	r1, [sp, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c66:	6939      	ldr	r1, [r7, #16]
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7fe ff90 	bl	8001b8e <_ntoa_long>
 8002c6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002c70:	e0b4      	b.n	8002ddc <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <_vsnprintf+0x594>
 8002c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c80:	1d1a      	adds	r2, r3, #4
 8002c82:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e012      	b.n	8002cb2 <_vsnprintf+0x5ba>
 8002c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <_vsnprintf+0x5ae>
 8002c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c9a:	1d1a      	adds	r2, r3, #4
 8002c9c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	e005      	b.n	8002cb2 <_vsnprintf+0x5ba>
 8002ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bfb8      	it	lt
 8002cba:	425b      	neglt	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc0:	0fdb      	lsrs	r3, r3, #31
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cc6:	9205      	str	r2, [sp, #20]
 8002cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cca:	9204      	str	r2, [sp, #16]
 8002ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cce:	9203      	str	r2, [sp, #12]
 8002cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cd2:	9202      	str	r2, [sp, #8]
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	9100      	str	r1, [sp, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cdc:	6939      	ldr	r1, [r7, #16]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7fe ff55 	bl	8001b8e <_ntoa_long>
 8002ce4:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002ce6:	e079      	b.n	8002ddc <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d022      	beq.n	8002d38 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cf6:	3307      	adds	r3, #7
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	f103 0208 	add.w	r2, r3, #8
 8002d00:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	460d      	mov	r5, r1
 8002d0e:	4606      	mov	r6, r0
 8002d10:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002d12:	9108      	str	r1, [sp, #32]
 8002d14:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002d16:	9107      	str	r1, [sp, #28]
 8002d18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d1a:	9106      	str	r1, [sp, #24]
 8002d1c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002d20:	2100      	movs	r1, #0
 8002d22:	9102      	str	r1, [sp, #8]
 8002d24:	e9cd 2300 	strd	r2, r3, [sp]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7fe ff93 	bl	8001c5a <_ntoa_long_long>
 8002d34:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002d36:	e051      	b.n	8002ddc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d46:	1d1a      	adds	r2, r3, #4
 8002d48:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d50:	9205      	str	r2, [sp, #20]
 8002d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d54:	9204      	str	r2, [sp, #16]
 8002d56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d58:	9203      	str	r2, [sp, #12]
 8002d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d5c:	9202      	str	r2, [sp, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d68:	6939      	ldr	r1, [r7, #16]
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7fe ff0f 	bl	8001b8e <_ntoa_long>
 8002d70:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002d72:	e033      	b.n	8002ddc <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002d74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <_vsnprintf+0x696>
 8002d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d82:	1d1a      	adds	r2, r3, #4
 8002d84:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e012      	b.n	8002db4 <_vsnprintf+0x6bc>
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <_vsnprintf+0x6b0>
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	e005      	b.n	8002db4 <_vsnprintf+0x6bc>
 8002da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dac:	1d1a      	adds	r2, r3, #4
 8002dae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dd2:	6939      	ldr	r1, [r7, #16]
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f7fe feda 	bl	8001b8e <_ntoa_long>
 8002dda:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
        break;
 8002de2:	e166      	b.n	80030b2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b46      	cmp	r3, #70	@ 0x46
 8002dea:	d103      	bne.n	8002df4 <_vsnprintf+0x6fc>
 8002dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df8:	3307      	adds	r3, #7
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	f103 0208 	add.w	r2, r3, #8
 8002e02:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e06:	ed93 7b00 	vldr	d7, [r3]
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	eeb0 0a47 	vmov.f32	s0, s14
 8002e1a:	eef0 0a67 	vmov.f32	s1, s15
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e22:	6939      	ldr	r1, [r7, #16]
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f7fe ff87 	bl	8001d38 <_ftoa>
 8002e2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]
        break;
 8002e32:	e13e      	b.n	80030b2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b67      	cmp	r3, #103	@ 0x67
 8002e3a:	d003      	beq.n	8002e44 <_vsnprintf+0x74c>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b47      	cmp	r3, #71	@ 0x47
 8002e42:	d103      	bne.n	8002e4c <_vsnprintf+0x754>
 8002e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b45      	cmp	r3, #69	@ 0x45
 8002e52:	d003      	beq.n	8002e5c <_vsnprintf+0x764>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b47      	cmp	r3, #71	@ 0x47
 8002e5a:	d103      	bne.n	8002e64 <_vsnprintf+0x76c>
 8002e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e5e:	f043 0320 	orr.w	r3, r3, #32
 8002e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e68:	3307      	adds	r3, #7
 8002e6a:	f023 0307 	bic.w	r3, r3, #7
 8002e6e:	f103 0208 	add.w	r2, r3, #8
 8002e72:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e76:	ed93 7b00 	vldr	d7, [r3]
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8a:	eef0 0a67 	vmov.f32	s1, s15
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f7ff f9a7 	bl	80021e8 <_etoa>
 8002e9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
        break;
 8002ea2:	e106      	b.n	80030b2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10e      	bne.n	8002ed0 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8002eb2:	e007      	b.n	8002ec4 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8002eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eb6:	1c53      	adds	r3, r2, #1
 8002eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eba:	697c      	ldr	r4, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6939      	ldr	r1, [r7, #16]
 8002ec0:	2020      	movs	r0, #32
 8002ec2:	47a0      	blx	r4
          while (l++ < width) {
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f1      	bhi.n	8002eb4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ed4:	1d1a      	adds	r2, r3, #4
 8002ed6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b2d8      	uxtb	r0, r3
 8002ede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ee0:	1c53      	adds	r3, r2, #1
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee4:	697c      	ldr	r4, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6939      	ldr	r1, [r7, #16]
 8002eea:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00e      	beq.n	8002f14 <_vsnprintf+0x81c>
          while (l++ < width) {
 8002ef6:	e007      	b.n	8002f08 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efa:	1c53      	adds	r3, r2, #1
 8002efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002efe:	697c      	ldr	r4, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6939      	ldr	r1, [r7, #16]
 8002f04:	2020      	movs	r0, #32
 8002f06:	47a0      	blx	r4
          while (l++ < width) {
 8002f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d8f1      	bhi.n	8002ef8 <_vsnprintf+0x800>
          }
        }
        format++;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
        break;
 8002f1a:	e0ca      	b.n	80030b2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f20:	1d1a      	adds	r2, r3, #4
 8002f22:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <_vsnprintf+0x83c>
 8002f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f32:	e001      	b.n	8002f38 <_vsnprintf+0x840>
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002f3c:	f7fe fca3 	bl	8001886 <_strnlen_s>
 8002f40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8002f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf28      	it	cs
 8002f54:	4613      	movcs	r3, r2
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8002f62:	e007      	b.n	8002f74 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8002f64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f66:	1c53      	adds	r3, r2, #1
 8002f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6a:	697c      	ldr	r4, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	2020      	movs	r0, #32
 8002f72:	47a0      	blx	r4
          while (l++ < width) {
 8002f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d8f1      	bhi.n	8002f64 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002f80:	e00a      	b.n	8002f98 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f88:	7818      	ldrb	r0, [r3, #0]
 8002f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8c:	1c53      	adds	r3, r2, #1
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f90:	697c      	ldr	r4, [r7, #20]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6939      	ldr	r1, [r7, #16]
 8002f96:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <_vsnprintf+0x8bc>
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0eb      	beq.n	8002f82 <_vsnprintf+0x88a>
 8002faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fac:	1e5a      	subs	r2, r3, #1
 8002fae:	657a      	str	r2, [r7, #84]	@ 0x54
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <_vsnprintf+0x8e4>
          while (l++ < width) {
 8002fbe:	e007      	b.n	8002fd0 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fc2:	1c53      	adds	r3, r2, #1
 8002fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc6:	697c      	ldr	r4, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6939      	ldr	r1, [r7, #16]
 8002fcc:	2020      	movs	r0, #32
 8002fce:	47a0      	blx	r4
          while (l++ < width) {
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d8f1      	bhi.n	8002fc0 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
        break;
 8002fe2:	e066      	b.n	80030b2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fea:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8002fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 8002ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d023      	beq.n	8003046 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	603a      	str	r2, [r7, #0]
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003014:	9308      	str	r3, [sp, #32]
 8003016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003018:	9307      	str	r3, [sp, #28]
 800301a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301c:	9306      	str	r3, [sp, #24]
 800301e:	f04f 0210 	mov.w	r2, #16
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800302a:	2300      	movs	r3, #0
 800302c:	9302      	str	r3, [sp, #8]
 800302e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003032:	e9cd 3400 	strd	r3, r4, [sp]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800303a:	6939      	ldr	r1, [r7, #16]
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f7fe fe0c 	bl	8001c5a <_ntoa_long_long>
 8003042:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003044:	e018      	b.n	8003078 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003056:	9305      	str	r3, [sp, #20]
 8003058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305a:	9304      	str	r3, [sp, #16]
 800305c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	2310      	movs	r3, #16
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	2300      	movs	r3, #0
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800306e:	6939      	ldr	r1, [r7, #16]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7fe fd8c 	bl	8001b8e <_ntoa_long>
 8003076:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
        break;
 800307e:	e018      	b.n	80030b2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003082:	1c53      	adds	r3, r2, #1
 8003084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003086:	697c      	ldr	r4, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	2025      	movs	r0, #37	@ 0x25
 800308e:	47a0      	blx	r4
        format++;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3301      	adds	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
        break;
 8003096:	e00c      	b.n	80030b2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	7818      	ldrb	r0, [r3, #0]
 800309c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800309e:	1c53      	adds	r3, r2, #1
 80030a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a2:	697c      	ldr	r4, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6939      	ldr	r1, [r7, #16]
 80030a8:	47a0      	blx	r4
        format++;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
        break;
 80030b0:	bf00      	nop
  while (*format)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ab30 	bne.w	800271c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80030bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <_vsnprintf+0x9d2>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	e000      	b.n	80030cc <_vsnprintf+0x9d4>
 80030ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030cc:	697c      	ldr	r4, [r7, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	2000      	movs	r0, #0
 80030d4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80030d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3764      	adds	r7, #100	@ 0x64
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop

080030e4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80030e4:	b40f      	push	{r0, r1, r2, r3}
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80030f2:	1d39      	adds	r1, r7, #4
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030fe:	4806      	ldr	r0, [pc, #24]	@ (8003118 <printf_+0x34>)
 8003100:	f7ff fafa 	bl	80026f8 <_vsnprintf>
 8003104:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003112:	b004      	add	sp, #16
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	08001861 	.word	0x08001861

0800311c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <HAL_MspInit+0x4c>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <HAL_MspInit+0x4c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6613      	str	r3, [r2, #96]	@ 0x60
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_MspInit+0x4c>)
 8003130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_MspInit+0x4c>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_MspInit+0x4c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	@ 0x58
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_MspInit+0x4c>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	210f      	movs	r1, #15
 8003156:	f06f 0001 	mvn.w	r0, #1
 800315a:	f000 fa5b 	bl	8003614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	@ 0x30
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800317a:	4b2e      	ldr	r3, [pc, #184]	@ (8003234 <HAL_InitTick+0xc8>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_InitTick+0xc8>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003184:	6613      	str	r3, [r2, #96]	@ 0x60
 8003186:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_InitTick+0xc8>)
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003192:	f107 020c 	add.w	r2, r7, #12
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f002 f867 	bl	8005270 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031a2:	f002 f84f 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 80031a6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	4a23      	ldr	r2, [pc, #140]	@ (8003238 <HAL_InitTick+0xcc>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	0c9b      	lsrs	r3, r3, #18
 80031b2:	3b01      	subs	r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80031b6:	4b21      	ldr	r3, [pc, #132]	@ (800323c <HAL_InitTick+0xd0>)
 80031b8:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <HAL_InitTick+0xd4>)
 80031ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	@ (800323c <HAL_InitTick+0xd0>)
 80031be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031c2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_InitTick+0xd0>)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <HAL_InitTick+0xd0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_InitTick+0xd0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d6:	4b19      	ldr	r3, [pc, #100]	@ (800323c <HAL_InitTick+0xd0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80031dc:	4817      	ldr	r0, [pc, #92]	@ (800323c <HAL_InitTick+0xd0>)
 80031de:	f002 fd95 	bl	8005d0c <HAL_TIM_Base_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80031e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11b      	bne.n	8003228 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80031f0:	4812      	ldr	r0, [pc, #72]	@ (800323c <HAL_InitTick+0xd0>)
 80031f2:	f002 fded 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80031fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003204:	201a      	movs	r0, #26
 8003206:	f000 fa21 	bl	800364c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d808      	bhi.n	8003222 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	201a      	movs	r0, #26
 8003216:	f000 f9fd 	bl	8003614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <HAL_InitTick+0xd8>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e002      	b.n	8003228 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003228:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800322c:	4618      	mov	r0, r3
 800322e:	3730      	adds	r7, #48	@ 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	431bde83 	.word	0x431bde83
 800323c:	20000090 	.word	0x20000090
 8003240:	40014800 	.word	0x40014800
 8003244:	20000004 	.word	0x20000004

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <NMI_Handler+0x4>

08003250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <HardFault_Handler+0x4>

08003258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <MemManage_Handler+0x4>

08003260 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <BusFault_Handler+0x4>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <UsageFault_Handler+0x4>

08003270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003286:	f002 fe13 	bl	8005eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000090 	.word	0x20000090

08003294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032bc:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032be:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <MX_USART2_UART_Init+0x5c>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032c2:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ee:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032fa:	4805      	ldr	r0, [pc, #20]	@ (8003310 <MX_USART2_UART_Init+0x58>)
 80032fc:	f002 ffcc 	bl	8006298 <HAL_UART_Init>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003306:	f7fe fa97 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200000dc 	.word	0x200000dc
 8003314:	40004400 	.word	0x40004400

08003318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b0ac      	sub	sp, #176	@ 0xb0
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2288      	movs	r2, #136	@ 0x88
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f006 ff55 	bl	800a1e8 <memset>
  if(uartHandle->Instance==USART2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_UART_MspInit+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d13b      	bne.n	80033c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003348:	2302      	movs	r3, #2
 800334a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800334c:	2300      	movs	r3, #0
 800334e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4618      	mov	r0, r3
 8003356:	f002 f81d 	bl	8005394 <HAL_RCCEx_PeriphCLKConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003360:	f7fe fa6a 	bl	8001838 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003364:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003370:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003380:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003388:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <HAL_UART_MspInit+0xb4>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003394:	230c      	movs	r3, #12
 8003396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ac:	2307      	movs	r3, #7
 80033ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033bc:	f000 f954 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033c0:	bf00      	nop
 80033c2:	37b0      	adds	r7, #176	@ 0xb0
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40021000 	.word	0x40021000

080033d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003408 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033d4:	f7ff ff5e 	bl	8003294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d8:	480c      	ldr	r0, [pc, #48]	@ (800340c <LoopForever+0x6>)
  ldr r1, =_edata
 80033da:	490d      	ldr	r1, [pc, #52]	@ (8003410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <LoopForever+0xe>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e0:	e002      	b.n	80033e8 <LoopCopyDataInit>

080033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e6:	3304      	adds	r3, #4

080033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ec:	d3f9      	bcc.n	80033e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f0:	4c0a      	ldr	r4, [pc, #40]	@ (800341c <LoopForever+0x16>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f4:	e001      	b.n	80033fa <LoopFillZerobss>

080033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f8:	3204      	adds	r2, #4

080033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033fc:	d3fb      	bcc.n	80033f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033fe:	f006 fefb 	bl	800a1f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003402:	f7fe f9a1 	bl	8001748 <main>

08003406 <LoopForever>:

LoopForever:
    b LoopForever
 8003406:	e7fe      	b.n	8003406 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003408:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003414:	0800a428 	.word	0x0800a428
  ldr r2, =_sbss
 8003418:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800341c:	20001a70 	.word	0x20001a70

08003420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC1_2_IRQHandler>
	...

08003424 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342e:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <HAL_Init+0x3c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0b      	ldr	r2, [pc, #44]	@ (8003460 <HAL_Init+0x3c>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800343a:	2003      	movs	r0, #3
 800343c:	f000 f8df 	bl	80035fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003440:	200f      	movs	r0, #15
 8003442:	f7ff fe93 	bl	800316c <HAL_InitTick>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	e001      	b.n	8003456 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003452:	f7ff fe63 	bl	800311c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003456:	79fb      	ldrb	r3, [r7, #7]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40022000 	.word	0x40022000

08003464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000008 	.word	0x20000008
 8003488:	20000164 	.word	0x20000164

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000164 	.word	0x20000164

080034a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d6:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f0:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <__NVIC_GetPriorityGrouping+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0307 	and.w	r3, r3, #7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db0b      	blt.n	8003532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4907      	ldr	r1, [pc, #28]	@ (8003540 <__NVIC_EnableIRQ+0x38>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000e100 	.word	0xe000e100

08003544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0a      	blt.n	800356e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	490c      	ldr	r1, [pc, #48]	@ (8003590 <__NVIC_SetPriority+0x4c>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800356c:	e00a      	b.n	8003584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4908      	ldr	r1, [pc, #32]	@ (8003594 <__NVIC_SetPriority+0x50>)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3b04      	subs	r3, #4
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	440b      	add	r3, r1
 8003582:	761a      	strb	r2, [r3, #24]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f1c3 0307 	rsb	r3, r3, #7
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	bf28      	it	cs
 80035b6:	2304      	movcs	r3, #4
 80035b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3304      	adds	r3, #4
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d902      	bls.n	80035c8 <NVIC_EncodePriority+0x30>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3b03      	subs	r3, #3
 80035c6:	e000      	b.n	80035ca <NVIC_EncodePriority+0x32>
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	401a      	ands	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	43d9      	mvns	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	4313      	orrs	r3, r2
         );
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3724      	adds	r7, #36	@ 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff4c 	bl	80034a4 <__NVIC_SetPriorityGrouping>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003626:	f7ff ff61 	bl	80034ec <__NVIC_GetPriorityGrouping>
 800362a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f7ff ffb1 	bl	8003598 <NVIC_EncodePriority>
 8003636:	4602      	mov	r2, r0
 8003638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff80 	bl	8003544 <__NVIC_SetPriority>
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff54 	bl	8003508 <__NVIC_EnableIRQ>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	e17f      	b.n	8003978 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8171 	beq.w	8003972 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x40>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0201 	and.w	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b03      	cmp	r3, #3
 8003714:	d118      	bne.n	8003748 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800371c:	2201      	movs	r2, #1
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	f003 0201 	and.w	r2, r3, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b03      	cmp	r3, #3
 8003752:	d017      	beq.n	8003784 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d123      	bne.n	80037d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	08da      	lsrs	r2, r3, #3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3208      	adds	r2, #8
 8003798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	6939      	ldr	r1, [r7, #16]
 80037d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80ac 	beq.w	8003972 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	4b5f      	ldr	r3, [pc, #380]	@ (8003998 <HAL_GPIO_Init+0x330>)
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	4a5e      	ldr	r2, [pc, #376]	@ (8003998 <HAL_GPIO_Init+0x330>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6613      	str	r3, [r2, #96]	@ 0x60
 8003826:	4b5c      	ldr	r3, [pc, #368]	@ (8003998 <HAL_GPIO_Init+0x330>)
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003832:	4a5a      	ldr	r2, [pc, #360]	@ (800399c <HAL_GPIO_Init+0x334>)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800385c:	d025      	beq.n	80038aa <HAL_GPIO_Init+0x242>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4f      	ldr	r2, [pc, #316]	@ (80039a0 <HAL_GPIO_Init+0x338>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01f      	beq.n	80038a6 <HAL_GPIO_Init+0x23e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4e      	ldr	r2, [pc, #312]	@ (80039a4 <HAL_GPIO_Init+0x33c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0x23a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4d      	ldr	r2, [pc, #308]	@ (80039a8 <HAL_GPIO_Init+0x340>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x236>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4c      	ldr	r2, [pc, #304]	@ (80039ac <HAL_GPIO_Init+0x344>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_Init+0x232>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4b      	ldr	r2, [pc, #300]	@ (80039b0 <HAL_GPIO_Init+0x348>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x22e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4a      	ldr	r2, [pc, #296]	@ (80039b4 <HAL_GPIO_Init+0x34c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_Init+0x22a>
 800388e:	2306      	movs	r3, #6
 8003890:	e00c      	b.n	80038ac <HAL_GPIO_Init+0x244>
 8003892:	2307      	movs	r3, #7
 8003894:	e00a      	b.n	80038ac <HAL_GPIO_Init+0x244>
 8003896:	2305      	movs	r3, #5
 8003898:	e008      	b.n	80038ac <HAL_GPIO_Init+0x244>
 800389a:	2304      	movs	r3, #4
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x244>
 800389e:	2303      	movs	r3, #3
 80038a0:	e004      	b.n	80038ac <HAL_GPIO_Init+0x244>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_Init+0x244>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_GPIO_Init+0x244>
 80038aa:	2300      	movs	r3, #0
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	f002 0203 	and.w	r2, r2, #3
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4093      	lsls	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038bc:	4937      	ldr	r1, [pc, #220]	@ (800399c <HAL_GPIO_Init+0x334>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038ca:	4b3b      	ldr	r3, [pc, #236]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038ee:	4a32      	ldr	r2, [pc, #200]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038f4:	4b30      	ldr	r3, [pc, #192]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003918:	4a27      	ldr	r2, [pc, #156]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800391e:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800396c:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <HAL_GPIO_Init+0x350>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	3301      	adds	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	f47f ae78 	bne.w	8003678 <HAL_GPIO_Init+0x10>
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	40010000 	.word	0x40010000
 80039a0:	48000400 	.word	0x48000400
 80039a4:	48000800 	.word	0x48000800
 80039a8:	48000c00 	.word	0x48000c00
 80039ac:	48001000 	.word	0x48001000
 80039b0:	48001400 	.word	0x48001400
 80039b4:	48001800 	.word	0x48001800
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43d9      	mvns	r1, r3
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	619a      	str	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e08d      	b.n	8003b4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd fe20 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	@ 0x24
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e006      	b.n	8003aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d108      	bne.n	8003ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	e007      	b.n	8003ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69d9      	ldr	r1, [r3, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	f040 80f9 	bne.w	8003d72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x34>
 8003b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0ed      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Mem_Write+0x4e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0e6      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bae:	f7ff fc6d 	bl	800348c <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2319      	movs	r3, #25
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fac3 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d1      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2221      	movs	r2, #33	@ 0x21
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf8:	88f8      	ldrh	r0, [r7, #6]
 8003bfa:	893a      	ldrh	r2, [r7, #8]
 8003bfc:	8979      	ldrh	r1, [r7, #10]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4603      	mov	r3, r0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f9d3 	bl	8003fb4 <I2C_RequestMemoryWrite>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0a9      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2bff      	cmp	r3, #255	@ 0xff
 8003c28:	d90e      	bls.n	8003c48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	@ 0xff
 8003c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	8979      	ldrh	r1, [r7, #10]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fc47 	bl	80044d4 <I2C_TransferConfig>
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	8979      	ldrh	r1, [r7, #10]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fc36 	bl	80044d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fac6 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e07b      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d034      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x1c8>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d130      	bne.n	8003d20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	@ 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fa3f 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e04d      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	@ 0xff
 8003ce0:	d90e      	bls.n	8003d00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	@ 0xff
 8003ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fbeb 	bl	80044d4 <I2C_TransferConfig>
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fbda 	bl	80044d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d19e      	bne.n	8003c68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 faac 	bl	800428c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01a      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <HAL_I2C_Mem_Write+0x224>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	fe00e800 	.word	0xfe00e800

08003d80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	f040 80fd 	bne.w	8003fa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x34>
 8003dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0f1      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Mem_Read+0x4e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0ea      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dd6:	f7ff fb59 	bl	800348c <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2319      	movs	r3, #25
 8003de2:	2201      	movs	r2, #1
 8003de4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f9af 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0d5      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2222      	movs	r2, #34	@ 0x22
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e20:	88f8      	ldrh	r0, [r7, #6]
 8003e22:	893a      	ldrh	r2, [r7, #8]
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4603      	mov	r3, r0
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f913 	bl	800405c <I2C_RequestMemoryRead>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0ad      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2bff      	cmp	r3, #255	@ 0xff
 8003e50:	d90e      	bls.n	8003e70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	8979      	ldrh	r1, [r7, #10]
 8003e60:	4b52      	ldr	r3, [pc, #328]	@ (8003fac <HAL_I2C_Mem_Read+0x22c>)
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fb33 	bl	80044d4 <I2C_TransferConfig>
 8003e6e:	e00f      	b.n	8003e90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_I2C_Mem_Read+0x22c>)
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fb22 	bl	80044d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	2200      	movs	r2, #0
 8003e98:	2104      	movs	r1, #4
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f956 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07c      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d034      	beq.n	8003f50 <HAL_I2C_Mem_Read+0x1d0>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d130      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f927 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e04d      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2bff      	cmp	r3, #255	@ 0xff
 8003f10:	d90e      	bls.n	8003f30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	2300      	movs	r3, #0
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fad3 	bl	80044d4 <I2C_TransferConfig>
 8003f2e:	e00f      	b.n	8003f50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fac2 	bl	80044d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d19a      	bne.n	8003e90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f994 	bl	800428c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e01a      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2220      	movs	r2, #32
 8003f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_I2C_Mem_Read+0x230>)
 8003f82:	400b      	ands	r3, r1
 8003f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	80002400 	.word	0x80002400
 8003fb0:	fe00e800 	.word	0xfe00e800

08003fb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	817b      	strh	r3, [r7, #10]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	813b      	strh	r3, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	8979      	ldrh	r1, [r7, #10]
 8003fd4:	4b20      	ldr	r3, [pc, #128]	@ (8004058 <I2C_RequestMemoryWrite+0xa4>)
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fa79 	bl	80044d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f909 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e02c      	b.n	8004050 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	629a      	str	r2, [r3, #40]	@ 0x28
 8004006:	e015      	b.n	8004034 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b29b      	uxth	r3, r3
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8ef 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e012      	b.n	8004050 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800402a:	893b      	ldrh	r3, [r7, #8]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2200      	movs	r2, #0
 800403c:	2180      	movs	r1, #128	@ 0x80
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f884 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	80002000 	.word	0x80002000

0800405c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	817b      	strh	r3, [r7, #10]
 800406e:	460b      	mov	r3, r1
 8004070:	813b      	strh	r3, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <I2C_RequestMemoryRead+0xa4>)
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa26 	bl	80044d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f8b6 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e02c      	b.n	80040f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ac:	e015      	b.n	80040da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f89c 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e012      	b.n	80040f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d0:	893b      	ldrh	r3, [r7, #8]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2140      	movs	r1, #64	@ 0x40
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f831 	bl	800414c <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	80002000 	.word	0x80002000

08004104 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d103      	bne.n	8004122 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d007      	beq.n	8004140 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	619a      	str	r2, [r3, #24]
  }
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415c:	e03b      	b.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f8d6 	bl	8004314 <I2C_IsErrorOccurred>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e041      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004178:	d02d      	beq.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7ff f987 	bl	800348c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x44>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d122      	bne.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d113      	bne.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0b4      	beq.n	800415e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800420a:	e033      	b.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f87f 	bl	8004314 <I2C_IsErrorOccurred>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e031      	b.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004226:	d025      	beq.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7ff f930 	bl	800348c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11a      	bne.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d013      	beq.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d1c4      	bne.n	800420c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004298:	e02f      	b.n	80042fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f838 	bl	8004314 <I2C_IsErrorOccurred>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7ff f8ed 	bl	800348c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11a      	bne.n	80042fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d013      	beq.n	80042fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b20      	cmp	r3, #32
 8004306:	d1c8      	bne.n	800429a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d068      	beq.n	8004412 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2210      	movs	r2, #16
 8004346:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004348:	e049      	b.n	80043de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004350:	d045      	beq.n	80043de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7ff f89b 	bl	800348c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_IsErrorOccurred+0x54>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d13a      	bne.n	80043de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004372:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800437a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438a:	d121      	bne.n	80043d0 <I2C_IsErrorOccurred+0xbc>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004392:	d01d      	beq.n	80043d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b20      	cmp	r3, #32
 8004398:	d01a      	beq.n	80043d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043aa:	f7ff f86f 	bl	800348c <HAL_GetTick>
 80043ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b0:	e00e      	b.n	80043d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043b2:	f7ff f86b 	bl	800348c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b19      	cmp	r3, #25
 80043be:	d907      	bls.n	80043d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043ce:	e006      	b.n	80043de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d1e9      	bne.n	80043b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d003      	beq.n	80043f4 <I2C_IsErrorOccurred+0xe0>
 80043ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0aa      	beq.n	800434a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2220      	movs	r2, #32
 8004402:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01c      	beq.n	80044c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff fe3b 	bl	8004104 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <I2C_IsErrorOccurred+0x1bc>)
 800449a:	400b      	ands	r3, r1
 800449c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	@ 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	fe00e800 	.word	0xfe00e800

080044d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	817b      	strh	r3, [r7, #10]
 80044e2:	4613      	mov	r3, r2
 80044e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ec:	7a7b      	ldrb	r3, [r7, #9]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	0d5b      	lsrs	r3, r3, #21
 800450e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <I2C_TransferConfig+0x60>)
 8004514:	430b      	orrs	r3, r1
 8004516:	43db      	mvns	r3, r3
 8004518:	ea02 0103 	and.w	r1, r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	03ff63ff 	.word	0x03ff63ff

08004538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	d138      	bne.n	80045c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004558:	2302      	movs	r3, #2
 800455a:	e032      	b.n	80045c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	@ 0x24
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800458a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d139      	bne.n	8004658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e033      	b.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2224      	movs	r2, #36	@ 0x24
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <HAL_PWREx_GetVoltageRange+0x18>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40007000 	.word	0x40007000

08004684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004692:	d130      	bne.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004694:	4b23      	ldr	r3, [pc, #140]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800469c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a0:	d038      	beq.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2232      	movs	r2, #50	@ 0x32
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0c9b      	lsrs	r3, r3, #18
 80046c4:	3301      	adds	r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c8:	e002      	b.n	80046d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d0:	4b14      	ldr	r3, [pc, #80]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046dc:	d102      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f2      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f0:	d110      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00f      	b.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004702:	d007      	beq.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004704:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800470c:	4a05      	ldr	r2, [pc, #20]	@ (8004724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40007000 	.word	0x40007000
 8004728:	20000000 	.word	0x20000000
 800472c:	431bde83 	.word	0x431bde83

08004730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e3ca      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b97      	ldr	r3, [pc, #604]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474c:	4b94      	ldr	r3, [pc, #592]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80e4 	beq.w	800492c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_RCC_OscConfig+0x4a>
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b0c      	cmp	r3, #12
 800476e:	f040 808b 	bne.w	8004888 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	f040 8087 	bne.w	8004888 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800477a:	4b89      	ldr	r3, [pc, #548]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e3a2      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	4b82      	ldr	r3, [pc, #520]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <HAL_RCC_OscConfig+0x7c>
 80047a2:	4b7f      	ldr	r3, [pc, #508]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_OscConfig+0x88>
 80047ac:	4b7c      	ldr	r3, [pc, #496]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d223      	bcs.n	8004804 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fd87 	bl	80052d4 <RCC_SetFlashLatencyFromMSIRange>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e383      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d0:	4b73      	ldr	r3, [pc, #460]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a72      	ldr	r2, [pc, #456]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047d6:	f043 0308 	orr.w	r3, r3, #8
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b70      	ldr	r3, [pc, #448]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	496d      	ldr	r1, [pc, #436]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ee:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	4968      	ldr	r1, [pc, #416]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 8004802:	e025      	b.n	8004850 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004804:	4b66      	ldr	r3, [pc, #408]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a65      	ldr	r2, [pc, #404]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b63      	ldr	r3, [pc, #396]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4960      	ldr	r1, [pc, #384]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004822:	4b5f      	ldr	r3, [pc, #380]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	495b      	ldr	r1, [pc, #364]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd47 	bl	80052d4 <RCC_SetFlashLatencyFromMSIRange>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e343      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004850:	f000 fc4a 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b52      	ldr	r3, [pc, #328]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	4950      	ldr	r1, [pc, #320]	@ (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	4a4e      	ldr	r2, [pc, #312]	@ (80049a8 <HAL_RCC_OscConfig+0x278>)
 800486e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004870:	4b4e      	ldr	r3, [pc, #312]	@ (80049ac <HAL_RCC_OscConfig+0x27c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fc79 	bl	800316c <HAL_InitTick>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d052      	beq.n	800492a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	e327      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d032      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004890:	4b43      	ldr	r3, [pc, #268]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a42      	ldr	r2, [pc, #264]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800489c:	f7fe fdf6 	bl	800348c <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048a4:	f7fe fdf2 	bl	800348c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e310      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048b6:	4b3a      	ldr	r3, [pc, #232]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c2:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a36      	ldr	r2, [pc, #216]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b34      	ldr	r3, [pc, #208]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4931      	ldr	r1, [pc, #196]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e0:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	492c      	ldr	r1, [pc, #176]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	e01a      	b.n	800492c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048f6:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a29      	ldr	r2, [pc, #164]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004902:	f7fe fdc3 	bl	800348c <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800490a:	f7fe fdbf 	bl	800348c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2dd      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800491c:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x1da>
 8004928:	e000      	b.n	800492c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800492a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d074      	beq.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b08      	cmp	r3, #8
 800493c:	d005      	beq.n	800494a <HAL_RCC_OscConfig+0x21a>
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d10e      	bne.n	8004962 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d10b      	bne.n	8004962 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d064      	beq.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d160      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e2ba      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x24a>
 800496c:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0b      	ldr	r2, [pc, #44]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	e026      	b.n	80049c8 <HAL_RCC_OscConfig+0x298>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004982:	d115      	bne.n	80049b0 <HAL_RCC_OscConfig+0x280>
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a05      	ldr	r2, [pc, #20]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 800498a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b03      	ldr	r3, [pc, #12]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a02      	ldr	r2, [pc, #8]	@ (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e014      	b.n	80049c8 <HAL_RCC_OscConfig+0x298>
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	0800a3d0 	.word	0x0800a3d0
 80049a8:	20000000 	.word	0x20000000
 80049ac:	20000004 	.word	0x20000004
 80049b0:	4ba0      	ldr	r3, [pc, #640]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fe fd5c 	bl	800348c <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fe fd58 	bl	800348c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	@ 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e276      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ea:	4b92      	ldr	r3, [pc, #584]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2a8>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fd48 	bl	800348c <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fe fd44 	bl	800348c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e262      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a12:	4b88      	ldr	r3, [pc, #544]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2d0>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d060      	beq.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_OscConfig+0x310>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d116      	bne.n	8004a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a40:	4b7c      	ldr	r3, [pc, #496]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x328>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e23f      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b76      	ldr	r3, [pc, #472]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	4973      	ldr	r1, [pc, #460]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6c:	e040      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d023      	beq.n	8004abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a76:	4b6f      	ldr	r3, [pc, #444]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fe fd03 	bl	800348c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fe fcff 	bl	800348c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e21d      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9c:	4b65      	ldr	r3, [pc, #404]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b62      	ldr	r3, [pc, #392]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	495f      	ldr	r1, [pc, #380]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	e018      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b5d      	ldr	r3, [pc, #372]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fe fcdf 	bl	800348c <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fe fcdb 	bl	800348c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1f9      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae4:	4b53      	ldr	r3, [pc, #332]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b04:	4b4b      	ldr	r3, [pc, #300]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fe fcba 	bl	800348c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fe fcb6 	bl	800348c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1d4      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b2e:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ef      	beq.n	8004b1c <HAL_RCC_OscConfig+0x3ec>
 8004b3c:	e01b      	b.n	8004b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b44:	4a3b      	ldr	r2, [pc, #236]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fe fc9d 	bl	800348c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fe fc99 	bl	800348c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1b7      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b68:	4b32      	ldr	r3, [pc, #200]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ef      	bne.n	8004b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a6 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b88:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba0:	4b24      	ldr	r3, [pc, #144]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb0:	4b21      	ldr	r3, [pc, #132]	@ (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d118      	bne.n	8004bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc8:	f7fe fc60 	bl	800348c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fe fc5c 	bl	800348c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e17a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_RCC_OscConfig+0x508>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4d8>
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c06:	e029      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d115      	bne.n	8004c3c <HAL_RCC_OscConfig+0x50c>
 8004c10:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	4a07      	ldr	r2, [pc, #28]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c20:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c26:	4a03      	ldr	r2, [pc, #12]	@ (8004c34 <HAL_RCC_OscConfig+0x504>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c30:	e014      	b.n	8004c5c <HAL_RCC_OscConfig+0x52c>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	4a9b      	ldr	r2, [pc, #620]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c4c:	4b98      	ldr	r3, [pc, #608]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	4a97      	ldr	r2, [pc, #604]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d016      	beq.n	8004c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fe fc12 	bl	800348c <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fe fc0e 	bl	800348c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e12a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	4b8b      	ldr	r3, [pc, #556]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ed      	beq.n	8004c6c <HAL_RCC_OscConfig+0x53c>
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fe fbfb 	bl	800348c <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fe fbf7 	bl	800348c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e113      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ed      	bne.n	8004c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cbe:	7ffb      	ldrb	r3, [r7, #31]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc8:	4a79      	ldr	r2, [pc, #484]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80fe 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	f040 80d0 	bne.w	8004e84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ce4:	4b72      	ldr	r3, [pc, #456]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0203 	and.w	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d130      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	3b01      	subs	r3, #1
 8004d04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d127      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d11f      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d24:	2a07      	cmp	r2, #7
 8004d26:	bf14      	ite	ne
 8004d28:	2201      	movne	r2, #1
 8004d2a:	2200      	moveq	r2, #0
 8004d2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d113      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d109      	bne.n	8004d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	3b01      	subs	r3, #1
 8004d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d06e      	beq.n	8004e38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d069      	beq.n	8004e34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d6c:	4b50      	ldr	r3, [pc, #320]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0ad      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d88:	f7fe fb80 	bl	800348c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fe fb7c 	bl	800348c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e09a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da2:	4b43      	ldr	r3, [pc, #268]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dae:	4b40      	ldr	r3, [pc, #256]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <HAL_RCC_OscConfig+0x784>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dc8:	0212      	lsls	r2, r2, #8
 8004dca:	4311      	orrs	r1, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dd0:	0852      	lsrs	r2, r2, #1
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	0552      	lsls	r2, r2, #21
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ddc:	0852      	lsrs	r2, r2, #1
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0652      	lsls	r2, r2, #25
 8004de2:	4311      	orrs	r1, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004de8:	0912      	lsrs	r2, r2, #4
 8004dea:	0452      	lsls	r2, r2, #17
 8004dec:	430a      	orrs	r2, r1
 8004dee:	4930      	ldr	r1, [pc, #192]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004df4:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e00:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e0c:	f7fe fb3e 	bl	800348c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fb3a 	bl	800348c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e058      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e26:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e32:	e050      	b.n	8004ed6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e04f      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e38:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d148      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e44:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a19      	ldr	r2, [pc, #100]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e50:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e5c:	f7fe fb16 	bl	800348c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fe fb12 	bl	800348c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e030      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e76:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x734>
 8004e82:	e028      	b.n	8004ed6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d023      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <HAL_RCC_OscConfig+0x780>)
 8004e90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fe faf9 	bl	800348c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	e00c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fe faf5 	bl	800348c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d905      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e013      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCC_OscConfig+0x7b0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ec      	bne.n	8004e9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCC_OscConfig+0x7b0>)
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	4905      	ldr	r1, [pc, #20]	@ (8004ee0 <HAL_RCC_OscConfig+0x7b0>)
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <HAL_RCC_OscConfig+0x7b4>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
 8004ed0:	e001      	b.n	8004ed6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	feeefffc 	.word	0xfeeefffc

08004ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0e7      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004efc:	4b75      	ldr	r3, [pc, #468]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d910      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b72      	ldr	r3, [pc, #456]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 0207 	bic.w	r2, r3, #7
 8004f12:	4970      	ldr	r1, [pc, #448]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0cf      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	4b66      	ldr	r3, [pc, #408]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d908      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b63      	ldr	r3, [pc, #396]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4960      	ldr	r1, [pc, #384]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d04c      	beq.n	8005000 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d121      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0a6      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f86:	4b54      	ldr	r3, [pc, #336]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d115      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e09a      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e08e      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fae:	4b4a      	ldr	r3, [pc, #296]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e086      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fbe:	4b46      	ldr	r3, [pc, #280]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 0203 	bic.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4943      	ldr	r1, [pc, #268]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd0:	f7fe fa5c 	bl	800348c <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd8:	f7fe fa58 	bl	800348c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e06e      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	4b3a      	ldr	r3, [pc, #232]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 020c 	and.w	r2, r3, #12
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d1eb      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d010      	beq.n	800502e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005018:	429a      	cmp	r2, r3
 800501a:	d208      	bcs.n	800502e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b2e      	ldr	r3, [pc, #184]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	492b      	ldr	r1, [pc, #172]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d210      	bcs.n	800505e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503c:	4b25      	ldr	r3, [pc, #148]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 0207 	bic.w	r2, r3, #7
 8005044:	4923      	ldr	r1, [pc, #140]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504c:	4b21      	ldr	r3, [pc, #132]	@ (80050d4 <HAL_RCC_ClockConfig+0x1ec>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d001      	beq.n	800505e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e036      	b.n	80050cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800506a:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4918      	ldr	r1, [pc, #96]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005088:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4910      	ldr	r1, [pc, #64]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800509c:	f000 f824 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	490b      	ldr	r1, [pc, #44]	@ (80050dc <HAL_RCC_ClockConfig+0x1f4>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
 80050b8:	4a09      	ldr	r2, [pc, #36]	@ (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050bc:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <HAL_RCC_ClockConfig+0x1fc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe f853 	bl	800316c <HAL_InitTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80050ca:	7afb      	ldrb	r3, [r7, #11]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800a3d0 	.word	0x0800a3d0
 80050e0:	20000000 	.word	0x20000000
 80050e4:	20000004 	.word	0x20000004

080050e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	@ 0x24
 80050ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f6:	4b3e      	ldr	r3, [pc, #248]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005100:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x34>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d121      	bne.n	800515a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d11e      	bne.n	800515a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800511c:	4b34      	ldr	r3, [pc, #208]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005128:	4b31      	ldr	r3, [pc, #196]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e005      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005138:	4b2d      	ldr	r3, [pc, #180]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005144:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005158:	e00a      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d102      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005160:	4b25      	ldr	r3, [pc, #148]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e004      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d101      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800516c:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x114>)
 800516e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d134      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005176:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d003      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0xa6>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d003      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0xac>
 800518c:	e005      	b.n	800519a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800518e:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005190:	617b      	str	r3, [r7, #20]
      break;
 8005192:	e005      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005194:	4b19      	ldr	r3, [pc, #100]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x114>)
 8005196:	617b      	str	r3, [r7, #20]
      break;
 8005198:	e002      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	617b      	str	r3, [r7, #20]
      break;
 800519e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a0:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	3301      	adds	r3, #1
 80051ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051ae:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	fb03 f202 	mul.w	r2, r3, r2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	0e5b      	lsrs	r3, r3, #25
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	3301      	adds	r3, #1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051e0:	69bb      	ldr	r3, [r7, #24]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	@ 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800a3e8 	.word	0x0800a3e8
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	007a1200 	.word	0x007a1200

08005200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005204:	4b03      	ldr	r3, [pc, #12]	@ (8005214 <HAL_RCC_GetHCLKFreq+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000000 	.word	0x20000000

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800521c:	f7ff fff0 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	@ (8005240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	0800a3e0 	.word	0x0800a3e0

08005244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005248:	f7ff ffda 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0adb      	lsrs	r3, r3, #11
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <HAL_RCC_GetPCLK2Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	0800a3e0 	.word	0x0800a3e0

08005270 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	220f      	movs	r2, #15
 800527e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005280:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <HAL_RCC_GetClockConfig+0x5c>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0203 	and.w	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800528c:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <HAL_RCC_GetClockConfig+0x5c>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <HAL_RCC_GetClockConfig+0x5c>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052a4:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <HAL_RCC_GetClockConfig+0x5c>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <HAL_RCC_GetClockConfig+0x60>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0207 	and.w	r2, r3, #7
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40022000 	.word	0x40022000

080052d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052e0:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052ec:	f7ff f9bc 	bl	8004668 <HAL_PWREx_GetVoltageRange>
 80052f0:	6178      	str	r0, [r7, #20]
 80052f2:	e014      	b.n	800531e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f4:	4b25      	ldr	r3, [pc, #148]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	4a24      	ldr	r2, [pc, #144]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005300:	4b22      	ldr	r3, [pc, #136]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800530c:	f7ff f9ac 	bl	8004668 <HAL_PWREx_GetVoltageRange>
 8005310:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4b1e      	ldr	r3, [pc, #120]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005324:	d10b      	bne.n	800533e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b80      	cmp	r3, #128	@ 0x80
 800532a:	d919      	bls.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005330:	d902      	bls.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005332:	2302      	movs	r3, #2
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e013      	b.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005338:	2301      	movs	r3, #1
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e010      	b.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	d902      	bls.n	800534a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005344:	2303      	movs	r3, #3
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e00a      	b.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b80      	cmp	r3, #128	@ 0x80
 800534e:	d102      	bne.n	8005356 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005350:	2302      	movs	r3, #2
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e004      	b.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b70      	cmp	r3, #112	@ 0x70
 800535a:	d101      	bne.n	8005360 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800535c:	2301      	movs	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f023 0207 	bic.w	r2, r3, #7
 8005368:	4909      	ldr	r1, [pc, #36]	@ (8005390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	429a      	cmp	r2, r3
 800537c:	d001      	beq.n	8005382 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	40022000 	.word	0x40022000

08005394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800539c:	2300      	movs	r3, #0
 800539e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053a0:	2300      	movs	r3, #0
 80053a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d041      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053b8:	d02a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053be:	d824      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053c4:	d008      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ca:	d81e      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053d4:	d010      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053d6:	e018      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053d8:	4b86      	ldr	r3, [pc, #536]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a85      	ldr	r2, [pc, #532]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053e4:	e015      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fabb 	bl	8005968 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053f6:	e00c      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3320      	adds	r3, #32
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fba6 	bl	8005b50 <RCCEx_PLLSAI2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	74fb      	strb	r3, [r7, #19]
      break;
 800540e:	e000      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005418:	4b76      	ldr	r3, [pc, #472]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005426:	4973      	ldr	r1, [pc, #460]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800542e:	e001      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d041      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005444:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005448:	d02a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800544a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800544e:	d824      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005454:	d008      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800545a:	d81e      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005464:	d010      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005466:	e018      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005468:	4b62      	ldr	r3, [pc, #392]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4a61      	ldr	r2, [pc, #388]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005472:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005474:	e015      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fa73 	bl	8005968 <RCCEx_PLLSAI1_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005486:	e00c      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3320      	adds	r3, #32
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fb5e 	bl	8005b50 <RCCEx_PLLSAI2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005498:	e003      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	74fb      	strb	r3, [r7, #19]
      break;
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054a8:	4b52      	ldr	r3, [pc, #328]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054b6:	494f      	ldr	r1, [pc, #316]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054be:	e001      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a0 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054d6:	4b47      	ldr	r3, [pc, #284]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ec:	4b41      	ldr	r3, [pc, #260]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f0:	4a40      	ldr	r2, [pc, #256]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f8:	4b3e      	ldr	r3, [pc, #248]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005504:	2301      	movs	r3, #1
 8005506:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005508:	4b3b      	ldr	r3, [pc, #236]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3a      	ldr	r2, [pc, #232]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800550e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005514:	f7fd ffba 	bl	800348c <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800551a:	e009      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551c:	f7fd ffb6 	bl	800348c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d902      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	74fb      	strb	r3, [r7, #19]
        break;
 800552e:	e005      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005530:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ef      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15c      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005542:	4b2c      	ldr	r3, [pc, #176]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01f      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	429a      	cmp	r2, r3
 800555e:	d019      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005560:	4b24      	ldr	r3, [pc, #144]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800556c:	4b21      	ldr	r3, [pc, #132]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800557c:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005582:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800558c:	4a19      	ldr	r2, [pc, #100]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fd ff75 	bl	800348c <HAL_GetTick>
 80055a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055a4:	e00b      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a6:	f7fd ff71 	bl	800348c <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d902      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	74fb      	strb	r3, [r7, #19]
            break;
 80055bc:	e006      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ec      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d2:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e2:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055ea:	e009      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	74bb      	strb	r3, [r7, #18]
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005600:	7c7b      	ldrb	r3, [r7, #17]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005606:	4b9e      	ldr	r3, [pc, #632]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	4a9d      	ldr	r2, [pc, #628]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800561e:	4b98      	ldr	r3, [pc, #608]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f023 0203 	bic.w	r2, r3, #3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	4994      	ldr	r1, [pc, #592]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005640:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	f023 020c 	bic.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564e:	498c      	ldr	r1, [pc, #560]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005662:	4b87      	ldr	r3, [pc, #540]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	4983      	ldr	r1, [pc, #524]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005684:	4b7e      	ldr	r3, [pc, #504]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	497b      	ldr	r1, [pc, #492]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056a6:	4b76      	ldr	r3, [pc, #472]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b4:	4972      	ldr	r1, [pc, #456]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	496a      	ldr	r1, [pc, #424]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ea:	4b65      	ldr	r3, [pc, #404]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f8:	4961      	ldr	r1, [pc, #388]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570c:	4b5c      	ldr	r3, [pc, #368]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571a:	4959      	ldr	r1, [pc, #356]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800572e:	4b54      	ldr	r3, [pc, #336]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	4950      	ldr	r1, [pc, #320]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005750:	4b4b      	ldr	r3, [pc, #300]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575e:	4948      	ldr	r1, [pc, #288]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005772:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005780:	493f      	ldr	r1, [pc, #252]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d028      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005794:	4b3a      	ldr	r3, [pc, #232]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a2:	4937      	ldr	r1, [pc, #220]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b2:	d106      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b4:	4b32      	ldr	r3, [pc, #200]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a31      	ldr	r2, [pc, #196]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
 80057c0:	e011      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	2101      	movs	r1, #1
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f8c8 	bl	8005968 <RCCEx_PLLSAI1_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d028      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057f2:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	491f      	ldr	r1, [pc, #124]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005810:	d106      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005812:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005818:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800581c:	60d3      	str	r3, [r2, #12]
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f899 	bl	8005968 <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02b      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005850:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	4908      	ldr	r1, [pc, #32]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800586e:	d109      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005870:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a02      	ldr	r2, [pc, #8]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587a:	60d3      	str	r3, [r2, #12]
 800587c:	e014      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800588c:	d10c      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f867 	bl	8005968 <RCCEx_PLLSAI1_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058a4:	7cfb      	ldrb	r3, [r7, #19]
 80058a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02f      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c2:	4928      	ldr	r1, [pc, #160]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	2102      	movs	r1, #2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f844 	bl	8005968 <RCCEx_PLLSAI1_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058ea:	7cfb      	ldrb	r3, [r7, #19]
 80058ec:	74bb      	strb	r3, [r7, #18]
 80058ee:	e011      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f8:	d10c      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3320      	adds	r3, #32
 80058fe:	2102      	movs	r1, #2
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f925 	bl	8005b50 <RCCEx_PLLSAI2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800590a:	7cfb      	ldrb	r3, [r7, #19]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005920:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800592e:	490d      	ldr	r1, [pc, #52]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005942:	4b08      	ldr	r3, [pc, #32]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005952:	4904      	ldr	r1, [pc, #16]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800595a:	7cbb      	ldrb	r3, [r7, #18]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000

08005968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005976:	4b75      	ldr	r3, [pc, #468]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005982:	4b72      	ldr	r3, [pc, #456]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0203 	and.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d10d      	bne.n	80059ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
       ||
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800599a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
       ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d047      	beq.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
 80059b2:	e044      	b.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d018      	beq.n	80059ee <RCCEx_PLLSAI1_Config+0x86>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d825      	bhi.n	8005a0c <RCCEx_PLLSAI1_Config+0xa4>
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <RCCEx_PLLSAI1_Config+0x62>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d009      	beq.n	80059dc <RCCEx_PLLSAI1_Config+0x74>
 80059c8:	e020      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ca:	4b60      	ldr	r3, [pc, #384]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11d      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059da:	e01a      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059dc:	4b5b      	ldr	r3, [pc, #364]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d116      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ec:	e013      	b.n	8005a16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ee:	4b57      	ldr	r3, [pc, #348]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10f      	bne.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059fa:	4b54      	ldr	r3, [pc, #336]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a0a:	e006      	b.n	8005a1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e004      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a12:	bf00      	nop
 8005a14:	e002      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10d      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a22:	4b4a      	ldr	r3, [pc, #296]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	430b      	orrs	r3, r1
 8005a38:	4944      	ldr	r1, [pc, #272]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d17d      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a44:	4b41      	ldr	r3, [pc, #260]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a40      	ldr	r2, [pc, #256]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a50:	f7fd fd1c 	bl	800348c <HAL_GetTick>
 8005a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a56:	e009      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a58:	f7fd fd18 	bl	800348c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d902      	bls.n	8005a6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	73fb      	strb	r3, [r7, #15]
        break;
 8005a6a:	e005      	b.n	8005a78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a6c:	4b37      	ldr	r3, [pc, #220]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ef      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d160      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d111      	bne.n	8005aa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a84:	4b31      	ldr	r3, [pc, #196]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6892      	ldr	r2, [r2, #8]
 8005a94:	0211      	lsls	r1, r2, #8
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	0912      	lsrs	r2, r2, #4
 8005a9c:	0452      	lsls	r2, r2, #17
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	492a      	ldr	r1, [pc, #168]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]
 8005aa6:	e027      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d112      	bne.n	8005ad4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005ab6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	0211      	lsls	r1, r2, #8
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6912      	ldr	r2, [r2, #16]
 8005ac4:	0852      	lsrs	r2, r2, #1
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	0552      	lsls	r2, r2, #21
 8005aca:	430a      	orrs	r2, r1
 8005acc:	491f      	ldr	r1, [pc, #124]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]
 8005ad2:	e011      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005adc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	0211      	lsls	r1, r2, #8
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6952      	ldr	r2, [r2, #20]
 8005aea:	0852      	lsrs	r2, r2, #1
 8005aec:	3a01      	subs	r2, #1
 8005aee:	0652      	lsls	r2, r2, #25
 8005af0:	430a      	orrs	r2, r1
 8005af2:	4916      	ldr	r1, [pc, #88]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005af8:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd fcc2 	bl	800348c <HAL_GetTick>
 8005b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b0a:	e009      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0c:	f7fd fcbe 	bl	800348c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d902      	bls.n	8005b20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b1e:	e005      	b.n	8005b2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ef      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	4904      	ldr	r1, [pc, #16]	@ (8005b4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000

08005b50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b6a:	4b67      	ldr	r3, [pc, #412]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0203 	and.w	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d10d      	bne.n	8005b96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b82:	4b61      	ldr	r3, [pc, #388]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
       ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d047      	beq.n	8005c26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
 8005b9a:	e044      	b.n	8005c26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d018      	beq.n	8005bd6 <RCCEx_PLLSAI2_Config+0x86>
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d825      	bhi.n	8005bf4 <RCCEx_PLLSAI2_Config+0xa4>
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d002      	beq.n	8005bb2 <RCCEx_PLLSAI2_Config+0x62>
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d009      	beq.n	8005bc4 <RCCEx_PLLSAI2_Config+0x74>
 8005bb0:	e020      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bb2:	4b55      	ldr	r3, [pc, #340]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11d      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc2:	e01a      	b.n	8005bfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bc4:	4b50      	ldr	r3, [pc, #320]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d116      	bne.n	8005bfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bd4:	e013      	b.n	8005bfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005be2:	4b49      	ldr	r3, [pc, #292]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bf2:	e006      	b.n	8005c02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf8:	e004      	b.n	8005c04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10d      	bne.n	8005c26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6819      	ldr	r1, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	4939      	ldr	r1, [pc, #228]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d167      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c2c:	4b36      	ldr	r3, [pc, #216]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a35      	ldr	r2, [pc, #212]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c38:	f7fd fc28 	bl	800348c <HAL_GetTick>
 8005c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c3e:	e009      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c40:	f7fd fc24 	bl	800348c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d902      	bls.n	8005c54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	73fb      	strb	r3, [r7, #15]
        break;
 8005c52:	e005      	b.n	8005c60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c54:	4b2c      	ldr	r3, [pc, #176]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ef      	bne.n	8005c40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d14a      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d111      	bne.n	8005c90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c6c:	4b26      	ldr	r3, [pc, #152]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6892      	ldr	r2, [r2, #8]
 8005c7c:	0211      	lsls	r1, r2, #8
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68d2      	ldr	r2, [r2, #12]
 8005c82:	0912      	lsrs	r2, r2, #4
 8005c84:	0452      	lsls	r2, r2, #17
 8005c86:	430a      	orrs	r2, r1
 8005c88:	491f      	ldr	r1, [pc, #124]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	614b      	str	r3, [r1, #20]
 8005c8e:	e011      	b.n	8005cb4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c90:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6892      	ldr	r2, [r2, #8]
 8005ca0:	0211      	lsls	r1, r2, #8
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6912      	ldr	r2, [r2, #16]
 8005ca6:	0852      	lsrs	r2, r2, #1
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	0652      	lsls	r2, r2, #25
 8005cac:	430a      	orrs	r2, r1
 8005cae:	4916      	ldr	r1, [pc, #88]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005cb4:	4b14      	ldr	r3, [pc, #80]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc0:	f7fd fbe4 	bl	800348c <HAL_GetTick>
 8005cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cc6:	e009      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cc8:	f7fd fbe0 	bl	800348c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d902      	bls.n	8005cdc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8005cda:	e005      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0ef      	beq.n	8005cc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4904      	ldr	r1, [pc, #16]	@ (8005d08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e049      	b.n	8005db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f841 	bl	8005dba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 f9e0 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e04f      	b.n	8005e88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a23      	ldr	r2, [pc, #140]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d018      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1f      	ldr	r2, [pc, #124]	@ (8005e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x76>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d115      	bne.n	8005e72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <HAL_TIM_Base_Start_IT+0xdc>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d015      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0xb4>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5e:	d011      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	e008      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	00010007 	.word	0x00010007

08005eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0202 	mvn.w	r2, #2
 8005ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8e9 	bl	80060d2 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8db 	bl	80060be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8ec 	bl	80060e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0204 	mvn.w	r2, #4
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8c3 	bl	80060d2 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8b5 	bl	80060be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8c6 	bl	80060e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0208 	mvn.w	r2, #8
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2204      	movs	r2, #4
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f89d 	bl	80060d2 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f88f 	bl	80060be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8a0 	bl	80060e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f877 	bl	80060d2 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f869 	bl	80060be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f87a 	bl	80060e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fb fbfc 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00c      	beq.n	800604a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f913 	bl	8006270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00c      	beq.n	800606e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f90b 	bl	8006284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f834 	bl	80060fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00c      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0220 	mvn.w	r2, #32
 80060ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8d3 	bl	800625c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a46      	ldr	r2, [pc, #280]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <TIM_Base_SetConfig+0x130>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a42      	ldr	r2, [pc, #264]	@ (8006244 <TIM_Base_SetConfig+0x134>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a41      	ldr	r2, [pc, #260]	@ (8006248 <TIM_Base_SetConfig+0x138>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a40      	ldr	r2, [pc, #256]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a35      	ldr	r2, [pc, #212]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01f      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006170:	d01b      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a32      	ldr	r2, [pc, #200]	@ (8006240 <TIM_Base_SetConfig+0x130>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d017      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a31      	ldr	r2, [pc, #196]	@ (8006244 <TIM_Base_SetConfig+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a30      	ldr	r2, [pc, #192]	@ (8006248 <TIM_Base_SetConfig+0x138>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00f      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2f      	ldr	r2, [pc, #188]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00b      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2e      	ldr	r2, [pc, #184]	@ (8006250 <TIM_Base_SetConfig+0x140>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2d      	ldr	r2, [pc, #180]	@ (8006254 <TIM_Base_SetConfig+0x144>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <TIM_Base_SetConfig+0x148>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d108      	bne.n	80061bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a16      	ldr	r2, [pc, #88]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a18      	ldr	r2, [pc, #96]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <TIM_Base_SetConfig+0x140>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a16      	ldr	r2, [pc, #88]	@ (8006254 <TIM_Base_SetConfig+0x144>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a15      	ldr	r2, [pc, #84]	@ (8006258 <TIM_Base_SetConfig+0x148>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d103      	bne.n	8006210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]
  }
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800

0800625c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e040      	b.n	800632c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fd f82c 	bl	8003318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2224      	movs	r2, #36	@ 0x24
 80062c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fb6a 	bl	80069b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8af 	bl	8006448 <UART_SetConfig>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e01b      	b.n	800632c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fbe9 	bl	8006afc <UART_CheckIdleState>
 800632a:	4603      	mov	r3, r0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	@ 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006348:	2b20      	cmp	r3, #32
 800634a:	d177      	bne.n	800643c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_UART_Transmit+0x24>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e070      	b.n	800643e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2221      	movs	r2, #33	@ 0x21
 8006368:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800636a:	f7fd f88f 	bl	800348c <HAL_GetTick>
 800636e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006388:	d108      	bne.n	800639c <HAL_UART_Transmit+0x68>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e003      	b.n	80063a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063a4:	e02f      	b.n	8006406 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2180      	movs	r1, #128	@ 0x80
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fc4b 	bl	8006c4c <UART_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e03b      	b.n	800643e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d8:	b292      	uxth	r2, r2
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	3302      	adds	r3, #2
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e007      	b.n	80063f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3301      	adds	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1c9      	bne.n	80063a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2140      	movs	r1, #64	@ 0x40
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fc15 	bl	8006c4c <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e005      	b.n	800643e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b08a      	sub	sp, #40	@ 0x28
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4ba4      	ldr	r3, [pc, #656]	@ (8006708 <UART_SetConfig+0x2c0>)
 8006478:	4013      	ands	r3, r2
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006480:	430b      	orrs	r3, r1
 8006482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a99      	ldr	r2, [pc, #612]	@ (800670c <UART_SetConfig+0x2c4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b0:	4313      	orrs	r3, r2
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a90      	ldr	r2, [pc, #576]	@ (8006710 <UART_SetConfig+0x2c8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d126      	bne.n	8006520 <UART_SetConfig+0xd8>
 80064d2:	4b90      	ldr	r3, [pc, #576]	@ (8006714 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d81b      	bhi.n	8006518 <UART_SetConfig+0xd0>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0xa0>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006511 	.word	0x08006511
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e116      	b.n	800672e <UART_SetConfig+0x2e6>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e112      	b.n	800672e <UART_SetConfig+0x2e6>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e10e      	b.n	800672e <UART_SetConfig+0x2e6>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e10a      	b.n	800672e <UART_SetConfig+0x2e6>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e106      	b.n	800672e <UART_SetConfig+0x2e6>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7c      	ldr	r2, [pc, #496]	@ (8006718 <UART_SetConfig+0x2d0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d138      	bne.n	800659c <UART_SetConfig+0x154>
 800652a:	4b7a      	ldr	r3, [pc, #488]	@ (8006714 <UART_SetConfig+0x2cc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f003 030c 	and.w	r3, r3, #12
 8006534:	2b0c      	cmp	r3, #12
 8006536:	d82d      	bhi.n	8006594 <UART_SetConfig+0x14c>
 8006538:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0xf8>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006575 	.word	0x08006575
 8006544:	08006595 	.word	0x08006595
 8006548:	08006595 	.word	0x08006595
 800654c:	08006595 	.word	0x08006595
 8006550:	08006585 	.word	0x08006585
 8006554:	08006595 	.word	0x08006595
 8006558:	08006595 	.word	0x08006595
 800655c:	08006595 	.word	0x08006595
 8006560:	0800657d 	.word	0x0800657d
 8006564:	08006595 	.word	0x08006595
 8006568:	08006595 	.word	0x08006595
 800656c:	08006595 	.word	0x08006595
 8006570:	0800658d 	.word	0x0800658d
 8006574:	2300      	movs	r3, #0
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657a:	e0d8      	b.n	800672e <UART_SetConfig+0x2e6>
 800657c:	2302      	movs	r3, #2
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006582:	e0d4      	b.n	800672e <UART_SetConfig+0x2e6>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658a:	e0d0      	b.n	800672e <UART_SetConfig+0x2e6>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e0cc      	b.n	800672e <UART_SetConfig+0x2e6>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659a:	e0c8      	b.n	800672e <UART_SetConfig+0x2e6>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a5e      	ldr	r2, [pc, #376]	@ (800671c <UART_SetConfig+0x2d4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d125      	bne.n	80065f2 <UART_SetConfig+0x1aa>
 80065a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006714 <UART_SetConfig+0x2cc>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065b0:	2b30      	cmp	r3, #48	@ 0x30
 80065b2:	d016      	beq.n	80065e2 <UART_SetConfig+0x19a>
 80065b4:	2b30      	cmp	r3, #48	@ 0x30
 80065b6:	d818      	bhi.n	80065ea <UART_SetConfig+0x1a2>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d00a      	beq.n	80065d2 <UART_SetConfig+0x18a>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d814      	bhi.n	80065ea <UART_SetConfig+0x1a2>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <UART_SetConfig+0x182>
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d008      	beq.n	80065da <UART_SetConfig+0x192>
 80065c8:	e00f      	b.n	80065ea <UART_SetConfig+0x1a2>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d0:	e0ad      	b.n	800672e <UART_SetConfig+0x2e6>
 80065d2:	2302      	movs	r3, #2
 80065d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d8:	e0a9      	b.n	800672e <UART_SetConfig+0x2e6>
 80065da:	2304      	movs	r3, #4
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e0:	e0a5      	b.n	800672e <UART_SetConfig+0x2e6>
 80065e2:	2308      	movs	r3, #8
 80065e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e8:	e0a1      	b.n	800672e <UART_SetConfig+0x2e6>
 80065ea:	2310      	movs	r3, #16
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f0:	e09d      	b.n	800672e <UART_SetConfig+0x2e6>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006720 <UART_SetConfig+0x2d8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d125      	bne.n	8006648 <UART_SetConfig+0x200>
 80065fc:	4b45      	ldr	r3, [pc, #276]	@ (8006714 <UART_SetConfig+0x2cc>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006606:	2bc0      	cmp	r3, #192	@ 0xc0
 8006608:	d016      	beq.n	8006638 <UART_SetConfig+0x1f0>
 800660a:	2bc0      	cmp	r3, #192	@ 0xc0
 800660c:	d818      	bhi.n	8006640 <UART_SetConfig+0x1f8>
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	d00a      	beq.n	8006628 <UART_SetConfig+0x1e0>
 8006612:	2b80      	cmp	r3, #128	@ 0x80
 8006614:	d814      	bhi.n	8006640 <UART_SetConfig+0x1f8>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <UART_SetConfig+0x1d8>
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	d008      	beq.n	8006630 <UART_SetConfig+0x1e8>
 800661e:	e00f      	b.n	8006640 <UART_SetConfig+0x1f8>
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006626:	e082      	b.n	800672e <UART_SetConfig+0x2e6>
 8006628:	2302      	movs	r3, #2
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662e:	e07e      	b.n	800672e <UART_SetConfig+0x2e6>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006636:	e07a      	b.n	800672e <UART_SetConfig+0x2e6>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e076      	b.n	800672e <UART_SetConfig+0x2e6>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e072      	b.n	800672e <UART_SetConfig+0x2e6>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <UART_SetConfig+0x2dc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d12a      	bne.n	80066a8 <UART_SetConfig+0x260>
 8006652:	4b30      	ldr	r3, [pc, #192]	@ (8006714 <UART_SetConfig+0x2cc>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006660:	d01a      	beq.n	8006698 <UART_SetConfig+0x250>
 8006662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006666:	d81b      	bhi.n	80066a0 <UART_SetConfig+0x258>
 8006668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666c:	d00c      	beq.n	8006688 <UART_SetConfig+0x240>
 800666e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006672:	d815      	bhi.n	80066a0 <UART_SetConfig+0x258>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <UART_SetConfig+0x238>
 8006678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667c:	d008      	beq.n	8006690 <UART_SetConfig+0x248>
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x258>
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006686:	e052      	b.n	800672e <UART_SetConfig+0x2e6>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668e:	e04e      	b.n	800672e <UART_SetConfig+0x2e6>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006696:	e04a      	b.n	800672e <UART_SetConfig+0x2e6>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669e:	e046      	b.n	800672e <UART_SetConfig+0x2e6>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e042      	b.n	800672e <UART_SetConfig+0x2e6>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a17      	ldr	r2, [pc, #92]	@ (800670c <UART_SetConfig+0x2c4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d13a      	bne.n	8006728 <UART_SetConfig+0x2e0>
 80066b2:	4b18      	ldr	r3, [pc, #96]	@ (8006714 <UART_SetConfig+0x2cc>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c0:	d01a      	beq.n	80066f8 <UART_SetConfig+0x2b0>
 80066c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c6:	d81b      	bhi.n	8006700 <UART_SetConfig+0x2b8>
 80066c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066cc:	d00c      	beq.n	80066e8 <UART_SetConfig+0x2a0>
 80066ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d2:	d815      	bhi.n	8006700 <UART_SetConfig+0x2b8>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <UART_SetConfig+0x298>
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066dc:	d008      	beq.n	80066f0 <UART_SetConfig+0x2a8>
 80066de:	e00f      	b.n	8006700 <UART_SetConfig+0x2b8>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e6:	e022      	b.n	800672e <UART_SetConfig+0x2e6>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e01e      	b.n	800672e <UART_SetConfig+0x2e6>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f6:	e01a      	b.n	800672e <UART_SetConfig+0x2e6>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e016      	b.n	800672e <UART_SetConfig+0x2e6>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e012      	b.n	800672e <UART_SetConfig+0x2e6>
 8006708:	efff69f3 	.word	0xefff69f3
 800670c:	40008000 	.word	0x40008000
 8006710:	40013800 	.word	0x40013800
 8006714:	40021000 	.word	0x40021000
 8006718:	40004400 	.word	0x40004400
 800671c:	40004800 	.word	0x40004800
 8006720:	40004c00 	.word	0x40004c00
 8006724:	40005000 	.word	0x40005000
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a9f      	ldr	r2, [pc, #636]	@ (80069b0 <UART_SetConfig+0x568>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d17a      	bne.n	800682e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006738:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800673c:	2b08      	cmp	r3, #8
 800673e:	d824      	bhi.n	800678a <UART_SetConfig+0x342>
 8006740:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <UART_SetConfig+0x300>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800676d 	.word	0x0800676d
 800674c:	0800678b 	.word	0x0800678b
 8006750:	08006775 	.word	0x08006775
 8006754:	0800678b 	.word	0x0800678b
 8006758:	0800677b 	.word	0x0800677b
 800675c:	0800678b 	.word	0x0800678b
 8006760:	0800678b 	.word	0x0800678b
 8006764:	0800678b 	.word	0x0800678b
 8006768:	08006783 	.word	0x08006783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fe fd54 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8006770:	61f8      	str	r0, [r7, #28]
        break;
 8006772:	e010      	b.n	8006796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006774:	4b8f      	ldr	r3, [pc, #572]	@ (80069b4 <UART_SetConfig+0x56c>)
 8006776:	61fb      	str	r3, [r7, #28]
        break;
 8006778:	e00d      	b.n	8006796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7fe fcb5 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 800677e:	61f8      	str	r0, [r7, #28]
        break;
 8006780:	e009      	b.n	8006796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006786:	61fb      	str	r3, [r7, #28]
        break;
 8006788:	e005      	b.n	8006796 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80fb 	beq.w	8006994 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d305      	bcc.n	80067ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d903      	bls.n	80067c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067c0:	e0e8      	b.n	8006994 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2200      	movs	r2, #0
 80067c6:	461c      	mov	r4, r3
 80067c8:	4615      	mov	r5, r2
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	022b      	lsls	r3, r5, #8
 80067d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067d8:	0222      	lsls	r2, r4, #8
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	6849      	ldr	r1, [r1, #4]
 80067de:	0849      	lsrs	r1, r1, #1
 80067e0:	2000      	movs	r0, #0
 80067e2:	4688      	mov	r8, r1
 80067e4:	4681      	mov	r9, r0
 80067e6:	eb12 0a08 	adds.w	sl, r2, r8
 80067ea:	eb43 0b09 	adc.w	fp, r3, r9
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fc:	4650      	mov	r0, sl
 80067fe:	4659      	mov	r1, fp
 8006800:	f7fa f9d4 	bl	8000bac <__aeabi_uldivmod>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4613      	mov	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006812:	d308      	bcc.n	8006826 <UART_SetConfig+0x3de>
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681a:	d204      	bcs.n	8006826 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	e0b6      	b.n	8006994 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800682c:	e0b2      	b.n	8006994 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006836:	d15e      	bne.n	80068f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800683c:	2b08      	cmp	r3, #8
 800683e:	d828      	bhi.n	8006892 <UART_SetConfig+0x44a>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <UART_SetConfig+0x400>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006875 	.word	0x08006875
 8006850:	0800687d 	.word	0x0800687d
 8006854:	08006893 	.word	0x08006893
 8006858:	08006883 	.word	0x08006883
 800685c:	08006893 	.word	0x08006893
 8006860:	08006893 	.word	0x08006893
 8006864:	08006893 	.word	0x08006893
 8006868:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fcd4 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8006870:	61f8      	str	r0, [r7, #28]
        break;
 8006872:	e014      	b.n	800689e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fe fce6 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <UART_SetConfig+0x56c>)
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe fc31 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8006886:	61f8      	str	r0, [r7, #28]
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800688e:	61fb      	str	r3, [r7, #28]
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800689c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d077      	beq.n	8006994 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	005a      	lsls	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b0f      	cmp	r3, #15
 80068be:	d916      	bls.n	80068ee <UART_SetConfig+0x4a6>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c6:	d212      	bcs.n	80068ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f023 030f 	bic.w	r3, r3, #15
 80068d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	b29a      	uxth	r2, r3
 80068de:	8afb      	ldrh	r3, [r7, #22]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	8afa      	ldrh	r2, [r7, #22]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e052      	b.n	8006994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068f4:	e04e      	b.n	8006994 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d827      	bhi.n	800694e <UART_SetConfig+0x506>
 80068fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <UART_SetConfig+0x4bc>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006929 	.word	0x08006929
 8006908:	08006931 	.word	0x08006931
 800690c:	08006939 	.word	0x08006939
 8006910:	0800694f 	.word	0x0800694f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800694f 	.word	0x0800694f
 800691c:	0800694f 	.word	0x0800694f
 8006920:	0800694f 	.word	0x0800694f
 8006924:	08006947 	.word	0x08006947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006928:	f7fe fc76 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 800692c:	61f8      	str	r0, [r7, #28]
        break;
 800692e:	e014      	b.n	800695a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006930:	f7fe fc88 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8006934:	61f8      	str	r0, [r7, #28]
        break;
 8006936:	e010      	b.n	800695a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006938:	4b1e      	ldr	r3, [pc, #120]	@ (80069b4 <UART_SetConfig+0x56c>)
 800693a:	61fb      	str	r3, [r7, #28]
        break;
 800693c:	e00d      	b.n	800695a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693e:	f7fe fbd3 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8006942:	61f8      	str	r0, [r7, #28]
        break;
 8006944:	e009      	b.n	800695a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800694a:	61fb      	str	r3, [r7, #28]
        break;
 800694c:	e005      	b.n	800695a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006958:	bf00      	nop
    }

    if (pclk != 0U)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	085a      	lsrs	r2, r3, #1
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	d909      	bls.n	800698e <UART_SetConfig+0x546>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006980:	d205      	bcs.n	800698e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e002      	b.n	8006994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3728      	adds	r7, #40	@ 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ae:	bf00      	nop
 80069b0:	40008000 	.word	0x40008000
 80069b4:	00f42400 	.word	0x00f42400

080069b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01a      	beq.n	8006ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ab6:	d10a      	bne.n	8006ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b098      	sub	sp, #96	@ 0x60
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b0c:	f7fc fcbe 	bl	800348c <HAL_GetTick>
 8006b10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d12e      	bne.n	8006b7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f88c 	bl	8006c4c <UART_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e062      	b.n	8006c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d149      	bne.n	8006c20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b94:	2200      	movs	r2, #0
 8006b96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f856 	bl	8006c4c <UART_WaitOnFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d03c      	beq.n	8006c20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69b9      	ldr	r1, [r7, #24]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	617b      	str	r3, [r7, #20]
   return(result);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e011      	b.n	8006c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3758      	adds	r7, #88	@ 0x58
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5c:	e04f      	b.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c64:	d04b      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c66:	f7fc fc11 	bl	800348c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e04e      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d037      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b80      	cmp	r3, #128	@ 0x80
 8006c92:	d034      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b40      	cmp	r3, #64	@ 0x40
 8006c98:	d031      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d110      	bne.n	8006cca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2208      	movs	r2, #8
 8006cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f838 	bl	8006d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e029      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd8:	d111      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f81e 	bl	8006d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e00f      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d0a0      	beq.n	8006c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b095      	sub	sp, #84	@ 0x54
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e6      	bne.n	8006d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e5      	bne.n	8006d60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d118      	bne.n	8006dce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0310 	bic.w	r3, r3, #16
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006de2:	bf00      	nop
 8006de4:	3754      	adds	r7, #84	@ 0x54
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <__NVIC_SetPriority>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db0a      	blt.n	8006e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	490c      	ldr	r1, [pc, #48]	@ (8006e3c <__NVIC_SetPriority+0x4c>)
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	440b      	add	r3, r1
 8006e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e18:	e00a      	b.n	8006e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4908      	ldr	r1, [pc, #32]	@ (8006e40 <__NVIC_SetPriority+0x50>)
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	3b04      	subs	r3, #4
 8006e28:	0112      	lsls	r2, r2, #4
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	761a      	strb	r2, [r3, #24]
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	e000e100 	.word	0xe000e100
 8006e40:	e000ed00 	.word	0xe000ed00

08006e44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <SysTick_Handler+0x1c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e4c:	f002 f852 	bl	8008ef4 <xTaskGetSchedulerState>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e56:	f002 ff47 	bl	8009ce8 <xPortSysTickHandler>
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	e000e010 	.word	0xe000e010

08006e64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f06f 0004 	mvn.w	r0, #4
 8006e6e:	f7ff ffbf 	bl	8006df0 <__NVIC_SetPriority>
#endif
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	603b      	str	r3, [r7, #0]
  return(result);
 8006e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e8a:	f06f 0305 	mvn.w	r3, #5
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	e00c      	b.n	8006eac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <osKernelInitialize+0x44>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e9a:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <osKernelInitialize+0x44>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e002      	b.n	8006eac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eac:	687b      	ldr	r3, [r7, #4]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000168 	.word	0x20000168

08006ec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec6:	f3ef 8305 	mrs	r3, IPSR
 8006eca:	603b      	str	r3, [r7, #0]
  return(result);
 8006ecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ed2:	f06f 0305 	mvn.w	r3, #5
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	e010      	b.n	8006efc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <osKernelStart+0x48>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d109      	bne.n	8006ef6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ee2:	f7ff ffbf 	bl	8006e64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ee6:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <osKernelStart+0x48>)
 8006ee8:	2202      	movs	r2, #2
 8006eea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006eec:	f001 fba4 	bl	8008638 <vTaskStartScheduler>
      stat = osOK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	e002      	b.n	8006efc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006efc:	687b      	ldr	r3, [r7, #4]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000168 	.word	0x20000168

08006f0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08e      	sub	sp, #56	@ 0x38
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f1c:	f3ef 8305 	mrs	r3, IPSR
 8006f20:	617b      	str	r3, [r7, #20]
  return(result);
 8006f22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d17e      	bne.n	8007026 <osThreadNew+0x11a>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d07b      	beq.n	8007026 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f32:	2318      	movs	r3, #24
 8006f34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d045      	beq.n	8006fd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <osThreadNew+0x48>
        name = attr->name;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <osThreadNew+0x6e>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b38      	cmp	r3, #56	@ 0x38
 8006f6c:	d805      	bhi.n	8006f7a <osThreadNew+0x6e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <osThreadNew+0x72>
        return (NULL);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e054      	b.n	8007028 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00e      	beq.n	8006fb4 <osThreadNew+0xa8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f9c:	d90a      	bls.n	8006fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <osThreadNew+0xa8>
        mem = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e010      	b.n	8006fd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10c      	bne.n	8006fd6 <osThreadNew+0xca>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <osThreadNew+0xca>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <osThreadNew+0xca>
          mem = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e001      	b.n	8006fd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d110      	bne.n	8006ffe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe4:	9202      	str	r2, [sp, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6a3a      	ldr	r2, [r7, #32]
 8006ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f001 f944 	bl	8008280 <xTaskCreateStatic>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e013      	b.n	8007026 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d110      	bne.n	8007026 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	b29a      	uxth	r2, r3
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f001 f992 	bl	8008340 <xTaskCreate>
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	d001      	beq.n	8007026 <osThreadNew+0x11a>
            hTask = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007026:	693b      	ldr	r3, [r7, #16]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	@ 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007038:	f3ef 8305 	mrs	r3, IPSR
 800703c:	60bb      	str	r3, [r7, #8]
  return(result);
 800703e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <osDelay+0x1c>
    stat = osErrorISR;
 8007044:	f06f 0305 	mvn.w	r3, #5
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e007      	b.n	800705c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fab8 	bl	80085cc <vTaskDelay>
    }
  }

  return (stat);
 800705c:	68fb      	ldr	r3, [r7, #12]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007066:	b580      	push	{r7, lr}
 8007068:	b088      	sub	sp, #32
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	60bb      	str	r3, [r7, #8]
  return(result);
 8007078:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800707a:	2b00      	cmp	r3, #0
 800707c:	d174      	bne.n	8007168 <osMutexNew+0x102>
    if (attr != NULL) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e001      	b.n	8007090 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800709a:	2301      	movs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e001      	b.n	80070a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d15c      	bne.n	8007168 <osMutexNew+0x102>
      mem = -1;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d015      	beq.n	80070e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <osMutexNew+0x6a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80070c8:	d902      	bls.n	80070d0 <osMutexNew+0x6a>
          mem = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e00c      	b.n	80070ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d108      	bne.n	80070ea <osMutexNew+0x84>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <osMutexNew+0x84>
            mem = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	e001      	b.n	80070ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d112      	bne.n	8007116 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4619      	mov	r1, r3
 80070fc:	2004      	movs	r0, #4
 80070fe:	f000 fb20 	bl	8007742 <xQueueCreateMutexStatic>
 8007102:	61f8      	str	r0, [r7, #28]
 8007104:	e016      	b.n	8007134 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	4619      	mov	r1, r3
 800710c:	2001      	movs	r0, #1
 800710e:	f000 fb18 	bl	8007742 <xQueueCreateMutexStatic>
 8007112:	61f8      	str	r0, [r7, #28]
 8007114:	e00e      	b.n	8007134 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007122:	2004      	movs	r0, #4
 8007124:	f000 faf5 	bl	8007712 <xQueueCreateMutex>
 8007128:	61f8      	str	r0, [r7, #28]
 800712a:	e003      	b.n	8007134 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800712c:	2001      	movs	r0, #1
 800712e:	f000 faf0 	bl	8007712 <xQueueCreateMutex>
 8007132:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <osMutexNew+0xee>
        if (attr != NULL) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <osMutexNew+0xe2>
          name = attr->name;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e001      	b.n	800714c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800714c:	68f9      	ldr	r1, [r7, #12]
 800714e:	69f8      	ldr	r0, [r7, #28]
 8007150:	f001 f838 	bl	80081c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d006      	beq.n	8007168 <osMutexNew+0x102>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007168:	69fb      	ldr	r3, [r7, #28]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007190:	f3ef 8305 	mrs	r3, IPSR
 8007194:	60bb      	str	r3, [r7, #8]
  return(result);
 8007196:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800719c:	f06f 0305 	mvn.w	r3, #5
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	e02c      	b.n	80071fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80071aa:	f06f 0303 	mvn.w	r3, #3
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e025      	b.n	80071fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d011      	beq.n	80071dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6938      	ldr	r0, [r7, #16]
 80071bc:	f000 fb11 	bl	80077e2 <xQueueTakeMutexRecursive>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d01b      	beq.n	80071fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80071cc:	f06f 0301 	mvn.w	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e014      	b.n	80071fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80071d4:	f06f 0302 	mvn.w	r3, #2
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e010      	b.n	80071fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6938      	ldr	r0, [r7, #16]
 80071e0:	f000 fdb8 	bl	8007d54 <xQueueSemaphoreTake>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d009      	beq.n	80071fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80071f0:	f06f 0301 	mvn.w	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	e002      	b.n	80071fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80071f8:	f06f 0302 	mvn.w	r3, #2
 80071fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80071fe:	697b      	ldr	r3, [r7, #20]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007224:	f3ef 8305 	mrs	r3, IPSR
 8007228:	60bb      	str	r3, [r7, #8]
  return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007230:	f06f 0305 	mvn.w	r3, #5
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e01f      	b.n	8007278 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800723e:	f06f 0303 	mvn.w	r3, #3
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e018      	b.n	8007278 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d009      	beq.n	8007260 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800724c:	6938      	ldr	r0, [r7, #16]
 800724e:	f000 fa93 	bl	8007778 <xQueueGiveMutexRecursive>
 8007252:	4603      	mov	r3, r0
 8007254:	2b01      	cmp	r3, #1
 8007256:	d00f      	beq.n	8007278 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007258:	f06f 0302 	mvn.w	r3, #2
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e00b      	b.n	8007278 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007260:	2300      	movs	r3, #0
 8007262:	2200      	movs	r2, #0
 8007264:	2100      	movs	r1, #0
 8007266:	6938      	ldr	r0, [r7, #16]
 8007268:	f000 faf2 	bl	8007850 <xQueueGenericSend>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d002      	beq.n	8007278 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007272:	f06f 0302 	mvn.w	r3, #2
 8007276:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007278:	697b      	ldr	r3, [r7, #20]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a07      	ldr	r2, [pc, #28]	@ (80072b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4a06      	ldr	r2, [pc, #24]	@ (80072b4 <vApplicationGetIdleTaskMemory+0x30>)
 800729a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2280      	movs	r2, #128	@ 0x80
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	2000016c 	.word	0x2000016c
 80072b4:	200001c8 	.word	0x200001c8

080072b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a07      	ldr	r2, [pc, #28]	@ (80072e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80072c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a06      	ldr	r2, [pc, #24]	@ (80072e8 <vApplicationGetTimerTaskMemory+0x30>)
 80072ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072d6:	601a      	str	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	200003c8 	.word	0x200003c8
 80072e8:	20000424 	.word	0x20000424

080072ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f103 0208 	add.w	r2, r3, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f103 0208 	add.w	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f103 0208 	add.w	r2, r3, #8
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073a4:	d103      	bne.n	80073ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e00c      	b.n	80073c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3308      	adds	r3, #8
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	e002      	b.n	80073bc <vListInsert+0x2e>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d2f6      	bcs.n	80073b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6892      	ldr	r2, [r2, #8]
 8007416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6852      	ldr	r2, [r2, #4]
 8007420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d103      	bne.n	8007434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1e5a      	subs	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007480:	f002 fba2 	bl	8009bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	3b01      	subs	r3, #1
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074b6:	fb01 f303 	mul.w	r3, r1, r3
 80074ba:	441a      	add	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	22ff      	movs	r2, #255	@ 0xff
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	22ff      	movs	r2, #255	@ 0xff
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d114      	bne.n	8007500 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01a      	beq.n	8007514 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3310      	adds	r3, #16
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fb36 	bl	8008b54 <xTaskRemoveFromEventList>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d012      	beq.n	8007514 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <xQueueGenericReset+0xd0>)
 80074f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	e009      	b.n	8007514 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3310      	adds	r3, #16
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff fef1 	bl	80072ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3324      	adds	r3, #36	@ 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff feec 	bl	80072ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007514:	f002 fb8a 	bl	8009c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007518:	2301      	movs	r3, #1
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08e      	sub	sp, #56	@ 0x38
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <xQueueGenericCreateStatic+0x56>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <xQueueGenericCreateStatic+0x5a>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <xQueueGenericCreateStatic+0x5c>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	623b      	str	r3, [r7, #32]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <xQueueGenericCreateStatic+0x84>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <xQueueGenericCreateStatic+0x88>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <xQueueGenericCreateStatic+0x8a>
 80075b0:	2300      	movs	r3, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	61fb      	str	r3, [r7, #28]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075ce:	2350      	movs	r3, #80	@ 0x50
 80075d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b50      	cmp	r3, #80	@ 0x50
 80075d6:	d00b      	beq.n	80075f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	61bb      	str	r3, [r7, #24]
}
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00d      	beq.n	8007618 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007604:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f840 	bl	8007698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800761a:	4618      	mov	r0, r3
 800761c:	3730      	adds	r7, #48	@ 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007622:	b580      	push	{r7, lr}
 8007624:	b08a      	sub	sp, #40	@ 0x28
 8007626:	af02      	add	r7, sp, #8
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10b      	bne.n	800764e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	613b      	str	r3, [r7, #16]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	fb02 f303 	mul.w	r3, r2, r3
 8007656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3350      	adds	r3, #80	@ 0x50
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fbd5 	bl	8009e0c <pvPortMalloc>
 8007662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d011      	beq.n	800768e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3350      	adds	r3, #80	@ 0x50
 8007672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800767c:	79fa      	ldrb	r2, [r7, #7]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f805 	bl	8007698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800768e:	69bb      	ldr	r3, [r7, #24]
	}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	e002      	b.n	80076ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076c6:	2101      	movs	r1, #1
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f7ff fec3 	bl	8007454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076fe:	2300      	movs	r3, #0
 8007700:	2200      	movs	r2, #0
 8007702:	2100      	movs	r1, #0
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8a3 	bl	8007850 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007712:	b580      	push	{r7, lr}
 8007714:	b086      	sub	sp, #24
 8007716:	af00      	add	r7, sp, #0
 8007718:	4603      	mov	r3, r0
 800771a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	461a      	mov	r2, r3
 8007728:	6939      	ldr	r1, [r7, #16]
 800772a:	6978      	ldr	r0, [r7, #20]
 800772c:	f7ff ff79 	bl	8007622 <xQueueGenericCreate>
 8007730:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff ffd3 	bl	80076de <prvInitialiseMutex>

		return xNewQueue;
 8007738:	68fb      	ldr	r3, [r7, #12]
	}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007742:	b580      	push	{r7, lr}
 8007744:	b088      	sub	sp, #32
 8007746:	af02      	add	r7, sp, #8
 8007748:	4603      	mov	r3, r0
 800774a:	6039      	str	r1, [r7, #0]
 800774c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800774e:	2301      	movs	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2200      	movs	r2, #0
 800775e:	6939      	ldr	r1, [r7, #16]
 8007760:	6978      	ldr	r0, [r7, #20]
 8007762:	f7ff fee1 	bl	8007528 <xQueueGenericCreateStatic>
 8007766:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff ffb8 	bl	80076de <prvInitialiseMutex>

		return xNewQueue;
 800776e:	68fb      	ldr	r3, [r7, #12]
	}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007778:	b590      	push	{r4, r7, lr}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	60fb      	str	r3, [r7, #12]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	689c      	ldr	r4, [r3, #8]
 80077a6:	f001 fb95 	bl	8008ed4 <xTaskGetCurrentTaskHandle>
 80077aa:	4603      	mov	r3, r0
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d111      	bne.n	80077d4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80077c2:	2300      	movs	r3, #0
 80077c4:	2200      	movs	r2, #0
 80077c6:	2100      	movs	r1, #0
 80077c8:	6938      	ldr	r0, [r7, #16]
 80077ca:	f000 f841 	bl	8007850 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e001      	b.n	80077d8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80077d8:	697b      	ldr	r3, [r7, #20]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd90      	pop	{r4, r7, pc}

080077e2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80077e2:	b590      	push	{r4, r7, lr}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	689c      	ldr	r4, [r3, #8]
 8007812:	f001 fb5f 	bl	8008ed4 <xTaskGetCurrentTaskHandle>
 8007816:	4603      	mov	r3, r0
 8007818:	429c      	cmp	r4, r3
 800781a:	d107      	bne.n	800782c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007826:	2301      	movs	r3, #1
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e00c      	b.n	8007846 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6938      	ldr	r0, [r7, #16]
 8007830:	f000 fa90 	bl	8007d54 <xQueueSemaphoreTake>
 8007834:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007846:	697b      	ldr	r3, [r7, #20]
	}
 8007848:	4618      	mov	r0, r3
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd90      	pop	{r4, r7, pc}

08007850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	@ 0x38
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800785e:	2300      	movs	r3, #0
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10b      	bne.n	8007884 <xQueueGenericSend+0x34>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	e7fd      	b.n	8007880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <xQueueGenericSend+0x42>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <xQueueGenericSend+0x46>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSend+0x48>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xQueueGenericSend+0x64>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d103      	bne.n	80078c2 <xQueueGenericSend+0x72>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <xQueueGenericSend+0x76>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueGenericSend+0x78>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueGenericSend+0x94>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	623b      	str	r3, [r7, #32]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e4:	f001 fb06 	bl	8008ef4 <xTaskGetSchedulerState>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <xQueueGenericSend+0xa4>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <xQueueGenericSend+0xa8>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <xQueueGenericSend+0xaa>
 80078f8:	2300      	movs	r3, #0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <xQueueGenericSend+0xc6>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	61fb      	str	r3, [r7, #28]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007916:	f002 f957 	bl	8009bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007922:	429a      	cmp	r2, r3
 8007924:	d302      	bcc.n	800792c <xQueueGenericSend+0xdc>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d129      	bne.n	8007980 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007932:	f000 fb37 	bl	8007fa4 <prvCopyDataToQueue>
 8007936:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d010      	beq.n	8007962 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	3324      	adds	r3, #36	@ 0x24
 8007944:	4618      	mov	r0, r3
 8007946:	f001 f905 	bl	8008b54 <xTaskRemoveFromEventList>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d013      	beq.n	8007978 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b3f      	ldr	r3, [pc, #252]	@ (8007a50 <xQueueGenericSend+0x200>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	e00a      	b.n	8007978 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007968:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <xQueueGenericSend+0x200>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007978:	f002 f958 	bl	8009c2c <vPortExitCritical>
				return pdPASS;
 800797c:	2301      	movs	r3, #1
 800797e:	e063      	b.n	8007a48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007986:	f002 f951 	bl	8009c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800798a:	2300      	movs	r3, #0
 800798c:	e05c      	b.n	8007a48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f93f 	bl	8008c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a2:	f002 f943 	bl	8009c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a6:	f000 feaf 	bl	8008708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079aa:	f002 f90d 	bl	8009bc8 <vPortEnterCritical>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ba:	d103      	bne.n	80079c4 <xQueueGenericSend+0x174>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079d0:	d103      	bne.n	80079da <xQueueGenericSend+0x18a>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079da:	f002 f927 	bl	8009c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079de:	1d3a      	adds	r2, r7, #4
 80079e0:	f107 0314 	add.w	r3, r7, #20
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 f92e 	bl	8008c48 <xTaskCheckForTimeOut>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d124      	bne.n	8007a3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079f4:	f000 fbce 	bl	8008194 <prvIsQueueFull>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d018      	beq.n	8007a30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	3310      	adds	r3, #16
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 f852 	bl	8008ab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a0e:	f000 fb59 	bl	80080c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a12:	f000 fe87 	bl	8008724 <xTaskResumeAll>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f47f af7c 	bne.w	8007916 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <xQueueGenericSend+0x200>)
 8007a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	e772      	b.n	8007916 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a32:	f000 fb47 	bl	80080c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a36:	f000 fe75 	bl	8008724 <xTaskResumeAll>
 8007a3a:	e76c      	b.n	8007916 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a3e:	f000 fb41 	bl	80080c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a42:	f000 fe6f 	bl	8008724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3738      	adds	r7, #56	@ 0x38
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b090      	sub	sp, #64	@ 0x40
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <xQueueGenericSendFromISR+0x3e>
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericSendFromISR+0x42>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericSendFromISR+0x44>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d103      	bne.n	8007ac2 <xQueueGenericSendFromISR+0x6e>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <xQueueGenericSendFromISR+0x72>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <xQueueGenericSendFromISR+0x74>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	623b      	str	r3, [r7, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ae4:	f002 f950 	bl	8009d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ae8:	f3ef 8211 	mrs	r2, BASEPRI
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	61fa      	str	r2, [r7, #28]
 8007afe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <xQueueGenericSendFromISR+0xc2>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d12f      	bne.n	8007b76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b2c:	f000 fa3a 	bl	8007fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b38:	d112      	bne.n	8007b60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	3324      	adds	r3, #36	@ 0x24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 f804 	bl	8008b54 <xTaskRemoveFromEventList>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e007      	b.n	8007b70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b64:	3301      	adds	r3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	b25a      	sxtb	r2, r3
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b70:	2301      	movs	r3, #1
 8007b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b74:	e001      	b.n	8007b7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3740      	adds	r7, #64	@ 0x40
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	@ 0x30
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <xQueueReceive+0x32>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	623b      	str	r3, [r7, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <xQueueReceive+0x40>
 8007bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueReceive+0x44>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueReceive+0x46>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <xQueueReceive+0x62>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61fb      	str	r3, [r7, #28]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bf2:	f001 f97f 	bl	8008ef4 <xTaskGetSchedulerState>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <xQueueReceive+0x72>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueReceive+0x76>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueReceive+0x78>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <xQueueReceive+0x94>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	61bb      	str	r3, [r7, #24]
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c24:	f001 ffd0 	bl	8009bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01f      	beq.n	8007c74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c38:	f000 fa1e 	bl	8008078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00f      	beq.n	8007c6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	3310      	adds	r3, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 ff7f 	bl	8008b54 <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d50 <xQueueReceive+0x1c0>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c6c:	f001 ffde 	bl	8009c2c <vPortExitCritical>
				return pdPASS;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e069      	b.n	8007d48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c7a:	f001 ffd7 	bl	8009c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e062      	b.n	8007d48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c88:	f107 0310 	add.w	r3, r7, #16
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ffc5 	bl	8008c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c96:	f001 ffc9 	bl	8009c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c9a:	f000 fd35 	bl	8008708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c9e:	f001 ff93 	bl	8009bc8 <vPortEnterCritical>
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca8:	b25b      	sxtb	r3, r3
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cae:	d103      	bne.n	8007cb8 <xQueueReceive+0x128>
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cbe:	b25b      	sxtb	r3, r3
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cc4:	d103      	bne.n	8007cce <xQueueReceive+0x13e>
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cce:	f001 ffad 	bl	8009c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cd2:	1d3a      	adds	r2, r7, #4
 8007cd4:	f107 0310 	add.w	r3, r7, #16
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ffb4 	bl	8008c48 <xTaskCheckForTimeOut>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d123      	bne.n	8007d2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce8:	f000 fa3e 	bl	8008168 <prvIsQueueEmpty>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf4:	3324      	adds	r3, #36	@ 0x24
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fed8 	bl	8008ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d02:	f000 f9df 	bl	80080c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d06:	f000 fd0d 	bl	8008724 <xTaskResumeAll>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d189      	bne.n	8007c24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d10:	4b0f      	ldr	r3, [pc, #60]	@ (8007d50 <xQueueReceive+0x1c0>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	e780      	b.n	8007c24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d24:	f000 f9ce 	bl	80080c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d28:	f000 fcfc 	bl	8008724 <xTaskResumeAll>
 8007d2c:	e77a      	b.n	8007c24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d30:	f000 f9c8 	bl	80080c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d34:	f000 fcf6 	bl	8008724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d3a:	f000 fa15 	bl	8008168 <prvIsQueueEmpty>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f43f af6f 	beq.w	8007c24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3730      	adds	r7, #48	@ 0x30
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08e      	sub	sp, #56	@ 0x38
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	623b      	str	r3, [r7, #32]
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	e7fd      	b.n	8007d84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	61fb      	str	r3, [r7, #28]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da8:	f001 f8a4 	bl	8008ef4 <xTaskGetSchedulerState>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <xQueueSemaphoreTake+0x64>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <xQueueSemaphoreTake+0x68>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <xQueueSemaphoreTake+0x6a>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	61bb      	str	r3, [r7, #24]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dda:	f001 fef5 	bl	8009bc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d024      	beq.n	8007e34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dec:	1e5a      	subs	r2, r3, #1
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007dfa:	f001 f9f5 	bl	80091e8 <pvTaskIncrementMutexHeldCount>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00f      	beq.n	8007e2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	3310      	adds	r3, #16
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fe9f 	bl	8008b54 <xTaskRemoveFromEventList>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e1c:	4b54      	ldr	r3, [pc, #336]	@ (8007f70 <xQueueSemaphoreTake+0x21c>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e2c:	f001 fefe 	bl	8009c2c <vPortExitCritical>
				return pdPASS;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e098      	b.n	8007f66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d112      	bne.n	8007e60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	617b      	str	r3, [r7, #20]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e58:	f001 fee8 	bl	8009c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e082      	b.n	8007f66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fed6 	bl	8008c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e74:	f001 feda 	bl	8009c2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e78:	f000 fc46 	bl	8008708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e7c:	f001 fea4 	bl	8009bc8 <vPortEnterCritical>
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e86:	b25b      	sxtb	r3, r3
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e8c:	d103      	bne.n	8007e96 <xQueueSemaphoreTake+0x142>
 8007e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ea2:	d103      	bne.n	8007eac <xQueueSemaphoreTake+0x158>
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eac:	f001 febe 	bl	8009c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eb0:	463a      	mov	r2, r7
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fec5 	bl	8008c48 <xTaskCheckForTimeOut>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d132      	bne.n	8007f2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ec6:	f000 f94f 	bl	8008168 <prvIsQueueEmpty>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d026      	beq.n	8007f1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007ed8:	f001 fe76 	bl	8009bc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 f825 	bl	8008f30 <xTaskPriorityInherit>
 8007ee6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007ee8:	f001 fea0 	bl	8009c2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eee:	3324      	adds	r3, #36	@ 0x24
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fddb 	bl	8008ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007efa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007efc:	f000 f8e2 	bl	80080c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f00:	f000 fc10 	bl	8008724 <xTaskResumeAll>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f47f af67 	bne.w	8007dda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007f0c:	4b18      	ldr	r3, [pc, #96]	@ (8007f70 <xQueueSemaphoreTake+0x21c>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	e75d      	b.n	8007dda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f20:	f000 f8d0 	bl	80080c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f24:	f000 fbfe 	bl	8008724 <xTaskResumeAll>
 8007f28:	e757      	b.n	8007dda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f2c:	f000 f8ca 	bl	80080c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f30:	f000 fbf8 	bl	8008724 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f36:	f000 f917 	bl	8008168 <prvIsQueueEmpty>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f43f af4c 	beq.w	8007dda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00d      	beq.n	8007f64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007f48:	f001 fe3e 	bl	8009bc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f4e:	f000 f811 	bl	8007f74 <prvGetDisinheritPriorityAfterTimeout>
 8007f52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 f8c0 	bl	80090e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f60:	f001 fe64 	bl	8009c2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3738      	adds	r7, #56	@ 0x38
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e001      	b.n	8007f96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f96:	68fb      	ldr	r3, [r7, #12]
	}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14d      	bne.n	8008066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 f816 	bl	8009000 <xTaskPriorityDisinherit>
 8007fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	609a      	str	r2, [r3, #8]
 8007fdc:	e043      	b.n	8008066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d119      	bne.n	8008018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6858      	ldr	r0, [r3, #4]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fec:	461a      	mov	r2, r3
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	f002 f926 	bl	800a240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d32b      	bcc.n	8008066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	e026      	b.n	8008066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68d8      	ldr	r0, [r3, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008020:	461a      	mov	r2, r3
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	f002 f90c 	bl	800a240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	425b      	negs	r3, r3
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d207      	bcs.n	8008054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	425b      	negs	r3, r3
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d105      	bne.n	8008066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3b01      	subs	r3, #1
 8008064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800806e:	697b      	ldr	r3, [r7, #20]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d018      	beq.n	80080bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	441a      	add	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d303      	bcc.n	80080ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68d9      	ldr	r1, [r3, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b4:	461a      	mov	r2, r3
 80080b6:	6838      	ldr	r0, [r7, #0]
 80080b8:	f002 f8c2 	bl	800a240 <memcpy>
	}
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080cc:	f001 fd7c 	bl	8009bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080d8:	e011      	b.n	80080fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d012      	beq.n	8008108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3324      	adds	r3, #36	@ 0x24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fd34 	bl	8008b54 <xTaskRemoveFromEventList>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080f2:	f000 fe0d 	bl	8008d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dce9      	bgt.n	80080da <prvUnlockQueue+0x16>
 8008106:	e000      	b.n	800810a <prvUnlockQueue+0x46>
					break;
 8008108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	22ff      	movs	r2, #255	@ 0xff
 800810e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008112:	f001 fd8b 	bl	8009c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008116:	f001 fd57 	bl	8009bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008122:	e011      	b.n	8008148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d012      	beq.n	8008152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3310      	adds	r3, #16
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fd0f 	bl	8008b54 <xTaskRemoveFromEventList>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800813c:	f000 fde8 	bl	8008d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	3b01      	subs	r3, #1
 8008144:	b2db      	uxtb	r3, r3
 8008146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dce9      	bgt.n	8008124 <prvUnlockQueue+0x60>
 8008150:	e000      	b.n	8008154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	22ff      	movs	r2, #255	@ 0xff
 8008158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800815c:	f001 fd66 	bl	8009c2c <vPortExitCritical>
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008170:	f001 fd2a 	bl	8009bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e001      	b.n	8008186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f001 fd51 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800819c:	f001 fd14 	bl	8009bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d102      	bne.n	80081b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e001      	b.n	80081b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081b6:	f001 fd39 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e014      	b.n	80081fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008214 <vQueueAddToRegistry+0x50>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081e0:	490c      	ldr	r1, [pc, #48]	@ (8008214 <vQueueAddToRegistry+0x50>)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008214 <vQueueAddToRegistry+0x50>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	4413      	add	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081f6:	e006      	b.n	8008206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b07      	cmp	r3, #7
 8008202:	d9e7      	bls.n	80081d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000824 	.word	0x20000824

08008218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008228:	f001 fcce 	bl	8009bc8 <vPortEnterCritical>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008232:	b25b      	sxtb	r3, r3
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008238:	d103      	bne.n	8008242 <vQueueWaitForMessageRestricted+0x2a>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008248:	b25b      	sxtb	r3, r3
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800824e:	d103      	bne.n	8008258 <vQueueWaitForMessageRestricted+0x40>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008258:	f001 fce8 	bl	8009c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	3324      	adds	r3, #36	@ 0x24
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fc45 	bl	8008afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f7ff ff26 	bl	80080c4 <prvUnlockQueue>
	}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08e      	sub	sp, #56	@ 0x38
 8008284:	af04      	add	r7, sp, #16
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800828e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	e7fd      	b.n	80082a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10b      	bne.n	80082ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	61fb      	str	r3, [r7, #28]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082ca:	235c      	movs	r3, #92	@ 0x5c
 80082cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80082d2:	d00b      	beq.n	80082ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	61bb      	str	r3, [r7, #24]
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	e7fd      	b.n	80082e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01e      	beq.n	8008332 <xTaskCreateStatic+0xb2>
 80082f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01b      	beq.n	8008332 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008302:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	2202      	movs	r2, #2
 8008308:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800830c:	2300      	movs	r3, #0
 800830e:	9303      	str	r3, [sp, #12]
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	9302      	str	r3, [sp, #8]
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f850 	bl	80083ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800832a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800832c:	f000 f8de 	bl	80084ec <prvAddNewTaskToReadyList>
 8008330:	e001      	b.n	8008336 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008336:	697b      	ldr	r3, [r7, #20]
	}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	@ 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	@ 0x30
 8008344:	af04      	add	r7, sp, #16
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	4613      	mov	r3, r2
 800834e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fd59 	bl	8009e0c <pvPortMalloc>
 800835a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008362:	205c      	movs	r0, #92	@ 0x5c
 8008364:	f001 fd52 	bl	8009e0c <pvPortMalloc>
 8008368:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	631a      	str	r2, [r3, #48]	@ 0x30
 8008376:	e005      	b.n	8008384 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008378:	6978      	ldr	r0, [r7, #20]
 800837a:	f001 fe15 	bl	8009fa8 <vPortFree>
 800837e:	e001      	b.n	8008384 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d017      	beq.n	80083ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	2300      	movs	r3, #0
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	9302      	str	r3, [sp, #8]
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f80e 	bl	80083ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ae:	69f8      	ldr	r0, [r7, #28]
 80083b0:	f000 f89c 	bl	80084ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083b4:	2301      	movs	r3, #1
 80083b6:	61bb      	str	r3, [r7, #24]
 80083b8:	e002      	b.n	80083c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083c0:	69bb      	ldr	r3, [r7, #24]
	}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b088      	sub	sp, #32
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
 80083d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	461a      	mov	r2, r3
 80083e2:	21a5      	movs	r1, #165	@ 0xa5
 80083e4:	f001 ff00 	bl	800a1e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083f2:	3b01      	subs	r3, #1
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f023 0307 	bic.w	r3, r3, #7
 8008400:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	617b      	str	r3, [r7, #20]
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01f      	beq.n	800846a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	e012      	b.n	8008456 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	7819      	ldrb	r1, [r3, #0]
 8008438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	3334      	adds	r3, #52	@ 0x34
 8008440:	460a      	mov	r2, r1
 8008442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	2b0f      	cmp	r3, #15
 800845a:	d9e9      	bls.n	8008430 <prvInitialiseNewTask+0x66>
 800845c:	e000      	b.n	8008460 <prvInitialiseNewTask+0x96>
			{
				break;
 800845e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008468:	e003      	b.n	8008472 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	2b37      	cmp	r3, #55	@ 0x37
 8008476:	d901      	bls.n	800847c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008478:	2337      	movs	r3, #55	@ 0x37
 800847a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008480:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008486:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe ff4a 	bl	800732c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	3318      	adds	r3, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe ff45 	bl	800732c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	2200      	movs	r2, #0
 80084bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	68f9      	ldr	r1, [r7, #12]
 80084ca:	69b8      	ldr	r0, [r7, #24]
 80084cc:	f001 fa4e 	bl	800996c <pxPortInitialiseStack>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084e2:	bf00      	nop
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f4:	f001 fb68 	bl	8009bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084f8:	4b2d      	ldr	r3, [pc, #180]	@ (80085b0 <prvAddNewTaskToReadyList+0xc4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	4a2c      	ldr	r2, [pc, #176]	@ (80085b0 <prvAddNewTaskToReadyList+0xc4>)
 8008500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008502:	4b2c      	ldr	r3, [pc, #176]	@ (80085b4 <prvAddNewTaskToReadyList+0xc8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800850a:	4a2a      	ldr	r2, [pc, #168]	@ (80085b4 <prvAddNewTaskToReadyList+0xc8>)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008510:	4b27      	ldr	r3, [pc, #156]	@ (80085b0 <prvAddNewTaskToReadyList+0xc4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d110      	bne.n	800853a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008518:	f000 fc1e 	bl	8008d58 <prvInitialiseTaskLists>
 800851c:	e00d      	b.n	800853a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <prvAddNewTaskToReadyList+0xcc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008526:	4b23      	ldr	r3, [pc, #140]	@ (80085b4 <prvAddNewTaskToReadyList+0xc8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	429a      	cmp	r2, r3
 8008532:	d802      	bhi.n	800853a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008534:	4a1f      	ldr	r2, [pc, #124]	@ (80085b4 <prvAddNewTaskToReadyList+0xc8>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800853a:	4b20      	ldr	r3, [pc, #128]	@ (80085bc <prvAddNewTaskToReadyList+0xd0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3301      	adds	r3, #1
 8008540:	4a1e      	ldr	r2, [pc, #120]	@ (80085bc <prvAddNewTaskToReadyList+0xd0>)
 8008542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008544:	4b1d      	ldr	r3, [pc, #116]	@ (80085bc <prvAddNewTaskToReadyList+0xd0>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008550:	4b1b      	ldr	r3, [pc, #108]	@ (80085c0 <prvAddNewTaskToReadyList+0xd4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <prvAddNewTaskToReadyList+0x74>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	4a18      	ldr	r2, [pc, #96]	@ (80085c0 <prvAddNewTaskToReadyList+0xd4>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4a15      	ldr	r2, [pc, #84]	@ (80085c4 <prvAddNewTaskToReadyList+0xd8>)
 800856e:	441a      	add	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f7fe fee5 	bl	8007346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800857c:	f001 fb56 	bl	8009c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008580:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <prvAddNewTaskToReadyList+0xcc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00e      	beq.n	80085a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008588:	4b0a      	ldr	r3, [pc, #40]	@ (80085b4 <prvAddNewTaskToReadyList+0xc8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008592:	429a      	cmp	r2, r3
 8008594:	d207      	bcs.n	80085a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <prvAddNewTaskToReadyList+0xdc>)
 8008598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000d38 	.word	0x20000d38
 80085b4:	20000864 	.word	0x20000864
 80085b8:	20000d44 	.word	0x20000d44
 80085bc:	20000d54 	.word	0x20000d54
 80085c0:	20000d40 	.word	0x20000d40
 80085c4:	20000868 	.word	0x20000868
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d018      	beq.n	8008610 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085de:	4b14      	ldr	r3, [pc, #80]	@ (8008630 <vTaskDelay+0x64>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <vTaskDelay+0x32>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	60bb      	str	r3, [r7, #8]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085fe:	f000 f883 	bl	8008708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008602:	2100      	movs	r1, #0
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fe03 	bl	8009210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800860a:	f000 f88b 	bl	8008724 <xTaskResumeAll>
 800860e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d107      	bne.n	8008626 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008616:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <vTaskDelay+0x68>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000d60 	.word	0x20000d60
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	@ 0x28
 800863c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008646:	463a      	mov	r2, r7
 8008648:	1d39      	adds	r1, r7, #4
 800864a:	f107 0308 	add.w	r3, r7, #8
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fe18 	bl	8007284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	9202      	str	r2, [sp, #8]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	2300      	movs	r3, #0
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	460a      	mov	r2, r1
 8008666:	4922      	ldr	r1, [pc, #136]	@ (80086f0 <vTaskStartScheduler+0xb8>)
 8008668:	4822      	ldr	r0, [pc, #136]	@ (80086f4 <vTaskStartScheduler+0xbc>)
 800866a:	f7ff fe09 	bl	8008280 <xTaskCreateStatic>
 800866e:	4603      	mov	r3, r0
 8008670:	4a21      	ldr	r2, [pc, #132]	@ (80086f8 <vTaskStartScheduler+0xc0>)
 8008672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008674:	4b20      	ldr	r3, [pc, #128]	@ (80086f8 <vTaskStartScheduler+0xc0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e001      	b.n	8008686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d102      	bne.n	8008692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800868c:	f000 fe14 	bl	80092b8 <xTimerCreateTimerTask>
 8008690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d116      	bne.n	80086c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	613b      	str	r3, [r7, #16]
}
 80086aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086ac:	4b13      	ldr	r3, [pc, #76]	@ (80086fc <vTaskStartScheduler+0xc4>)
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086b4:	4b12      	ldr	r3, [pc, #72]	@ (8008700 <vTaskStartScheduler+0xc8>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <vTaskStartScheduler+0xcc>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086c0:	f001 f9de 	bl	8009a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086c4:	e00f      	b.n	80086e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086cc:	d10b      	bne.n	80086e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <vTaskStartScheduler+0xaa>
}
 80086e6:	bf00      	nop
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	0800a2e8 	.word	0x0800a2e8
 80086f4:	08008d29 	.word	0x08008d29
 80086f8:	20000d5c 	.word	0x20000d5c
 80086fc:	20000d58 	.word	0x20000d58
 8008700:	20000d44 	.word	0x20000d44
 8008704:	20000d3c 	.word	0x20000d3c

08008708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800870c:	4b04      	ldr	r3, [pc, #16]	@ (8008720 <vTaskSuspendAll+0x18>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	4a03      	ldr	r2, [pc, #12]	@ (8008720 <vTaskSuspendAll+0x18>)
 8008714:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008716:	bf00      	nop
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20000d60 	.word	0x20000d60

08008724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008732:	4b42      	ldr	r3, [pc, #264]	@ (800883c <xTaskResumeAll+0x118>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <xTaskResumeAll+0x2e>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008752:	f001 fa39 	bl	8009bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008756:	4b39      	ldr	r3, [pc, #228]	@ (800883c <xTaskResumeAll+0x118>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3b01      	subs	r3, #1
 800875c:	4a37      	ldr	r2, [pc, #220]	@ (800883c <xTaskResumeAll+0x118>)
 800875e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008760:	4b36      	ldr	r3, [pc, #216]	@ (800883c <xTaskResumeAll+0x118>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d162      	bne.n	800882e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008768:	4b35      	ldr	r3, [pc, #212]	@ (8008840 <xTaskResumeAll+0x11c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d05e      	beq.n	800882e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008770:	e02f      	b.n	80087d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008772:	4b34      	ldr	r3, [pc, #208]	@ (8008844 <xTaskResumeAll+0x120>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3318      	adds	r3, #24
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fe3e 	bl	8007400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3304      	adds	r3, #4
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe fe39 	bl	8007400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008792:	4b2d      	ldr	r3, [pc, #180]	@ (8008848 <xTaskResumeAll+0x124>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d903      	bls.n	80087a2 <xTaskResumeAll+0x7e>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	4a2a      	ldr	r2, [pc, #168]	@ (8008848 <xTaskResumeAll+0x124>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4a27      	ldr	r2, [pc, #156]	@ (800884c <xTaskResumeAll+0x128>)
 80087b0:	441a      	add	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fe fdc4 	bl	8007346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	4b23      	ldr	r3, [pc, #140]	@ (8008850 <xTaskResumeAll+0x12c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d302      	bcc.n	80087d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087cc:	4b21      	ldr	r3, [pc, #132]	@ (8008854 <xTaskResumeAll+0x130>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008844 <xTaskResumeAll+0x120>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1cb      	bne.n	8008772 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087e0:	f000 fb58 	bl	8008e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008858 <xTaskResumeAll+0x134>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d010      	beq.n	8008812 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087f0:	f000 f846 	bl	8008880 <xTaskIncrementTick>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80087fa:	4b16      	ldr	r3, [pc, #88]	@ (8008854 <xTaskResumeAll+0x130>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3b01      	subs	r3, #1
 8008804:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1f1      	bne.n	80087f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800880c:	4b12      	ldr	r3, [pc, #72]	@ (8008858 <xTaskResumeAll+0x134>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008812:	4b10      	ldr	r3, [pc, #64]	@ (8008854 <xTaskResumeAll+0x130>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800881a:	2301      	movs	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800881e:	4b0f      	ldr	r3, [pc, #60]	@ (800885c <xTaskResumeAll+0x138>)
 8008820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800882e:	f001 f9fd 	bl	8009c2c <vPortExitCritical>

	return xAlreadyYielded;
 8008832:	68bb      	ldr	r3, [r7, #8]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000d60 	.word	0x20000d60
 8008840:	20000d38 	.word	0x20000d38
 8008844:	20000cf8 	.word	0x20000cf8
 8008848:	20000d40 	.word	0x20000d40
 800884c:	20000868 	.word	0x20000868
 8008850:	20000864 	.word	0x20000864
 8008854:	20000d4c 	.word	0x20000d4c
 8008858:	20000d48 	.word	0x20000d48
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008866:	4b05      	ldr	r3, [pc, #20]	@ (800887c <xTaskGetTickCount+0x1c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800886c:	687b      	ldr	r3, [r7, #4]
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000d3c 	.word	0x20000d3c

08008880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800888a:	4b4f      	ldr	r3, [pc, #316]	@ (80089c8 <xTaskIncrementTick+0x148>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f040 8090 	bne.w	80089b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008894:	4b4d      	ldr	r3, [pc, #308]	@ (80089cc <xTaskIncrementTick+0x14c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3301      	adds	r3, #1
 800889a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800889c:	4a4b      	ldr	r2, [pc, #300]	@ (80089cc <xTaskIncrementTick+0x14c>)
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d121      	bne.n	80088ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80088a8:	4b49      	ldr	r3, [pc, #292]	@ (80089d0 <xTaskIncrementTick+0x150>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	603b      	str	r3, [r7, #0]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <xTaskIncrementTick+0x46>
 80088ca:	4b41      	ldr	r3, [pc, #260]	@ (80089d0 <xTaskIncrementTick+0x150>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	4b40      	ldr	r3, [pc, #256]	@ (80089d4 <xTaskIncrementTick+0x154>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a3e      	ldr	r2, [pc, #248]	@ (80089d0 <xTaskIncrementTick+0x150>)
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	4a3e      	ldr	r2, [pc, #248]	@ (80089d4 <xTaskIncrementTick+0x154>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	4b3e      	ldr	r3, [pc, #248]	@ (80089d8 <xTaskIncrementTick+0x158>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	4a3c      	ldr	r2, [pc, #240]	@ (80089d8 <xTaskIncrementTick+0x158>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	f000 fad4 	bl	8008e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088ec:	4b3b      	ldr	r3, [pc, #236]	@ (80089dc <xTaskIncrementTick+0x15c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d349      	bcc.n	800898a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f6:	4b36      	ldr	r3, [pc, #216]	@ (80089d0 <xTaskIncrementTick+0x150>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008900:	4b36      	ldr	r3, [pc, #216]	@ (80089dc <xTaskIncrementTick+0x15c>)
 8008902:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008906:	601a      	str	r2, [r3, #0]
					break;
 8008908:	e03f      	b.n	800898a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890a:	4b31      	ldr	r3, [pc, #196]	@ (80089d0 <xTaskIncrementTick+0x150>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d203      	bcs.n	800892a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008922:	4a2e      	ldr	r2, [pc, #184]	@ (80089dc <xTaskIncrementTick+0x15c>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008928:	e02f      	b.n	800898a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	3304      	adds	r3, #4
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fd66 	bl	8007400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3318      	adds	r3, #24
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fd5d 	bl	8007400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800894a:	4b25      	ldr	r3, [pc, #148]	@ (80089e0 <xTaskIncrementTick+0x160>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d903      	bls.n	800895a <xTaskIncrementTick+0xda>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008956:	4a22      	ldr	r2, [pc, #136]	@ (80089e0 <xTaskIncrementTick+0x160>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4a1f      	ldr	r2, [pc, #124]	@ (80089e4 <xTaskIncrementTick+0x164>)
 8008968:	441a      	add	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe fce8 	bl	8007346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897a:	4b1b      	ldr	r3, [pc, #108]	@ (80089e8 <xTaskIncrementTick+0x168>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	429a      	cmp	r2, r3
 8008982:	d3b8      	bcc.n	80088f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008988:	e7b5      	b.n	80088f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800898a:	4b17      	ldr	r3, [pc, #92]	@ (80089e8 <xTaskIncrementTick+0x168>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008990:	4914      	ldr	r1, [pc, #80]	@ (80089e4 <xTaskIncrementTick+0x164>)
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	440b      	add	r3, r1
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d901      	bls.n	80089a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089a6:	4b11      	ldr	r3, [pc, #68]	@ (80089ec <xTaskIncrementTick+0x16c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d007      	beq.n	80089be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80089ae:	2301      	movs	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	e004      	b.n	80089be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089b4:	4b0e      	ldr	r3, [pc, #56]	@ (80089f0 <xTaskIncrementTick+0x170>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a0d      	ldr	r2, [pc, #52]	@ (80089f0 <xTaskIncrementTick+0x170>)
 80089bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089be:	697b      	ldr	r3, [r7, #20]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000d60 	.word	0x20000d60
 80089cc:	20000d3c 	.word	0x20000d3c
 80089d0:	20000cf0 	.word	0x20000cf0
 80089d4:	20000cf4 	.word	0x20000cf4
 80089d8:	20000d50 	.word	0x20000d50
 80089dc:	20000d58 	.word	0x20000d58
 80089e0:	20000d40 	.word	0x20000d40
 80089e4:	20000868 	.word	0x20000868
 80089e8:	20000864 	.word	0x20000864
 80089ec:	20000d4c 	.word	0x20000d4c
 80089f0:	20000d48 	.word	0x20000d48

080089f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089fa:	4b28      	ldr	r3, [pc, #160]	@ (8008a9c <vTaskSwitchContext+0xa8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a02:	4b27      	ldr	r3, [pc, #156]	@ (8008aa0 <vTaskSwitchContext+0xac>)
 8008a04:	2201      	movs	r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a08:	e042      	b.n	8008a90 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008a0a:	4b25      	ldr	r3, [pc, #148]	@ (8008aa0 <vTaskSwitchContext+0xac>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a10:	4b24      	ldr	r3, [pc, #144]	@ (8008aa4 <vTaskSwitchContext+0xb0>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e011      	b.n	8008a3c <vTaskSwitchContext+0x48>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <vTaskSwitchContext+0x42>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <vTaskSwitchContext+0x3e>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	491a      	ldr	r1, [pc, #104]	@ (8008aa8 <vTaskSwitchContext+0xb4>)
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0e3      	beq.n	8008a18 <vTaskSwitchContext+0x24>
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a13      	ldr	r2, [pc, #76]	@ (8008aa8 <vTaskSwitchContext+0xb4>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	3308      	adds	r3, #8
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d104      	bne.n	8008a80 <vTaskSwitchContext+0x8c>
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	4a09      	ldr	r2, [pc, #36]	@ (8008aac <vTaskSwitchContext+0xb8>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	4a06      	ldr	r2, [pc, #24]	@ (8008aa4 <vTaskSwitchContext+0xb0>)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6013      	str	r3, [r2, #0]
}
 8008a90:	bf00      	nop
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	20000d60 	.word	0x20000d60
 8008aa0:	20000d4c 	.word	0x20000d4c
 8008aa4:	20000d40 	.word	0x20000d40
 8008aa8:	20000868 	.word	0x20000868
 8008aac:	20000864 	.word	0x20000864

08008ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10b      	bne.n	8008ad8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	60fb      	str	r3, [r7, #12]
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad8:	4b07      	ldr	r3, [pc, #28]	@ (8008af8 <vTaskPlaceOnEventList+0x48>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3318      	adds	r3, #24
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7fe fc54 	bl	800738e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	6838      	ldr	r0, [r7, #0]
 8008aea:	f000 fb91 	bl	8009210 <prvAddCurrentTaskToDelayedList>
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000864 	.word	0x20000864

08008afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10b      	bne.n	8008b26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3318      	adds	r3, #24
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7fe fc09 	bl	8007346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	68b8      	ldr	r0, [r7, #8]
 8008b44:	f000 fb64 	bl	8009210 <prvAddCurrentTaskToDelayedList>
	}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000864 	.word	0x20000864

08008b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	60fb      	str	r3, [r7, #12]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3318      	adds	r3, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fc3a 	bl	8007400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c04 <xTaskRemoveFromEventList+0xb0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11d      	bne.n	8008bd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe fc31 	bl	8007400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba2:	4b19      	ldr	r3, [pc, #100]	@ (8008c08 <xTaskRemoveFromEventList+0xb4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d903      	bls.n	8008bb2 <xTaskRemoveFromEventList+0x5e>
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <xTaskRemoveFromEventList+0xb4>)
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4a13      	ldr	r2, [pc, #76]	@ (8008c0c <xTaskRemoveFromEventList+0xb8>)
 8008bc0:	441a      	add	r2, r3
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f7fe fbbc 	bl	8007346 <vListInsertEnd>
 8008bce:	e005      	b.n	8008bdc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	3318      	adds	r3, #24
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	480e      	ldr	r0, [pc, #56]	@ (8008c10 <xTaskRemoveFromEventList+0xbc>)
 8008bd8:	f7fe fbb5 	bl	8007346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be0:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <xTaskRemoveFromEventList+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d905      	bls.n	8008bf6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bea:	2301      	movs	r3, #1
 8008bec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bee:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <xTaskRemoveFromEventList+0xc4>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	e001      	b.n	8008bfa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bfa:	697b      	ldr	r3, [r7, #20]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20000d60 	.word	0x20000d60
 8008c08:	20000d40 	.word	0x20000d40
 8008c0c:	20000868 	.word	0x20000868
 8008c10:	20000cf8 	.word	0x20000cf8
 8008c14:	20000864 	.word	0x20000864
 8008c18:	20000d4c 	.word	0x20000d4c

08008c1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c24:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <vTaskInternalSetTimeOutState+0x24>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <vTaskInternalSetTimeOutState+0x28>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000d50 	.word	0x20000d50
 8008c44:	20000d3c 	.word	0x20000d3c

08008c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10b      	bne.n	8008c70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	613b      	str	r3, [r7, #16]
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	e7fd      	b.n	8008c6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008c8e:	f000 ff9b 	bl	8009bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	@ (8008d08 <xTaskCheckForTimeOut+0xc0>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008caa:	d102      	bne.n	8008cb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e023      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b15      	ldr	r3, [pc, #84]	@ (8008d0c <xTaskCheckForTimeOut+0xc4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d007      	beq.n	8008cce <xTaskCheckForTimeOut+0x86>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e015      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d20b      	bcs.n	8008cf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff ff99 	bl	8008c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e004      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cfa:	f000 ff97 	bl	8009c2c <vPortExitCritical>

	return xReturn;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20000d3c 	.word	0x20000d3c
 8008d0c:	20000d50 	.word	0x20000d50

08008d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d14:	4b03      	ldr	r3, [pc, #12]	@ (8008d24 <vTaskMissedYield+0x14>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20000d4c 	.word	0x20000d4c

08008d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d30:	f000 f852 	bl	8008dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d34:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <prvIdleTask+0x28>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d9f9      	bls.n	8008d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <prvIdleTask+0x2c>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d4c:	e7f0      	b.n	8008d30 <prvIdleTask+0x8>
 8008d4e:	bf00      	nop
 8008d50:	20000868 	.word	0x20000868
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	e00c      	b.n	8008d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a12      	ldr	r2, [pc, #72]	@ (8008db8 <prvInitialiseTaskLists+0x60>)
 8008d70:	4413      	add	r3, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe faba 	bl	80072ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b37      	cmp	r3, #55	@ 0x37
 8008d82:	d9ef      	bls.n	8008d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d84:	480d      	ldr	r0, [pc, #52]	@ (8008dbc <prvInitialiseTaskLists+0x64>)
 8008d86:	f7fe fab1 	bl	80072ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d8a:	480d      	ldr	r0, [pc, #52]	@ (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008d8c:	f7fe faae 	bl	80072ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d90:	480c      	ldr	r0, [pc, #48]	@ (8008dc4 <prvInitialiseTaskLists+0x6c>)
 8008d92:	f7fe faab 	bl	80072ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d96:	480c      	ldr	r0, [pc, #48]	@ (8008dc8 <prvInitialiseTaskLists+0x70>)
 8008d98:	f7fe faa8 	bl	80072ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d9c:	480b      	ldr	r0, [pc, #44]	@ (8008dcc <prvInitialiseTaskLists+0x74>)
 8008d9e:	f7fe faa5 	bl	80072ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008da2:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <prvInitialiseTaskLists+0x78>)
 8008da4:	4a05      	ldr	r2, [pc, #20]	@ (8008dbc <prvInitialiseTaskLists+0x64>)
 8008da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <prvInitialiseTaskLists+0x7c>)
 8008daa:	4a05      	ldr	r2, [pc, #20]	@ (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008dac:	601a      	str	r2, [r3, #0]
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000868 	.word	0x20000868
 8008dbc:	20000cc8 	.word	0x20000cc8
 8008dc0:	20000cdc 	.word	0x20000cdc
 8008dc4:	20000cf8 	.word	0x20000cf8
 8008dc8:	20000d0c 	.word	0x20000d0c
 8008dcc:	20000d24 	.word	0x20000d24
 8008dd0:	20000cf0 	.word	0x20000cf0
 8008dd4:	20000cf4 	.word	0x20000cf4

08008dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dde:	e019      	b.n	8008e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008de0:	f000 fef2 	bl	8009bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b10      	ldr	r3, [pc, #64]	@ (8008e28 <prvCheckTasksWaitingTermination+0x50>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fb05 	bl	8007400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008df6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4a0a      	ldr	r2, [pc, #40]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e0a:	f000 ff0f 	bl	8009c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f810 	bl	8008e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e14:	4b06      	ldr	r3, [pc, #24]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e1      	bne.n	8008de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000d0c 	.word	0x20000d0c
 8008e2c:	20000d38 	.word	0x20000d38
 8008e30:	20000d20 	.word	0x20000d20

08008e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d108      	bne.n	8008e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 f8ac 	bl	8009fa8 <vPortFree>
				vPortFree( pxTCB );
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 f8a9 	bl	8009fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e56:	e019      	b.n	8008e8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d103      	bne.n	8008e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 f8a0 	bl	8009fa8 <vPortFree>
	}
 8008e68:	e010      	b.n	8008e8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d00b      	beq.n	8008e8c <prvDeleteTCB+0x58>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60fb      	str	r3, [r7, #12]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <prvDeleteTCB+0x54>
	}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <prvResetNextTaskUnblockTime+0x38>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eac:	e008      	b.n	8008ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eae:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <prvResetNextTaskUnblockTime+0x38>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000cf0 	.word	0x20000cf0
 8008ed0:	20000d58 	.word	0x20000d58

08008ed4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <xTaskGetCurrentTaskHandle+0x1c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ee0:	687b      	ldr	r3, [r7, #4]
	}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000864 	.word	0x20000864

08008ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008efa:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <xTaskGetSchedulerState+0x34>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f02:	2301      	movs	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	e008      	b.n	8008f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f08:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <xTaskGetSchedulerState+0x38>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f10:	2302      	movs	r3, #2
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	e001      	b.n	8008f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f16:	2300      	movs	r3, #0
 8008f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f1a:	687b      	ldr	r3, [r7, #4]
	}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000d44 	.word	0x20000d44
 8008f2c:	20000d60 	.word	0x20000d60

08008f30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d051      	beq.n	8008fea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ff4 <xTaskPriorityInherit+0xc4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d241      	bcs.n	8008fd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db06      	blt.n	8008f6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5c:	4b25      	ldr	r3, [pc, #148]	@ (8008ff4 <xTaskPriorityInherit+0xc4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	6959      	ldr	r1, [r3, #20]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff8 <xTaskPriorityInherit+0xc8>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	d122      	bne.n	8008fc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fa3a 	bl	8007400 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f8c:	4b19      	ldr	r3, [pc, #100]	@ (8008ff4 <xTaskPriorityInherit+0xc4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9a:	4b18      	ldr	r3, [pc, #96]	@ (8008ffc <xTaskPriorityInherit+0xcc>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d903      	bls.n	8008faa <xTaskPriorityInherit+0x7a>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa6:	4a15      	ldr	r2, [pc, #84]	@ (8008ffc <xTaskPriorityInherit+0xcc>)
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a10      	ldr	r2, [pc, #64]	@ (8008ff8 <xTaskPriorityInherit+0xc8>)
 8008fb8:	441a      	add	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f7fe f9c0 	bl	8007346 <vListInsertEnd>
 8008fc6:	e004      	b.n	8008fd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <xTaskPriorityInherit+0xc4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	e008      	b.n	8008fea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fdc:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <xTaskPriorityInherit+0xc4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d201      	bcs.n	8008fea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fea:	68fb      	ldr	r3, [r7, #12]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000864 	.word	0x20000864
 8008ff8:	20000868 	.word	0x20000868
 8008ffc:	20000d40 	.word	0x20000d40

08009000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d058      	beq.n	80090c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009016:	4b2f      	ldr	r3, [pc, #188]	@ (80090d4 <xTaskPriorityDisinherit+0xd4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	429a      	cmp	r2, r3
 800901e:	d00b      	beq.n	8009038 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	60bb      	str	r3, [r7, #8]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800905c:	1e5a      	subs	r2, r3, #1
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800906a:	429a      	cmp	r2, r3
 800906c:	d02c      	beq.n	80090c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009072:	2b00      	cmp	r3, #0
 8009074:	d128      	bne.n	80090c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe f9c0 	bl	8007400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009098:	4b0f      	ldr	r3, [pc, #60]	@ (80090d8 <xTaskPriorityDisinherit+0xd8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d903      	bls.n	80090a8 <xTaskPriorityDisinherit+0xa8>
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	4a0c      	ldr	r2, [pc, #48]	@ (80090d8 <xTaskPriorityDisinherit+0xd8>)
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a09      	ldr	r2, [pc, #36]	@ (80090dc <xTaskPriorityDisinherit+0xdc>)
 80090b6:	441a      	add	r2, r3
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f7fe f941 	bl	8007346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090c8:	697b      	ldr	r3, [r7, #20]
	}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20000864 	.word	0x20000864
 80090d8:	20000d40 	.word	0x20000d40
 80090dc:	20000868 	.word	0x20000868

080090e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d06c      	beq.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10b      	bne.n	8009118 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d902      	bls.n	8009128 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	e002      	b.n	800912e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800912c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	429a      	cmp	r2, r3
 8009136:	d04c      	beq.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	429a      	cmp	r2, r3
 8009140:	d147      	bne.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009142:	4b26      	ldr	r3, [pc, #152]	@ (80091dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	429a      	cmp	r2, r3
 800914a:	d10b      	bne.n	8009164 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	60bb      	str	r3, [r7, #8]
}
 800915e:	bf00      	nop
 8009160:	bf00      	nop
 8009162:	e7fd      	b.n	8009160 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009168:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	db04      	blt.n	8009182 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	6959      	ldr	r1, [r3, #20]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4a13      	ldr	r2, [pc, #76]	@ (80091e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009192:	4413      	add	r3, r2
 8009194:	4299      	cmp	r1, r3
 8009196:	d11c      	bne.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	3304      	adds	r3, #4
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe f92f 	bl	8007400 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a6:	4b0f      	ldr	r3, [pc, #60]	@ (80091e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d903      	bls.n	80091b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	4a0c      	ldr	r2, [pc, #48]	@ (80091e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a07      	ldr	r2, [pc, #28]	@ (80091e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091c4:	441a      	add	r2, r3
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fe f8ba 	bl	8007346 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091d2:	bf00      	nop
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20000864 	.word	0x20000864
 80091e0:	20000868 	.word	0x20000868
 80091e4:	20000d40 	.word	0x20000d40

080091e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <pvTaskIncrementMutexHeldCount+0x24>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d004      	beq.n	80091fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091f4:	4b05      	ldr	r3, [pc, #20]	@ (800920c <pvTaskIncrementMutexHeldCount+0x24>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091fa:	3201      	adds	r2, #1
 80091fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80091fe:	4b03      	ldr	r3, [pc, #12]	@ (800920c <pvTaskIncrementMutexHeldCount+0x24>)
 8009200:	681b      	ldr	r3, [r3, #0]
	}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000864 	.word	0x20000864

08009210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800921a:	4b21      	ldr	r3, [pc, #132]	@ (80092a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009220:	4b20      	ldr	r3, [pc, #128]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3304      	adds	r3, #4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe f8ea 	bl	8007400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009232:	d10a      	bne.n	800924a <prvAddCurrentTaskToDelayedList+0x3a>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800923a:	4b1a      	ldr	r3, [pc, #104]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3304      	adds	r3, #4
 8009240:	4619      	mov	r1, r3
 8009242:	4819      	ldr	r0, [pc, #100]	@ (80092a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009244:	f7fe f87f 	bl	8007346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009248:	e026      	b.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4413      	add	r3, r2
 8009250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009252:	4b14      	ldr	r3, [pc, #80]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	429a      	cmp	r2, r3
 8009260:	d209      	bcs.n	8009276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009262:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b0f      	ldr	r3, [pc, #60]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe f88d 	bl	800738e <vListInsert>
}
 8009274:	e010      	b.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009276:	4b0e      	ldr	r3, [pc, #56]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe f883 	bl	800738e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009288:	4b0a      	ldr	r3, [pc, #40]	@ (80092b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	d202      	bcs.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009292:	4a08      	ldr	r2, [pc, #32]	@ (80092b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000d3c 	.word	0x20000d3c
 80092a4:	20000864 	.word	0x20000864
 80092a8:	20000d24 	.word	0x20000d24
 80092ac:	20000cf4 	.word	0x20000cf4
 80092b0:	20000cf0 	.word	0x20000cf0
 80092b4:	20000d58 	.word	0x20000d58

080092b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	@ 0x28
 80092bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092c2:	f000 fb13 	bl	80098ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092c6:	4b1d      	ldr	r3, [pc, #116]	@ (800933c <xTimerCreateTimerTask+0x84>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d021      	beq.n	8009312 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092d6:	1d3a      	adds	r2, r7, #4
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fd ffe9 	bl	80072b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	9202      	str	r2, [sp, #8]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	2302      	movs	r3, #2
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	460a      	mov	r2, r1
 80092f8:	4911      	ldr	r1, [pc, #68]	@ (8009340 <xTimerCreateTimerTask+0x88>)
 80092fa:	4812      	ldr	r0, [pc, #72]	@ (8009344 <xTimerCreateTimerTask+0x8c>)
 80092fc:	f7fe ffc0 	bl	8008280 <xTaskCreateStatic>
 8009300:	4603      	mov	r3, r0
 8009302:	4a11      	ldr	r2, [pc, #68]	@ (8009348 <xTimerCreateTimerTask+0x90>)
 8009304:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009306:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <xTimerCreateTimerTask+0x90>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800930e:	2301      	movs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	613b      	str	r3, [r7, #16]
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009330:	697b      	ldr	r3, [r7, #20]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000d94 	.word	0x20000d94
 8009340:	0800a2f0 	.word	0x0800a2f0
 8009344:	08009485 	.word	0x08009485
 8009348:	20000d98 	.word	0x20000d98

0800934c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	@ 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800935a:	2300      	movs	r3, #0
 800935c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10b      	bne.n	800937c <xTimerGenericCommand+0x30>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	623b      	str	r3, [r7, #32]
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800937c:	4b19      	ldr	r3, [pc, #100]	@ (80093e4 <xTimerGenericCommand+0x98>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d02a      	beq.n	80093da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b05      	cmp	r3, #5
 8009394:	dc18      	bgt.n	80093c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009396:	f7ff fdad 	bl	8008ef4 <xTaskGetSchedulerState>
 800939a:	4603      	mov	r3, r0
 800939c:	2b02      	cmp	r3, #2
 800939e:	d109      	bne.n	80093b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093a0:	4b10      	ldr	r3, [pc, #64]	@ (80093e4 <xTimerGenericCommand+0x98>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	f107 0110 	add.w	r1, r7, #16
 80093a8:	2300      	movs	r3, #0
 80093aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ac:	f7fe fa50 	bl	8007850 <xQueueGenericSend>
 80093b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80093b2:	e012      	b.n	80093da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093b4:	4b0b      	ldr	r3, [pc, #44]	@ (80093e4 <xTimerGenericCommand+0x98>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	f107 0110 	add.w	r1, r7, #16
 80093bc:	2300      	movs	r3, #0
 80093be:	2200      	movs	r2, #0
 80093c0:	f7fe fa46 	bl	8007850 <xQueueGenericSend>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80093c6:	e008      	b.n	80093da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093c8:	4b06      	ldr	r3, [pc, #24]	@ (80093e4 <xTimerGenericCommand+0x98>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	f107 0110 	add.w	r1, r7, #16
 80093d0:	2300      	movs	r3, #0
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	f7fe fb3e 	bl	8007a54 <xQueueGenericSendFromISR>
 80093d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3728      	adds	r7, #40	@ 0x28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20000d94 	.word	0x20000d94

080093e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f2:	4b23      	ldr	r3, [pc, #140]	@ (8009480 <prvProcessExpiredTimer+0x98>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	3304      	adds	r3, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f7fd fffd 	bl	8007400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d023      	beq.n	800945c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	699a      	ldr	r2, [r3, #24]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	18d1      	adds	r1, r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	6978      	ldr	r0, [r7, #20]
 8009422:	f000 f8d5 	bl	80095d0 <prvInsertTimerInActiveList>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d020      	beq.n	800946e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800942c:	2300      	movs	r3, #0
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	2300      	movs	r3, #0
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	2100      	movs	r1, #0
 8009436:	6978      	ldr	r0, [r7, #20]
 8009438:	f7ff ff88 	bl	800934c <xTimerGenericCommand>
 800943c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d114      	bne.n	800946e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	60fb      	str	r3, [r7, #12]
}
 8009456:	bf00      	nop
 8009458:	bf00      	nop
 800945a:	e7fd      	b.n	8009458 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	b2da      	uxtb	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	6978      	ldr	r0, [r7, #20]
 8009474:	4798      	blx	r3
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000d8c 	.word	0x20000d8c

08009484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f859 	bl	8009548 <prvGetNextExpireTime>
 8009496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4619      	mov	r1, r3
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f805 	bl	80094ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094a2:	f000 f8d7 	bl	8009654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a6:	bf00      	nop
 80094a8:	e7f0      	b.n	800948c <prvTimerTask+0x8>
	...

080094ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094b6:	f7ff f927 	bl	8008708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ba:	f107 0308 	add.w	r3, r7, #8
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f866 	bl	8009590 <prvSampleTimeNow>
 80094c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d130      	bne.n	800952e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <prvProcessTimerOrBlockTask+0x3c>
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d806      	bhi.n	80094e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094da:	f7ff f923 	bl	8008724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094de:	68f9      	ldr	r1, [r7, #12]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff ff81 	bl	80093e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094e6:	e024      	b.n	8009532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ee:	4b13      	ldr	r3, [pc, #76]	@ (800953c <prvProcessTimerOrBlockTask+0x90>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <prvProcessTimerOrBlockTask+0x50>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <prvProcessTimerOrBlockTask+0x52>
 80094fc:	2300      	movs	r3, #0
 80094fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009500:	4b0f      	ldr	r3, [pc, #60]	@ (8009540 <prvProcessTimerOrBlockTask+0x94>)
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4619      	mov	r1, r3
 800950e:	f7fe fe83 	bl	8008218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009512:	f7ff f907 	bl	8008724 <xTaskResumeAll>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800951c:	4b09      	ldr	r3, [pc, #36]	@ (8009544 <prvProcessTimerOrBlockTask+0x98>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
}
 800952c:	e001      	b.n	8009532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800952e:	f7ff f8f9 	bl	8008724 <xTaskResumeAll>
}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000d90 	.word	0x20000d90
 8009540:	20000d94 	.word	0x20000d94
 8009544:	e000ed04 	.word	0xe000ed04

08009548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009550:	4b0e      	ldr	r3, [pc, #56]	@ (800958c <prvGetNextExpireTime+0x44>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <prvGetNextExpireTime+0x16>
 800955a:	2201      	movs	r2, #1
 800955c:	e000      	b.n	8009560 <prvGetNextExpireTime+0x18>
 800955e:	2200      	movs	r2, #0
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d105      	bne.n	8009578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800956c:	4b07      	ldr	r3, [pc, #28]	@ (800958c <prvGetNextExpireTime+0x44>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e001      	b.n	800957c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800957c:	68fb      	ldr	r3, [r7, #12]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	20000d8c 	.word	0x20000d8c

08009590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009598:	f7ff f962 	bl	8008860 <xTaskGetTickCount>
 800959c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800959e:	4b0b      	ldr	r3, [pc, #44]	@ (80095cc <prvSampleTimeNow+0x3c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d205      	bcs.n	80095b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095a8:	f000 f93a 	bl	8009820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e002      	b.n	80095ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ba:	4a04      	ldr	r2, [pc, #16]	@ (80095cc <prvSampleTimeNow+0x3c>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095c0:	68fb      	ldr	r3, [r7, #12]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000d9c 	.word	0x20000d9c

080095d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d812      	bhi.n	800961c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	429a      	cmp	r2, r3
 8009602:	d302      	bcc.n	800960a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009604:	2301      	movs	r3, #1
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	e01b      	b.n	8009642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800960a:	4b10      	ldr	r3, [pc, #64]	@ (800964c <prvInsertTimerInActiveList+0x7c>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3304      	adds	r3, #4
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f7fd feba 	bl	800738e <vListInsert>
 800961a:	e012      	b.n	8009642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d206      	bcs.n	8009632 <prvInsertTimerInActiveList+0x62>
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d302      	bcc.n	8009632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e007      	b.n	8009642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009632:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <prvInsertTimerInActiveList+0x80>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fd fea6 	bl	800738e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009642:	697b      	ldr	r3, [r7, #20]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20000d90 	.word	0x20000d90
 8009650:	20000d8c 	.word	0x20000d8c

08009654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	@ 0x38
 8009658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800965a:	e0ce      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	da19      	bge.n	8009696 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009662:	1d3b      	adds	r3, r7, #4
 8009664:	3304      	adds	r3, #4
 8009666:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	61fb      	str	r3, [r7, #28]
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	e7fd      	b.n	8009682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968c:	6850      	ldr	r0, [r2, #4]
 800968e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009690:	6892      	ldr	r2, [r2, #8]
 8009692:	4611      	mov	r1, r2
 8009694:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f2c0 80ae 	blt.w	80097fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ac:	3304      	adds	r3, #4
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fd fea6 	bl	8007400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096b4:	463b      	mov	r3, r7
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff ff6a 	bl	8009590 <prvSampleTimeNow>
 80096bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	f200 8097 	bhi.w	80097f4 <prvProcessReceivedCommands+0x1a0>
 80096c6:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <prvProcessReceivedCommands+0x78>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096f5 	.word	0x080096f5
 80096d4:	080096f5 	.word	0x080096f5
 80096d8:	0800976b 	.word	0x0800976b
 80096dc:	0800977f 	.word	0x0800977f
 80096e0:	080097cb 	.word	0x080097cb
 80096e4:	080096f5 	.word	0x080096f5
 80096e8:	080096f5 	.word	0x080096f5
 80096ec:	0800976b 	.word	0x0800976b
 80096f0:	0800977f 	.word	0x0800977f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	18d1      	adds	r1, r2, r3
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009714:	f7ff ff5c 	bl	80095d0 <prvInsertTimerInActiveList>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d06c      	beq.n	80097f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d061      	beq.n	80097f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	441a      	add	r2, r3
 800973c:	2300      	movs	r3, #0
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	2100      	movs	r1, #0
 8009744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009746:	f7ff fe01 	bl	800934c <xTimerGenericCommand>
 800974a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d152      	bne.n	80097f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	61bb      	str	r3, [r7, #24]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800976a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800977c:	e03d      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	b2da      	uxtb	r2, r3
 800978a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10b      	bne.n	80097b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	617b      	str	r3, [r7, #20]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	699a      	ldr	r2, [r3, #24]
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	18d1      	adds	r1, r2, r3
 80097be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c4:	f7ff ff04 	bl	80095d0 <prvInsertTimerInActiveList>
					break;
 80097c8:	e017      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d103      	bne.n	80097e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80097d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097da:	f000 fbe5 	bl	8009fa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097de:	e00c      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e6:	f023 0301 	bic.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80097f2:	e002      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80097f4:	bf00      	nop
 80097f6:	e000      	b.n	80097fa <prvProcessReceivedCommands+0x1a6>
					break;
 80097f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097fa:	4b08      	ldr	r3, [pc, #32]	@ (800981c <prvProcessReceivedCommands+0x1c8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	1d39      	adds	r1, r7, #4
 8009800:	2200      	movs	r2, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe f9c4 	bl	8007b90 <xQueueReceive>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f af26 	bne.w	800965c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	3730      	adds	r7, #48	@ 0x30
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000d94 	.word	0x20000d94

08009820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009826:	e049      	b.n	80098bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009828:	4b2e      	ldr	r3, [pc, #184]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009832:	4b2c      	ldr	r3, [pc, #176]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fd fddd 	bl	8007400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d02f      	beq.n	80098bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4413      	add	r3, r2
 8009864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	429a      	cmp	r2, r3
 800986c:	d90e      	bls.n	800988c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800987a:	4b1a      	ldr	r3, [pc, #104]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3304      	adds	r3, #4
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7fd fd82 	bl	800738e <vListInsert>
 800988a:	e017      	b.n	80098bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800988c:	2300      	movs	r3, #0
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	2300      	movs	r3, #0
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	2100      	movs	r1, #0
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff fd58 	bl	800934c <xTimerGenericCommand>
 800989c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	603b      	str	r3, [r7, #0]
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098bc:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1b0      	bne.n	8009828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098c6:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <prvSwitchTimerLists+0xc8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a04      	ldr	r2, [pc, #16]	@ (80098e4 <prvSwitchTimerLists+0xc4>)
 80098d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098d4:	4a04      	ldr	r2, [pc, #16]	@ (80098e8 <prvSwitchTimerLists+0xc8>)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6013      	str	r3, [r2, #0]
}
 80098da:	bf00      	nop
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000d8c 	.word	0x20000d8c
 80098e8:	20000d90 	.word	0x20000d90

080098ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098f2:	f000 f969 	bl	8009bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098f6:	4b15      	ldr	r3, [pc, #84]	@ (800994c <prvCheckForValidListAndQueue+0x60>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d120      	bne.n	8009940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098fe:	4814      	ldr	r0, [pc, #80]	@ (8009950 <prvCheckForValidListAndQueue+0x64>)
 8009900:	f7fd fcf4 	bl	80072ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009904:	4813      	ldr	r0, [pc, #76]	@ (8009954 <prvCheckForValidListAndQueue+0x68>)
 8009906:	f7fd fcf1 	bl	80072ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800990a:	4b13      	ldr	r3, [pc, #76]	@ (8009958 <prvCheckForValidListAndQueue+0x6c>)
 800990c:	4a10      	ldr	r2, [pc, #64]	@ (8009950 <prvCheckForValidListAndQueue+0x64>)
 800990e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009910:	4b12      	ldr	r3, [pc, #72]	@ (800995c <prvCheckForValidListAndQueue+0x70>)
 8009912:	4a10      	ldr	r2, [pc, #64]	@ (8009954 <prvCheckForValidListAndQueue+0x68>)
 8009914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009916:	2300      	movs	r3, #0
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4b11      	ldr	r3, [pc, #68]	@ (8009960 <prvCheckForValidListAndQueue+0x74>)
 800991c:	4a11      	ldr	r2, [pc, #68]	@ (8009964 <prvCheckForValidListAndQueue+0x78>)
 800991e:	2110      	movs	r1, #16
 8009920:	200a      	movs	r0, #10
 8009922:	f7fd fe01 	bl	8007528 <xQueueGenericCreateStatic>
 8009926:	4603      	mov	r3, r0
 8009928:	4a08      	ldr	r2, [pc, #32]	@ (800994c <prvCheckForValidListAndQueue+0x60>)
 800992a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800992c:	4b07      	ldr	r3, [pc, #28]	@ (800994c <prvCheckForValidListAndQueue+0x60>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <prvCheckForValidListAndQueue+0x60>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	490b      	ldr	r1, [pc, #44]	@ (8009968 <prvCheckForValidListAndQueue+0x7c>)
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fc42 	bl	80081c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009940:	f000 f974 	bl	8009c2c <vPortExitCritical>
}
 8009944:	bf00      	nop
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000d94 	.word	0x20000d94
 8009950:	20000d64 	.word	0x20000d64
 8009954:	20000d78 	.word	0x20000d78
 8009958:	20000d8c 	.word	0x20000d8c
 800995c:	20000d90 	.word	0x20000d90
 8009960:	20000e40 	.word	0x20000e40
 8009964:	20000da0 	.word	0x20000da0
 8009968:	0800a2f8 	.word	0x0800a2f8

0800996c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3b04      	subs	r3, #4
 800997c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b04      	subs	r3, #4
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 0201 	bic.w	r2, r3, #1
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3b04      	subs	r3, #4
 800999a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800999c:	4a0c      	ldr	r2, [pc, #48]	@ (80099d0 <pxPortInitialiseStack+0x64>)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3b14      	subs	r3, #20
 80099a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3b04      	subs	r3, #4
 80099b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f06f 0202 	mvn.w	r2, #2
 80099ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3b20      	subs	r3, #32
 80099c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099c2:	68fb      	ldr	r3, [r7, #12]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	080099d5 	.word	0x080099d5

080099d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099de:	4b13      	ldr	r3, [pc, #76]	@ (8009a2c <prvTaskExitError+0x58>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e6:	d00b      	beq.n	8009a00 <prvTaskExitError+0x2c>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	60fb      	str	r3, [r7, #12]
}
 80099fa:	bf00      	nop
 80099fc:	bf00      	nop
 80099fe:	e7fd      	b.n	80099fc <prvTaskExitError+0x28>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60bb      	str	r3, [r7, #8]
}
 8009a12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a14:	bf00      	nop
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0fc      	beq.n	8009a16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	2000000c 	.word	0x2000000c

08009a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a30:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <pxCurrentTCBConst2>)
 8009a32:	6819      	ldr	r1, [r3, #0]
 8009a34:	6808      	ldr	r0, [r1, #0]
 8009a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	f380 8809 	msr	PSP, r0
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f380 8811 	msr	BASEPRI, r0
 8009a4a:	4770      	bx	lr
 8009a4c:	f3af 8000 	nop.w

08009a50 <pxCurrentTCBConst2>:
 8009a50:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop

08009a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a58:	4808      	ldr	r0, [pc, #32]	@ (8009a7c <prvPortStartFirstTask+0x24>)
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	6800      	ldr	r0, [r0, #0]
 8009a5e:	f380 8808 	msr	MSP, r0
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8814 	msr	CONTROL, r0
 8009a6a:	b662      	cpsie	i
 8009a6c:	b661      	cpsie	f
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	df00      	svc	0
 8009a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a7a:	bf00      	nop
 8009a7c:	e000ed08 	.word	0xe000ed08

08009a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a86:	4b47      	ldr	r3, [pc, #284]	@ (8009ba4 <xPortStartScheduler+0x124>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a47      	ldr	r2, [pc, #284]	@ (8009ba8 <xPortStartScheduler+0x128>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10b      	bne.n	8009aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	613b      	str	r3, [r7, #16]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ba4 <xPortStartScheduler+0x124>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a3f      	ldr	r2, [pc, #252]	@ (8009bac <xPortStartScheduler+0x12c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10b      	bne.n	8009aca <xPortStartScheduler+0x4a>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60fb      	str	r3, [r7, #12]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aca:	4b39      	ldr	r3, [pc, #228]	@ (8009bb0 <xPortStartScheduler+0x130>)
 8009acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	22ff      	movs	r2, #255	@ 0xff
 8009ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <xPortStartScheduler+0x134>)
 8009af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009af2:	4b31      	ldr	r3, [pc, #196]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009af4:	2207      	movs	r2, #7
 8009af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009af8:	e009      	b.n	8009b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009afa:	4b2f      	ldr	r3, [pc, #188]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	4a2d      	ldr	r2, [pc, #180]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b16:	2b80      	cmp	r3, #128	@ 0x80
 8009b18:	d0ef      	beq.n	8009afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b1a:	4b27      	ldr	r3, [pc, #156]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f1c3 0307 	rsb	r3, r3, #7
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d00b      	beq.n	8009b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b48:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b50:	4a19      	ldr	r2, [pc, #100]	@ (8009bb8 <xPortStartScheduler+0x138>)
 8009b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b5c:	4b17      	ldr	r3, [pc, #92]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a16      	ldr	r2, [pc, #88]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b68:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a13      	ldr	r2, [pc, #76]	@ (8009bbc <xPortStartScheduler+0x13c>)
 8009b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b74:	f000 f8da 	bl	8009d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <xPortStartScheduler+0x140>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b7e:	f000 f8f9 	bl	8009d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <xPortStartScheduler+0x144>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a0f      	ldr	r2, [pc, #60]	@ (8009bc4 <xPortStartScheduler+0x144>)
 8009b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b8e:	f7ff ff63 	bl	8009a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b92:	f7fe ff2f 	bl	80089f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b96:	f7ff ff1d 	bl	80099d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	e000ed00 	.word	0xe000ed00
 8009ba8:	410fc271 	.word	0x410fc271
 8009bac:	410fc270 	.word	0x410fc270
 8009bb0:	e000e400 	.word	0xe000e400
 8009bb4:	20000e90 	.word	0x20000e90
 8009bb8:	20000e94 	.word	0x20000e94
 8009bbc:	e000ed20 	.word	0xe000ed20
 8009bc0:	2000000c 	.word	0x2000000c
 8009bc4:	e000ef34 	.word	0xe000ef34

08009bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009be2:	4b10      	ldr	r3, [pc, #64]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	4a0e      	ldr	r2, [pc, #56]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bec:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <vPortEnterCritical+0x5c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d110      	bne.n	8009c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c28 <vPortEnterCritical+0x60>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	603b      	str	r3, [r7, #0]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <vPortEnterCritical+0x4a>
	}
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	2000000c 	.word	0x2000000c
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c32:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <vPortExitCritical+0x26>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	607b      	str	r3, [r7, #4]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c52:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	4a08      	ldr	r2, [pc, #32]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c5c:	4b07      	ldr	r3, [pc, #28]	@ (8009c7c <vPortExitCritical+0x50>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d105      	bne.n	8009c70 <vPortExitCritical+0x44>
 8009c64:	2300      	movs	r3, #0
 8009c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
}
 8009c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	2000000c 	.word	0x2000000c

08009c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c80:	f3ef 8009 	mrs	r0, PSP
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <pxCurrentTCBConst>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	f01e 0f10 	tst.w	lr, #16
 8009c90:	bf08      	it	eq
 8009c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	6010      	str	r0, [r2, #0]
 8009c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ca4:	f380 8811 	msr	BASEPRI, r0
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f7fe fea0 	bl	80089f4 <vTaskSwitchContext>
 8009cb4:	f04f 0000 	mov.w	r0, #0
 8009cb8:	f380 8811 	msr	BASEPRI, r0
 8009cbc:	bc09      	pop	{r0, r3}
 8009cbe:	6819      	ldr	r1, [r3, #0]
 8009cc0:	6808      	ldr	r0, [r1, #0]
 8009cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc6:	f01e 0f10 	tst.w	lr, #16
 8009cca:	bf08      	it	eq
 8009ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cd0:	f380 8809 	msr	PSP, r0
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w

08009ce0 <pxCurrentTCBConst>:
 8009ce0:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d02:	f7fe fdbd 	bl	8008880 <xTaskIncrementTick>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <xPortSysTickHandler+0x40>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	2300      	movs	r3, #0
 8009d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f383 8811 	msr	BASEPRI, r3
}
 8009d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d36:	4b0b      	ldr	r3, [pc, #44]	@ (8009d64 <vPortSetupTimerInterrupt+0x38>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d68 <vPortSetupTimerInterrupt+0x3c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	@ (8009d6c <vPortSetupTimerInterrupt+0x40>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	4a09      	ldr	r2, [pc, #36]	@ (8009d70 <vPortSetupTimerInterrupt+0x44>)
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4e:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d50:	2207      	movs	r2, #7
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	e000e010 	.word	0xe000e010
 8009d64:	e000e018 	.word	0xe000e018
 8009d68:	20000000 	.word	0x20000000
 8009d6c:	10624dd3 	.word	0x10624dd3
 8009d70:	e000e014 	.word	0xe000e014

08009d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d84 <vPortEnableVFP+0x10>
 8009d78:	6801      	ldr	r1, [r0, #0]
 8009d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d7e:	6001      	str	r1, [r0, #0]
 8009d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d82:	bf00      	nop
 8009d84:	e000ed88 	.word	0xe000ed88

08009d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d8e:	f3ef 8305 	mrs	r3, IPSR
 8009d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d915      	bls.n	8009dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d9a:	4a18      	ldr	r2, [pc, #96]	@ (8009dfc <vPortValidateInterruptPriority+0x74>)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009da4:	4b16      	ldr	r3, [pc, #88]	@ (8009e00 <vPortValidateInterruptPriority+0x78>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	7afa      	ldrb	r2, [r7, #11]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d20b      	bcs.n	8009dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e04 <vPortValidateInterruptPriority+0x7c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dce:	4b0e      	ldr	r3, [pc, #56]	@ (8009e08 <vPortValidateInterruptPriority+0x80>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d90b      	bls.n	8009dee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	603b      	str	r3, [r7, #0]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <vPortValidateInterruptPriority+0x62>
	}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	e000e3f0 	.word	0xe000e3f0
 8009e00:	20000e90 	.word	0x20000e90
 8009e04:	e000ed0c 	.word	0xe000ed0c
 8009e08:	20000e94 	.word	0x20000e94

08009e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	@ 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e18:	f7fe fc76 	bl	8008708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8009f90 <pvPortMalloc+0x184>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e24:	f000 f924 	bl	800a070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e28:	4b5a      	ldr	r3, [pc, #360]	@ (8009f94 <pvPortMalloc+0x188>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 8095 	bne.w	8009f60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01e      	beq.n	8009e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e3c:	2208      	movs	r2, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d015      	beq.n	8009e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	3308      	adds	r3, #8
 8009e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <pvPortMalloc+0x6e>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	617b      	str	r3, [r7, #20]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d06f      	beq.n	8009f60 <pvPortMalloc+0x154>
 8009e80:	4b45      	ldr	r3, [pc, #276]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d86a      	bhi.n	8009f60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e8a:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <pvPortMalloc+0x190>)
 8009e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e8e:	4b43      	ldr	r3, [pc, #268]	@ (8009f9c <pvPortMalloc+0x190>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e94:	e004      	b.n	8009ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d903      	bls.n	8009eb2 <pvPortMalloc+0xa6>
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f1      	bne.n	8009e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009eb2:	4b37      	ldr	r3, [pc, #220]	@ (8009f90 <pvPortMalloc+0x184>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d051      	beq.n	8009f60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	4413      	add	r3, r2
 8009ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	1ad2      	subs	r2, r2, r3
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d920      	bls.n	8009f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f003 0307 	and.w	r3, r3, #7
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <pvPortMalloc+0xfc>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f000 f90a 	bl	800a134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f20:	4b1d      	ldr	r3, [pc, #116]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa0 <pvPortMalloc+0x194>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d203      	bcs.n	8009f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f3a:	4b17      	ldr	r3, [pc, #92]	@ (8009f98 <pvPortMalloc+0x18c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a18      	ldr	r2, [pc, #96]	@ (8009fa0 <pvPortMalloc+0x194>)
 8009f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <pvPortMalloc+0x188>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f56:	4b13      	ldr	r3, [pc, #76]	@ (8009fa4 <pvPortMalloc+0x198>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <pvPortMalloc+0x198>)
 8009f5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f60:	f7fe fbe0 	bl	8008724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00b      	beq.n	8009f86 <pvPortMalloc+0x17a>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	60fb      	str	r3, [r7, #12]
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	e7fd      	b.n	8009f82 <pvPortMalloc+0x176>
	return pvReturn;
 8009f86:	69fb      	ldr	r3, [r7, #28]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3728      	adds	r7, #40	@ 0x28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20001a58 	.word	0x20001a58
 8009f94:	20001a6c 	.word	0x20001a6c
 8009f98:	20001a5c 	.word	0x20001a5c
 8009f9c:	20001a50 	.word	0x20001a50
 8009fa0:	20001a60 	.word	0x20001a60
 8009fa4:	20001a64 	.word	0x20001a64

08009fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d04f      	beq.n	800a05a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fba:	2308      	movs	r3, #8
 8009fbc:	425b      	negs	r3, r3
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b25      	ldr	r3, [pc, #148]	@ (800a064 <vPortFree+0xbc>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <vPortFree+0x46>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60fb      	str	r3, [r7, #12]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <vPortFree+0x66>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60bb      	str	r3, [r7, #8]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <vPortFree+0xbc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4013      	ands	r3, r2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01e      	beq.n	800a05a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11a      	bne.n	800a05a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	4b0e      	ldr	r3, [pc, #56]	@ (800a064 <vPortFree+0xbc>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	43db      	mvns	r3, r3
 800a02e:	401a      	ands	r2, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a034:	f7fe fb68 	bl	8008708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4b0a      	ldr	r3, [pc, #40]	@ (800a068 <vPortFree+0xc0>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4413      	add	r3, r2
 800a042:	4a09      	ldr	r2, [pc, #36]	@ (800a068 <vPortFree+0xc0>)
 800a044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a046:	6938      	ldr	r0, [r7, #16]
 800a048:	f000 f874 	bl	800a134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a04c:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <vPortFree+0xc4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a06      	ldr	r2, [pc, #24]	@ (800a06c <vPortFree+0xc4>)
 800a054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a056:	f7fe fb65 	bl	8008724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20001a6c 	.word	0x20001a6c
 800a068:	20001a5c 	.word	0x20001a5c
 800a06c:	20001a68 	.word	0x20001a68

0800a070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a076:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a07c:	4b27      	ldr	r3, [pc, #156]	@ (800a11c <prvHeapInit+0xac>)
 800a07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00c      	beq.n	800a0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3307      	adds	r3, #7
 800a08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0307 	bic.w	r3, r3, #7
 800a096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	4a1f      	ldr	r2, [pc, #124]	@ (800a11c <prvHeapInit+0xac>)
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a120 <prvHeapInit+0xb0>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a120 <prvHeapInit+0xb0>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0bc:	2208      	movs	r2, #8
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0307 	bic.w	r3, r3, #7
 800a0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a15      	ldr	r2, [pc, #84]	@ (800a124 <prvHeapInit+0xb4>)
 800a0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0d2:	4b14      	ldr	r3, [pc, #80]	@ (800a124 <prvHeapInit+0xb4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0da:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <prvHeapInit+0xb4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a124 <prvHeapInit+0xb4>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a128 <prvHeapInit+0xb8>)
 800a0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4a09      	ldr	r2, [pc, #36]	@ (800a12c <prvHeapInit+0xbc>)
 800a106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a108:	4b09      	ldr	r3, [pc, #36]	@ (800a130 <prvHeapInit+0xc0>)
 800a10a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a10e:	601a      	str	r2, [r3, #0]
}
 800a110:	bf00      	nop
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20000e98 	.word	0x20000e98
 800a120:	20001a50 	.word	0x20001a50
 800a124:	20001a58 	.word	0x20001a58
 800a128:	20001a60 	.word	0x20001a60
 800a12c:	20001a5c 	.word	0x20001a5c
 800a130:	20001a6c 	.word	0x20001a6c

0800a134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a13c:	4b28      	ldr	r3, [pc, #160]	@ (800a1e0 <prvInsertBlockIntoFreeList+0xac>)
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e002      	b.n	800a148 <prvInsertBlockIntoFreeList+0x14>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d8f7      	bhi.n	800a142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	4413      	add	r3, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d108      	bne.n	800a176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	441a      	add	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	441a      	add	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d118      	bne.n	800a1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b15      	ldr	r3, [pc, #84]	@ (800a1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d00d      	beq.n	800a1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	441a      	add	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e008      	b.n	800a1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	e003      	b.n	800a1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d002      	beq.n	800a1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20001a50 	.word	0x20001a50
 800a1e4:	20001a58 	.word	0x20001a58

0800a1e8 <memset>:
 800a1e8:	4402      	add	r2, r0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d100      	bne.n	800a1f2 <memset+0xa>
 800a1f0:	4770      	bx	lr
 800a1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f6:	e7f9      	b.n	800a1ec <memset+0x4>

0800a1f8 <__libc_init_array>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a230 <__libc_init_array+0x38>)
 800a1fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a234 <__libc_init_array+0x3c>)
 800a1fe:	1b64      	subs	r4, r4, r5
 800a200:	10a4      	asrs	r4, r4, #2
 800a202:	2600      	movs	r6, #0
 800a204:	42a6      	cmp	r6, r4
 800a206:	d109      	bne.n	800a21c <__libc_init_array+0x24>
 800a208:	4d0b      	ldr	r5, [pc, #44]	@ (800a238 <__libc_init_array+0x40>)
 800a20a:	4c0c      	ldr	r4, [pc, #48]	@ (800a23c <__libc_init_array+0x44>)
 800a20c:	f000 f826 	bl	800a25c <_init>
 800a210:	1b64      	subs	r4, r4, r5
 800a212:	10a4      	asrs	r4, r4, #2
 800a214:	2600      	movs	r6, #0
 800a216:	42a6      	cmp	r6, r4
 800a218:	d105      	bne.n	800a226 <__libc_init_array+0x2e>
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a220:	4798      	blx	r3
 800a222:	3601      	adds	r6, #1
 800a224:	e7ee      	b.n	800a204 <__libc_init_array+0xc>
 800a226:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22a:	4798      	blx	r3
 800a22c:	3601      	adds	r6, #1
 800a22e:	e7f2      	b.n	800a216 <__libc_init_array+0x1e>
 800a230:	0800a420 	.word	0x0800a420
 800a234:	0800a420 	.word	0x0800a420
 800a238:	0800a420 	.word	0x0800a420
 800a23c:	0800a424 	.word	0x0800a424

0800a240 <memcpy>:
 800a240:	440a      	add	r2, r1
 800a242:	4291      	cmp	r1, r2
 800a244:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a248:	d100      	bne.n	800a24c <memcpy+0xc>
 800a24a:	4770      	bx	lr
 800a24c:	b510      	push	{r4, lr}
 800a24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a252:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a256:	4291      	cmp	r1, r2
 800a258:	d1f9      	bne.n	800a24e <memcpy+0xe>
 800a25a:	bd10      	pop	{r4, pc}

0800a25c <_init>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr

0800a268 <_fini>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr
