
RTOS_SimpleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012334  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c68  080124c8  080124c8  000134c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026130  08026130  000281dc  2**0
                  CONTENTS
  4 .ARM          00000008  08026130  08026130  00027130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026138  08026138  000281dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026138  08026138  00027138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802613c  0802613c  0002713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08026140  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009214  200001dc  0802631c  000281dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200093f0  0802631c  000283f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000281dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a66c  00000000  00000000  0002820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c8e  00000000  00000000  00052878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c8  00000000  00000000  00058508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a4d  00000000  00000000  0005a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e67c  00000000  00000000  0005c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029b5a  00000000  00000000  0008a899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001182d3  00000000  00000000  000b43f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  001cc6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a294  00000000  00000000  001cc77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001d6a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  001d6a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001d94f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080124ac 	.word	0x080124ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080124ac 	.word	0x080124ac

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <GFX_SetFont+0x1c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200001f8 	.word	0x200001f8

08001058 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af02      	add	r7, sp, #8
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	460b      	mov	r3, r1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	4613      	mov	r3, r2
 800106c:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b7e      	cmp	r3, #126	@ 0x7e
 8001072:	f200 80a3 	bhi.w	80011bc <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
 800107a:	e096      	b.n	80011aa <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800107c:	4b51      	ldr	r3, [pc, #324]	@ (80011c4 <GFX_DrawChar+0x16c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3b20      	subs	r3, #32
 8001084:	494f      	ldr	r1, [pc, #316]	@ (80011c4 <GFX_DrawChar+0x16c>)
 8001086:	6809      	ldr	r1, [r1, #0]
 8001088:	3101      	adds	r1, #1
 800108a:	7809      	ldrb	r1, [r1, #0]
 800108c:	fb03 f101 	mul.w	r1, r3, r1
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	440b      	add	r3, r1
 8001094:	3302      	adds	r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800109c:	2300      	movs	r3, #0
 800109e:	757b      	strb	r3, [r7, #21]
 80010a0:	e078      	b.n	8001194 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80010a2:	7dbb      	ldrb	r3, [r7, #22]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d032      	beq.n	8001112 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80010ac:	4b46      	ldr	r3, [pc, #280]	@ (80011c8 <GFX_DrawChar+0x170>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d113      	bne.n	80010dc <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b218      	sxth	r0, r3
 80010c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f000 f9d3 	bl	8001480 <SSD1306_DrawPixel>
 80010da:	e052      	b.n	8001182 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	4a3a      	ldr	r2, [pc, #232]	@ (80011c8 <GFX_DrawChar+0x170>)
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	fb03 f202 	mul.w	r2, r3, r2
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	18d0      	adds	r0, r2, r3
 80010ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ee:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <GFX_DrawChar+0x170>)
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	18d1      	adds	r1, r2, r3
 80010fa:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <GFX_DrawChar+0x170>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <GFX_DrawChar+0x170>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461c      	mov	r4, r3
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f000 f960 	bl	80013d0 <GFX_DrawFillRectangle>
 8001110:	e037      	b.n	8001182 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001116:	2b00      	cmp	r3, #0
 8001118:	d133      	bne.n	8001182 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800111a:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <GFX_DrawChar+0x170>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d114      	bne.n	800114c <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29a      	uxth	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4413      	add	r3, r2
 800112c:	b29b      	uxth	r3, r3
 800112e:	b218      	sxth	r0, r3
 8001130:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001134:	b29a      	uxth	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	b21b      	sxth	r3, r3
 8001140:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001144:	4619      	mov	r1, r3
 8001146:	f000 f99b 	bl	8001480 <SSD1306_DrawPixel>
 800114a:	e01a      	b.n	8001182 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <GFX_DrawChar+0x170>)
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	fb03 f202 	mul.w	r2, r3, r2
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800115e:	4a1a      	ldr	r2, [pc, #104]	@ (80011c8 <GFX_DrawChar+0x170>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	fb03 f202 	mul.w	r2, r3, r2
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	18d1      	adds	r1, r2, r3
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <GFX_DrawChar+0x170>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <GFX_DrawChar+0x170>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461c      	mov	r4, r3
 8001176:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4623      	mov	r3, r4
 800117e:	f000 f927 	bl	80013d0 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001182:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	3301      	adds	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	757b      	strb	r3, [r7, #21]
 800118e:	7dbb      	ldrb	r3, [r7, #22]
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	75bb      	strb	r3, [r7, #22]
 8001194:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <GFX_DrawChar+0x16c>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	4293      	cmp	r3, r2
 80011a0:	f6ff af7f 	blt.w	80010a2 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	3301      	adds	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <GFX_DrawChar+0x16c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	7dfa      	ldrb	r2, [r7, #23]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f4ff af61 	bcc.w	800107c <GFX_DrawChar+0x24>
 80011ba:	e000      	b.n	80011be <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80011bc:	bf00      	nop
            }
        }
    }
}
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000000 	.word	0x20000000

080011cc <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80011e4:	e03e      	b.n	8001264 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80011e6:	78f9      	ldrb	r1, [r7, #3]
 80011e8:	7cfa      	ldrb	r2, [r7, #19]
 80011ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	460b      	mov	r3, r1
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ff2f 	bl	8001058 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <GFX_DrawString+0xb0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <GFX_DrawString+0xb4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	fb02 f303 	mul.w	r3, r2, r3
 800120c:	3301      	adds	r3, #1
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d120      	bne.n	800125e <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800121c:	2300      	movs	r3, #0
 800121e:	74bb      	strb	r3, [r7, #18]
 8001220:	e012      	b.n	8001248 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	b29b      	uxth	r3, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	b218      	sxth	r0, r3
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	b29a      	uxth	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b29b      	uxth	r3, r3
 8001238:	b21b      	sxth	r3, r3
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	f000 f91f 	bl	8001480 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001242:	7cbb      	ldrb	r3, [r7, #18]
 8001244:	3301      	adds	r3, #1
 8001246:	74bb      	strb	r3, [r7, #18]
 8001248:	7cba      	ldrb	r2, [r7, #18]
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <GFX_DrawString+0xb0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <GFX_DrawString+0xb4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	429a      	cmp	r2, r3
 800125c:	dbe1      	blt.n	8001222 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ba      	bne.n	80011e6 <GFX_DrawString+0x1a>
	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001f8 	.word	0x200001f8
 8001280:	20000000 	.word	0x20000000

08001284 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800129c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1acb      	subs	r3, r1, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bfb8      	it	lt
 80012aa:	425b      	neglt	r3, r3
 80012ac:	429a      	cmp	r2, r3
 80012ae:	bfcc      	ite	gt
 80012b0:	2301      	movgt	r3, #1
 80012b2:	2300      	movle	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 80012b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dd0b      	ble.n	80012f8 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	bfb8      	it	lt
 8001310:	425b      	neglt	r3, r3
 8001312:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001314:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001318:	0fda      	lsrs	r2, r3, #31
 800131a:	4413      	add	r3, r2
 800131c:	105b      	asrs	r3, r3, #1
 800131e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	da02      	bge.n	800132e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800132c:	e030      	b.n	8001390 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800132e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001332:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001334:	e02c      	b.n	8001390 <GFX_WriteLine+0x10c>
	        if (steep) {
 8001336:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	b21b      	sxth	r3, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	b211      	sxth	r1, r2
 8001346:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f898 	bl	8001480 <SSD1306_DrawPixel>
 8001350:	e008      	b.n	8001364 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	b211      	sxth	r1, r2
 800135a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f88e 	bl	8001480 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001364:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001366:	8abb      	ldrh	r3, [r7, #20]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 800136e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001372:	2b00      	cmp	r3, #0
 8001374:	da09      	bge.n	800138a <GFX_WriteLine+0x106>
	            y_start += ystep;
 8001376:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001380:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	4413      	add	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	ddce      	ble.n	8001336 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3730      	adds	r7, #48	@ 0x30
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff ff5e 	bl	8001284 <GFX_WriteLine>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	460b      	mov	r3, r1
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e009      	b.n	8001400 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f7ff ffd4 	bl	80013a2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbef      	blt.n	80013ec <GFX_DrawFillRectangle+0x1c>
    }

}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <SSD1306_Command+0x30>)
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2301      	movs	r3, #1
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2200      	movs	r2, #0
 8001438:	2178      	movs	r1, #120	@ 0x78
 800143a:	f005 fb2f 	bl	8006a9c <HAL_I2C_Mem_Write>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001fc 	.word	0x200001fc

0800144c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af04      	add	r7, sp, #16
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <SSD1306_Data+0x30>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2240      	movs	r2, #64	@ 0x40
 800146e:	2178      	movs	r1, #120	@ 0x78
 8001470:	f005 fb14 	bl	8006a9c <HAL_I2C_Mem_Write>
#endif
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001fc 	.word	0x200001fc

08001480 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
 800148a:	460b      	mov	r3, r1
 800148c:	80bb      	strh	r3, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db79      	blt.n	800158e <SSD1306_DrawPixel+0x10e>
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	2b7f      	cmp	r3, #127	@ 0x7f
 80014a0:	dc75      	bgt.n	800158e <SSD1306_DrawPixel+0x10e>
 80014a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db71      	blt.n	800158e <SSD1306_DrawPixel+0x10e>
 80014aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80014b0:	dc6d      	bgt.n	800158e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d049      	beq.n	800154c <SSD1306_DrawPixel+0xcc>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	dc69      	bgt.n	8001590 <SSD1306_DrawPixel+0x110>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d022      	beq.n	8001506 <SSD1306_DrawPixel+0x86>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d165      	bne.n	8001590 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80014c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da00      	bge.n	80014d2 <SSD1306_DrawPixel+0x52>
 80014d0:	3307      	adds	r3, #7
 80014d2:	10db      	asrs	r3, r3, #3
 80014d4:	b218      	sxth	r0, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	01db      	lsls	r3, r3, #7
 80014da:	4413      	add	r3, r2
 80014dc:	4a2f      	ldr	r2, [pc, #188]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b259      	sxtb	r1, r3
 80014f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014f8:	4603      	mov	r3, r0
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4413      	add	r3, r2
 80014fe:	b2c9      	uxtb	r1, r1
 8001500:	4a26      	ldr	r2, [pc, #152]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 8001502:	54d1      	strb	r1, [r2, r3]
      break;
 8001504:	e044      	b.n	8001590 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da00      	bge.n	8001514 <SSD1306_DrawPixel+0x94>
 8001512:	3307      	adds	r3, #7
 8001514:	10db      	asrs	r3, r3, #3
 8001516:	b218      	sxth	r0, r3
 8001518:	4603      	mov	r3, r0
 800151a:	01db      	lsls	r3, r3, #7
 800151c:	4413      	add	r3, r2
 800151e:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	b25a      	sxtb	r2, r3
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	b25b      	sxtb	r3, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4013      	ands	r3, r2
 8001538:	b259      	sxtb	r1, r3
 800153a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	01db      	lsls	r3, r3, #7
 8001542:	4413      	add	r3, r2
 8001544:	b2c9      	uxtb	r1, r1
 8001546:	4a15      	ldr	r2, [pc, #84]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 8001548:	54d1      	strb	r1, [r2, r3]
      break;
 800154a:	e021      	b.n	8001590 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800154c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001550:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da00      	bge.n	800155a <SSD1306_DrawPixel+0xda>
 8001558:	3307      	adds	r3, #7
 800155a:	10db      	asrs	r3, r3, #3
 800155c:	b218      	sxth	r0, r3
 800155e:	4603      	mov	r3, r0
 8001560:	01db      	lsls	r3, r3, #7
 8001562:	4413      	add	r3, r2
 8001564:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	b25a      	sxtb	r2, r3
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	b25b      	sxtb	r3, r3
 8001578:	4053      	eors	r3, r2
 800157a:	b259      	sxtb	r1, r3
 800157c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001580:	4603      	mov	r3, r0
 8001582:	01db      	lsls	r3, r3, #7
 8001584:	4413      	add	r3, r2
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <SSD1306_DrawPixel+0x11c>)
 800158a:	54d1      	strb	r1, [r2, r3]
      break;
 800158c:	e000      	b.n	8001590 <SSD1306_DrawPixel+0x110>
	  return;
 800158e:	bf00      	nop
    }
}
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000200 	.word	0x20000200

080015a0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <SSD1306_Clear+0x22>
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10d      	bne.n	80015d0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80015b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b8:	21ff      	movs	r1, #255	@ 0xff
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <SSD1306_Clear+0x38>)
 80015bc:	f00e feb3 	bl	8010326 <memset>
		break;
 80015c0:	e006      	b.n	80015d0 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80015c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c6:	2100      	movs	r1, #0
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <SSD1306_Clear+0x38>)
 80015ca:	f00e feac 	bl	8010326 <memset>
		break;
 80015ce:	bf00      	nop
	}
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000200 	.word	0x20000200

080015dc <SSD1306_Display>:

void SSD1306_Display(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	SSD1306_Command(0); // Column start address
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
#else
	for(uint8_t i = 0; i < 8; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	e02d      	b.n	8001644 <SSD1306_Display+0x68>
	{
		osMutexAcquire(MutexI2C1Handle, osWaitForever);
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <SSD1306_Display+0x78>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015f0:	4618      	mov	r0, r3
 80015f2:	f009 f999 	bl	800a928 <osMutexAcquire>
		SSD1306_Command(SSD1306_PAGEADDR);
 80015f6:	2022      	movs	r0, #34	@ 0x22
 80015f8:	f7ff ff0e 	bl	8001418 <SSD1306_Command>
		SSD1306_Command(i);                      // Page start address
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff0a 	bl	8001418 <SSD1306_Command>
		SSD1306_Command(i);                   // Page end (not really, but works here)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff06 	bl	8001418 <SSD1306_Command>
		SSD1306_Command(SSD1306_COLUMNADDR);
 800160c:	2021      	movs	r0, #33	@ 0x21
 800160e:	f7ff ff03 	bl	8001418 <SSD1306_Command>
		SSD1306_Command(0); // Column start address
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff00 	bl	8001418 <SSD1306_Command>
		SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001618:	207f      	movs	r0, #127	@ 0x7f
 800161a:	f7ff fefd 	bl	8001418 <SSD1306_Command>

		SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	01db      	lsls	r3, r3, #7
 8001622:	461a      	mov	r2, r3
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <SSD1306_Display+0x7c>)
 8001626:	4413      	add	r3, r2
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff0e 	bl	800144c <SSD1306_Data>
		osMutexRelease(MutexI2C1Handle);
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <SSD1306_Display+0x78>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f009 f9c2 	bl	800a9be <osMutexRelease>
		osThreadYield();
 800163a:	f008 fef9 	bl	800a430 <osThreadYield>
	for(uint8_t i = 0; i < 8; i++)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3301      	adds	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b07      	cmp	r3, #7
 8001648:	d9ce      	bls.n	80015e8 <SSD1306_Display+0xc>
	}
#endif
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200006cc 	.word	0x200006cc
 8001658:	20000200 	.word	0x20000200

0800165c <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001664:	4a28      	ldr	r2, [pc, #160]	@ (8001708 <SSD1306_Init+0xac>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800166a:	20ae      	movs	r0, #174	@ 0xae
 800166c:	f7ff fed4 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001670:	20d5      	movs	r0, #213	@ 0xd5
 8001672:	f7ff fed1 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001676:	2080      	movs	r0, #128	@ 0x80
 8001678:	f7ff fece 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800167c:	203f      	movs	r0, #63	@ 0x3f
 800167e:	f7ff fecb 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001682:	20d3      	movs	r0, #211	@ 0xd3
 8001684:	f7ff fec8 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fec5 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800168e:	2040      	movs	r0, #64	@ 0x40
 8001690:	f7ff fec2 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001694:	208d      	movs	r0, #141	@ 0x8d
 8001696:	f7ff febf 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x14);
 800169a:	2014      	movs	r0, #20
 800169c:	f7ff febc 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80016a0:	2020      	movs	r0, #32
 80016a2:	f7ff feb9 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff feb6 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80016ac:	20a1      	movs	r0, #161	@ 0xa1
 80016ae:	f7ff feb3 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80016b2:	20c8      	movs	r0, #200	@ 0xc8
 80016b4:	f7ff feb0 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80016b8:	20da      	movs	r0, #218	@ 0xda
 80016ba:	f7ff fead 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x12);
 80016be:	2012      	movs	r0, #18
 80016c0:	f7ff feaa 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80016c4:	2081      	movs	r0, #129	@ 0x81
 80016c6:	f7ff fea7 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80016ca:	20ff      	movs	r0, #255	@ 0xff
 80016cc:	f7ff fea4 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80016d0:	20d9      	movs	r0, #217	@ 0xd9
 80016d2:	f7ff fea1 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80016d6:	20f1      	movs	r0, #241	@ 0xf1
 80016d8:	f7ff fe9e 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80016dc:	20db      	movs	r0, #219	@ 0xdb
 80016de:	f7ff fe9b 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(0x40);
 80016e2:	2040      	movs	r0, #64	@ 0x40
 80016e4:	f7ff fe98 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80016e8:	20a4      	movs	r0, #164	@ 0xa4
 80016ea:	f7ff fe95 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80016ee:	20a6      	movs	r0, #166	@ 0xa6
 80016f0:	f7ff fe92 	bl	8001418 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80016f4:	202e      	movs	r0, #46	@ 0x2e
 80016f6:	f7ff fe8f 	bl	8001418 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80016fa:	20af      	movs	r0, #175	@ 0xaf
 80016fc:	f7ff fe8c 	bl	8001418 <SSD1306_Command>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200001fc 	.word	0x200001fc

0800170c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800172e:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001730:	4a30      	ldr	r2, [pc, #192]	@ (80017f4 <MX_ADC1_Init+0xe8>)
 8001732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001734:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173a:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800174e:	2204      	movs	r2, #4
 8001750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001752:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001754:	2200      	movs	r2, #0
 8001756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800175a:	2200      	movs	r2, #0
 800175c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001760:	2201      	movs	r2, #1
 8001762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800176e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001774:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800177c:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001792:	4817      	ldr	r0, [pc, #92]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 8001794:	f003 f9d8 	bl	8004b48 <HAL_ADC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800179e:	f001 f82b 	bl	80027f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 80017ae:	f004 fb73 	bl	8005e98 <HAL_ADCEx_MultiModeConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80017b8:	f001 f81e 	bl	80027f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <MX_ADC1_Init+0xec>)
 80017be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c0:	2306      	movs	r3, #6
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c8:	237f      	movs	r3, #127	@ 0x7f
 80017ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017cc:	2304      	movs	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_ADC1_Init+0xe4>)
 80017da:	f003 fdf9 	bl	80053d0 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80017e4:	f001 f808 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	@ 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000600 	.word	0x20000600
 80017f4:	50040000 	.word	0x50040000
 80017f8:	04300002 	.word	0x04300002

080017fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2288      	movs	r2, #136	@ 0x88
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00e fd82 	bl	8010326 <memset>
  if(adcHandle->Instance==ADC1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a40      	ldr	r2, [pc, #256]	@ (8001928 <HAL_ADC_MspInit+0x12c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d179      	bne.n	8001920 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800182c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001830:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001832:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001842:	2308      	movs	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f006 fd3b 	bl	80082d8 <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001868:	f000 ffc6 	bl	80027f8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <HAL_ADC_MspInit+0x130>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	4a2e      	ldr	r2, [pc, #184]	@ (800192c <HAL_ADC_MspInit+0x130>)
 8001872:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001878:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <HAL_ADC_MspInit+0x130>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_ADC_MspInit+0x130>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	4a28      	ldr	r2, [pc, #160]	@ (800192c <HAL_ADC_MspInit+0x130>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_ADC_MspInit+0x130>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189c:	2301      	movs	r3, #1
 800189e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018a2:	230b      	movs	r3, #11
 80018a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018b2:	4619      	mov	r1, r3
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <HAL_ADC_MspInit+0x134>)
 80018b6:	f004 fe79 	bl	80065ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <HAL_ADC_MspInit+0x13c>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018ea:	2220      	movs	r2, #32
 80018ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f4:	480f      	ldr	r0, [pc, #60]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 80018f6:	f004 fc61 	bl	80061bc <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001900:	f000 ff7a 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 8001908:	64da      	str	r2, [r3, #76]	@ 0x4c
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_ADC_MspInit+0x138>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2105      	movs	r1, #5
 8001914:	2012      	movs	r0, #18
 8001916:	f004 fc27 	bl	8006168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800191a:	2012      	movs	r0, #18
 800191c:	f004 fc40 	bl	80061a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001920:	bf00      	nop
 8001922:	37b0      	adds	r7, #176	@ 0xb0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	50040000 	.word	0x50040000
 800192c:	40021000 	.word	0x40021000
 8001930:	48000800 	.word	0x48000800
 8001934:	20000664 	.word	0x20000664
 8001938:	40020008 	.word	0x40020008

0800193c <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	791b      	ldrb	r3, [r3, #4]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b299      	uxth	r1, r3
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	b29a      	uxth	r2, r3
 8001958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	f107 030f 	add.w	r3, r7, #15
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2301      	movs	r3, #1
 800196a:	f005 f9ab 	bl	8006cc4 <HAL_I2C_Mem_Read>

	return Value;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
 8001984:	4613      	mov	r3, r2
 8001986:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	791b      	ldrb	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	b299      	uxth	r1, r3
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2301      	movs	r3, #1
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	1cbb      	adds	r3, r7, #2
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	f005 f878 	bl	8006a9c <HAL_I2C_Mem_Write>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	791b      	ldrb	r3, [r3, #4]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b299      	uxth	r1, r3
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2302      	movs	r3, #2
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	f005 f96f 	bl	8006cc4 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	b29b      	uxth	r3, r3
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b088      	sub	sp, #32
 8001a02:	af04      	add	r7, sp, #16
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b299      	uxth	r1, r3
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	2303      	movs	r3, #3
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f005 f94a 	bl	8006cc4 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001a30:	7b3b      	ldrb	r3, [r7, #12]
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	7bba      	ldrb	r2, [r7, #14]
 8001a3c:	4313      	orrs	r3, r2
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d901      	bls.n	8001a5c <BMP280_SetMode+0x16>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001a5c:	21f4      	movs	r1, #244	@ 0xf4
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff6c 	bl	800193c <Read8>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8001a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	461a      	mov	r2, r3
 8001a88:	21f4      	movs	r1, #244	@ 0xf4
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff74 	bl	8001978 <Write8>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d901      	bls.n	8001aae <BMP280_SetPressureOversampling+0x16>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001aae:	21f4      	movs	r1, #244	@ 0xf4
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff43 	bl	800193c <Read8>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f023 031c 	bic.w	r3, r3, #28
 8001ac0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	f003 031c 	and.w	r3, r3, #28
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	461a      	mov	r2, r3
 8001adc:	21f4      	movs	r1, #244	@ 0xf4
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ff4a 	bl	8001978 <Write8>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d901      	bls.n	8001b02 <BMP280_SetTemperatureOversampling+0x16>
 8001afe:	2305      	movs	r3, #5
 8001b00:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001b02:	21f4      	movs	r1, #244	@ 0xf4
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff19 	bl	800193c <Read8>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	015b      	lsls	r3, r3, #5
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	21f4      	movs	r1, #244	@ 0xf4
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff23 	bl	8001978 <Write8>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 8001b42:	21fa      	movs	r1, #250	@ 0xfa
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff5a 	bl	80019fe <Read24>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	111b      	asrs	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001b66:	21f7      	movs	r1, #247	@ 0xf7
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff48 	bl	80019fe <Read24>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	111b      	asrs	r3, r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffd4 	bl	8001b3a <BMP280_ReadTemperatureRaw>
 8001b92:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	10da      	asrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8b5b      	ldrh	r3, [r3, #26]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	12db      	asrs	r3, r3, #11
 8001bac:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	111b      	asrs	r3, r3, #4
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	8b52      	ldrh	r2, [r2, #26]
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	1112      	asrs	r2, r2, #4
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	8b49      	ldrh	r1, [r1, #26]
 8001bc0:	1a52      	subs	r2, r2, r1
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	139b      	asrs	r3, r3, #14
 8001bd4:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	441a      	add	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3380      	adds	r3, #128	@ 0x80
 8001bec:	121b      	asrs	r3, r3, #8
 8001bee:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f7fe fcf7 	bl	80005e4 <__aeabi_i2d>
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <BMP280_ReadTemperature+0x98>)
 8001bfc:	f7fe fe86 	bl	800090c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7ff f84e 	bl	8000ca8 <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	ee07 3a90 	vmov	s15, r3
}
 8001c12:	eeb0 0a67 	vmov.f32	s0, s15
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40590000 	.word	0x40590000

08001c20 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff ffa9 	bl	8001b84 <BMP280_ReadTemperature>
 8001c32:	eef0 7a40 	vmov.f32	s15, s0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	105b      	asrs	r3, r3, #1
 8001c42:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001c46:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	109b      	asrs	r3, r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	1092      	asrs	r2, r2, #2
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	12db      	asrs	r3, r3, #11
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	109a      	asrs	r2, r3, #2
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	109b      	asrs	r3, r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	1092      	asrs	r2, r2, #2
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	135b      	asrs	r3, r3, #13
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	10da      	asrs	r2, r3, #3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001caa:	4619      	mov	r1, r3
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	105b      	asrs	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	149b      	asrs	r3, r3, #18
 8001cb8:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	8b92      	ldrh	r2, [r2, #28]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	13db      	asrs	r3, r3, #15
 8001cca:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e054      	b.n	8001d80 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff ff41 	bl	8001b5e <BMP280_ReadPressureRaw>
 8001cdc:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	131b      	asrs	r3, r3, #12
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f640 4235 	movw	r2, #3125	@ 0xc35
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db06      	blt.n	8001d08 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005a      	lsls	r2, r3, #1
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e005      	b.n	8001d14 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	08d2      	lsrs	r2, r2, #3
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	0b5b      	lsrs	r3, r3, #13
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	131b      	asrs	r3, r3, #12
 8001d30:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	135b      	asrs	r3, r3, #13
 8001d44:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001d52:	4413      	add	r3, r2
 8001d54:	111a      	asrs	r2, r3, #4
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001d5c:	69f8      	ldr	r0, [r7, #28]
 8001d5e:	f7fe fc31 	bl	80005c4 <__aeabi_ui2d>
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <BMP280_ReadPressureAndTemperature+0x168>)
 8001d68:	f7fe fdd0 	bl	800090c <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe ff98 	bl	8000ca8 <__aeabi_d2f>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	601a      	str	r2, [r3, #0]

	return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40590000 	.word	0x40590000

08001d8c <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001da6:	21d0      	movs	r1, #208	@ 0xd0
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fdc7 	bl	800193c <Read8>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b58      	cmp	r3, #88	@ 0x58
 8001db6:	d001      	beq.n	8001dbc <BMP280_Init+0x30>
	{
		return 1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e06c      	b.n	8001e96 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001dbc:	2188      	movs	r1, #136	@ 0x88
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff fdf8 	bl	80019b4 <Read16>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001dcc:	218a      	movs	r1, #138	@ 0x8a
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fdf0 	bl	80019b4 <Read16>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001ddc:	218c      	movs	r1, #140	@ 0x8c
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fde8 	bl	80019b4 <Read16>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001dec:	218e      	movs	r1, #142	@ 0x8e
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fde0 	bl	80019b4 <Read16>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001dfc:	2190      	movs	r1, #144	@ 0x90
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fdd8 	bl	80019b4 <Read16>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001e0c:	2192      	movs	r1, #146	@ 0x92
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fdd0 	bl	80019b4 <Read16>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001e1c:	2194      	movs	r1, #148	@ 0x94
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff fdc8 	bl	80019b4 <Read16>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001e2c:	2196      	movs	r1, #150	@ 0x96
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fdc0 	bl	80019b4 <Read16>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001e3c:	2198      	movs	r1, #152	@ 0x98
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fdb8 	bl	80019b4 <Read16>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001e4c:	219a      	movs	r1, #154	@ 0x9a
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fdb0 	bl	80019b4 <Read16>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001e5c:	219c      	movs	r1, #156	@ 0x9c
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fda8 	bl	80019b4 <Read16>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001e6c:	219e      	movs	r1, #158	@ 0x9e
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fda0 	bl	80019b4 <Read16>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff fe34 	bl	8001aec <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001e84:	2105      	movs	r1, #5
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fe06 	bl	8001a98 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff fdd9 	bl	8001a46 <BMP280_SetMode>

	return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <MX_DMA_Init+0x38>)
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <MX_DMA_Init+0x38>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <MX_DMA_Init+0x38>)
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	200b      	movs	r0, #11
 8001ec4:	f004 f950 	bl	8006168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ec8:	200b      	movs	r0, #11
 8001eca:	f004 f969 	bl	80061a0 <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <_putchar>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void _putchar(char character)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <_putchar+0x38>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 fd1a 	bl	800a928 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001ef4:	1df9      	adds	r1, r7, #7
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	2201      	movs	r2, #1
 8001efc:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <_putchar+0x3c>)
 8001efe:	f007 fc03 	bl	8009708 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001f02:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <_putchar+0x38>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f008 fd59 	bl	800a9be <osMutexRelease>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200006c8 	.word	0x200006c8
 8001f18:	200007c8 	.word	0x200007c8

08001f1c <complexABS>:


float complexABS(float real, float compl) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f26:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8001f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f32:	edd7 7a00 	vldr	s15, [r7]
 8001f36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	f010 f941 	bl	80121c8 <sqrtf>
 8001f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001f7c:	482a      	ldr	r0, [pc, #168]	@ (8002028 <MX_FREERTOS_Init+0xb0>)
 8001f7e:	f008 fc4d 	bl	800a81c <osMutexNew>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a29      	ldr	r2, [pc, #164]	@ (800202c <MX_FREERTOS_Init+0xb4>)
 8001f86:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1 */
  MutexI2C1Handle = osMutexNew(&MutexI2C1_attributes);
 8001f88:	4829      	ldr	r0, [pc, #164]	@ (8002030 <MX_FREERTOS_Init+0xb8>)
 8001f8a:	f008 fc47 	bl	800a81c <osMutexNew>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a28      	ldr	r2, [pc, #160]	@ (8002034 <MX_FREERTOS_Init+0xbc>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpData */
  MutexBmpDataHandle = osMutexNew(&MutexBmpData_attributes);
 8001f94:	4828      	ldr	r0, [pc, #160]	@ (8002038 <MX_FREERTOS_Init+0xc0>)
 8001f96:	f008 fc41 	bl	800a81c <osMutexNew>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a27      	ldr	r2, [pc, #156]	@ (800203c <MX_FREERTOS_Init+0xc4>)
 8001f9e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreBmpQueue */
  SemaphoreBmpQueueHandle = osSemaphoreNew(1, 0, &SemaphoreBmpQueue_attributes);
 8001fa0:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <MX_FREERTOS_Init+0xc8>)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f008 fd47 	bl	800aa38 <osSemaphoreNew>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	@ (8002044 <MX_FREERTOS_Init+0xcc>)
 8001fae:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmpData */
  TimerBmpDataHandle = osTimerNew(TimerBmpDataCallback, osTimerPeriodic, NULL, &TimerBmpData_attributes);
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <MX_FREERTOS_Init+0xd0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4825      	ldr	r0, [pc, #148]	@ (800204c <MX_FREERTOS_Init+0xd4>)
 8001fb8:	f008 fb86 	bl	800a6c8 <osTimerNew>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <MX_FREERTOS_Init+0xd8>)
 8001fc0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBmpData */
  QueueBmpDataHandle = osMessageQueueNew (8, sizeof(BmpData_t), &QueueBmpData_attributes);
 8001fc2:	4a24      	ldr	r2, [pc, #144]	@ (8002054 <MX_FREERTOS_Init+0xdc>)
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	f008 fe56 	bl	800ac78 <osMessageQueueNew>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <MX_FREERTOS_Init+0xe0>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* creation of QueueFftData */
  QueueFftDataHandle = osMessageQueueNew (8, sizeof(FftData_t), &QueueFftData_attributes);
 8001fd2:	4a22      	ldr	r2, [pc, #136]	@ (800205c <MX_FREERTOS_Init+0xe4>)
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	2008      	movs	r0, #8
 8001fd8:	f008 fe4e 	bl	800ac78 <osMessageQueueNew>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <MX_FREERTOS_Init+0xe8>)
 8001fe0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartbeatTask */
  HeartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &HeartbeatTask_attributes);
 8001fe2:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <MX_FREERTOS_Init+0xec>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4820      	ldr	r0, [pc, #128]	@ (8002068 <MX_FREERTOS_Init+0xf0>)
 8001fe8:	f008 f98f 	bl	800a30a <osThreadNew>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <MX_FREERTOS_Init+0xf4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* creation of Bmp280Task */
  Bmp280TaskHandle = osThreadNew(StartBmp280Task, NULL, &Bmp280Task_attributes);
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <MX_FREERTOS_Init+0xf8>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	481f      	ldr	r0, [pc, #124]	@ (8002074 <MX_FREERTOS_Init+0xfc>)
 8001ff8:	f008 f987 	bl	800a30a <osThreadNew>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <MX_FREERTOS_Init+0x100>)
 8002000:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8002002:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <MX_FREERTOS_Init+0x104>)
 8002004:	2100      	movs	r1, #0
 8002006:	481e      	ldr	r0, [pc, #120]	@ (8002080 <MX_FREERTOS_Init+0x108>)
 8002008:	f008 f97f 	bl	800a30a <osThreadNew>
 800200c:	4603      	mov	r3, r0
 800200e:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <MX_FREERTOS_Init+0x10c>)
 8002010:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <MX_FREERTOS_Init+0x110>)
 8002014:	2100      	movs	r1, #0
 8002016:	481d      	ldr	r0, [pc, #116]	@ (800208c <MX_FREERTOS_Init+0x114>)
 8002018:	f008 f977 	bl	800a30a <osThreadNew>
 800201c:	4603      	mov	r3, r0
 800201e:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <MX_FREERTOS_Init+0x118>)
 8002020:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0801288c 	.word	0x0801288c
 800202c:	200006c8 	.word	0x200006c8
 8002030:	0801289c 	.word	0x0801289c
 8002034:	200006cc 	.word	0x200006cc
 8002038:	080128ac 	.word	0x080128ac
 800203c:	200006d0 	.word	0x200006d0
 8002040:	080128bc 	.word	0x080128bc
 8002044:	200006d4 	.word	0x200006d4
 8002048:	0801287c 	.word	0x0801287c
 800204c:	080024a5 	.word	0x080024a5
 8002050:	200006c4 	.word	0x200006c4
 8002054:	0801284c 	.word	0x0801284c
 8002058:	200006bc 	.word	0x200006bc
 800205c:	08012864 	.word	0x08012864
 8002060:	200006c0 	.word	0x200006c0
 8002064:	080127bc 	.word	0x080127bc
 8002068:	08002095 	.word	0x08002095
 800206c:	200006ac 	.word	0x200006ac
 8002070:	080127e0 	.word	0x080127e0
 8002074:	080020b5 	.word	0x080020b5
 8002078:	200006b0 	.word	0x200006b0
 800207c:	08012804 	.word	0x08012804
 8002080:	08002191 	.word	0x08002191
 8002084:	200006b4 	.word	0x200006b4
 8002088:	08012828 	.word	0x08012828
 800208c:	080022e9 	.word	0x080022e9
 8002090:	200006b8 	.word	0x200006b8

08002094 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800209c:	2120      	movs	r1, #32
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f004 fc45 	bl	8006930 <HAL_GPIO_TogglePin>
    osDelay(500);
 80020a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020aa:	f008 fab0 	bl	800a60e <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020ae:	bf00      	nop
 80020b0:	e7f4      	b.n	800209c <StartHeartbeatTask+0x8>
	...

080020b4 <StartBmp280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp280Task */
void StartBmp280Task(void *argument)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b090      	sub	sp, #64	@ 0x40
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp280Task */
	BMP280_t Bmp280;
	BmpData_t _BmpData;
	uint32_t DelayTick = osKernelGetTickCount();
 80020bc:	f008 f910 	bl	800a2e0 <osKernelGetTickCount>
 80020c0:	6378      	str	r0, [r7, #52]	@ 0x34
	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 80020c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <StartBmp280Task+0xc4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fc2c 	bl	800a928 <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2276      	movs	r2, #118	@ 0x76
 80020d6:	4929      	ldr	r1, [pc, #164]	@ (800217c <StartBmp280Task+0xc8>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe57 	bl	8001d8c <BMP280_Init>
	osMutexRelease(MutexI2C1Handle);
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <StartBmp280Task+0xc4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f008 fc6b 	bl	800a9be <osMutexRelease>

	osTimerStart(TimerBmpDataHandle, 100);
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <StartBmp280Task+0xcc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2164      	movs	r1, #100	@ 0x64
 80020ee:	4618      	mov	r0, r3
 80020f0:	f008 fb66 	bl	800a7c0 <osTimerStart>

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <StartBmp280Task+0xc4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020fc:	4618      	mov	r0, r3
 80020fe:	f008 fc13 	bl	800a928 <osMutexAcquire>

	  BMP280_ReadPressureAndTemperature(&Bmp280, &_BmpData.Pressure, &_BmpData.Temperature);
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	f107 0108 	add.w	r1, r7, #8
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd85 	bl	8001c20 <BMP280_ReadPressureAndTemperature>
 	  osMutexRelease(MutexI2C1Handle);
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <StartBmp280Task+0xc4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f008 fc4f 	bl	800a9be <osMutexRelease>

 	  if(osOK == osSemaphoreAcquire(SemaphoreBmpQueueHandle, 0))
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <StartBmp280Task+0xd0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 fd10 	bl	800ab4c <osSemaphoreAcquire>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <StartBmp280Task+0x90>
	  {
		  osMessageQueuePut(QueueBmpDataHandle, &_BmpData, 0, osWaitForever);
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <StartBmp280Task+0xd4>)
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f107 0108 	add.w	r1, r7, #8
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800213e:	2200      	movs	r2, #0
 8002140:	f008 fe0e 	bl	800ad60 <osMessageQueuePut>
	 //	  osMutexAcquire(MutexBmpDataHandle, osWaitForever);
	 //	  Pressure = _Pressure;
	 //	  Temperature = _Temperature;
	 //	  osMutexRelease(MutexBmpDataHandle);

     printf("Temperature: %.2f, Pressure: %.2f\n\r", _BmpData.Temperature, _BmpData.Pressure);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa5e 	bl	8000608 <__aeabi_f2d>
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa58 	bl	8000608 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9cd 2300 	strd	r2, r3, [sp]
 8002160:	4622      	mov	r2, r4
 8002162:	462b      	mov	r3, r5
 8002164:	4809      	ldr	r0, [pc, #36]	@ (800218c <StartBmp280Task+0xd8>)
 8002166:	f001 ffb5 	bl	80040d4 <printf_>
     DelayTick += 10;
 800216a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216c:	330a      	adds	r3, #10
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
     osDelayUntil(DelayTick);
 8002170:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002172:	f008 fa67 	bl	800a644 <osDelayUntil>
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8002176:	e7bd      	b.n	80020f4 <StartBmp280Task+0x40>
 8002178:	200006cc 	.word	0x200006cc
 800217c:	200006d8 	.word	0x200006d8
 8002180:	200006c4 	.word	0x200006c4
 8002184:	200006d4 	.word	0x200006d4
 8002188:	200006bc 	.word	0x200006bc
 800218c:	08012564 	.word	0x08012564

08002190 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	@ 0x48
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char Message[32];
		uint8_t i = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		BmpData_t _BmpData;
		FftData_t FftData;
	//	float _Pressure, _Temperature;

		osMutexAcquire(MutexI2C1Handle, osWaitForever);
 800219e:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <StartOledTask+0x138>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021a6:	4618      	mov	r0, r3
 80021a8:	f008 fbbe 	bl	800a928 <osMutexAcquire>
		SSD1306_Init(&hi2c1);
 80021ac:	4847      	ldr	r0, [pc, #284]	@ (80022cc <StartOledTask+0x13c>)
 80021ae:	f7ff fa55 	bl	800165c <SSD1306_Init>
		osMutexRelease(MutexI2C1Handle);
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <StartOledTask+0x138>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f008 fc01 	bl	800a9be <osMutexRelease>

		GFX_SetFont(font_8x5);
 80021bc:	4844      	ldr	r0, [pc, #272]	@ (80022d0 <StartOledTask+0x140>)
 80021be:	f7fe ff3b 	bl	8001038 <GFX_SetFont>

		SSD1306_Clear(BLACK);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff f9ec 	bl	80015a0 <SSD1306_Clear>

	//	osMutexAcquire(MutexI2C1Handle, osWaitForever);
		SSD1306_Display();
 80021c8:	f7ff fa08 	bl	80015dc <SSD1306_Display>


  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear(BLACK);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff f9e7 	bl	80015a0 <SSD1306_Clear>

	  	sprintf(Message, "Hello %d", i++);
 80021d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80021dc:	461a      	mov	r2, r3
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	493c      	ldr	r1, [pc, #240]	@ (80022d4 <StartOledTask+0x144>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 ff91 	bl	800410c <sprintf_>

	  	GFX_DrawString(0, 0, Message, WHITE, 0);
 80021ea:	f107 021c 	add.w	r2, r7, #28
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2301      	movs	r3, #1
 80021f4:	2100      	movs	r1, #0
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe ffe8 	bl	80011cc <GFX_DrawString>
	  //	osMutexAcquire(MutexBmpDataHandle, osWaitForever);
	  //	_Pressure = Pressure;
	  //	_Temperature = Temperature;
	  //	osMutexRelease(MutexBmpDataHandle);

	  	osMessageQueueGet(QueueBmpDataHandle, &_BmpData, NULL, 0);
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <StartOledTask+0x148>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	f107 0114 	add.w	r1, r7, #20
 8002204:	2300      	movs	r3, #0
 8002206:	2200      	movs	r2, #0
 8002208:	f008 fe0a 	bl	800ae20 <osMessageQueueGet>

	  	osMessageQueueGet(QueueFftDataHandle, &FftData, NULL, 0);
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <StartOledTask+0x14c>)
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	f107 0108 	add.w	r1, r7, #8
 8002214:	2300      	movs	r3, #0
 8002216:	2200      	movs	r2, #0
 8002218:	f008 fe02 	bl	800ae20 <osMessageQueueGet>

	  	sprintf(Message, "Press: %.2f", _BmpData.Pressure);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f9f2 	bl	8000608 <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	f107 001c 	add.w	r0, r7, #28
 800222c:	492c      	ldr	r1, [pc, #176]	@ (80022e0 <StartOledTask+0x150>)
 800222e:	f001 ff6d 	bl	800410c <sprintf_>
	  	GFX_DrawString(0, 10, Message, WHITE, 0);
 8002232:	f107 021c 	add.w	r2, r7, #28
 8002236:	2300      	movs	r3, #0
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2301      	movs	r3, #1
 800223c:	210a      	movs	r1, #10
 800223e:	2000      	movs	r0, #0
 8002240:	f7fe ffc4 	bl	80011cc <GFX_DrawString>

	  	sprintf(Message, "Temp: %.2f", _BmpData.Temperature);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9de 	bl	8000608 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	f107 001c 	add.w	r0, r7, #28
 8002254:	4923      	ldr	r1, [pc, #140]	@ (80022e4 <StartOledTask+0x154>)
 8002256:	f001 ff59 	bl	800410c <sprintf_>
	  	GFX_DrawString(0, 20, Message, WHITE, 0);
 800225a:	f107 021c 	add.w	r2, r7, #28
 800225e:	2300      	movs	r3, #0
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	2114      	movs	r1, #20
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe ffb0 	bl	80011cc <GFX_DrawString>

	  	//
	  	// FFT
	  	//
	  	for(uint8_t i = 0; i < 10; i++) // Each frequency
 800226c:	2300      	movs	r3, #0
 800226e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002272:	e022      	b.n	80022ba <StartOledTask+0x12a>
	  	{
	  	  GFX_DrawFillRectangle(10+(i*11), 64-FftData.OutFreqArray[i], 10, FftData.OutFreqArray[i], WHITE);
 8002274:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	f103 000a 	add.w	r0, r3, #10
 8002286:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800228a:	3340      	adds	r3, #64	@ 0x40
 800228c:	443b      	add	r3, r7
 800228e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002292:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 8002296:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800229a:	3340      	adds	r3, #64	@ 0x40
 800229c:	443b      	add	r3, r7
 800229e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	220a      	movs	r2, #10
 80022ac:	f7ff f890 	bl	80013d0 <GFX_DrawFillRectangle>
	  	for(uint8_t i = 0; i < 10; i++) // Each frequency
 80022b0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80022b4:	3301      	adds	r3, #1
 80022b6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80022ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d9d8      	bls.n	8002274 <StartOledTask+0xe4>
	  	}

	  //	osMutexAcquire(MutexI2C1Handle, osWaitForever);
	  	SSD1306_Display();
 80022c2:	f7ff f98b 	bl	80015dc <SSD1306_Display>
	  SSD1306_Clear(BLACK);
 80022c6:	e781      	b.n	80021cc <StartOledTask+0x3c>
 80022c8:	200006cc 	.word	0x200006cc
 80022cc:	200006d8 	.word	0x200006d8
 80022d0:	080125dc 	.word	0x080125dc
 80022d4:	08012588 	.word	0x08012588
 80022d8:	200006bc 	.word	0x200006bc
 80022dc:	200006c0 	.word	0x200006c0
 80022e0:	08012594 	.word	0x08012594
 80022e4:	080125a0 	.word	0x080125a0

080022e8 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	@ 0x50
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFTTask */
	arm_rfft_fast_instance_f32 FFTHandler;
		FftData_t FftData;
		int FreqPoint = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		int Offset = 45; // variable noise floor offset
 80022f4:	232d      	movs	r3, #45	@ 0x2d
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
		uint16_t *AdcMicrophone;
		float *FFTInBuffer;
		float *FFTOutBuffer;
		int *Freqs;

		AdcMicrophone = pvPortMalloc(FFT_SAMPLES * sizeof(uint16_t));
 80022f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80022fc:	f00c f8ee 	bl	800e4dc <pvPortMalloc>
 8002300:	63f8      	str	r0, [r7, #60]	@ 0x3c
		FFTInBuffer = pvPortMalloc(FFT_SAMPLES * sizeof(float));
 8002302:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002306:	f00c f8e9 	bl	800e4dc <pvPortMalloc>
 800230a:	63b8      	str	r0, [r7, #56]	@ 0x38
		FFTOutBuffer = pvPortMalloc(FFT_SAMPLES * sizeof(float));
 800230c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002310:	f00c f8e4 	bl	800e4dc <pvPortMalloc>
 8002314:	6378      	str	r0, [r7, #52]	@ 0x34
		Freqs = pvPortMalloc(FFT_SAMPLES * sizeof(int));
 8002316:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800231a:	f00c f8df 	bl	800e4dc <pvPortMalloc>
 800231e:	6338      	str	r0, [r7, #48]	@ 0x30

		HAL_TIM_Base_Start(&htim4);
 8002320:	485d      	ldr	r0, [pc, #372]	@ (8002498 <StartFFTTask+0x1b0>)
 8002322:	f006 fced 	bl	8008d00 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcMicrophone, FFT_SAMPLES);
 8002326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800232a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800232c:	485b      	ldr	r0, [pc, #364]	@ (800249c <StartFFTTask+0x1b4>)
 800232e:	f002 fd5b 	bl	8004de8 <HAL_ADC_Start_DMA>

		arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800233a:	4618      	mov	r0, r3
 800233c:	f00c fac2 	bl	800e8c4 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8002340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002344:	2101      	movs	r1, #1
 8002346:	2001      	movs	r0, #1
 8002348:	f008 f8e0 	bl	800a50c <osThreadFlagsWait>

	 	  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002350:	e011      	b.n	8002376 <StartFFTTask+0x8e>
	 	  {
	 		  FFTInBuffer[i] =  (float)AdcMicrophone[i];
 8002352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002358:	4413      	add	r3, r2
 800235a:	8819      	ldrh	r1, [r3, #0]
 800235c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002362:	4413      	add	r3, r2
 8002364:	ee07 1a90 	vmov	s15, r1
 8002368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236c:	edc3 7a00 	vstr	s15, [r3]
	 	  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 8002370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002372:	3301      	adds	r3, #1
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237c:	d3e9      	bcc.n	8002352 <StartFFTTask+0x6a>
	 	  }

	 	  arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 800237e:	f107 0018 	add.w	r0, r7, #24
 8002382:	2300      	movs	r3, #0
 8002384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002388:	f00c fb20 	bl	800e9cc <arm_rfft_fast_f32>

	 		FreqPoint = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 		// calculate abs values and linear-to-dB
	 		for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8002390:	2300      	movs	r3, #0
 8002392:	647b      	str	r3, [r7, #68]	@ 0x44
 8002394:	e03c      	b.n	8002410 <StartFFTTask+0x128>
	 		{
	 			Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8002396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800239c:	4413      	add	r3, r2
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a4:	3301      	adds	r3, #1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023aa:	4413      	add	r3, r2
 80023ac:	ed93 7a00 	vldr	s14, [r3]
 80023b0:	eef0 0a47 	vmov.f32	s1, s14
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	f7ff fdb0 	bl	8001f1c <complexABS>
 80023bc:	eef0 7a40 	vmov.f32	s15, s0
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	f00f fed2 	bl	801216c <log10f>
 80023c8:	eef0 7a40 	vmov.f32	s15, s0
 80023cc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d8:	ee17 1a90 	vmov	r1, s15
 80023dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e2:	4413      	add	r3, r2
 80023e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023e6:	1a8a      	subs	r2, r1, r2
 80023e8:	601a      	str	r2, [r3, #0]

	 			if(Freqs[FreqPoint] < 0)
 80023ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da05      	bge.n	8002404 <StartFFTTask+0x11c>
	 			{
	 				Freqs[FreqPoint] = 0;
 80023f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023fe:	4413      	add	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
	 			}
	 			FreqPoint++;
 8002404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002406:	3301      	adds	r3, #1
 8002408:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 		for (int i = 0; i < FFT_SAMPLES; i = i+2)
 800240a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240c:	3302      	adds	r3, #2
 800240e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002416:	dbbe      	blt.n	8002396 <StartFFTTask+0xae>
	 		}

	 		FftData.OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	733b      	strb	r3, [r7, #12]
	 		FftData.OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	3308      	adds	r3, #8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	737b      	strb	r3, [r7, #13]
	 		FftData.OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	330c      	adds	r3, #12
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	73bb      	strb	r3, [r7, #14]
	 		FftData.OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	3318      	adds	r3, #24
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	73fb      	strb	r3, [r7, #15]
	 		FftData.OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 8002440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002442:	3330      	adds	r3, #48	@ 0x30
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	743b      	strb	r3, [r7, #16]
	 		FftData.OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	335c      	adds	r3, #92	@ 0x5c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	747b      	strb	r3, [r7, #17]
	 		FftData.OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	33cc      	adds	r3, #204	@ 0xcc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	74bb      	strb	r3, [r7, #18]
	 		FftData.OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	74fb      	strb	r3, [r7, #19]
	 		FftData.OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	753b      	strb	r3, [r7, #20]
	 		FftData.OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	757b      	strb	r3, [r7, #21]

	 		osMessageQueuePut(QueueFftDataHandle, &FftData, 0, osWaitForever);
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <StartFFTTask+0x1b8>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f107 010c 	add.w	r1, r7, #12
 800248a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800248e:	2200      	movs	r2, #0
 8002490:	f008 fc66 	bl	800ad60 <osMessageQueuePut>
	  osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 8002494:	e754      	b.n	8002340 <StartFFTTask+0x58>
 8002496:	bf00      	nop
 8002498:	2000077c 	.word	0x2000077c
 800249c:	20000600 	.word	0x20000600
 80024a0:	200006c0 	.word	0x200006c0

080024a4 <TimerBmpDataCallback>:
  /* USER CODE END StartFFTTask */
}

/* TimerBmpDataCallback function */
void TimerBmpDataCallback(void *argument)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerBmpDataCallback */
	osSemaphoreRelease(SemaphoreBmpQueueHandle);
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <TimerBmpDataCallback+0x1c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f008 fb9d 	bl	800abf0 <osSemaphoreRelease>
  /* USER CODE END TimerBmpDataCallback */
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200006d4 	.word	0x200006d4

080024c4 <HAL_ADC_ConvCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <HAL_ADC_ConvCpltCallback+0x28>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConvCpltCallback+0x1e>
	{
	//	SamplesReady = 1;
	 osThreadFlagsSet(FFTTaskHandle, 0x01);
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 ffc7 	bl	800a470 <osThreadFlagsSet>
	}
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	50040000 	.word	0x50040000
 80024f0:	200006b8 	.word	0x200006b8

080024f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	@ 0x28
 80024f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002516:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002522:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800252c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	4a1e      	ldr	r2, [pc, #120]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_GPIO_Init+0xc4>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	2120      	movs	r1, #32
 800256e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002572:	f004 f9c5 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002576:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800257c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	480b      	ldr	r0, [pc, #44]	@ (80025bc <MX_GPIO_Init+0xc8>)
 800258e:	f004 f80d 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002592:	2320      	movs	r3, #32
 8002594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ac:	f003 fffe 	bl	80065ac <HAL_GPIO_Init>

}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	@ 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	48000800 	.word	0x48000800

080025c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <MX_I2C1_Init+0x78>)
 80025c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025cc:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <MX_I2C1_Init+0x7c>)
 80025ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025d0:	4b18      	ldr	r3, [pc, #96]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025d8:	2201      	movs	r2, #1
 80025da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025dc:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025e2:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025fa:	480e      	ldr	r0, [pc, #56]	@ (8002634 <MX_I2C1_Init+0x74>)
 80025fc:	f004 f9b2 	bl	8006964 <HAL_I2C_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002606:	f000 f8f7 	bl	80027f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800260a:	2100      	movs	r1, #0
 800260c:	4809      	ldr	r0, [pc, #36]	@ (8002634 <MX_I2C1_Init+0x74>)
 800260e:	f004 ff35 	bl	800747c <HAL_I2CEx_ConfigAnalogFilter>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002618:	f000 f8ee 	bl	80027f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800261c:	2100      	movs	r1, #0
 800261e:	4805      	ldr	r0, [pc, #20]	@ (8002634 <MX_I2C1_Init+0x74>)
 8002620:	f004 ff77 	bl	8007512 <HAL_I2CEx_ConfigDigitalFilter>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800262a:	f000 f8e5 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200006d8 	.word	0x200006d8
 8002638:	40005400 	.word	0x40005400
 800263c:	00702991 	.word	0x00702991

08002640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b0ac      	sub	sp, #176	@ 0xb0
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2288      	movs	r2, #136	@ 0x88
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f00d fe60 	bl	8010326 <memset>
  if(i2cHandle->Instance==I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <HAL_I2C_MspInit+0xb0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d13b      	bne.n	80026e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002670:	2340      	movs	r3, #64	@ 0x40
 8002672:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002674:	2300      	movs	r3, #0
 8002676:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4618      	mov	r0, r3
 800267e:	f005 fe2b 	bl	80082d8 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002688:	f000 f8b6 	bl	80027f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026be:	2304      	movs	r3, #4
 80026c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026c8:	4619      	mov	r1, r3
 80026ca:	480b      	ldr	r0, [pc, #44]	@ (80026f8 <HAL_I2C_MspInit+0xb8>)
 80026cc:	f003 ff6e 	bl	80065ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 80026d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026da:	6593      	str	r3, [r2, #88]	@ 0x58
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_I2C_MspInit+0xb4>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026e8:	bf00      	nop
 80026ea:	37b0      	adds	r7, #176	@ 0xb0
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40005400 	.word	0x40005400
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48000400 	.word	0x48000400

080026fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002700:	f001 ffec 	bl	80046dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002704:	f000 f814 	bl	8002730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002708:	f7ff fef4 	bl	80024f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800270c:	f7ff fbc8 	bl	8001ea0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002710:	f001 ff2e 	bl	8004570 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002714:	f7ff ff54 	bl	80025c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002718:	f7fe fff8 	bl	800170c <MX_ADC1_Init>
  MX_TIM4_Init();
 800271c:	f001 feba 	bl	8004494 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002720:	f007 fd94 	bl	800a24c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002724:	f7ff fc28 	bl	8001f78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002728:	f007 fdb4 	bl	800a294 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <main+0x30>

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b096      	sub	sp, #88	@ 0x58
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	2244      	movs	r2, #68	@ 0x44
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f00d fdf1 	bl	8010326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002752:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002756:	f004 ff37 	bl	80075c8 <HAL_PWREx_ControlVoltageScaling>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002760:	f000 f84a 	bl	80027f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002764:	2302      	movs	r3, #2
 8002766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800276c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800276e:	2310      	movs	r3, #16
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002772:	2302      	movs	r3, #2
 8002774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002776:	2302      	movs	r3, #2
 8002778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800277e:	230a      	movs	r3, #10
 8002780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002782:	2307      	movs	r3, #7
 8002784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002786:	2302      	movs	r3, #2
 8002788:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800278a:	2302      	movs	r3, #2
 800278c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4618      	mov	r0, r3
 8002794:	f004 ff6e 	bl	8007674 <HAL_RCC_OscConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800279e:	f000 f82b 	bl	80027f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a2:	230f      	movs	r3, #15
 80027a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a6:	2303      	movs	r3, #3
 80027a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027b6:	463b      	mov	r3, r7
 80027b8:	2104      	movs	r1, #4
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fb36 	bl	8007e2c <HAL_RCC_ClockConfig>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027c6:	f000 f817 	bl	80027f8 <Error_Handler>
  }
}
 80027ca:	bf00      	nop
 80027cc:	3758      	adds	r7, #88	@ 0x58
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	@ (80027f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027e6:	f001 ff99 	bl	800471c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40014800 	.word	0x40014800

080027f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027fc:	b672      	cpsid	i
}
 80027fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <Error_Handler+0x8>

08002804 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d204      	bcs.n	8002826 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	701a      	strb	r2, [r3, #0]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <_out_char+0x1e>
    _putchar(character);
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb38 	bl	8001edc <_putchar>
  }
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e002      	b.n	800288a <_strnlen_s+0x16>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <_strnlen_s+0x28>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	603a      	str	r2, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f3      	bne.n	8002884 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	1ad3      	subs	r3, r2, r3
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80028bc:	d904      	bls.n	80028c8 <_is_digit+0x1a>
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b39      	cmp	r3, #57	@ 0x39
 80028c2:	d801      	bhi.n	80028c8 <_is_digit+0x1a>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <_is_digit+0x1c>
 80028c8:	2300      	movs	r3, #0
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80028e8:	e00e      	b.n	8002908 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1c59      	adds	r1, r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6011      	str	r1, [r2, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4403      	add	r3, r0
 8002904:	3b30      	subs	r3, #48	@ 0x30
 8002906:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ffcd 	bl	80028ae <_is_digit>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e7      	bne.n	80028ea <_atoi+0xe>
  }
  return i;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d125      	bne.n	800298c <_out_rev+0x68>
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d120      	bne.n	800298c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800294a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e00a      	b.n	8002966 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	1c53      	adds	r3, r2, #1
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	68fc      	ldr	r4, [r7, #12]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	2020      	movs	r0, #32
 800295e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	429a      	cmp	r2, r3
 800296c:	d3f0      	bcc.n	8002950 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800296e:	e00d      	b.n	800298c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	3b01      	subs	r3, #1
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	4413      	add	r3, r2
 800297c:	7818      	ldrb	r0, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	1c53      	adds	r3, r2, #1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	68fc      	ldr	r4, [r7, #12]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	47a0      	blx	r4
  while (len) {
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ee      	bne.n	8002970 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <_out_rev+0x96>
    while (idx - start_idx < width) {
 800299c:	e007      	b.n	80029ae <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	1c53      	adds	r3, r2, #1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	68fc      	ldr	r4, [r7, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	2020      	movs	r0, #32
 80029ac:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8f1      	bhi.n	800299e <_out_rev+0x7a>
    }
  }

  return idx;
 80029ba:	687b      	ldr	r3, [r7, #4]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}

080029c4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d136      	bne.n	8002a4a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80029dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d018      	beq.n	8002a14 <_ntoa_format+0x50>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <_ntoa_format+0x50>
 80029ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <_ntoa_format+0x3a>
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <_ntoa_format+0x50>
      width--;
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	3b01      	subs	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a04:	e006      	b.n	8002a14 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	2230      	movs	r2, #48	@ 0x30
 8002a12:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d20a      	bcs.n	8002a32 <_ntoa_format+0x6e>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b1f      	cmp	r3, #31
 8002a20:	d9f1      	bls.n	8002a06 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a22:	e006      	b.n	8002a32 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	61fa      	str	r2, [r7, #28]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	2230      	movs	r2, #48	@ 0x30
 8002a30:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <_ntoa_format+0x86>
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d202      	bcs.n	8002a4a <_ntoa_format+0x86>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b1f      	cmp	r3, #31
 8002a48:	d9ec      	bls.n	8002a24 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d058      	beq.n	8002b06 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <_ntoa_format+0xc8>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <_ntoa_format+0xc8>
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d003      	beq.n	8002a74 <_ntoa_format+0xb0>
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10b      	bne.n	8002a8c <_ntoa_format+0xc8>
      len--;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <_ntoa_format+0xc8>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d102      	bne.n	8002a8c <_ntoa_format+0xc8>
        len--;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d10f      	bne.n	8002ab2 <_ntoa_format+0xee>
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <_ntoa_format+0xee>
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b1f      	cmp	r3, #31
 8002aa0:	d807      	bhi.n	8002ab2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	61fa      	str	r2, [r7, #28]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	2278      	movs	r2, #120	@ 0x78
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e01f      	b.n	8002af2 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d10f      	bne.n	8002ad8 <_ntoa_format+0x114>
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <_ntoa_format+0x114>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b1f      	cmp	r3, #31
 8002ac6:	d807      	bhi.n	8002ad8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2258      	movs	r2, #88	@ 0x58
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e00c      	b.n	8002af2 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d109      	bne.n	8002af2 <_ntoa_format+0x12e>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b1f      	cmp	r3, #31
 8002ae2:	d806      	bhi.n	8002af2 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	61fa      	str	r2, [r7, #28]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4413      	add	r3, r2
 8002aee:	2262      	movs	r2, #98	@ 0x62
 8002af0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b1f      	cmp	r3, #31
 8002af6:	d806      	bhi.n	8002b06 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	2230      	movs	r2, #48	@ 0x30
 8002b04:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	d824      	bhi.n	8002b56 <_ntoa_format+0x192>
    if (negative) {
 8002b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	61fa      	str	r2, [r7, #28]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	222d      	movs	r2, #45	@ 0x2d
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e018      	b.n	8002b56 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	61fa      	str	r2, [r7, #28]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4413      	add	r3, r2
 8002b38:	222b      	movs	r2, #43	@ 0x2b
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e00b      	b.n	8002b56 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4413      	add	r3, r2
 8002b52:	2220      	movs	r2, #32
 8002b54:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fed9 	bl	8002924 <_out_rev>
 8002b72:	4603      	mov	r3, r0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b096      	sub	sp, #88	@ 0x58
 8002b80:	af08      	add	r7, sp, #32
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b96:	f023 0310 	bic.w	r3, r3, #16
 8002b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <_ntoa_long+0x30>
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d032      	beq.n	8002c12 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bb4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002bb6:	fb01 f202 	mul.w	r2, r1, r2
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d804      	bhi.n	8002bd2 <_ntoa_long+0x56>
 8002bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bcc:	3330      	adds	r3, #48	@ 0x30
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	e00d      	b.n	8002bee <_ntoa_long+0x72>
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <_ntoa_long+0x64>
 8002bdc:	2241      	movs	r2, #65	@ 0x41
 8002bde:	e000      	b.n	8002be2 <_ntoa_long+0x66>
 8002be0:	2261      	movs	r2, #97	@ 0x61
 8002be2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b0a      	subs	r3, #10
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	1c59      	adds	r1, r3, #1
 8002bf2:	6379      	str	r1, [r7, #52]	@ 0x34
 8002bf4:	3338      	adds	r3, #56	@ 0x38
 8002bf6:	443b      	add	r3, r7
 8002bf8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002bfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <_ntoa_long+0x96>
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0e:	2b1f      	cmp	r3, #31
 8002c10:	d9cc      	bls.n	8002bac <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	9306      	str	r3, [sp, #24]
 8002c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c18:	9305      	str	r3, [sp, #20]
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1c:	9304      	str	r3, [sp, #16]
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fec3 	bl	80029c4 <_ntoa_format>
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3738      	adds	r7, #56	@ 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b096      	sub	sp, #88	@ 0x58
 8002c4c:	af08      	add	r7, sp, #32
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	d103      	bne.n	8002c6a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c64:	f023 0310 	bic.w	r3, r3, #16
 8002c68:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <_ntoa_long_long+0x34>
 8002c74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	d037      	beq.n	8002cec <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002c7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c84:	f7fe f860 	bl	8000d48 <__aeabi_uldivmod>
 8002c88:	4613      	mov	r3, r2
 8002c8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	d804      	bhi.n	8002ca0 <_ntoa_long_long+0x58>
 8002c96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c9a:	3330      	adds	r3, #48	@ 0x30
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	e00d      	b.n	8002cbc <_ntoa_long_long+0x74>
 8002ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ntoa_long_long+0x66>
 8002caa:	2241      	movs	r2, #65	@ 0x41
 8002cac:	e000      	b.n	8002cb0 <_ntoa_long_long+0x68>
 8002cae:	2261      	movs	r2, #97	@ 0x61
 8002cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3b0a      	subs	r3, #10
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	6379      	str	r1, [r7, #52]	@ 0x34
 8002cc2:	3338      	adds	r3, #56	@ 0x38
 8002cc4:	443b      	add	r3, r7
 8002cc6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002cca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002cd2:	f7fe f839 	bl	8000d48 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	d002      	beq.n	8002cec <_ntoa_long_long+0xa4>
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	2b1f      	cmp	r3, #31
 8002cea:	d9c7      	bls.n	8002c7c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cf0:	9206      	str	r2, [sp, #24]
 8002cf2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cf4:	9205      	str	r2, [sp, #20]
 8002cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cf8:	9204      	str	r2, [sp, #16]
 8002cfa:	9303      	str	r3, [sp, #12]
 8002cfc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff fe56 	bl	80029c4 <_ntoa_format>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3738      	adds	r7, #56	@ 0x38
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	0000      	movs	r0, r0
 8002d24:	0000      	movs	r0, r0
	...

08002d28 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b09d      	sub	sp, #116	@ 0x74
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	6178      	str	r0, [r7, #20]
 8002d30:	6139      	str	r1, [r7, #16]
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d52:	f7fd ff19 	bl	8000b88 <__aeabi_dcmpeq>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	2303      	movs	r3, #3
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4ba7      	ldr	r3, [pc, #668]	@ (8003008 <_ftoa+0x2e0>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff fdd6 	bl	8002924 <_out_rev>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	e222      	b.n	80031c2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d80:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d88:	f7fd ff08 	bl	8000b9c <__aeabi_dcmplt>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00f      	beq.n	8002db2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d94:	9303      	str	r3, [sp, #12]
 8002d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	4b9b      	ldr	r3, [pc, #620]	@ (800300c <_ftoa+0x2e4>)
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	6939      	ldr	r1, [r7, #16]
 8002da8:	6978      	ldr	r0, [r7, #20]
 8002daa:	f7ff fdbb 	bl	8002924 <_out_rev>
 8002dae:	4603      	mov	r3, r0
 8002db0:	e207      	b.n	80031c2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002db6:	4b96      	ldr	r3, [pc, #600]	@ (8003010 <_ftoa+0x2e8>)
 8002db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dbc:	f7fd ff0c 	bl	8000bd8 <__aeabi_dcmpgt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01d      	beq.n	8002e02 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <_ftoa+0xac>
 8002dd0:	4b90      	ldr	r3, [pc, #576]	@ (8003014 <_ftoa+0x2ec>)
 8002dd2:	e000      	b.n	8002dd6 <_ftoa+0xae>
 8002dd4:	4b90      	ldr	r3, [pc, #576]	@ (8003018 <_ftoa+0x2f0>)
 8002dd6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002dd8:	f002 0204 	and.w	r2, r2, #4
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d001      	beq.n	8002de4 <_ftoa+0xbc>
 8002de0:	2204      	movs	r2, #4
 8002de2:	e000      	b.n	8002de6 <_ftoa+0xbe>
 8002de4:	2203      	movs	r2, #3
 8002de6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002de8:	9103      	str	r1, [sp, #12]
 8002dea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002dec:	9102      	str	r1, [sp, #8]
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	6939      	ldr	r1, [r7, #16]
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7ff fd93 	bl	8002924 <_out_rev>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	e1df      	b.n	80031c2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002e02:	a37d      	add	r3, pc, #500	@ (adr r3, 8002ff8 <_ftoa+0x2d0>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e0c:	f7fd fee4 	bl	8000bd8 <__aeabi_dcmpgt>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <_ftoa+0x102>
 8002e16:	a37a      	add	r3, pc, #488	@ (adr r3, 8003000 <_ftoa+0x2d8>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e20:	f7fd febc 	bl	8000b9c <__aeabi_dcmplt>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00f      	beq.n	8002e4a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e2c:	9302      	str	r3, [sp, #8]
 8002e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	ed97 0b00 	vldr	d0, [r7]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6939      	ldr	r1, [r7, #16]
 8002e40:	6978      	ldr	r0, [r7, #20]
 8002e42:	f000 f9c9 	bl	80031d8 <_etoa>
 8002e46:	4603      	mov	r3, r0
 8002e48:	e1bb      	b.n	80031c2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e5c:	f7fd fe9e 	bl	8000b9c <__aeabi_dcmplt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00e      	beq.n	8002e84 <_ftoa+0x15c>
    negative = true;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 8002e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f7fd fa66 	bl	8000348 <__aeabi_dsub>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e8e:	2306      	movs	r3, #6
 8002e90:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e92:	e00a      	b.n	8002eaa <_ftoa+0x182>
    buf[len++] = '0';
 8002e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e9a:	3360      	adds	r3, #96	@ 0x60
 8002e9c:	443b      	add	r3, r7
 8002e9e:	2230      	movs	r2, #48	@ 0x30
 8002ea0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eac:	2b1f      	cmp	r3, #31
 8002eae:	d802      	bhi.n	8002eb6 <_ftoa+0x18e>
 8002eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d8ee      	bhi.n	8002e94 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eba:	f7fd fead 	bl	8000c18 <__aeabi_d2iz>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002ec2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002ec4:	f7fd fb8e 	bl	80005e4 <__aeabi_i2d>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ed0:	f7fd fa3a 	bl	8000348 <__aeabi_dsub>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <_ftoa+0x2f4>)
 8002ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fbe6 	bl	80006b8 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002ef4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ef8:	f7fd feb6 	bl	8000c68 <__aeabi_d2uiz>
 8002efc:	4603      	mov	r3, r0
 8002efe:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002f00:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f02:	f7fd fb5f 	bl	80005c4 <__aeabi_ui2d>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002f0e:	f7fd fa1b 	bl	8000348 <__aeabi_dsub>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <_ftoa+0x2f8>)
 8002f20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f24:	f7fd fe58 	bl	8000bd8 <__aeabi_dcmpgt>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <_ftoa+0x234>
    ++frac;
 8002f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f30:	3301      	adds	r3, #1
 8002f32:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002f34:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f36:	f7fd fb45 	bl	80005c4 <__aeabi_ui2d>
 8002f3a:	4a38      	ldr	r2, [pc, #224]	@ (800301c <_ftoa+0x2f4>)
 8002f3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fe3d 	bl	8000bc4 <__aeabi_dcmpge>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01a      	beq.n	8002f86 <_ftoa+0x25e>
      frac = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8002f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f56:	3301      	adds	r3, #1
 8002f58:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f5a:	e014      	b.n	8002f86 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	4b2f      	ldr	r3, [pc, #188]	@ (8003020 <_ftoa+0x2f8>)
 8002f62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002f66:	f7fd fe19 	bl	8000b9c <__aeabi_dcmplt>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <_ftoa+0x258>
 8002f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f82:	3301      	adds	r3, #1
 8002f84:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8002f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d14b      	bne.n	8003024 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002f8c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002f8e:	f7fd fb29 	bl	80005e4 <__aeabi_i2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f9a:	f7fd f9d5 	bl	8000348 <__aeabi_dsub>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	461c      	mov	r4, r3
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	4b1c      	ldr	r3, [pc, #112]	@ (8003020 <_ftoa+0x2f8>)
 8002fb0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002fb4:	f7fd fdf2 	bl	8000b9c <__aeabi_dcmplt>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <_ftoa+0x29a>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	461c      	mov	r4, r3
 8002fc2:	b2e3      	uxtb	r3, r4
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <_ftoa+0x2ba>
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <_ftoa+0x2f8>)
 8002fd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002fd8:	f7fd fdfe 	bl	8000bd8 <__aeabi_dcmpgt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d064      	beq.n	80030ac <_ftoa+0x384>
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8081 	beq.w	80030f0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ff4:	e07c      	b.n	80030f0 <_ftoa+0x3c8>
 8002ff6:	bf00      	nop
 8002ff8:	00000000 	.word	0x00000000
 8002ffc:	41cdcd65 	.word	0x41cdcd65
 8003000:	00000000 	.word	0x00000000
 8003004:	c1cdcd65 	.word	0xc1cdcd65
 8003008:	080125ac 	.word	0x080125ac
 800300c:	080125b0 	.word	0x080125b0
 8003010:	7fefffff 	.word	0x7fefffff
 8003014:	080125b8 	.word	0x080125b8
 8003018:	080125c0 	.word	0x080125c0
 800301c:	080128d0 	.word	0x080128d0
 8003020:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003026:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003028:	e01f      	b.n	800306a <_ftoa+0x342>
      --count;
 800302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302c:	3b01      	subs	r3, #1
 800302e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003030:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003032:	4b66      	ldr	r3, [pc, #408]	@ (80031cc <_ftoa+0x4a4>)
 8003034:	fba3 2301 	umull	r2, r3, r3, r1
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	1aca      	subs	r2, r1, r3
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800304c:	3230      	adds	r2, #48	@ 0x30
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	3360      	adds	r3, #96	@ 0x60
 8003052:	443b      	add	r3, r7
 8003054:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305a:	4a5c      	ldr	r2, [pc, #368]	@ (80031cc <_ftoa+0x4a4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	653b      	str	r3, [r7, #80]	@ 0x50
 8003064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800306a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800306c:	2b1f      	cmp	r3, #31
 800306e:	d9dc      	bls.n	800302a <_ftoa+0x302>
 8003070:	e009      	b.n	8003086 <_ftoa+0x35e>
        break;
 8003072:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003074:	e007      	b.n	8003086 <_ftoa+0x35e>
      buf[len++] = '0';
 8003076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800307c:	3360      	adds	r3, #96	@ 0x60
 800307e:	443b      	add	r3, r7
 8003080:	2230      	movs	r2, #48	@ 0x30
 8003082:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003088:	2b1f      	cmp	r3, #31
 800308a:	d804      	bhi.n	8003096 <_ftoa+0x36e>
 800308c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800308e:	1e5a      	subs	r2, r3, #1
 8003090:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ef      	bne.n	8003076 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003098:	2b1f      	cmp	r3, #31
 800309a:	d829      	bhi.n	80030f0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800309c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030a2:	3360      	adds	r3, #96	@ 0x60
 80030a4:	443b      	add	r3, r7
 80030a6:	222e      	movs	r2, #46	@ 0x2e
 80030a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030ac:	e020      	b.n	80030f0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80030ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030b0:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <_ftoa+0x4a8>)
 80030b2:	fb83 1302 	smull	r1, r3, r3, r2
 80030b6:	1099      	asrs	r1, r3, #2
 80030b8:	17d3      	asrs	r3, r2, #31
 80030ba:	1ac9      	subs	r1, r1, r3
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	1ad1      	subs	r1, r2, r3
 80030c6:	b2ca      	uxtb	r2, r1
 80030c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80030ce:	3230      	adds	r2, #48	@ 0x30
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	3360      	adds	r3, #96	@ 0x60
 80030d4:	443b      	add	r3, r7
 80030d6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	4a3c      	ldr	r2, [pc, #240]	@ (80031d0 <_ftoa+0x4a8>)
 80030de:	fb82 1203 	smull	r1, r2, r2, r3
 80030e2:	1092      	asrs	r2, r2, #2
 80030e4:	17db      	asrs	r3, r3, #31
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f2:	2b1f      	cmp	r3, #31
 80030f4:	d9db      	bls.n	80030ae <_ftoa+0x386>
 80030f6:	e000      	b.n	80030fa <_ftoa+0x3d2>
      break;
 80030f8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80030fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d123      	bne.n	800314c <_ftoa+0x424>
 8003104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800310e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003110:	2b00      	cmp	r3, #0
 8003112:	d014      	beq.n	800313e <_ftoa+0x416>
 8003114:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <_ftoa+0x3fe>
 800311c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <_ftoa+0x416>
      width--;
 8003126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003128:	3b01      	subs	r3, #1
 800312a:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800312c:	e007      	b.n	800313e <_ftoa+0x416>
      buf[len++] = '0';
 800312e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003134:	3360      	adds	r3, #96	@ 0x60
 8003136:	443b      	add	r3, r7
 8003138:	2230      	movs	r2, #48	@ 0x30
 800313a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800313e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003142:	429a      	cmp	r2, r3
 8003144:	d202      	bcs.n	800314c <_ftoa+0x424>
 8003146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003148:	2b1f      	cmp	r3, #31
 800314a:	d9f0      	bls.n	800312e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800314c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314e:	2b1f      	cmp	r3, #31
 8003150:	d827      	bhi.n	80031a2 <_ftoa+0x47a>
    if (negative) {
 8003152:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <_ftoa+0x444>
      buf[len++] = '-';
 800315a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003160:	3360      	adds	r3, #96	@ 0x60
 8003162:	443b      	add	r3, r7
 8003164:	222d      	movs	r2, #45	@ 0x2d
 8003166:	f803 2c48 	strb.w	r2, [r3, #-72]
 800316a:	e01a      	b.n	80031a2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800316c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800317c:	3360      	adds	r3, #96	@ 0x60
 800317e:	443b      	add	r3, r7
 8003180:	222b      	movs	r2, #43	@ 0x2b
 8003182:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003186:	e00c      	b.n	80031a2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003198:	3360      	adds	r3, #96	@ 0x60
 800319a:	443b      	add	r3, r7
 800319c:	2220      	movs	r2, #32
 800319e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80031a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a4:	9303      	str	r3, [sp, #12]
 80031a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a8:	9302      	str	r3, [sp, #8]
 80031aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	f107 0318 	add.w	r3, r7, #24
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6939      	ldr	r1, [r7, #16]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff fbb2 	bl	8002924 <_out_rev>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3764      	adds	r7, #100	@ 0x64
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	cccccccd 	.word	0xcccccccd
 80031d0:	66666667 	.word	0x66666667
 80031d4:	00000000 	.word	0x00000000

080031d8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	b09f      	sub	sp, #124	@ 0x7c
 80031de:	af06      	add	r7, sp, #24
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80031e2:	6239      	str	r1, [r7, #32]
 80031e4:	61fa      	str	r2, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80031ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031f4:	f7fd fcc8 	bl	8000b88 <__aeabi_dcmpeq>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <_etoa+0x50>
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003202:	4bc1      	ldr	r3, [pc, #772]	@ (8003508 <_etoa+0x330>)
 8003204:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003208:	f7fd fce6 	bl	8000bd8 <__aeabi_dcmpgt>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <_etoa+0x50>
 8003212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003216:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 800321a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800321e:	f7fd fcbd 	bl	8000b9c <__aeabi_dcmplt>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d012      	beq.n	800324e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003228:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800322c:	9302      	str	r3, [sp, #8]
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	ed97 0b04 	vldr	d0, [r7, #16]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	6a39      	ldr	r1, [r7, #32]
 8003244:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003246:	f7ff fd6f 	bl	8002d28 <_ftoa>
 800324a:	4603      	mov	r3, r0
 800324c:	e23f      	b.n	80036ce <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800324e:	2301      	movs	r3, #1
 8003250:	461e      	mov	r6, r3
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800325e:	f7fd fc9d 	bl	8000b9c <__aeabi_dcmplt>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <_etoa+0x94>
 8003268:	2300      	movs	r3, #0
 800326a:	461e      	mov	r6, r3
 800326c:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8003270:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <_etoa+0xb4>
    value = -value;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	ed97 7b00 	vldr	d7, [r7]
 8003288:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800328c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003298:	2306      	movs	r3, #6
 800329a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800329e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80032a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	0d0a      	lsrs	r2, r1, #20
 80032b4:	2300      	movs	r3, #0
 80032b6:	4613      	mov	r3, r2
 80032b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032bc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80032c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80032c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032c6:	4690      	mov	r8, r2
 80032c8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80032cc:	4644      	mov	r4, r8
 80032ce:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 80032d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80032d6:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80032da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80032dc:	f7fd f982 	bl	80005e4 <__aeabi_i2d>
 80032e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80034d8 <_etoa+0x300>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f9e7 	bl	80006b8 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	a37b      	add	r3, pc, #492	@ (adr r3, 80034e0 <_etoa+0x308>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f828 	bl	800034c <__adddf3>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b7f      	ldr	r3, [pc, #508]	@ (800350c <_etoa+0x334>)
 800330e:	f7fd f81b 	bl	8000348 <__aeabi_dsub>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	a373      	add	r3, pc, #460	@ (adr r3, 80034e8 <_etoa+0x310>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f9ca 	bl	80006b8 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fd f80e 	bl	800034c <__adddf3>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fc6e 	bl	8000c18 <__aeabi_d2iz>
 800333c:	4603      	mov	r3, r0
 800333e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003340:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003342:	f7fd f94f 	bl	80005e4 <__aeabi_i2d>
 8003346:	a36a      	add	r3, pc, #424	@ (adr r3, 80034f0 <_etoa+0x318>)
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f7fd f9b4 	bl	80006b8 <__aeabi_dmul>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b6c      	ldr	r3, [pc, #432]	@ (8003510 <_etoa+0x338>)
 800335e:	f7fc fff5 	bl	800034c <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fc55 	bl	8000c18 <__aeabi_d2iz>
 800336e:	4603      	mov	r3, r0
 8003370:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003372:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003374:	f7fd f936 	bl	80005e4 <__aeabi_i2d>
 8003378:	a35f      	add	r3, pc, #380	@ (adr r3, 80034f8 <_etoa+0x320>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd f99b 	bl	80006b8 <__aeabi_dmul>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4614      	mov	r4, r2
 8003388:	461d      	mov	r5, r3
 800338a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800338c:	f7fd f92a 	bl	80005e4 <__aeabi_i2d>
 8003390:	a35b      	add	r3, pc, #364	@ (adr r3, 8003500 <_etoa+0x328>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd f98f 	bl	80006b8 <__aeabi_dmul>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f7fc ffd1 	bl	8000348 <__aeabi_dsub>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 80033ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80033b6:	f7fd f97f 	bl	80006b8 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80033c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c4:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80033c8:	17da      	asrs	r2, r3, #31
 80033ca:	469a      	mov	sl, r3
 80033cc:	4693      	mov	fp, r2
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80033da:	2200      	movs	r2, #0
 80033dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80033e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80033e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	f7fc ffae 	bl	800034c <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4690      	mov	r8, r2
 80033f6:	4699      	mov	r9, r3
 80033f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033fc:	f04f 0000 	mov.w	r0, #0
 8003400:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003404:	f7fc ffa0 	bl	8000348 <__aeabi_dsub>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4692      	mov	sl, r2
 800340e:	469b      	mov	fp, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	4b3f      	ldr	r3, [pc, #252]	@ (8003514 <_etoa+0x33c>)
 8003416:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800341a:	f7fd fa77 	bl	800090c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	4b3b      	ldr	r3, [pc, #236]	@ (8003518 <_etoa+0x340>)
 800342c:	f7fc ff8e 	bl	800034c <__adddf3>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003438:	f7fd fa68 	bl	800090c <__aeabi_ddiv>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	4b34      	ldr	r3, [pc, #208]	@ (800351c <_etoa+0x344>)
 800344a:	f7fc ff7f 	bl	800034c <__adddf3>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003456:	f7fd fa59 	bl	800090c <__aeabi_ddiv>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4650      	mov	r0, sl
 8003460:	4659      	mov	r1, fp
 8003462:	f7fc ff73 	bl	800034c <__adddf3>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4640      	mov	r0, r8
 800346c:	4649      	mov	r1, r9
 800346e:	f7fd fa4d 	bl	800090c <__aeabi_ddiv>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <_etoa+0x348>)
 8003480:	f7fc ff64 	bl	800034c <__adddf3>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fd f914 	bl	80006b8 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800349c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034a0:	f7fd fb7c 	bl	8000b9c <__aeabi_dcmplt>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <_etoa+0x2ee>
    expval--;
 80034aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ac:	3b01      	subs	r3, #1
 80034ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 80034b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <_etoa+0x340>)
 80034ba:	f7fd fa27 	bl	800090c <__aeabi_ddiv>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80034c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c8:	2b63      	cmp	r3, #99	@ 0x63
 80034ca:	dc2b      	bgt.n	8003524 <_etoa+0x34c>
 80034cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ce:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80034d2:	db27      	blt.n	8003524 <_etoa+0x34c>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e026      	b.n	8003526 <_etoa+0x34e>
 80034d8:	509f79fb 	.word	0x509f79fb
 80034dc:	3fd34413 	.word	0x3fd34413
 80034e0:	8b60c8b3 	.word	0x8b60c8b3
 80034e4:	3fc68a28 	.word	0x3fc68a28
 80034e8:	636f4361 	.word	0x636f4361
 80034ec:	3fd287a7 	.word	0x3fd287a7
 80034f0:	0979a371 	.word	0x0979a371
 80034f4:	400a934f 	.word	0x400a934f
 80034f8:	bbb55516 	.word	0xbbb55516
 80034fc:	40026bb1 	.word	0x40026bb1
 8003500:	fefa39ef 	.word	0xfefa39ef
 8003504:	3fe62e42 	.word	0x3fe62e42
 8003508:	7fefffff 	.word	0x7fefffff
 800350c:	3ff80000 	.word	0x3ff80000
 8003510:	3fe00000 	.word	0x3fe00000
 8003514:	402c0000 	.word	0x402c0000
 8003518:	40240000 	.word	0x40240000
 800351c:	40180000 	.word	0x40180000
 8003520:	3ff00000 	.word	0x3ff00000
 8003524:	2305      	movs	r3, #5
 8003526:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003528:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800352c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03d      	beq.n	80035b0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003534:	a368      	add	r3, pc, #416	@ (adr r3, 80036d8 <_etoa+0x500>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800353e:	f7fd fb41 	bl	8000bc4 <__aeabi_dcmpge>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d024      	beq.n	8003592 <_etoa+0x3ba>
 8003548:	a365      	add	r3, pc, #404	@ (adr r3, 80036e0 <_etoa+0x508>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003552:	f7fd fb23 	bl	8000b9c <__aeabi_dcmplt>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800355c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003560:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003562:	429a      	cmp	r2, r3
 8003564:	da07      	bge.n	8003576 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8003566:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800356a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003574:	e002      	b.n	800357c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800357c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003590:	e00e      	b.n	80035b0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003592:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <_etoa+0x3d8>
 800359a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <_etoa+0x3d8>
        --prec;
 80035a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035aa:	3b01      	subs	r3, #1
 80035ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80035b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 80035b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80035ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035bc:	429a      	cmp	r2, r3
 80035be:	d904      	bls.n	80035ca <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80035c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c8:	e001      	b.n	80035ce <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80035ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <_etoa+0x40c>
 80035da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 80035e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <_etoa+0x426>
    value /= conv.F;
 80035ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035f2:	f7fd f98b 	bl	800090c <__aeabi_ddiv>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003602:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <_etoa+0x440>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e003      	b.n	8003620 <_etoa+0x448>
 8003618:	ed97 7b04 	vldr	d7, [r7, #16]
 800361c:	ed87 7b02 	vstr	d7, [r7, #8]
 8003620:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003628:	9302      	str	r3, [sp, #8]
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	ed97 0b02 	vldr	d0, [r7, #8]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003640:	f7ff fb72 	bl	8002d28 <_ftoa>
 8003644:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8003646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003648:	2b00      	cmp	r3, #0
 800364a:	d03f      	beq.n	80036cc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800364c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <_etoa+0x484>
 8003658:	2045      	movs	r0, #69	@ 0x45
 800365a:	e000      	b.n	800365e <_etoa+0x486>
 800365c:	2065      	movs	r0, #101	@ 0x65
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	1c53      	adds	r3, r2, #1
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800366c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366e:	2b00      	cmp	r3, #0
 8003670:	bfb8      	it	lt
 8003672:	425b      	neglt	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003678:	0fdb      	lsrs	r3, r3, #31
 800367a:	b2db      	uxtb	r3, r3
 800367c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800367e:	3a01      	subs	r2, #1
 8003680:	2105      	movs	r1, #5
 8003682:	9105      	str	r1, [sp, #20]
 8003684:	9204      	str	r2, [sp, #16]
 8003686:	2200      	movs	r2, #0
 8003688:	9203      	str	r2, [sp, #12]
 800368a:	220a      	movs	r2, #10
 800368c:	9202      	str	r2, [sp, #8]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	9000      	str	r0, [sp, #0]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	6a39      	ldr	r1, [r7, #32]
 8003698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800369a:	f7ff fa6f 	bl	8002b7c <_ntoa_long>
 800369e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80036a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00f      	beq.n	80036cc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80036ac:	e007      	b.n	80036be <_etoa+0x4e6>
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	1c53      	adds	r3, r2, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	2020      	movs	r0, #32
 80036bc:	47a0      	blx	r4
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f0      	bhi.n	80036ae <_etoa+0x4d6>
    }
  }
  return idx;
 80036cc:	69fb      	ldr	r3, [r7, #28]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3764      	adds	r7, #100	@ 0x64
 80036d2:	46bd      	mov	sp, r7
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	eb1c432d 	.word	0xeb1c432d
 80036dc:	3f1a36e2 	.word	0x3f1a36e2
 80036e0:	00000000 	.word	0x00000000
 80036e4:	412e8480 	.word	0x412e8480

080036e8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	b0a3      	sub	sp, #140	@ 0x8c
 80036ee:	af0a      	add	r7, sp, #40	@ 0x28
 80036f0:	6178      	str	r0, [r7, #20]
 80036f2:	6139      	str	r1, [r7, #16]
 80036f4:	60fa      	str	r2, [r7, #12]
 80036f6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 84cf 	bne.w	80040a2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8003704:	4ba8      	ldr	r3, [pc, #672]	@ (80039a8 <_vsnprintf+0x2c0>)
 8003706:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003708:	f000 bccb 	b.w	80040a2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b25      	cmp	r3, #37	@ 0x25
 8003712:	d00d      	beq.n	8003730 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	7818      	ldrb	r0, [r3, #0]
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	1c53      	adds	r3, r2, #1
 800371c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371e:	697c      	ldr	r4, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6939      	ldr	r1, [r7, #16]
 8003724:	47a0      	blx	r4
      format++;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3301      	adds	r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
      continue;
 800372c:	f000 bcb9 	b.w	80040a2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	3301      	adds	r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	3b20      	subs	r3, #32
 8003740:	2b10      	cmp	r3, #16
 8003742:	d857      	bhi.n	80037f4 <_vsnprintf+0x10c>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <_vsnprintf+0x64>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037f5 	.word	0x080037f5
 8003754:	080037f5 	.word	0x080037f5
 8003758:	080037e1 	.word	0x080037e1
 800375c:	080037f5 	.word	0x080037f5
 8003760:	080037f5 	.word	0x080037f5
 8003764:	080037f5 	.word	0x080037f5
 8003768:	080037f5 	.word	0x080037f5
 800376c:	080037f5 	.word	0x080037f5
 8003770:	080037f5 	.word	0x080037f5
 8003774:	080037f5 	.word	0x080037f5
 8003778:	080037b9 	.word	0x080037b9
 800377c:	080037f5 	.word	0x080037f5
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037f5 	.word	0x080037f5
 8003788:	080037f5 	.word	0x080037f5
 800378c:	08003791 	.word	0x08003791
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	2301      	movs	r3, #1
 80037a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a2:	e02a      	b.n	80037fa <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80037a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a6:	f043 0302 	orr.w	r3, r3, #2
 80037aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	2301      	movs	r3, #1
 80037b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037b6:	e020      	b.n	80037fa <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80037b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	2301      	movs	r3, #1
 80037c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ca:	e016      	b.n	80037fa <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80037cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	2301      	movs	r3, #1
 80037dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037de:	e00c      	b.n	80037fa <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80037e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037e2:	f043 0310 	orr.w	r3, r3, #16
 80037e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	2301      	movs	r3, #1
 80037f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f2:	e002      	b.n	80037fa <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80037f4:	2300      	movs	r3, #0
 80037f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037f8:	bf00      	nop
      }
    } while (n);
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d19c      	bne.n	800373a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f850 	bl	80028ae <_is_digit>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d006      	beq.n	8003822 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003814:	f107 0308 	add.w	r3, r7, #8
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f85f 	bl	80028dc <_atoi>
 800381e:	65b8      	str	r0, [r7, #88]	@ 0x58
 8003820:	e01a      	b.n	8003858 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b2a      	cmp	r3, #42	@ 0x2a
 8003828:	d116      	bne.n	8003858 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800382a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	2b00      	cmp	r3, #0
 800383c:	da07      	bge.n	800384e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800383e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	425b      	negs	r3, r3
 800384a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800384c:	e001      	b.n	8003852 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b2e      	cmp	r3, #46	@ 0x2e
 8003862:	d127      	bne.n	80038b4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800386a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f819 	bl	80028ae <_is_digit>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f828 	bl	80028dc <_atoi>
 800388c:	6578      	str	r0, [r7, #84]	@ 0x54
 800388e:	e011      	b.n	80038b4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b2a      	cmp	r3, #42	@ 0x2a
 8003896:	d10d      	bne.n	80038b4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003898:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038ac:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3b68      	subs	r3, #104	@ 0x68
 80038ba:	2b12      	cmp	r3, #18
 80038bc:	d866      	bhi.n	800398c <_vsnprintf+0x2a4>
 80038be:	a201      	add	r2, pc, #4	@ (adr r2, 80038c4 <_vsnprintf+0x1dc>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	08003937 	.word	0x08003937
 80038c8:	0800398d 	.word	0x0800398d
 80038cc:	0800396d 	.word	0x0800396d
 80038d0:	0800398d 	.word	0x0800398d
 80038d4:	08003911 	.word	0x08003911
 80038d8:	0800398d 	.word	0x0800398d
 80038dc:	0800398d 	.word	0x0800398d
 80038e0:	0800398d 	.word	0x0800398d
 80038e4:	0800398d 	.word	0x0800398d
 80038e8:	0800398d 	.word	0x0800398d
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	0800398d 	.word	0x0800398d
 80038f4:	0800395d 	.word	0x0800395d
 80038f8:	0800398d 	.word	0x0800398d
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	0800398d 	.word	0x0800398d
 8003904:	0800398d 	.word	0x0800398d
 8003908:	0800398d 	.word	0x0800398d
 800390c:	0800397d 	.word	0x0800397d
      case 'l' :
        flags |= FLAGS_LONG;
 8003910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003916:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3301      	adds	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b6c      	cmp	r3, #108	@ 0x6c
 8003924:	d134      	bne.n	8003990 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800392c:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003934:	e02c      	b.n	8003990 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3301      	adds	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b68      	cmp	r3, #104	@ 0x68
 800394a:	d123      	bne.n	8003994 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800394c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800394e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003952:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3301      	adds	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
        }
        break;
 800395a:	e01b      	b.n	8003994 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800395c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003962:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3301      	adds	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
        break;
 800396a:	e014      	b.n	8003996 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003972:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3301      	adds	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
        break;
 800397a:	e00c      	b.n	8003996 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800397c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003982:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3301      	adds	r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
        break;
 800398a:	e004      	b.n	8003996 <_vsnprintf+0x2ae>
      default :
        break;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <_vsnprintf+0x2ae>
        break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <_vsnprintf+0x2ae>
        break;
 8003994:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b67      	cmp	r3, #103	@ 0x67
 800399c:	f300 80b8 	bgt.w	8003b10 <_vsnprintf+0x428>
 80039a0:	2b25      	cmp	r3, #37	@ 0x25
 80039a2:	da27      	bge.n	80039f4 <_vsnprintf+0x30c>
 80039a4:	e370      	b.n	8004088 <_vsnprintf+0x9a0>
 80039a6:	bf00      	nop
 80039a8:	08002833 	.word	0x08002833
 80039ac:	3b69      	subs	r3, #105	@ 0x69
 80039ae:	2201      	movs	r2, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	f249 0241 	movw	r2, #36929	@ 0x9041
 80039b8:	401a      	ands	r2, r3
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	bf14      	ite	ne
 80039be:	2201      	movne	r2, #1
 80039c0:	2200      	moveq	r2, #0
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	2a00      	cmp	r2, #0
 80039c6:	f040 80aa 	bne.w	8003b1e <_vsnprintf+0x436>
 80039ca:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	bf14      	ite	ne
 80039d2:	2201      	movne	r2, #1
 80039d4:	2200      	moveq	r2, #0
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	2a00      	cmp	r2, #0
 80039da:	f040 82fb 	bne.w	8003fd4 <_vsnprintf+0x8ec>
 80039de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 828d 	bne.w	8003f0c <_vsnprintf+0x824>
 80039f2:	e349      	b.n	8004088 <_vsnprintf+0x9a0>
 80039f4:	3b25      	subs	r3, #37	@ 0x25
 80039f6:	2b42      	cmp	r3, #66	@ 0x42
 80039f8:	f200 8346 	bhi.w	8004088 <_vsnprintf+0x9a0>
 80039fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <_vsnprintf+0x31c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08004071 	.word	0x08004071
 8003a08:	08004089 	.word	0x08004089
 8003a0c:	08004089 	.word	0x08004089
 8003a10:	08004089 	.word	0x08004089
 8003a14:	08004089 	.word	0x08004089
 8003a18:	08004089 	.word	0x08004089
 8003a1c:	08004089 	.word	0x08004089
 8003a20:	08004089 	.word	0x08004089
 8003a24:	08004089 	.word	0x08004089
 8003a28:	08004089 	.word	0x08004089
 8003a2c:	08004089 	.word	0x08004089
 8003a30:	08004089 	.word	0x08004089
 8003a34:	08004089 	.word	0x08004089
 8003a38:	08004089 	.word	0x08004089
 8003a3c:	08004089 	.word	0x08004089
 8003a40:	08004089 	.word	0x08004089
 8003a44:	08004089 	.word	0x08004089
 8003a48:	08004089 	.word	0x08004089
 8003a4c:	08004089 	.word	0x08004089
 8003a50:	08004089 	.word	0x08004089
 8003a54:	08004089 	.word	0x08004089
 8003a58:	08004089 	.word	0x08004089
 8003a5c:	08004089 	.word	0x08004089
 8003a60:	08004089 	.word	0x08004089
 8003a64:	08004089 	.word	0x08004089
 8003a68:	08004089 	.word	0x08004089
 8003a6c:	08004089 	.word	0x08004089
 8003a70:	08004089 	.word	0x08004089
 8003a74:	08004089 	.word	0x08004089
 8003a78:	08004089 	.word	0x08004089
 8003a7c:	08004089 	.word	0x08004089
 8003a80:	08004089 	.word	0x08004089
 8003a84:	08003e25 	.word	0x08003e25
 8003a88:	08003dd5 	.word	0x08003dd5
 8003a8c:	08003e25 	.word	0x08003e25
 8003a90:	08004089 	.word	0x08004089
 8003a94:	08004089 	.word	0x08004089
 8003a98:	08004089 	.word	0x08004089
 8003a9c:	08004089 	.word	0x08004089
 8003aa0:	08004089 	.word	0x08004089
 8003aa4:	08004089 	.word	0x08004089
 8003aa8:	08004089 	.word	0x08004089
 8003aac:	08004089 	.word	0x08004089
 8003ab0:	08004089 	.word	0x08004089
 8003ab4:	08004089 	.word	0x08004089
 8003ab8:	08004089 	.word	0x08004089
 8003abc:	08004089 	.word	0x08004089
 8003ac0:	08004089 	.word	0x08004089
 8003ac4:	08004089 	.word	0x08004089
 8003ac8:	08004089 	.word	0x08004089
 8003acc:	08004089 	.word	0x08004089
 8003ad0:	08003b1f 	.word	0x08003b1f
 8003ad4:	08004089 	.word	0x08004089
 8003ad8:	08004089 	.word	0x08004089
 8003adc:	08004089 	.word	0x08004089
 8003ae0:	08004089 	.word	0x08004089
 8003ae4:	08004089 	.word	0x08004089
 8003ae8:	08004089 	.word	0x08004089
 8003aec:	08004089 	.word	0x08004089
 8003af0:	08004089 	.word	0x08004089
 8003af4:	08004089 	.word	0x08004089
 8003af8:	08003b1f 	.word	0x08003b1f
 8003afc:	08003e95 	.word	0x08003e95
 8003b00:	08003b1f 	.word	0x08003b1f
 8003b04:	08003e25 	.word	0x08003e25
 8003b08:	08003dd5 	.word	0x08003dd5
 8003b0c:	08003e25 	.word	0x08003e25
 8003b10:	2b78      	cmp	r3, #120	@ 0x78
 8003b12:	f300 82b9 	bgt.w	8004088 <_vsnprintf+0x9a0>
 8003b16:	2b69      	cmp	r3, #105	@ 0x69
 8003b18:	f6bf af48 	bge.w	80039ac <_vsnprintf+0x2c4>
 8003b1c:	e2b4      	b.n	8004088 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b78      	cmp	r3, #120	@ 0x78
 8003b24:	d003      	beq.n	8003b2e <_vsnprintf+0x446>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b58      	cmp	r3, #88	@ 0x58
 8003b2c:	d102      	bne.n	8003b34 <_vsnprintf+0x44c>
          base = 16U;
 8003b2e:	2310      	movs	r3, #16
 8003b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b32:	e013      	b.n	8003b5c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b6f      	cmp	r3, #111	@ 0x6f
 8003b3a:	d102      	bne.n	8003b42 <_vsnprintf+0x45a>
          base =  8U;
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b40:	e00c      	b.n	8003b5c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b62      	cmp	r3, #98	@ 0x62
 8003b48:	d102      	bne.n	8003b50 <_vsnprintf+0x468>
          base =  2U;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4e:	e005      	b.n	8003b5c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8003b50:	230a      	movs	r3, #10
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b58      	cmp	r3, #88	@ 0x58
 8003b62:	d103      	bne.n	8003b6c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8003b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b66:	f043 0320 	orr.w	r3, r3, #32
 8003b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b69      	cmp	r3, #105	@ 0x69
 8003b72:	d007      	beq.n	8003b84 <_vsnprintf+0x49c>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b64      	cmp	r3, #100	@ 0x64
 8003b7a:	d003      	beq.n	8003b84 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b7e:	f023 030c 	bic.w	r3, r3, #12
 8003b82:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003b84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b69      	cmp	r3, #105	@ 0x69
 8003b9c:	d004      	beq.n	8003ba8 <_vsnprintf+0x4c0>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	f040 8098 	bne.w	8003cd8 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d031      	beq.n	8003c16 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bb6:	3307      	adds	r3, #7
 8003bb8:	f023 0307 	bic.w	r3, r3, #7
 8003bbc:	f103 0208 	add.w	r2, r3, #8
 8003bc0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da06      	bge.n	8003be2 <_vsnprintf+0x4fa>
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f1d2 0800 	rsbs	r8, r2, #0
 8003bda:	eb61 0903 	sbc.w	r9, r1, r3
 8003bde:	4642      	mov	r2, r8
 8003be0:	464b      	mov	r3, r9
 8003be2:	69f9      	ldr	r1, [r7, #28]
 8003be4:	0fc9      	lsrs	r1, r1, #31
 8003be6:	b2c9      	uxtb	r1, r1
 8003be8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003bea:	2400      	movs	r4, #0
 8003bec:	4682      	mov	sl, r0
 8003bee:	46a3      	mov	fp, r4
 8003bf0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003bf2:	9008      	str	r0, [sp, #32]
 8003bf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bf6:	9007      	str	r0, [sp, #28]
 8003bf8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003bfa:	9006      	str	r0, [sp, #24]
 8003bfc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003c00:	9102      	str	r1, [sp, #8]
 8003c02:	e9cd 2300 	strd	r2, r3, [sp]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c0a:	6939      	ldr	r1, [r7, #16]
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7ff f81b 	bl	8002c48 <_ntoa_long_long>
 8003c12:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c14:	e0da      	b.n	8003dcc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c24:	1d1a      	adds	r2, r3, #4
 8003c26:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfb8      	it	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	4619      	mov	r1, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	0fdb      	lsrs	r3, r3, #31
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c40:	9205      	str	r2, [sp, #20]
 8003c42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c44:	9204      	str	r2, [sp, #16]
 8003c46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c48:	9203      	str	r2, [sp, #12]
 8003c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c4c:	9202      	str	r2, [sp, #8]
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	9100      	str	r1, [sp, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c56:	6939      	ldr	r1, [r7, #16]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f7fe ff8f 	bl	8002b7c <_ntoa_long>
 8003c5e:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c60:	e0b4      	b.n	8003dcc <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <_vsnprintf+0x594>
 8003c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c70:	1d1a      	adds	r2, r3, #4
 8003c72:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e012      	b.n	8003ca2 <_vsnprintf+0x5ba>
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <_vsnprintf+0x5ae>
 8003c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b21b      	sxth	r3, r3
 8003c94:	e005      	b.n	8003ca2 <_vsnprintf+0x5ba>
 8003c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	425b      	neglt	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	0fdb      	lsrs	r3, r3, #31
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cb6:	9205      	str	r2, [sp, #20]
 8003cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cba:	9204      	str	r2, [sp, #16]
 8003cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cbe:	9203      	str	r2, [sp, #12]
 8003cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc2:	9202      	str	r2, [sp, #8]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	9100      	str	r1, [sp, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ccc:	6939      	ldr	r1, [r7, #16]
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7fe ff54 	bl	8002b7c <_ntoa_long>
 8003cd4:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003cd6:	e079      	b.n	8003dcc <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d022      	beq.n	8003d28 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	f023 0307 	bic.w	r3, r3, #7
 8003cec:	f103 0208 	add.w	r2, r3, #8
 8003cf0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	460d      	mov	r5, r1
 8003cfe:	4606      	mov	r6, r0
 8003d00:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003d02:	9108      	str	r1, [sp, #32]
 8003d04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d06:	9107      	str	r1, [sp, #28]
 8003d08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d0a:	9106      	str	r1, [sp, #24]
 8003d0c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003d10:	2100      	movs	r1, #0
 8003d12:	9102      	str	r1, [sp, #8]
 8003d14:	e9cd 2300 	strd	r2, r3, [sp]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7fe ff92 	bl	8002c48 <_ntoa_long_long>
 8003d24:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003d26:	e051      	b.n	8003dcc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d018      	beq.n	8003d64 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d40:	9205      	str	r2, [sp, #20]
 8003d42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d44:	9204      	str	r2, [sp, #16]
 8003d46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d48:	9203      	str	r2, [sp, #12]
 8003d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4c:	9202      	str	r2, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d58:	6939      	ldr	r1, [r7, #16]
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7fe ff0e 	bl	8002b7c <_ntoa_long>
 8003d60:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003d62:	e033      	b.n	8003dcc <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <_vsnprintf+0x696>
 8003d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e012      	b.n	8003da4 <_vsnprintf+0x6bc>
 8003d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <_vsnprintf+0x6b0>
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	e005      	b.n	8003da4 <_vsnprintf+0x6bc>
 8003d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da8:	9305      	str	r3, [sp, #20]
 8003daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db0:	9303      	str	r3, [sp, #12]
 8003db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dc2:	6939      	ldr	r1, [r7, #16]
 8003dc4:	6978      	ldr	r0, [r7, #20]
 8003dc6:	f7fe fed9 	bl	8002b7c <_ntoa_long>
 8003dca:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
        break;
 8003dd2:	e166      	b.n	80040a2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b46      	cmp	r3, #70	@ 0x46
 8003dda:	d103      	bne.n	8003de4 <_vsnprintf+0x6fc>
 8003ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dde:	f043 0320 	orr.w	r3, r3, #32
 8003de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003de8:	3307      	adds	r3, #7
 8003dea:	f023 0307 	bic.w	r3, r3, #7
 8003dee:	f103 0208 	add.w	r2, r3, #8
 8003df2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003df6:	ed93 7b00 	vldr	d7, [r3]
 8003dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dfc:	9302      	str	r3, [sp, #8]
 8003dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	eeb0 0a47 	vmov.f32	s0, s14
 8003e0a:	eef0 0a67 	vmov.f32	s1, s15
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e12:	6939      	ldr	r1, [r7, #16]
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f7fe ff87 	bl	8002d28 <_ftoa>
 8003e1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
        break;
 8003e22:	e13e      	b.n	80040a2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b67      	cmp	r3, #103	@ 0x67
 8003e2a:	d003      	beq.n	8003e34 <_vsnprintf+0x74c>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b47      	cmp	r3, #71	@ 0x47
 8003e32:	d103      	bne.n	8003e3c <_vsnprintf+0x754>
 8003e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b45      	cmp	r3, #69	@ 0x45
 8003e42:	d003      	beq.n	8003e4c <_vsnprintf+0x764>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b47      	cmp	r3, #71	@ 0x47
 8003e4a:	d103      	bne.n	8003e54 <_vsnprintf+0x76c>
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e4e:	f043 0320 	orr.w	r3, r3, #32
 8003e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e58:	3307      	adds	r3, #7
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	f103 0208 	add.w	r2, r3, #8
 8003e62:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003e66:	ed93 7b00 	vldr	d7, [r3]
 8003e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	eeb0 0a47 	vmov.f32	s0, s14
 8003e7a:	eef0 0a67 	vmov.f32	s1, s15
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	f7ff f9a7 	bl	80031d8 <_etoa>
 8003e8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
        break;
 8003e92:	e106      	b.n	80040a2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003e94:	2301      	movs	r3, #1
 8003e96:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8003ea2:	e007      	b.n	8003eb4 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8003ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea6:	1c53      	adds	r3, r2, #1
 8003ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eaa:	697c      	ldr	r4, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6939      	ldr	r1, [r7, #16]
 8003eb0:	2020      	movs	r0, #32
 8003eb2:	47a0      	blx	r4
          while (l++ < width) {
 8003eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f1      	bhi.n	8003ea4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec4:	1d1a      	adds	r2, r3, #4
 8003ec6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	b2d8      	uxtb	r0, r3
 8003ece:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed0:	1c53      	adds	r3, r2, #1
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed4:	697c      	ldr	r4, [r7, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00e      	beq.n	8003f04 <_vsnprintf+0x81c>
          while (l++ < width) {
 8003ee6:	e007      	b.n	8003ef8 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eea:	1c53      	adds	r3, r2, #1
 8003eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eee:	697c      	ldr	r4, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	2020      	movs	r0, #32
 8003ef6:	47a0      	blx	r4
          while (l++ < width) {
 8003ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	647a      	str	r2, [r7, #68]	@ 0x44
 8003efe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d8f1      	bhi.n	8003ee8 <_vsnprintf+0x800>
          }
        }
        format++;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
        break;
 8003f0a:	e0ca      	b.n	80040a2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <_vsnprintf+0x83c>
 8003f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f22:	e001      	b.n	8003f28 <_vsnprintf+0x840>
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003f2c:	f7fe fca2 	bl	8002874 <_strnlen_s>
 8003f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8003f3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf28      	it	cs
 8003f44:	4613      	movcs	r3, r2
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11a      	bne.n	8003f88 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8003f52:	e007      	b.n	8003f64 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8003f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f56:	1c53      	adds	r3, r2, #1
 8003f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f5a:	697c      	ldr	r4, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6939      	ldr	r1, [r7, #16]
 8003f60:	2020      	movs	r0, #32
 8003f62:	47a0      	blx	r4
          while (l++ < width) {
 8003f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d8f1      	bhi.n	8003f54 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f70:	e00a      	b.n	8003f88 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8003f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f78:	7818      	ldrb	r0, [r3, #0]
 8003f7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f7c:	1c53      	adds	r3, r2, #1
 8003f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f80:	697c      	ldr	r4, [r7, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <_vsnprintf+0x8bc>
 8003f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0eb      	beq.n	8003f72 <_vsnprintf+0x88a>
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	1e5a      	subs	r2, r3, #1
 8003f9e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e6      	bne.n	8003f72 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00e      	beq.n	8003fcc <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003fae:	e007      	b.n	8003fc0 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fb2:	1c53      	adds	r3, r2, #1
 8003fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb6:	697c      	ldr	r4, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6939      	ldr	r1, [r7, #16]
 8003fbc:	2020      	movs	r0, #32
 8003fbe:	47a0      	blx	r4
          while (l++ < width) {
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d8f1      	bhi.n	8003fb0 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
        break;
 8003fd2:	e066      	b.n	80040a2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fda:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8003fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 8003fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d023      	beq.n	8004036 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	603a      	str	r2, [r7, #0]
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004004:	9308      	str	r3, [sp, #32]
 8004006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	9306      	str	r3, [sp, #24]
 800400e:	f04f 0210 	mov.w	r2, #16
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800401a:	2300      	movs	r3, #0
 800401c:	9302      	str	r3, [sp, #8]
 800401e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004022:	e9cd 3400 	strd	r3, r4, [sp]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402a:	6939      	ldr	r1, [r7, #16]
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7fe fe0b 	bl	8002c48 <_ntoa_long_long>
 8004032:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004034:	e018      	b.n	8004068 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004036:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800403a:	1d1a      	adds	r2, r3, #4
 800403c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404e:	9303      	str	r3, [sp, #12]
 8004050:	2310      	movs	r3, #16
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	2300      	movs	r3, #0
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	9200      	str	r2, [sp, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800405e:	6939      	ldr	r1, [r7, #16]
 8004060:	6978      	ldr	r0, [r7, #20]
 8004062:	f7fe fd8b 	bl	8002b7c <_ntoa_long>
 8004066:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3301      	adds	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
        break;
 800406e:	e018      	b.n	80040a2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004072:	1c53      	adds	r3, r2, #1
 8004074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004076:	697c      	ldr	r4, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	2025      	movs	r0, #37	@ 0x25
 800407e:	47a0      	blx	r4
        format++;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3301      	adds	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
        break;
 8004086:	e00c      	b.n	80040a2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	7818      	ldrb	r0, [r3, #0]
 800408c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800408e:	1c53      	adds	r3, r2, #1
 8004090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004092:	697c      	ldr	r4, [r7, #20]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	47a0      	blx	r4
        format++;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
        break;
 80040a0:	bf00      	nop
  while (*format)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f ab30 	bne.w	800370c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80040ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <_vsnprintf+0x9d2>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	e000      	b.n	80040bc <_vsnprintf+0x9d4>
 80040ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040bc:	697c      	ldr	r4, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6939      	ldr	r1, [r7, #16]
 80040c2:	2000      	movs	r0, #0
 80040c4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3764      	adds	r7, #100	@ 0x64
 80040cc:	46bd      	mov	sp, r7
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	bf00      	nop

080040d4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80040d4:	b40f      	push	{r0, r1, r2, r3}
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80040e2:	1d39      	adds	r1, r7, #4
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040ee:	4806      	ldr	r0, [pc, #24]	@ (8004108 <printf_+0x34>)
 80040f0:	f7ff fafa 	bl	80036e8 <_vsnprintf>
 80040f4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004102:	b004      	add	sp, #16
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	0800284f 	.word	0x0800284f

0800410c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 800410c:	b40e      	push	{r1, r2, r3}
 800410e:	b580      	push	{r7, lr}
 8004110:	b087      	sub	sp, #28
 8004112:	af02      	add	r7, sp, #8
 8004114:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004116:	f107 0320 	add.w	r3, r7, #32
 800411a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4805      	ldr	r0, [pc, #20]	@ (8004140 <sprintf_+0x34>)
 800412a:	f7ff fadd 	bl	80036e8 <_vsnprintf>
 800412e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413c:	b003      	add	sp, #12
 800413e:	4770      	bx	lr
 8004140:	08002805 	.word	0x08002805

08004144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <HAL_MspInit+0x4c>)
 800414c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414e:	4a10      	ldr	r2, [pc, #64]	@ (8004190 <HAL_MspInit+0x4c>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6613      	str	r3, [r2, #96]	@ 0x60
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <HAL_MspInit+0x4c>)
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_MspInit+0x4c>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	4a0a      	ldr	r2, [pc, #40]	@ (8004190 <HAL_MspInit+0x4c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6593      	str	r3, [r2, #88]	@ 0x58
 800416e:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <HAL_MspInit+0x4c>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	210f      	movs	r1, #15
 800417e:	f06f 0001 	mvn.w	r0, #1
 8004182:	f001 fff1 	bl	8006168 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08c      	sub	sp, #48	@ 0x30
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80041a2:	4b2e      	ldr	r3, [pc, #184]	@ (800425c <HAL_InitTick+0xc8>)
 80041a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a6:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <HAL_InitTick+0xc8>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80041ae:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_InitTick+0xc8>)
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041ba:	f107 020c 	add.w	r2, r7, #12
 80041be:	f107 0310 	add.w	r3, r7, #16
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fff5 	bl	80081b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80041ca:	f003 ffdd 	bl	8008188 <HAL_RCC_GetPCLK2Freq>
 80041ce:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	4a23      	ldr	r2, [pc, #140]	@ (8004260 <HAL_InitTick+0xcc>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0c9b      	lsrs	r3, r3, #18
 80041da:	3b01      	subs	r3, #1
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80041de:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <HAL_InitTick+0xd0>)
 80041e0:	4a21      	ldr	r2, [pc, #132]	@ (8004268 <HAL_InitTick+0xd4>)
 80041e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80041e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_InitTick+0xd0>)
 80041e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041ea:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80041ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004264 <HAL_InitTick+0xd0>)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <HAL_InitTick+0xd0>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <HAL_InitTick+0xd0>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fe:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_InitTick+0xd0>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8004204:	4817      	ldr	r0, [pc, #92]	@ (8004264 <HAL_InitTick+0xd0>)
 8004206:	f004 fd23 	bl	8008c50 <HAL_TIM_Base_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11b      	bne.n	8004250 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8004218:	4812      	ldr	r0, [pc, #72]	@ (8004264 <HAL_InitTick+0xd0>)
 800421a:	f004 fdd9 	bl	8008dd0 <HAL_TIM_Base_Start_IT>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800422c:	201a      	movs	r0, #26
 800422e:	f001 ffb7 	bl	80061a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d808      	bhi.n	800424a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8004238:	2200      	movs	r2, #0
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	201a      	movs	r0, #26
 800423e:	f001 ff93 	bl	8006168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <HAL_InitTick+0xd8>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e002      	b.n	8004250 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004254:	4618      	mov	r0, r3
 8004256:	3730      	adds	r7, #48	@ 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	431bde83 	.word	0x431bde83
 8004264:	2000072c 	.word	0x2000072c
 8004268:	40014800 	.word	0x40014800
 800426c:	20000008 	.word	0x20000008

08004270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <NMI_Handler+0x4>

08004278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <MemManage_Handler+0x4>

08004288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <BusFault_Handler+0x4>

08004290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <UsageFault_Handler+0x4>

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042ac:	4802      	ldr	r0, [pc, #8]	@ (80042b8 <DMA1_Channel1_IRQHandler+0x10>)
 80042ae:	f002 f89d 	bl	80063ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000664 	.word	0x20000664

080042bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042c0:	4802      	ldr	r0, [pc, #8]	@ (80042cc <ADC1_2_IRQHandler+0x10>)
 80042c2:	f000 fe4d 	bl	8004f60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000600 	.word	0x20000600

080042d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80042d6:	f004 fdeb 	bl	8008eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	2000072c 	.word	0x2000072c

080042e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return 1;
 80042e8:	2301      	movs	r3, #1
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_kill>:

int _kill(int pid, int sig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042fe:	f00c f865 	bl	80103cc <__errno>
 8004302:	4603      	mov	r3, r0
 8004304:	2216      	movs	r2, #22
 8004306:	601a      	str	r2, [r3, #0]
  return -1;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_exit>:

void _exit (int status)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800431c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffe7 	bl	80042f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <_exit+0x12>

0800432a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e00a      	b.n	8004352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800433c:	f3af 8000 	nop.w
 8004340:	4601      	mov	r1, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	60ba      	str	r2, [r7, #8]
 8004348:	b2ca      	uxtb	r2, r1
 800434a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	dbf0      	blt.n	800433c <_read+0x12>
  }

  return len;
 800435a:	687b      	ldr	r3, [r7, #4]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e009      	b.n	800438a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	60ba      	str	r2, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	dbf1      	blt.n	8004376 <_write+0x12>
  }
  return len;
 8004392:	687b      	ldr	r3, [r7, #4]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_close>:

int _close(int file)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043c4:	605a      	str	r2, [r3, #4]
  return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_isatty>:

int _isatty(int file)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043dc:	2301      	movs	r3, #1
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800440c:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <_sbrk+0x5c>)
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <_sbrk+0x60>)
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <_sbrk+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <_sbrk+0x64>)
 8004422:	4a12      	ldr	r2, [pc, #72]	@ (800446c <_sbrk+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d207      	bcs.n	8004444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004434:	f00b ffca 	bl	80103cc <__errno>
 8004438:	4603      	mov	r3, r0
 800443a:	220c      	movs	r2, #12
 800443c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004442:	e009      	b.n	8004458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <_sbrk+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800444a:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <_sbrk+0x64>)
 8004454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20018000 	.word	0x20018000
 8004464:	00000400 	.word	0x00000400
 8004468:	20000778 	.word	0x20000778
 800446c:	200093f0 	.word	0x200093f0

08004470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <SystemInit+0x20>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <SystemInit+0x20>)
 800447c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <MX_TIM4_Init+0x98>)
 80044b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044ba:	2202      	movs	r2, #2
 80044bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044be:	4b1a      	ldr	r3, [pc, #104]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 634;
 80044c4:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044c6:	f240 227a 	movw	r2, #634	@ 0x27a
 80044ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044cc:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044d8:	4813      	ldr	r0, [pc, #76]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044da:	f004 fbb9 	bl	8008c50 <HAL_TIM_Base_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80044e4:	f7fe f988 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044ee:	f107 0310 	add.w	r3, r7, #16
 80044f2:	4619      	mov	r1, r3
 80044f4:	480c      	ldr	r0, [pc, #48]	@ (8004528 <MX_TIM4_Init+0x94>)
 80044f6:	f004 fde2 	bl	80090be <HAL_TIM_ConfigClockSource>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004500:	f7fe f97a 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004504:	2320      	movs	r3, #32
 8004506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4805      	ldr	r0, [pc, #20]	@ (8004528 <MX_TIM4_Init+0x94>)
 8004512:	f005 f805 	bl	8009520 <HAL_TIMEx_MasterConfigSynchronization>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800451c:	f7fe f96c 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004520:	bf00      	nop
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000077c 	.word	0x2000077c
 800452c:	40000800 	.word	0x40000800

08004530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0a      	ldr	r2, [pc, #40]	@ (8004568 <HAL_TIM_Base_MspInit+0x38>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10b      	bne.n	800455a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_TIM_Base_MspInit+0x3c>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <HAL_TIM_Base_MspInit+0x3c>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6593      	str	r3, [r2, #88]	@ 0x58
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <HAL_TIM_Base_MspInit+0x3c>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40000800 	.word	0x40000800
 800456c:	40021000 	.word	0x40021000

08004570 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 8004576:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <MX_USART2_UART_Init+0x5c>)
 8004578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800457a:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 800457c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004582:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004588:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800458e:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 8004590:	2200      	movs	r2, #0
 8004592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 8004596:	220c      	movs	r2, #12
 8004598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 800459c:	2200      	movs	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045a6:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045b2:	4805      	ldr	r0, [pc, #20]	@ (80045c8 <MX_USART2_UART_Init+0x58>)
 80045b4:	f005 f85a 	bl	800966c <HAL_UART_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80045be:	f7fe f91b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200007c8 	.word	0x200007c8
 80045cc:	40004400 	.word	0x40004400

080045d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ac      	sub	sp, #176	@ 0xb0
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2288      	movs	r2, #136	@ 0x88
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f00b fe98 	bl	8010326 <memset>
  if(uartHandle->Instance==USART2)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <HAL_UART_MspInit+0xb0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d13b      	bne.n	8004678 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004600:	2302      	movs	r3, #2
 8004602:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004604:	2300      	movs	r3, #0
 8004606:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4618      	mov	r0, r3
 800460e:	f003 fe63 	bl	80082d8 <HAL_RCCEx_PeriphCLKConfig>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004618:	f7fe f8ee 	bl	80027f8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	4a18      	ldr	r2, [pc, #96]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004626:	6593      	str	r3, [r2, #88]	@ 0x58
 8004628:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004634:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 8004636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004638:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <HAL_UART_MspInit+0xb4>)
 8004642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800464c:	230c      	movs	r3, #12
 800464e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465e:	2303      	movs	r3, #3
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004664:	2307      	movs	r3, #7
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004674:	f001 ff9a 	bl	80065ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004678:	bf00      	nop
 800467a:	37b0      	adds	r7, #176	@ 0xb0
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40004400 	.word	0x40004400
 8004684:	40021000 	.word	0x40021000

08004688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800468c:	f7ff fef0 	bl	8004470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004690:	480c      	ldr	r0, [pc, #48]	@ (80046c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004692:	490d      	ldr	r1, [pc, #52]	@ (80046c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004694:	4a0d      	ldr	r2, [pc, #52]	@ (80046cc <LoopForever+0xe>)
  movs r3, #0
 8004696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004698:	e002      	b.n	80046a0 <LoopCopyDataInit>

0800469a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800469c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800469e:	3304      	adds	r3, #4

080046a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a4:	d3f9      	bcc.n	800469a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046a8:	4c0a      	ldr	r4, [pc, #40]	@ (80046d4 <LoopForever+0x16>)
  movs r3, #0
 80046aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046ac:	e001      	b.n	80046b2 <LoopFillZerobss>

080046ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b0:	3204      	adds	r2, #4

080046b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b4:	d3fb      	bcc.n	80046ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046b6:	f00b fe8f 	bl	80103d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046ba:	f7fe f81f 	bl	80026fc <main>

080046be <LoopForever>:

LoopForever:
    b LoopForever
 80046be:	e7fe      	b.n	80046be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80046c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80046cc:	08026140 	.word	0x08026140
  ldr r2, =_sbss
 80046d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80046d4:	200093f0 	.word	0x200093f0

080046d8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046d8:	e7fe      	b.n	80046d8 <ADC3_IRQHandler>
	...

080046dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <HAL_Init+0x3c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004718 <HAL_Init+0x3c>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f2:	2003      	movs	r0, #3
 80046f4:	f001 fd2d 	bl	8006152 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046f8:	200f      	movs	r0, #15
 80046fa:	f7ff fd4b 	bl	8004194 <HAL_InitTick>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	71fb      	strb	r3, [r7, #7]
 8004708:	e001      	b.n	800470e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800470a:	f7ff fd1b 	bl	8004144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800470e:	79fb      	ldrb	r3, [r7, #7]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40022000 	.word	0x40022000

0800471c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_IncTick+0x20>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <HAL_IncTick+0x24>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4413      	add	r3, r2
 800472c:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <HAL_IncTick+0x24>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000000c 	.word	0x2000000c
 8004740:	20000850 	.word	0x20000850

08004744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return uwTick;
 8004748:	4b03      	ldr	r3, [pc, #12]	@ (8004758 <HAL_GetTick+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000850 	.word	0x20000850

0800475c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3360      	adds	r3, #96	@ 0x60
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <LL_ADC_SetOffset+0x44>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	03fff000 	.word	0x03fff000

0800480c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3360      	adds	r3, #96	@ 0x60
 800481a:	461a      	mov	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3360      	adds	r3, #96	@ 0x60
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3330      	adds	r3, #48	@ 0x30
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	211f      	movs	r1, #31
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0e9b      	lsrs	r3, r3, #26
 80048cc:	f003 011f 	and.w	r1, r3, #31
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	431a      	orrs	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3314      	adds	r3, #20
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	0e5b      	lsrs	r3, r3, #25
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	4413      	add	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0d1b      	lsrs	r3, r3, #20
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2107      	movs	r1, #7
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	0d1b      	lsrs	r3, r3, #20
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	431a      	orrs	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0318 	and.w	r3, r3, #24
 800498a:	4908      	ldr	r1, [pc, #32]	@ (80049ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800498c:	40d9      	lsrs	r1, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	400b      	ands	r3, r1
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	431a      	orrs	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	0007ffff 	.word	0x0007ffff

080049b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 031f 	and.w	r3, r3, #31
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80049f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6093      	str	r3, [r2, #8]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a20:	d101      	bne.n	8004a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a70:	d101      	bne.n	8004a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a98:	f043 0201 	orr.w	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <LL_ADC_IsEnabled+0x18>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <LL_ADC_IsEnabled+0x1a>
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ae2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d101      	bne.n	8004b38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b089      	sub	sp, #36	@ 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e130      	b.n	8004dc4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc fe43 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff3f 	bl	8004a0c <LL_ADC_IsDeepPowerDownEnabled>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff25 	bl	80049e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff5a 	bl	8004a5c <LL_ADC_IsInternalRegulatorEnabled>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff3e 	bl	8004a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb8:	4b84      	ldr	r3, [pc, #528]	@ (8004dcc <HAL_ADC_Init+0x284>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	4a84      	ldr	r2, [pc, #528]	@ (8004dd0 <HAL_ADC_Init+0x288>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bcc:	e002      	b.n	8004bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f9      	bne.n	8004bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff3c 	bl	8004a5c <LL_ADC_IsInternalRegulatorEnabled>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	f043 0210 	orr.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f043 0201 	orr.w	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff75 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80c9 	bne.w	8004db2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 80c5 	bne.w	8004db2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c30:	f043 0202 	orr.w	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff35 	bl	8004aac <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d115      	bne.n	8004c74 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c48:	4862      	ldr	r0, [pc, #392]	@ (8004dd4 <HAL_ADC_Init+0x28c>)
 8004c4a:	f7ff ff2f 	bl	8004aac <LL_ADC_IsEnabled>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4861      	ldr	r0, [pc, #388]	@ (8004dd8 <HAL_ADC_Init+0x290>)
 8004c52:	f7ff ff2b 	bl	8004aac <LL_ADC_IsEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	431c      	orrs	r4, r3
 8004c5a:	4860      	ldr	r0, [pc, #384]	@ (8004ddc <HAL_ADC_Init+0x294>)
 8004c5c:	f7ff ff26 	bl	8004aac <LL_ADC_IsEnabled>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4323      	orrs	r3, r4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	485c      	ldr	r0, [pc, #368]	@ (8004de0 <HAL_ADC_Init+0x298>)
 8004c70:	f7ff fd74 	bl	800475c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7e5b      	ldrb	r3, [r3, #25]
 8004c78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d106      	bne.n	8004cb0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	045b      	lsls	r3, r3, #17
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <HAL_ADC_Init+0x29c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff1b 	bl	8004b20 <LL_ADC_INJ_IsConversionOngoing>
 8004cea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d13d      	bne.n	8004d6e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d13a      	bne.n	8004d6e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cfc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d04:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d14:	f023 0302 	bic.w	r3, r3, #2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d118      	bne.n	8004d5e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d36:	f023 0304 	bic.w	r3, r3, #4
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d42:	4311      	orrs	r1, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d48:	4311      	orrs	r1, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	611a      	str	r2, [r3, #16]
 8004d5c:	e007      	b.n	8004d6e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10c      	bne.n	8004d90 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	f023 010f 	bic.w	r1, r3, #15
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d8e:	e007      	b.n	8004da0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 020f 	bic.w	r2, r2, #15
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
 8004db0:	e007      	b.n	8004dc2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	f043 0210 	orr.w	r2, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3724      	adds	r7, #36	@ 0x24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd90      	pop	{r4, r7, pc}
 8004dcc:	20000004 	.word	0x20000004
 8004dd0:	053e2d63 	.word	0x053e2d63
 8004dd4:	50040000 	.word	0x50040000
 8004dd8:	50040100 	.word	0x50040100
 8004ddc:	50040200 	.word	0x50040200
 8004de0:	50040300 	.word	0x50040300
 8004de4:	fff0c007 	.word	0xfff0c007

08004de8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004df4:	4853      	ldr	r0, [pc, #332]	@ (8004f44 <HAL_ADC_Start_DMA+0x15c>)
 8004df6:	f7ff fddb 	bl	80049b0 <LL_ADC_GetMultimode>
 8004dfa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fe7a 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f040 8093 	bne.w	8004f34 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_ADC_Start_DMA+0x34>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e08e      	b.n	8004f3a <HAL_ADC_Start_DMA+0x152>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a47      	ldr	r2, [pc, #284]	@ (8004f48 <HAL_ADC_Start_DMA+0x160>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d008      	beq.n	8004e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d002      	beq.n	8004e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	d172      	bne.n	8004f26 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 feb7 	bl	8005bb4 <ADC_Enable>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d165      	bne.n	8004f1c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a38      	ldr	r2, [pc, #224]	@ (8004f4c <HAL_ADC_Start_DMA+0x164>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d002      	beq.n	8004e74 <HAL_ADC_Start_DMA+0x8c>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	e000      	b.n	8004e76 <HAL_ADC_Start_DMA+0x8e>
 8004e74:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_ADC_Start_DMA+0x168>)
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d002      	beq.n	8004e84 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea0:	f023 0206 	bic.w	r2, r3, #6
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ea8:	e002      	b.n	8004eb0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb4:	4a27      	ldr	r2, [pc, #156]	@ (8004f54 <HAL_ADC_Start_DMA+0x16c>)
 8004eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebc:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <HAL_ADC_Start_DMA+0x170>)
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec4:	4a25      	ldr	r2, [pc, #148]	@ (8004f5c <HAL_ADC_Start_DMA+0x174>)
 8004ec6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	221c      	movs	r2, #28
 8004ece:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0210 	orr.w	r2, r2, #16
 8004ee6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3340      	adds	r3, #64	@ 0x40
 8004f02:	4619      	mov	r1, r3
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f001 fa10 	bl	800632c <HAL_DMA_Start_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fddc 	bl	8004ad2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004f1a:	e00d      	b.n	8004f38 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004f24:	e008      	b.n	8004f38 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004f32:	e001      	b.n	8004f38 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	50040300 	.word	0x50040300
 8004f48:	50040200 	.word	0x50040200
 8004f4c:	50040100 	.word	0x50040100
 8004f50:	50040000 	.word	0x50040000
 8004f54:	08005cc1 	.word	0x08005cc1
 8004f58:	08005d99 	.word	0x08005d99
 8004f5c:	08005db5 	.word	0x08005db5

08004f60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f7c:	4882      	ldr	r0, [pc, #520]	@ (8005188 <HAL_ADC_IRQHandler+0x228>)
 8004f7e:	f7ff fd17 	bl	80049b0 <LL_ADC_GetMultimode>
 8004f82:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d017      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x5e>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 ff67 	bl	8005e84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_IRQHandler+0x72>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8083 	beq.w	80050e4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07d      	beq.n	80050e4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fc32 	bl	800486e <LL_ADC_REG_IsTriggerSourceSWStart>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d062      	beq.n	80050d6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	@ (800518c <HAL_ADC_IRQHandler+0x22c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d002      	beq.n	8005020 <HAL_ADC_IRQHandler+0xc0>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e000      	b.n	8005022 <HAL_ADC_IRQHandler+0xc2>
 8005020:	4b5b      	ldr	r3, [pc, #364]	@ (8005190 <HAL_ADC_IRQHandler+0x230>)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	4293      	cmp	r3, r2
 8005028:	d008      	beq.n	800503c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d002      	beq.n	800503c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b09      	cmp	r3, #9
 800503a:	d104      	bne.n	8005046 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	623b      	str	r3, [r7, #32]
 8005044:	e00c      	b.n	8005060 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a50      	ldr	r2, [pc, #320]	@ (800518c <HAL_ADC_IRQHandler+0x22c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d002      	beq.n	8005056 <HAL_ADC_IRQHandler+0xf6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	e000      	b.n	8005058 <HAL_ADC_IRQHandler+0xf8>
 8005056:	4b4e      	ldr	r3, [pc, #312]	@ (8005190 <HAL_ADC_IRQHandler+0x230>)
 8005058:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d135      	bne.n	80050d6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d12e      	bne.n	80050d6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fd3c 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11a      	bne.n	80050be <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 020c 	bic.w	r2, r2, #12
 8005096:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d112      	bne.n	80050d6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80050bc:	e00b      	b.n	80050d6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	f043 0210 	orr.w	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fd f9f4 	bl	80024c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	220c      	movs	r2, #12
 80050e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x198>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 809f 	beq.w	8005242 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8099 	beq.w	8005242 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fbdd 	bl	80048ec <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005132:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fb98 	bl	800486e <LL_ADC_REG_IsTriggerSourceSWStart>
 800513e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a11      	ldr	r2, [pc, #68]	@ (800518c <HAL_ADC_IRQHandler+0x22c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d002      	beq.n	8005150 <HAL_ADC_IRQHandler+0x1f0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	e000      	b.n	8005152 <HAL_ADC_IRQHandler+0x1f2>
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <HAL_ADC_IRQHandler+0x230>)
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	4293      	cmp	r3, r2
 8005158:	d008      	beq.n	800516c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d002      	beq.n	800516c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b07      	cmp	r3, #7
 800516a:	d104      	bne.n	8005176 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	e013      	b.n	800519e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a04      	ldr	r2, [pc, #16]	@ (800518c <HAL_ADC_IRQHandler+0x22c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_ADC_IRQHandler+0x234>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	e007      	b.n	8005196 <HAL_ADC_IRQHandler+0x236>
 8005186:	bf00      	nop
 8005188:	50040300 	.word	0x50040300
 800518c:	50040100 	.word	0x50040100
 8005190:	50040000 	.word	0x50040000
 8005194:	4b7d      	ldr	r3, [pc, #500]	@ (800538c <HAL_ADC_IRQHandler+0x42c>)
 8005196:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d047      	beq.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_ADC_IRQHandler+0x25e>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03f      	beq.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d13a      	bne.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c8:	2b40      	cmp	r3, #64	@ 0x40
 80051ca:	d133      	bne.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12e      	bne.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fca0 	bl	8004b20 <LL_ADC_INJ_IsConversionOngoing>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d11a      	bne.n	800521c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d112      	bne.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
 800521a:	e00b      	b.n	8005234 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005220:	f043 0210 	orr.w	r2, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fdfd 	bl	8005e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2260      	movs	r2, #96	@ 0x60
 8005240:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_ADC_IRQHandler+0x310>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00c      	beq.n	8005270 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8a0 	bl	80053a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	@ 0x80
 800526e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <HAL_ADC_IRQHandler+0x340>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fde3 	bl	8005e5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d012      	beq.n	80052d0 <HAL_ADC_IRQHandler+0x370>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fdd5 	bl	8005e70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d036      	beq.n	8005348 <HAL_ADC_IRQHandler+0x3e8>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d031      	beq.n	8005348 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80052ec:	2301      	movs	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f0:	e014      	b.n	800531c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80052f8:	4825      	ldr	r0, [pc, #148]	@ (8005390 <HAL_ADC_IRQHandler+0x430>)
 80052fa:	f7ff fb67 	bl	80049cc <LL_ADC_GetMultiDMATransfer>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
 8005308:	e008      	b.n	800531c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005318:	2301      	movs	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10e      	bne.n	8005340 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	f043 0202 	orr.w	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f83e 	bl	80053bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <HAL_ADC_IRQHandler+0x424>
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005360:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536c:	f043 0208 	orr.w	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800537c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fd62 	bl	8005e48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005384:	bf00      	nop
 8005386:	3728      	adds	r7, #40	@ 0x28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	50040000 	.word	0x50040000
 8005390:	50040300 	.word	0x50040300

08005394 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0b6      	sub	sp, #216	@ 0xd8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x22>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e3c9      	b.n	8005b86 <HAL_ADC_ConfigChannel+0x7b6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fb7b 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 83aa 	bne.w	8005b60 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b05      	cmp	r3, #5
 800541a:	d824      	bhi.n	8005466 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	3b02      	subs	r3, #2
 8005422:	2b03      	cmp	r3, #3
 8005424:	d81b      	bhi.n	800545e <HAL_ADC_ConfigChannel+0x8e>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_ADC_ConfigChannel+0x5c>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005445 	.word	0x08005445
 8005434:	0800544d 	.word	0x0800544d
 8005438:	08005455 	.word	0x08005455
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800543c:	230c      	movs	r3, #12
 800543e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005442:	e010      	b.n	8005466 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005444:	2312      	movs	r3, #18
 8005446:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800544a:	e00c      	b.n	8005466 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800544c:	2318      	movs	r3, #24
 800544e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005452:	e008      	b.n	8005466 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800545c:	e003      	b.n	8005466 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800545e:	2306      	movs	r3, #6
 8005460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005464:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005474:	f7ff fa0e 	bl	8004894 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fb3c 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8005482:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fb48 	bl	8004b20 <LL_ADC_INJ_IsConversionOngoing>
 8005490:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 81a4 	bne.w	80057e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800549e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 819f 	bne.w	80057e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f7ff fa2c 	bl	8004912 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d00a      	beq.n	80054f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6919      	ldr	r1, [r3, #16]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054ec:	f7ff f96a 	bl	80047c4 <LL_ADC_SetOffset>
 80054f0:	e179      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f987 	bl	800480c <LL_ADC_GetOffsetChannel>
 80054fe:	4603      	mov	r3, r0
 8005500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <HAL_ADC_ConfigChannel+0x14e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f97c 	bl	800480c <LL_ADC_GetOffsetChannel>
 8005514:	4603      	mov	r3, r0
 8005516:	0e9b      	lsrs	r3, r3, #26
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	e01e      	b.n	800555c <HAL_ADC_ConfigChannel+0x18c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff f971 	bl	800480c <LL_ADC_GetOffsetChannel>
 800552a:	4603      	mov	r3, r0
 800552c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800553c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005540:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800554c:	2320      	movs	r3, #32
 800554e:	e004      	b.n	800555a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005554:	fab3 f383 	clz	r3, r3
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x1a4>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0e9b      	lsrs	r3, r3, #26
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	e018      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x1d6>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005598:	2320      	movs	r3, #32
 800559a:	e004      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800559c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d106      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f940 	bl	8004838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff f924 	bl	800480c <LL_ADC_GetOffsetChannel>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x214>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f919 	bl	800480c <LL_ADC_GetOffsetChannel>
 80055da:	4603      	mov	r3, r0
 80055dc:	0e9b      	lsrs	r3, r3, #26
 80055de:	f003 021f 	and.w	r2, r3, #31
 80055e2:	e01e      	b.n	8005622 <HAL_ADC_ConfigChannel+0x252>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f90e 	bl	800480c <LL_ADC_GetOffsetChannel>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800560a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005612:	2320      	movs	r3, #32
 8005614:	e004      	b.n	8005620 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_ADC_ConfigChannel+0x26a>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	0e9b      	lsrs	r3, r3, #26
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	e018      	b.n	800566c <HAL_ADC_ConfigChannel+0x29c>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800564e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005652:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800565e:	2320      	movs	r3, #32
 8005660:	e004      	b.n	800566c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005662:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005666:	fab3 f383 	clz	r3, r3
 800566a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800566c:	429a      	cmp	r2, r3
 800566e:	d106      	bne.n	800567e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	2101      	movs	r1, #1
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f8dd 	bl	8004838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2102      	movs	r1, #2
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff f8c1 	bl	800480c <LL_ADC_GetOffsetChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x2da>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff f8b6 	bl	800480c <LL_ADC_GetOffsetChannel>
 80056a0:	4603      	mov	r3, r0
 80056a2:	0e9b      	lsrs	r3, r3, #26
 80056a4:	f003 021f 	and.w	r2, r3, #31
 80056a8:	e01e      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x318>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f8ab 	bl	800480c <LL_ADC_GetOffsetChannel>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80056c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80056d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80056d8:	2320      	movs	r3, #32
 80056da:	e004      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80056dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x330>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0e9b      	lsrs	r3, r3, #26
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	e014      	b.n	800572a <HAL_ADC_ConfigChannel+0x35a>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800570e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	e004      	b.n	800572a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005724:	fab3 f383 	clz	r3, r3
 8005728:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800572a:	429a      	cmp	r2, r3
 800572c:	d106      	bne.n	800573c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	2102      	movs	r1, #2
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff f87e 	bl	8004838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2103      	movs	r1, #3
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff f862 	bl	800480c <LL_ADC_GetOffsetChannel>
 8005748:	4603      	mov	r3, r0
 800574a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x398>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2103      	movs	r1, #3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f857 	bl	800480c <LL_ADC_GetOffsetChannel>
 800575e:	4603      	mov	r3, r0
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	f003 021f 	and.w	r2, r3, #31
 8005766:	e017      	b.n	8005798 <HAL_ADC_ConfigChannel+0x3c8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2103      	movs	r1, #3
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f84c 	bl	800480c <LL_ADC_GetOffsetChannel>
 8005774:	4603      	mov	r3, r0
 8005776:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005782:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800578a:	2320      	movs	r3, #32
 800578c:	e003      	b.n	8005796 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800578e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x3e0>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0e9b      	lsrs	r3, r3, #26
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	e011      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x404>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057b8:	fa93 f3a3 	rbit	r3, r3
 80057bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80057be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80057c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80057c8:	2320      	movs	r3, #32
 80057ca:	e003      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80057cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d106      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2200      	movs	r2, #0
 80057de:	2103      	movs	r1, #3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f829 	bl	8004838 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f95e 	bl	8004aac <LL_ADC_IsEnabled>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 8140 	bne.w	8005a78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	461a      	mov	r2, r3
 8005806:	f7ff f8af 	bl	8004968 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4a8f      	ldr	r2, [pc, #572]	@ (8005a4c <HAL_ADC_ConfigChannel+0x67c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	f040 8131 	bne.w	8005a78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_ADC_ConfigChannel+0x46e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0e9b      	lsrs	r3, r3, #26
 800582c:	3301      	adds	r3, #1
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2b09      	cmp	r3, #9
 8005834:	bf94      	ite	ls
 8005836:	2301      	movls	r3, #1
 8005838:	2300      	movhi	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e019      	b.n	8005872 <HAL_ADC_ConfigChannel+0x4a2>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800584c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005856:	2320      	movs	r3, #32
 8005858:	e003      	b.n	8005862 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800585a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800585c:	fab3 f383 	clz	r3, r3
 8005860:	b2db      	uxtb	r3, r3
 8005862:	3301      	adds	r3, #1
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2b09      	cmp	r3, #9
 800586a:	bf94      	ite	ls
 800586c:	2301      	movls	r3, #1
 800586e:	2300      	movhi	r3, #0
 8005870:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005872:	2b00      	cmp	r3, #0
 8005874:	d079      	beq.n	800596a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587e:	2b00      	cmp	r3, #0
 8005880:	d107      	bne.n	8005892 <HAL_ADC_ConfigChannel+0x4c2>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	3301      	adds	r3, #1
 800588a:	069b      	lsls	r3, r3, #26
 800588c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005890:	e015      	b.n	80058be <HAL_ADC_ConfigChannel+0x4ee>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80058a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80058a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80058aa:	2320      	movs	r3, #32
 80058ac:	e003      	b.n	80058b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80058ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b0:	fab3 f383 	clz	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	3301      	adds	r3, #1
 80058b8:	069b      	lsls	r3, r3, #26
 80058ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_ADC_ConfigChannel+0x50e>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	0e9b      	lsrs	r3, r3, #26
 80058d0:	3301      	adds	r3, #1
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	e017      	b.n	800590e <HAL_ADC_ConfigChannel+0x53e>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80058ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80058f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80058f6:	2320      	movs	r3, #32
 80058f8:	e003      	b.n	8005902 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80058fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	3301      	adds	r3, #1
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2101      	movs	r1, #1
 800590a:	fa01 f303 	lsl.w	r3, r1, r3
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x564>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0e9b      	lsrs	r3, r3, #26
 8005924:	3301      	adds	r3, #1
 8005926:	f003 021f 	and.w	r2, r3, #31
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	051b      	lsls	r3, r3, #20
 8005932:	e018      	b.n	8005966 <HAL_ADC_ConfigChannel+0x596>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593c:	fa93 f3a3 	rbit	r3, r3
 8005940:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800594c:	2320      	movs	r3, #32
 800594e:	e003      	b.n	8005958 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	fab3 f383 	clz	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3301      	adds	r3, #1
 800595a:	f003 021f 	and.w	r2, r3, #31
 800595e:	4613      	mov	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4413      	add	r3, r2
 8005964:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005966:	430b      	orrs	r3, r1
 8005968:	e081      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x5b6>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	0e9b      	lsrs	r3, r3, #26
 800597c:	3301      	adds	r3, #1
 800597e:	069b      	lsls	r3, r3, #26
 8005980:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005984:	e015      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x5e2>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800599e:	2320      	movs	r3, #32
 80059a0:	e003      	b.n	80059aa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	3301      	adds	r3, #1
 80059ac:	069b      	lsls	r3, r3, #26
 80059ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x602>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	0e9b      	lsrs	r3, r3, #26
 80059c4:	3301      	adds	r3, #1
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2101      	movs	r1, #1
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	e017      	b.n	8005a02 <HAL_ADC_ConfigChannel+0x632>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	61bb      	str	r3, [r7, #24]
  return result;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80059ea:	2320      	movs	r3, #32
 80059ec:	e003      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x65e>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	0e9b      	lsrs	r3, r3, #26
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f003 021f 	and.w	r2, r3, #31
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	3b1e      	subs	r3, #30
 8005a26:	051b      	lsls	r3, r3, #20
 8005a28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a2c:	e01e      	b.n	8005a6c <HAL_ADC_ConfigChannel+0x69c>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	60fb      	str	r3, [r7, #12]
  return result;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005a46:	2320      	movs	r3, #32
 8005a48:	e006      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x688>
 8005a4a:	bf00      	nop
 8005a4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fab3 f383 	clz	r3, r3
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f003 021f 	and.w	r2, r3, #31
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	3b1e      	subs	r3, #30
 8005a66:	051b      	lsls	r3, r3, #20
 8005a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fe ff4d 	bl	8004912 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b44      	ldr	r3, [pc, #272]	@ (8005b90 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d07a      	beq.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a84:	4843      	ldr	r0, [pc, #268]	@ (8005b94 <HAL_ADC_ConfigChannel+0x7c4>)
 8005a86:	f7fe fe8f 	bl	80047a8 <LL_ADC_GetCommonPathInternalCh>
 8005a8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a41      	ldr	r2, [pc, #260]	@ (8005b98 <HAL_ADC_ConfigChannel+0x7c8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d12c      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d126      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8005b9c <HAL_ADC_ConfigChannel+0x7cc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_ADC_ConfigChannel+0x6e8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d15d      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4834      	ldr	r0, [pc, #208]	@ (8005b94 <HAL_ADC_ConfigChannel+0x7c4>)
 8005ac4:	f7fe fe5d 	bl	8004782 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ac8:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <HAL_ADC_ConfigChannel+0x7d4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	4a36      	ldr	r2, [pc, #216]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x7d8>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005ae2:	e002      	b.n	8005aea <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f9      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005af0:	e040      	b.n	8005b74 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2d      	ldr	r2, [pc, #180]	@ (8005bac <HAL_ADC_ConfigChannel+0x7dc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d118      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d112      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	@ (8005b9c <HAL_ADC_ConfigChannel+0x7cc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_ADC_ConfigChannel+0x74c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a22      	ldr	r2, [pc, #136]	@ (8005ba0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d12d      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b24:	4619      	mov	r1, r3
 8005b26:	481b      	ldr	r0, [pc, #108]	@ (8005b94 <HAL_ADC_ConfigChannel+0x7c4>)
 8005b28:	f7fe fe2b 	bl	8004782 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b2c:	e024      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <HAL_ADC_ConfigChannel+0x7e0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d120      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11a      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <HAL_ADC_ConfigChannel+0x7cc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d115      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b56:	4619      	mov	r1, r3
 8005b58:	480e      	ldr	r0, [pc, #56]	@ (8005b94 <HAL_ADC_ConfigChannel+0x7c4>)
 8005b5a:	f7fe fe12 	bl	8004782 <LL_ADC_SetCommonPathInternalCh>
 8005b5e:	e00c      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005b72:	e002      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	37d8      	adds	r7, #216	@ 0xd8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	80080000 	.word	0x80080000
 8005b94:	50040300 	.word	0x50040300
 8005b98:	c7520000 	.word	0xc7520000
 8005b9c:	50040000 	.word	0x50040000
 8005ba0:	50040200 	.word	0x50040200
 8005ba4:	20000004 	.word	0x20000004
 8005ba8:	053e2d63 	.word	0x053e2d63
 8005bac:	cb840000 	.word	0xcb840000
 8005bb0:	80000001 	.word	0x80000001

08005bb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ff71 	bl	8004aac <LL_ADC_IsEnabled>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d169      	bne.n	8005ca4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <ADC_Enable+0xfc>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be2:	f043 0210 	orr.w	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e055      	b.n	8005ca6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe ff40 	bl	8004a84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c04:	482b      	ldr	r0, [pc, #172]	@ (8005cb4 <ADC_Enable+0x100>)
 8005c06:	f7fe fdcf 	bl	80047a8 <LL_ADC_GetCommonPathInternalCh>
 8005c0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d013      	beq.n	8005c3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c14:	4b28      	ldr	r3, [pc, #160]	@ (8005cb8 <ADC_Enable+0x104>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	099b      	lsrs	r3, r3, #6
 8005c1a:	4a28      	ldr	r2, [pc, #160]	@ (8005cbc <ADC_Enable+0x108>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c2e:	e002      	b.n	8005c36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f9      	bne.n	8005c30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c3c:	f7fe fd82 	bl	8004744 <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c42:	e028      	b.n	8005c96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe ff2f 	bl	8004aac <LL_ADC_IsEnabled>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe ff13 	bl	8004a84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c5e:	f7fe fd71 	bl	8004744 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d914      	bls.n	8005c96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d00d      	beq.n	8005c96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f043 0210 	orr.w	r2, r3, #16
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e007      	b.n	8005ca6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d1cf      	bne.n	8005c44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	8000003f 	.word	0x8000003f
 8005cb4:	50040300 	.word	0x50040300
 8005cb8:	20000004 	.word	0x20000004
 8005cbc:	053e2d63 	.word	0x053e2d63

08005cc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d14b      	bne.n	8005d72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d021      	beq.n	8005d38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fdb8 	bl	800486e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d032      	beq.n	8005d6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d12b      	bne.n	8005d6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d11f      	bne.n	8005d6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d36:	e018      	b.n	8005d6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d111      	bne.n	8005d6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7fc fbaa 	bl	80024c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d70:	e00e      	b.n	8005d90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff fb1c 	bl	80053bc <HAL_ADC_ErrorCallback>
}
 8005d84:	e004      	b.n	8005d90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff faf4 	bl	8005394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd2:	f043 0204 	orr.w	r2, r3, #4
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff faee 	bl	80053bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <LL_ADC_IsEnabled>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <LL_ADC_IsEnabled+0x18>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <LL_ADC_IsEnabled+0x1a>
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <LL_ADC_REG_IsConversionOngoing>:
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d101      	bne.n	8005e26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b09f      	sub	sp, #124	@ 0x7c
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e093      	b.n	8005fde <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a47      	ldr	r2, [pc, #284]	@ (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d102      	bne.n	8005ed6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ed0:	4b46      	ldr	r3, [pc, #280]	@ (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	e001      	b.n	8005eda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e072      	b.n	8005fde <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff87 	bl	8005e0e <LL_ADC_REG_IsConversionOngoing>
 8005f00:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff ff81 	bl	8005e0e <LL_ADC_REG_IsConversionOngoing>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d154      	bne.n	8005fbc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d151      	bne.n	8005fbc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f18:	4b35      	ldr	r3, [pc, #212]	@ (8005ff0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02c      	beq.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f36:	035b      	lsls	r3, r3, #13
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f40:	4829      	ldr	r0, [pc, #164]	@ (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f42:	f7ff ff51 	bl	8005de8 <LL_ADC_IsEnabled>
 8005f46:	4604      	mov	r4, r0
 8005f48:	4828      	ldr	r0, [pc, #160]	@ (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f4a:	f7ff ff4d 	bl	8005de8 <LL_ADC_IsEnabled>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	431c      	orrs	r4, r3
 8005f52:	4828      	ldr	r0, [pc, #160]	@ (8005ff4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f54:	f7ff ff48 	bl	8005de8 <LL_ADC_IsEnabled>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4323      	orrs	r3, r4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d137      	bne.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f68:	f023 030f 	bic.w	r3, r3, #15
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	6811      	ldr	r1, [r2, #0]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	6892      	ldr	r2, [r2, #8]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	431a      	orrs	r2, r3
 8005f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f7c:	e028      	b.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f8a:	4817      	ldr	r0, [pc, #92]	@ (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f8c:	f7ff ff2c 	bl	8005de8 <LL_ADC_IsEnabled>
 8005f90:	4604      	mov	r4, r0
 8005f92:	4816      	ldr	r0, [pc, #88]	@ (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f94:	f7ff ff28 	bl	8005de8 <LL_ADC_IsEnabled>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	431c      	orrs	r4, r3
 8005f9c:	4815      	ldr	r0, [pc, #84]	@ (8005ff4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f9e:	f7ff ff23 	bl	8005de8 <LL_ADC_IsEnabled>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4323      	orrs	r3, r4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d112      	bne.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fb8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fba:	e009      	b.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005fce:	e000      	b.n	8005fd2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005fda:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	377c      	adds	r7, #124	@ 0x7c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	50040000 	.word	0x50040000
 8005fec:	50040100 	.word	0x50040100
 8005ff0:	50040300 	.word	0x50040300
 8005ff4:	50040200 	.word	0x50040200

08005ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <__NVIC_SetPriorityGrouping+0x44>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006014:	4013      	ands	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800602a:	4a04      	ldr	r2, [pc, #16]	@ (800603c <__NVIC_SetPriorityGrouping+0x44>)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	60d3      	str	r3, [r2, #12]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006044:	4b04      	ldr	r3, [pc, #16]	@ (8006058 <__NVIC_GetPriorityGrouping+0x18>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	f003 0307 	and.w	r3, r3, #7
}
 800604e:	4618      	mov	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606a:	2b00      	cmp	r3, #0
 800606c:	db0b      	blt.n	8006086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	f003 021f 	and.w	r2, r3, #31
 8006074:	4907      	ldr	r1, [pc, #28]	@ (8006094 <__NVIC_EnableIRQ+0x38>)
 8006076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2001      	movs	r0, #1
 800607e:	fa00 f202 	lsl.w	r2, r0, r2
 8006082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	e000e100 	.word	0xe000e100

08006098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db0a      	blt.n	80060c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	490c      	ldr	r1, [pc, #48]	@ (80060e4 <__NVIC_SetPriority+0x4c>)
 80060b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	440b      	add	r3, r1
 80060bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060c0:	e00a      	b.n	80060d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4908      	ldr	r1, [pc, #32]	@ (80060e8 <__NVIC_SetPriority+0x50>)
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	3b04      	subs	r3, #4
 80060d0:	0112      	lsls	r2, r2, #4
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	440b      	add	r3, r1
 80060d6:	761a      	strb	r2, [r3, #24]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000e100 	.word	0xe000e100
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b089      	sub	sp, #36	@ 0x24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f1c3 0307 	rsb	r3, r3, #7
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf28      	it	cs
 800610a:	2304      	movcs	r3, #4
 800610c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3304      	adds	r3, #4
 8006112:	2b06      	cmp	r3, #6
 8006114:	d902      	bls.n	800611c <NVIC_EncodePriority+0x30>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3b03      	subs	r3, #3
 800611a:	e000      	b.n	800611e <NVIC_EncodePriority+0x32>
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43da      	mvns	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	401a      	ands	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	43d9      	mvns	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006144:	4313      	orrs	r3, r2
         );
}
 8006146:	4618      	mov	r0, r3
 8006148:	3724      	adds	r7, #36	@ 0x24
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ff4c 	bl	8005ff8 <__NVIC_SetPriorityGrouping>
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800617a:	f7ff ff61 	bl	8006040 <__NVIC_GetPriorityGrouping>
 800617e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f7ff ffb1 	bl	80060ec <NVIC_EncodePriority>
 800618a:	4602      	mov	r2, r0
 800618c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ff80 	bl	8006098 <__NVIC_SetPriority>
}
 8006198:	bf00      	nop
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff54 	bl	800605c <__NVIC_EnableIRQ>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e098      	b.n	8006300 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b4d      	ldr	r3, [pc, #308]	@ (800630c <HAL_DMA_Init+0x150>)
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d80f      	bhi.n	80061fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006310 <HAL_DMA_Init+0x154>)
 80061e2:	4413      	add	r3, r2
 80061e4:	4a4b      	ldr	r2, [pc, #300]	@ (8006314 <HAL_DMA_Init+0x158>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	009a      	lsls	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a48      	ldr	r2, [pc, #288]	@ (8006318 <HAL_DMA_Init+0x15c>)
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80061f8:	e00e      	b.n	8006218 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b46      	ldr	r3, [pc, #280]	@ (800631c <HAL_DMA_Init+0x160>)
 8006202:	4413      	add	r3, r2
 8006204:	4a43      	ldr	r2, [pc, #268]	@ (8006314 <HAL_DMA_Init+0x158>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	009a      	lsls	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a42      	ldr	r2, [pc, #264]	@ (8006320 <HAL_DMA_Init+0x164>)
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800623c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006272:	d039      	beq.n	80062e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	4a27      	ldr	r2, [pc, #156]	@ (8006318 <HAL_DMA_Init+0x15c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d11a      	bne.n	80062b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800627e:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <HAL_DMA_Init+0x168>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006286:	f003 031c 	and.w	r3, r3, #28
 800628a:	210f      	movs	r1, #15
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	43db      	mvns	r3, r3
 8006292:	4924      	ldr	r1, [pc, #144]	@ (8006324 <HAL_DMA_Init+0x168>)
 8006294:	4013      	ands	r3, r2
 8006296:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006298:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <HAL_DMA_Init+0x168>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a4:	f003 031c 	and.w	r3, r3, #28
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	491d      	ldr	r1, [pc, #116]	@ (8006324 <HAL_DMA_Init+0x168>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]
 80062b2:	e019      	b.n	80062e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80062b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006328 <HAL_DMA_Init+0x16c>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062bc:	f003 031c 	and.w	r3, r3, #28
 80062c0:	210f      	movs	r1, #15
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	4917      	ldr	r1, [pc, #92]	@ (8006328 <HAL_DMA_Init+0x16c>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80062ce:	4b16      	ldr	r3, [pc, #88]	@ (8006328 <HAL_DMA_Init+0x16c>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6859      	ldr	r1, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062da:	f003 031c 	and.w	r3, r3, #28
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	4911      	ldr	r1, [pc, #68]	@ (8006328 <HAL_DMA_Init+0x16c>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40020407 	.word	0x40020407
 8006310:	bffdfff8 	.word	0xbffdfff8
 8006314:	cccccccd 	.word	0xcccccccd
 8006318:	40020000 	.word	0x40020000
 800631c:	bffdfbf8 	.word	0xbffdfbf8
 8006320:	40020400 	.word	0x40020400
 8006324:	400200a8 	.word	0x400200a8
 8006328:	400204a8 	.word	0x400204a8

0800632c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_DMA_Start_IT+0x20>
 8006348:	2302      	movs	r3, #2
 800634a:	e04b      	b.n	80063e4 <HAL_DMA_Start_IT+0xb8>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d13a      	bne.n	80063d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f8e0 	bl	800654a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 020e 	orr.w	r2, r2, #14
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e00f      	b.n	80063c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0204 	bic.w	r2, r2, #4
 80063b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 020a 	orr.w	r2, r2, #10
 80063c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e005      	b.n	80063e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063de:	2302      	movs	r3, #2
 80063e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f003 031c 	and.w	r3, r3, #28
 800640c:	2204      	movs	r2, #4
 800640e:	409a      	lsls	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d026      	beq.n	8006466 <HAL_DMA_IRQHandler+0x7a>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d021      	beq.n	8006466 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0204 	bic.w	r2, r2, #4
 800643e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006444:	f003 021c 	and.w	r2, r3, #28
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	2104      	movs	r1, #4
 800644e:	fa01 f202 	lsl.w	r2, r1, r2
 8006452:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d071      	beq.n	8006540 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006464:	e06c      	b.n	8006540 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	f003 031c 	and.w	r3, r3, #28
 800646e:	2202      	movs	r2, #2
 8006470:	409a      	lsls	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d02e      	beq.n	80064d8 <HAL_DMA_IRQHandler+0xec>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d029      	beq.n	80064d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 020a 	bic.w	r2, r2, #10
 80064a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	f003 021c 	and.w	r2, r3, #28
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	2102      	movs	r1, #2
 80064b8:	fa01 f202 	lsl.w	r2, r1, r2
 80064bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d038      	beq.n	8006540 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80064d6:	e033      	b.n	8006540 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064dc:	f003 031c 	and.w	r3, r3, #28
 80064e0:	2208      	movs	r2, #8
 80064e2:	409a      	lsls	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d02a      	beq.n	8006542 <HAL_DMA_IRQHandler+0x156>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d025      	beq.n	8006542 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 020e 	bic.w	r2, r2, #14
 8006504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650a:	f003 021c 	and.w	r2, r3, #28
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2101      	movs	r1, #1
 8006514:	fa01 f202 	lsl.w	r2, r1, r2
 8006518:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006540:	bf00      	nop
 8006542:	bf00      	nop
}
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655c:	f003 021c 	and.w	r2, r3, #28
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f202 	lsl.w	r2, r1, r2
 800656a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b10      	cmp	r3, #16
 800657a:	d108      	bne.n	800658e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800658c:	e007      	b.n	800659e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	60da      	str	r2, [r3, #12]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ba:	e17f      	b.n	80068bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	2101      	movs	r1, #1
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	fa01 f303 	lsl.w	r3, r1, r3
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8171 	beq.w	80068b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d005      	beq.n	80065ec <HAL_GPIO_Init+0x40>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d130      	bne.n	800664e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	2203      	movs	r2, #3
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4013      	ands	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006622:	2201      	movs	r2, #1
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4013      	ands	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	091b      	lsrs	r3, r3, #4
 8006638:	f003 0201 	and.w	r2, r3, #1
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d118      	bne.n	800668c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006660:	2201      	movs	r2, #1
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4013      	ands	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f003 0201 	and.w	r2, r3, #1
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d017      	beq.n	80066c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	2203      	movs	r2, #3
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	43db      	mvns	r3, r3
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4013      	ands	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d123      	bne.n	800671c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	08da      	lsrs	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3208      	adds	r2, #8
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	220f      	movs	r2, #15
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	08da      	lsrs	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3208      	adds	r2, #8
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	2203      	movs	r2, #3
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43db      	mvns	r3, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f003 0203 	and.w	r2, r3, #3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80ac 	beq.w	80068b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800675e:	4b5f      	ldr	r3, [pc, #380]	@ (80068dc <HAL_GPIO_Init+0x330>)
 8006760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006762:	4a5e      	ldr	r2, [pc, #376]	@ (80068dc <HAL_GPIO_Init+0x330>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6613      	str	r3, [r2, #96]	@ 0x60
 800676a:	4b5c      	ldr	r3, [pc, #368]	@ (80068dc <HAL_GPIO_Init+0x330>)
 800676c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006776:	4a5a      	ldr	r2, [pc, #360]	@ (80068e0 <HAL_GPIO_Init+0x334>)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	3302      	adds	r3, #2
 800677e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006782:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	220f      	movs	r2, #15
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4013      	ands	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067a0:	d025      	beq.n	80067ee <HAL_GPIO_Init+0x242>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a4f      	ldr	r2, [pc, #316]	@ (80068e4 <HAL_GPIO_Init+0x338>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01f      	beq.n	80067ea <HAL_GPIO_Init+0x23e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a4e      	ldr	r2, [pc, #312]	@ (80068e8 <HAL_GPIO_Init+0x33c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d019      	beq.n	80067e6 <HAL_GPIO_Init+0x23a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a4d      	ldr	r2, [pc, #308]	@ (80068ec <HAL_GPIO_Init+0x340>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_GPIO_Init+0x236>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a4c      	ldr	r2, [pc, #304]	@ (80068f0 <HAL_GPIO_Init+0x344>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00d      	beq.n	80067de <HAL_GPIO_Init+0x232>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a4b      	ldr	r2, [pc, #300]	@ (80068f4 <HAL_GPIO_Init+0x348>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <HAL_GPIO_Init+0x22e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a4a      	ldr	r2, [pc, #296]	@ (80068f8 <HAL_GPIO_Init+0x34c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_GPIO_Init+0x22a>
 80067d2:	2306      	movs	r3, #6
 80067d4:	e00c      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067d6:	2307      	movs	r3, #7
 80067d8:	e00a      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067da:	2305      	movs	r3, #5
 80067dc:	e008      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067de:	2304      	movs	r3, #4
 80067e0:	e006      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067e2:	2303      	movs	r3, #3
 80067e4:	e004      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e002      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_GPIO_Init+0x244>
 80067ee:	2300      	movs	r3, #0
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	f002 0203 	and.w	r2, r2, #3
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	4093      	lsls	r3, r2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006800:	4937      	ldr	r1, [pc, #220]	@ (80068e0 <HAL_GPIO_Init+0x334>)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	3302      	adds	r3, #2
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800680e:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <HAL_GPIO_Init+0x350>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	43db      	mvns	r3, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006832:	4a32      	ldr	r2, [pc, #200]	@ (80068fc <HAL_GPIO_Init+0x350>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006838:	4b30      	ldr	r3, [pc, #192]	@ (80068fc <HAL_GPIO_Init+0x350>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	43db      	mvns	r3, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800685c:	4a27      	ldr	r2, [pc, #156]	@ (80068fc <HAL_GPIO_Init+0x350>)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006862:	4b26      	ldr	r3, [pc, #152]	@ (80068fc <HAL_GPIO_Init+0x350>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	43db      	mvns	r3, r3
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4013      	ands	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006886:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <HAL_GPIO_Init+0x350>)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800688c:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <HAL_GPIO_Init+0x350>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	43db      	mvns	r3, r3
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4013      	ands	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068b0:	4a12      	ldr	r2, [pc, #72]	@ (80068fc <HAL_GPIO_Init+0x350>)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f47f ae78 	bne.w	80065bc <HAL_GPIO_Init+0x10>
  }
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40010000 	.word	0x40010000
 80068e4:	48000400 	.word	0x48000400
 80068e8:	48000800 	.word	0x48000800
 80068ec:	48000c00 	.word	0x48000c00
 80068f0:	48001000 	.word	0x48001000
 80068f4:	48001400 	.word	0x48001400
 80068f8:	48001800 	.word	0x48001800
 80068fc:	40010400 	.word	0x40010400

08006900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
 800690c:	4613      	mov	r3, r2
 800690e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006910:	787b      	ldrb	r3, [r7, #1]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800691c:	e002      	b.n	8006924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691e:	887a      	ldrh	r2, [r7, #2]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4013      	ands	r3, r2
 8006948:	041a      	lsls	r2, r3, #16
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	43d9      	mvns	r1, r3
 800694e:	887b      	ldrh	r3, [r7, #2]
 8006950:	400b      	ands	r3, r1
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	619a      	str	r2, [r3, #24]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e08d      	b.n	8006a92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb fe58 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2224      	movs	r2, #36	@ 0x24
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d107      	bne.n	80069de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	e006      	b.n	80069ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d108      	bne.n	8006a06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	e007      	b.n	8006a16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69d9      	ldr	r1, [r3, #28]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	817b      	strh	r3, [r7, #10]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	813b      	strh	r3, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	f040 80f9 	bne.w	8006cb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x34>
 8006aca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0ed      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_I2C_Mem_Write+0x4e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e0e6      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006af2:	f7fd fe27 	bl	8004744 <HAL_GetTick>
 8006af6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2319      	movs	r3, #25
 8006afe:	2201      	movs	r2, #1
 8006b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fac3 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0d1      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2221      	movs	r2, #33	@ 0x21
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2240      	movs	r2, #64	@ 0x40
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b3c:	88f8      	ldrh	r0, [r7, #6]
 8006b3e:	893a      	ldrh	r2, [r7, #8]
 8006b40:	8979      	ldrh	r1, [r7, #10]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f9d3 	bl	8006ef8 <I2C_RequestMemoryWrite>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0a9      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2bff      	cmp	r3, #255	@ 0xff
 8006b6c:	d90e      	bls.n	8006b8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	@ 0xff
 8006b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	8979      	ldrh	r1, [r7, #10]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fc47 	bl	8007418 <I2C_TransferConfig>
 8006b8a:	e00f      	b.n	8006bac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	8979      	ldrh	r1, [r7, #10]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fc36 	bl	8007418 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fac6 	bl	8007142 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e07b      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d034      	beq.n	8006c64 <HAL_I2C_Mem_Write+0x1c8>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d130      	bne.n	8006c64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	@ 0x80
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fa3f 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e04d      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2bff      	cmp	r3, #255	@ 0xff
 8006c24:	d90e      	bls.n	8006c44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	22ff      	movs	r2, #255	@ 0xff
 8006c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	8979      	ldrh	r1, [r7, #10]
 8006c34:	2300      	movs	r3, #0
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fbeb 	bl	8007418 <I2C_TransferConfig>
 8006c42:	e00f      	b.n	8006c64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	8979      	ldrh	r1, [r7, #10]
 8006c56:	2300      	movs	r3, #0
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fbda 	bl	8007418 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d19e      	bne.n	8006bac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 faac 	bl	80071d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e01a      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2220      	movs	r2, #32
 8006c88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6859      	ldr	r1, [r3, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <HAL_I2C_Mem_Write+0x224>)
 8006c96:	400b      	ands	r3, r1
 8006c98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e000      	b.n	8006cb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	fe00e800 	.word	0xfe00e800

08006cc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	4608      	mov	r0, r1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	817b      	strh	r3, [r7, #10]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	813b      	strh	r3, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	f040 80fd 	bne.w	8006ee6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_I2C_Mem_Read+0x34>
 8006cf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cfe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0f1      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_I2C_Mem_Read+0x4e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e0ea      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d1a:	f7fd fd13 	bl	8004744 <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	2319      	movs	r3, #25
 8006d26:	2201      	movs	r2, #1
 8006d28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f9af 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0d5      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2222      	movs	r2, #34	@ 0x22
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2240      	movs	r2, #64	@ 0x40
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d64:	88f8      	ldrh	r0, [r7, #6]
 8006d66:	893a      	ldrh	r2, [r7, #8]
 8006d68:	8979      	ldrh	r1, [r7, #10]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	4603      	mov	r3, r0
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f913 	bl	8006fa0 <I2C_RequestMemoryRead>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0ad      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2bff      	cmp	r3, #255	@ 0xff
 8006d94:	d90e      	bls.n	8006db4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	8979      	ldrh	r1, [r7, #10]
 8006da4:	4b52      	ldr	r3, [pc, #328]	@ (8006ef0 <HAL_I2C_Mem_Read+0x22c>)
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fb33 	bl	8007418 <I2C_TransferConfig>
 8006db2:	e00f      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	8979      	ldrh	r1, [r7, #10]
 8006dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef0 <HAL_I2C_Mem_Read+0x22c>)
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fb22 	bl	8007418 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2104      	movs	r1, #4
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f956 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e07c      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d034      	beq.n	8006e94 <HAL_I2C_Mem_Read+0x1d0>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d130      	bne.n	8006e94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2180      	movs	r1, #128	@ 0x80
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f927 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e04d      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2bff      	cmp	r3, #255	@ 0xff
 8006e54:	d90e      	bls.n	8006e74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	8979      	ldrh	r1, [r7, #10]
 8006e64:	2300      	movs	r3, #0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fad3 	bl	8007418 <I2C_TransferConfig>
 8006e72:	e00f      	b.n	8006e94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	8979      	ldrh	r1, [r7, #10]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fac2 	bl	8007418 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d19a      	bne.n	8006dd4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f994 	bl	80071d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e01a      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6859      	ldr	r1, [r3, #4]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <HAL_I2C_Mem_Read+0x230>)
 8006ec6:	400b      	ands	r3, r1
 8006ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e000      	b.n	8006ee8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	80002400 	.word	0x80002400
 8006ef4:	fe00e800 	.word	0xfe00e800

08006ef8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	817b      	strh	r3, [r7, #10]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	813b      	strh	r3, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	8979      	ldrh	r1, [r7, #10]
 8006f18:	4b20      	ldr	r3, [pc, #128]	@ (8006f9c <I2C_RequestMemoryWrite+0xa4>)
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fa79 	bl	8007418 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f909 	bl	8007142 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e02c      	b.n	8006f94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d105      	bne.n	8006f4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f40:	893b      	ldrh	r3, [r7, #8]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f4a:	e015      	b.n	8006f78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f4c:	893b      	ldrh	r3, [r7, #8]
 8006f4e:	0a1b      	lsrs	r3, r3, #8
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f8ef 	bl	8007142 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e012      	b.n	8006f94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f6e:	893b      	ldrh	r3, [r7, #8]
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2180      	movs	r1, #128	@ 0x80
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f884 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	80002000 	.word	0x80002000

08006fa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	817b      	strh	r3, [r7, #10]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	813b      	strh	r3, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	8979      	ldrh	r1, [r7, #10]
 8006fc0:	4b20      	ldr	r3, [pc, #128]	@ (8007044 <I2C_RequestMemoryRead+0xa4>)
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fa26 	bl	8007418 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f8b6 	bl	8007142 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e02c      	b.n	800703a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ff0:	e015      	b.n	800701e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ff2:	893b      	ldrh	r3, [r7, #8]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	69b9      	ldr	r1, [r7, #24]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f89c 	bl	8007142 <I2C_WaitOnTXISFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e012      	b.n	800703a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2200      	movs	r2, #0
 8007026:	2140      	movs	r1, #64	@ 0x40
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f831 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	80002000 	.word	0x80002000

08007048 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b02      	cmp	r3, #2
 800705c:	d103      	bne.n	8007066 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b01      	cmp	r3, #1
 8007072:	d007      	beq.n	8007084 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	619a      	str	r2, [r3, #24]
  }
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070a0:	e03b      	b.n	800711a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f8d6 	bl	8007258 <I2C_IsErrorOccurred>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e041      	b.n	800713a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070bc:	d02d      	beq.n	800711a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070be:	f7fd fb41 	bl	8004744 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d302      	bcc.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d122      	bne.n	800711a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4013      	ands	r3, r2
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d113      	bne.n	800711a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e00f      	b.n	800713a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	429a      	cmp	r2, r3
 8007136:	d0b4      	beq.n	80070a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800714e:	e033      	b.n	80071b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f87f 	bl	8007258 <I2C_IsErrorOccurred>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e031      	b.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800716a:	d025      	beq.n	80071b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716c:	f7fd faea 	bl	8004744 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	d302      	bcc.n	8007182 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11a      	bne.n	80071b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d013      	beq.n	80071b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e007      	b.n	80071c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d1c4      	bne.n	8007150 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071dc:	e02f      	b.n	800723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f838 	bl	8007258 <I2C_IsErrorOccurred>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e02d      	b.n	800724e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f2:	f7fd faa7 	bl	8004744 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d302      	bcc.n	8007208 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b20      	cmp	r3, #32
 8007214:	d013      	beq.n	800723e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e007      	b.n	800724e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b20      	cmp	r3, #32
 800724a:	d1c8      	bne.n	80071de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	@ 0x28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	d068      	beq.n	8007356 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2210      	movs	r2, #16
 800728a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800728c:	e049      	b.n	8007322 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007294:	d045      	beq.n	8007322 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007296:	f7fd fa55 	bl	8004744 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <I2C_IsErrorOccurred+0x54>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d13a      	bne.n	8007322 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ce:	d121      	bne.n	8007314 <I2C_IsErrorOccurred+0xbc>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d6:	d01d      	beq.n	8007314 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80072d8:	7cfb      	ldrb	r3, [r7, #19]
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d01a      	beq.n	8007314 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072ee:	f7fd fa29 	bl	8004744 <HAL_GetTick>
 80072f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072f4:	e00e      	b.n	8007314 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072f6:	f7fd fa25 	bl	8004744 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b19      	cmp	r3, #25
 8007302:	d907      	bls.n	8007314 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f043 0320 	orr.w	r3, r3, #32
 800730a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007312:	e006      	b.n	8007322 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b20      	cmp	r3, #32
 8007320:	d1e9      	bne.n	80072f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b20      	cmp	r3, #32
 800732e:	d003      	beq.n	8007338 <I2C_IsErrorOccurred+0xe0>
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0aa      	beq.n	800728e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2220      	movs	r2, #32
 8007346:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	f043 0304 	orr.w	r3, r3, #4
 800734e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f043 0308 	orr.w	r3, r3, #8
 8007390:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800739a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f043 0302 	orr.w	r3, r3, #2
 80073b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80073c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01c      	beq.n	8007406 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff fe3b 	bl	8007048 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6859      	ldr	r1, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <I2C_IsErrorOccurred+0x1bc>)
 80073de:	400b      	ands	r3, r1
 80073e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800740a:	4618      	mov	r0, r3
 800740c:	3728      	adds	r7, #40	@ 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	fe00e800 	.word	0xfe00e800

08007418 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	817b      	strh	r3, [r7, #10]
 8007426:	4613      	mov	r3, r2
 8007428:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800742a:	897b      	ldrh	r3, [r7, #10]
 800742c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007430:	7a7b      	ldrb	r3, [r7, #9]
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007438:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	4313      	orrs	r3, r2
 8007442:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007446:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	0d5b      	lsrs	r3, r3, #21
 8007452:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007456:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <I2C_TransferConfig+0x60>)
 8007458:	430b      	orrs	r3, r1
 800745a:	43db      	mvns	r3, r3
 800745c:	ea02 0103 	and.w	r1, r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	03ff63ff 	.word	0x03ff63ff

0800747c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b20      	cmp	r3, #32
 8007490:	d138      	bne.n	8007504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800749c:	2302      	movs	r3, #2
 800749e:	e032      	b.n	8007506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2224      	movs	r2, #36	@ 0x24
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e000      	b.n	8007506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007504:	2302      	movs	r3, #2
  }
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b20      	cmp	r3, #32
 8007526:	d139      	bne.n	800759c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007532:	2302      	movs	r3, #2
 8007534:	e033      	b.n	800759e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2224      	movs	r2, #36	@ 0x24
 8007542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	e000      	b.n	800759e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80075b0:	4b04      	ldr	r3, [pc, #16]	@ (80075c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40007000 	.word	0x40007000

080075c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d6:	d130      	bne.n	800763a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80075d8:	4b23      	ldr	r3, [pc, #140]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e4:	d038      	beq.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e6:	4b20      	ldr	r3, [pc, #128]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075f6:	4b1d      	ldr	r3, [pc, #116]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2232      	movs	r2, #50	@ 0x32
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	4a1b      	ldr	r2, [pc, #108]	@ (8007670 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0c9b      	lsrs	r3, r3, #18
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800760c:	e002      	b.n	8007614 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b01      	subs	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007614:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800761c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007620:	d102      	bne.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f2      	bne.n	800760e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007628:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007634:	d110      	bne.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e00f      	b.n	800765a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007646:	d007      	beq.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007648:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007650:	4a05      	ldr	r2, [pc, #20]	@ (8007668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007656:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40007000 	.word	0x40007000
 800766c:	20000004 	.word	0x20000004
 8007670:	431bde83 	.word	0x431bde83

08007674 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e3ca      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007686:	4b97      	ldr	r3, [pc, #604]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007690:	4b94      	ldr	r3, [pc, #592]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80e4 	beq.w	8007870 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <HAL_RCC_OscConfig+0x4a>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b0c      	cmp	r3, #12
 80076b2:	f040 808b 	bne.w	80077cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f040 8087 	bne.w	80077cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076be:	4b89      	ldr	r3, [pc, #548]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_RCC_OscConfig+0x62>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e3a2      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	4b82      	ldr	r3, [pc, #520]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <HAL_RCC_OscConfig+0x7c>
 80076e6:	4b7f      	ldr	r3, [pc, #508]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076ee:	e005      	b.n	80076fc <HAL_RCC_OscConfig+0x88>
 80076f0:	4b7c      	ldr	r3, [pc, #496]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d223      	bcs.n	8007748 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fd87 	bl	8008218 <RCC_SetFlashLatencyFromMSIRange>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e383      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007714:	4b73      	ldr	r3, [pc, #460]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a72      	ldr	r2, [pc, #456]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800771a:	f043 0308 	orr.w	r3, r3, #8
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b70      	ldr	r3, [pc, #448]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	496d      	ldr	r1, [pc, #436]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007732:	4b6c      	ldr	r3, [pc, #432]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	4968      	ldr	r1, [pc, #416]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007742:	4313      	orrs	r3, r2
 8007744:	604b      	str	r3, [r1, #4]
 8007746:	e025      	b.n	8007794 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007748:	4b66      	ldr	r3, [pc, #408]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a65      	ldr	r2, [pc, #404]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800774e:	f043 0308 	orr.w	r3, r3, #8
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	4b63      	ldr	r3, [pc, #396]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	4960      	ldr	r1, [pc, #384]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007762:	4313      	orrs	r3, r2
 8007764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007766:	4b5f      	ldr	r3, [pc, #380]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	495b      	ldr	r1, [pc, #364]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007776:	4313      	orrs	r3, r2
 8007778:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fd47 	bl	8008218 <RCC_SetFlashLatencyFromMSIRange>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e343      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007794:	f000 fc4a 	bl	800802c <HAL_RCC_GetSysClockFreq>
 8007798:	4602      	mov	r2, r0
 800779a:	4b52      	ldr	r3, [pc, #328]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	4950      	ldr	r1, [pc, #320]	@ (80078e8 <HAL_RCC_OscConfig+0x274>)
 80077a6:	5ccb      	ldrb	r3, [r1, r3]
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	fa22 f303 	lsr.w	r3, r2, r3
 80077b0:	4a4e      	ldr	r2, [pc, #312]	@ (80078ec <HAL_RCC_OscConfig+0x278>)
 80077b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80077b4:	4b4e      	ldr	r3, [pc, #312]	@ (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fc fceb 	bl	8004194 <HAL_InitTick>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d052      	beq.n	800786e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	e327      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d032      	beq.n	800783a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077d4:	4b43      	ldr	r3, [pc, #268]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a42      	ldr	r2, [pc, #264]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077e0:	f7fc ffb0 	bl	8004744 <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077e8:	f7fc ffac 	bl	8004744 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e310      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077fa:	4b3a      	ldr	r3, [pc, #232]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f0      	beq.n	80077e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007806:	4b37      	ldr	r3, [pc, #220]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a36      	ldr	r2, [pc, #216]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	4b34      	ldr	r3, [pc, #208]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	4931      	ldr	r1, [pc, #196]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007824:	4b2f      	ldr	r3, [pc, #188]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	492c      	ldr	r1, [pc, #176]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007834:	4313      	orrs	r3, r2
 8007836:	604b      	str	r3, [r1, #4]
 8007838:	e01a      	b.n	8007870 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800783a:	4b2a      	ldr	r3, [pc, #168]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a29      	ldr	r2, [pc, #164]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007846:	f7fc ff7d 	bl	8004744 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800784e:	f7fc ff79 	bl	8004744 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e2dd      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007860:	4b20      	ldr	r3, [pc, #128]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f0      	bne.n	800784e <HAL_RCC_OscConfig+0x1da>
 800786c:	e000      	b.n	8007870 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800786e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d074      	beq.n	8007966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b08      	cmp	r3, #8
 8007880:	d005      	beq.n	800788e <HAL_RCC_OscConfig+0x21a>
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b0c      	cmp	r3, #12
 8007886:	d10e      	bne.n	80078a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d10b      	bne.n	80078a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800788e:	4b15      	ldr	r3, [pc, #84]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d064      	beq.n	8007964 <HAL_RCC_OscConfig+0x2f0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d160      	bne.n	8007964 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e2ba      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ae:	d106      	bne.n	80078be <HAL_RCC_OscConfig+0x24a>
 80078b0:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a0b      	ldr	r2, [pc, #44]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e026      	b.n	800790c <HAL_RCC_OscConfig+0x298>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078c6:	d115      	bne.n	80078f4 <HAL_RCC_OscConfig+0x280>
 80078c8:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a05      	ldr	r2, [pc, #20]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b03      	ldr	r3, [pc, #12]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a02      	ldr	r2, [pc, #8]	@ (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	e014      	b.n	800790c <HAL_RCC_OscConfig+0x298>
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000
 80078e8:	08012920 	.word	0x08012920
 80078ec:	20000004 	.word	0x20000004
 80078f0:	20000008 	.word	0x20000008
 80078f4:	4ba0      	ldr	r3, [pc, #640]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a9f      	ldr	r2, [pc, #636]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80078fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	4b9d      	ldr	r3, [pc, #628]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a9c      	ldr	r2, [pc, #624]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800790a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fc ff16 	bl	8004744 <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800791c:	f7fc ff12 	bl	8004744 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b64      	cmp	r3, #100	@ 0x64
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e276      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792e:	4b92      	ldr	r3, [pc, #584]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0f0      	beq.n	800791c <HAL_RCC_OscConfig+0x2a8>
 800793a:	e014      	b.n	8007966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fc ff02 	bl	8004744 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007944:	f7fc fefe 	bl	8004744 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	@ 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e262      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007956:	4b88      	ldr	r3, [pc, #544]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x2d0>
 8007962:	e000      	b.n	8007966 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d060      	beq.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d005      	beq.n	8007984 <HAL_RCC_OscConfig+0x310>
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d119      	bne.n	80079b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d116      	bne.n	80079b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007984:	4b7c      	ldr	r3, [pc, #496]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_RCC_OscConfig+0x328>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e23f      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799c:	4b76      	ldr	r3, [pc, #472]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	061b      	lsls	r3, r3, #24
 80079aa:	4973      	ldr	r1, [pc, #460]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079b0:	e040      	b.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d023      	beq.n	8007a02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ba:	4b6f      	ldr	r3, [pc, #444]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a6e      	ldr	r2, [pc, #440]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c6:	f7fc febd 	bl	8004744 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ce:	f7fc feb9 	bl	8004744 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e21d      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e0:	4b65      	ldr	r3, [pc, #404]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0f0      	beq.n	80079ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ec:	4b62      	ldr	r3, [pc, #392]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	495f      	ldr	r1, [pc, #380]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]
 8007a00:	e018      	b.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a02:	4b5d      	ldr	r3, [pc, #372]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a5c      	ldr	r2, [pc, #368]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0e:	f7fc fe99 	bl	8004744 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a16:	f7fc fe95 	bl	8004744 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e1f9      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a28:	4b53      	ldr	r3, [pc, #332]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d03c      	beq.n	8007aba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01c      	beq.n	8007a82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a48:	4b4b      	ldr	r3, [pc, #300]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a58:	f7fc fe74 	bl	8004744 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a60:	f7fc fe70 	bl	8004744 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e1d4      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a72:	4b41      	ldr	r3, [pc, #260]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ef      	beq.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
 8007a80:	e01b      	b.n	8007aba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a82:	4b3d      	ldr	r3, [pc, #244]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a88:	4a3b      	ldr	r2, [pc, #236]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fc fe57 	bl	8004744 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9a:	f7fc fe53 	bl	8004744 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e1b7      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007aac:	4b32      	ldr	r3, [pc, #200]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ef      	bne.n	8007a9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80a6 	beq.w	8007c14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007acc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b27      	ldr	r3, [pc, #156]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007adc:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ae4:	4b24      	ldr	r3, [pc, #144]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007af0:	2301      	movs	r3, #1
 8007af2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af4:	4b21      	ldr	r3, [pc, #132]	@ (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d118      	bne.n	8007b32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b00:	4b1e      	ldr	r3, [pc, #120]	@ (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1d      	ldr	r2, [pc, #116]	@ (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b0c:	f7fc fe1a 	bl	8004744 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b14:	f7fc fe16 	bl	8004744 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e17a      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b26:	4b15      	ldr	r3, [pc, #84]	@ (8007b7c <HAL_RCC_OscConfig+0x508>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d108      	bne.n	8007b4c <HAL_RCC_OscConfig+0x4d8>
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b40:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b4a:	e029      	b.n	8007ba0 <HAL_RCC_OscConfig+0x52c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d115      	bne.n	8007b80 <HAL_RCC_OscConfig+0x50c>
 8007b54:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5a:	4a07      	ldr	r2, [pc, #28]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b5c:	f043 0304 	orr.w	r3, r3, #4
 8007b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b64:	4b04      	ldr	r3, [pc, #16]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6a:	4a03      	ldr	r2, [pc, #12]	@ (8007b78 <HAL_RCC_OscConfig+0x504>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b74:	e014      	b.n	8007ba0 <HAL_RCC_OscConfig+0x52c>
 8007b76:	bf00      	nop
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	40007000 	.word	0x40007000
 8007b80:	4b9c      	ldr	r3, [pc, #624]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b86:	4a9b      	ldr	r2, [pc, #620]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b90:	4b98      	ldr	r3, [pc, #608]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b96:	4a97      	ldr	r2, [pc, #604]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007b98:	f023 0304 	bic.w	r3, r3, #4
 8007b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d016      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fc fdcc 	bl	8004744 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bae:	e00a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb0:	f7fc fdc8 	bl	8004744 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e12a      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0ed      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x53c>
 8007bd4:	e015      	b.n	8007c02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd6:	f7fc fdb5 	bl	8004744 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bdc:	e00a      	b.n	8007bf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bde:	f7fc fdb1 	bl	8004744 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e113      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1ed      	bne.n	8007bde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d105      	bne.n	8007c14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c08:	4b7a      	ldr	r3, [pc, #488]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0c:	4a79      	ldr	r2, [pc, #484]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80fe 	beq.w	8007e1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	f040 80d0 	bne.w	8007dc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007c28:	4b72      	ldr	r3, [pc, #456]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f003 0203 	and.w	r2, r3, #3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d130      	bne.n	8007c9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	3b01      	subs	r3, #1
 8007c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d127      	bne.n	8007c9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d11f      	bne.n	8007c9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c68:	2a07      	cmp	r2, #7
 8007c6a:	bf14      	ite	ne
 8007c6c:	2201      	movne	r2, #1
 8007c6e:	2200      	moveq	r2, #0
 8007c70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	3b01      	subs	r3, #1
 8007c84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d109      	bne.n	8007c9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	085b      	lsrs	r3, r3, #1
 8007c96:	3b01      	subs	r3, #1
 8007c98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d06e      	beq.n	8007d7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b0c      	cmp	r3, #12
 8007ca2:	d069      	beq.n	8007d78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ca4:	4b53      	ldr	r3, [pc, #332]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d105      	bne.n	8007cbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007cb0:	4b50      	ldr	r3, [pc, #320]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0ad      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ccc:	f7fc fd3a 	bl	8004744 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd4:	f7fc fd36 	bl	8004744 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e09a      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ce6:	4b43      	ldr	r3, [pc, #268]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cf2:	4b40      	ldr	r3, [pc, #256]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_RCC_OscConfig+0x784>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d02:	3a01      	subs	r2, #1
 8007d04:	0112      	lsls	r2, r2, #4
 8007d06:	4311      	orrs	r1, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d0c:	0212      	lsls	r2, r2, #8
 8007d0e:	4311      	orrs	r1, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d14:	0852      	lsrs	r2, r2, #1
 8007d16:	3a01      	subs	r2, #1
 8007d18:	0552      	lsls	r2, r2, #21
 8007d1a:	4311      	orrs	r1, r2
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007d20:	0852      	lsrs	r2, r2, #1
 8007d22:	3a01      	subs	r2, #1
 8007d24:	0652      	lsls	r2, r2, #25
 8007d26:	4311      	orrs	r1, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d2c:	0912      	lsrs	r2, r2, #4
 8007d2e:	0452      	lsls	r2, r2, #17
 8007d30:	430a      	orrs	r2, r1
 8007d32:	4930      	ldr	r1, [pc, #192]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007d38:	4b2e      	ldr	r3, [pc, #184]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d44:	4b2b      	ldr	r3, [pc, #172]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4a2a      	ldr	r2, [pc, #168]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d50:	f7fc fcf8 	bl	8004744 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d58:	f7fc fcf4 	bl	8004744 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e058      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d6a:	4b22      	ldr	r3, [pc, #136]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d76:	e050      	b.n	8007e1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e04f      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d148      	bne.n	8007e1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d88:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a19      	ldr	r2, [pc, #100]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d94:	4b17      	ldr	r3, [pc, #92]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4a16      	ldr	r2, [pc, #88]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007da0:	f7fc fcd0 	bl	8004744 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da8:	f7fc fccc 	bl	8004744 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e030      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dba:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0f0      	beq.n	8007da8 <HAL_RCC_OscConfig+0x734>
 8007dc6:	e028      	b.n	8007e1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b0c      	cmp	r3, #12
 8007dcc:	d023      	beq.n	8007e16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dce:	4b09      	ldr	r3, [pc, #36]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a08      	ldr	r2, [pc, #32]	@ (8007df4 <HAL_RCC_OscConfig+0x780>)
 8007dd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dda:	f7fc fcb3 	bl	8004744 <HAL_GetTick>
 8007dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007de0:	e00c      	b.n	8007dfc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de2:	f7fc fcaf 	bl	8004744 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d905      	bls.n	8007dfc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e013      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
 8007df4:	40021000 	.word	0x40021000
 8007df8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <HAL_RCC_OscConfig+0x7b0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1ec      	bne.n	8007de2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007e08:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <HAL_RCC_OscConfig+0x7b0>)
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	4905      	ldr	r1, [pc, #20]	@ (8007e24 <HAL_RCC_OscConfig+0x7b0>)
 8007e0e:	4b06      	ldr	r3, [pc, #24]	@ (8007e28 <HAL_RCC_OscConfig+0x7b4>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	60cb      	str	r3, [r1, #12]
 8007e14:	e001      	b.n	8007e1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3720      	adds	r7, #32
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40021000 	.word	0x40021000
 8007e28:	feeefffc 	.word	0xfeeefffc

08007e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0e7      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e40:	4b75      	ldr	r3, [pc, #468]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d910      	bls.n	8007e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4e:	4b72      	ldr	r3, [pc, #456]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f023 0207 	bic.w	r2, r3, #7
 8007e56:	4970      	ldr	r1, [pc, #448]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0cf      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d010      	beq.n	8007e9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	4b66      	ldr	r3, [pc, #408]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d908      	bls.n	8007e9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e8c:	4b63      	ldr	r3, [pc, #396]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4960      	ldr	r1, [pc, #384]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d04c      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d121      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e0a6      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eca:	4b54      	ldr	r3, [pc, #336]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d115      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e09a      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e08e      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e086      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f02:	4b46      	ldr	r3, [pc, #280]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f023 0203 	bic.w	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	4943      	ldr	r1, [pc, #268]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f14:	f7fc fc16 	bl	8004744 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f1c:	f7fc fc12 	bl	8004744 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e06e      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f32:	4b3a      	ldr	r3, [pc, #232]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 020c 	and.w	r2, r3, #12
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d1eb      	bne.n	8007f1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d010      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	4b31      	ldr	r3, [pc, #196]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d208      	bcs.n	8007f72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f60:	4b2e      	ldr	r3, [pc, #184]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	492b      	ldr	r1, [pc, #172]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f72:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d210      	bcs.n	8007fa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f80:	4b25      	ldr	r3, [pc, #148]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f023 0207 	bic.w	r2, r3, #7
 8007f88:	4923      	ldr	r1, [pc, #140]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f90:	4b21      	ldr	r3, [pc, #132]	@ (8008018 <HAL_RCC_ClockConfig+0x1ec>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d001      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e036      	b.n	8008010 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fae:	4b1b      	ldr	r3, [pc, #108]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4918      	ldr	r1, [pc, #96]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fcc:	4b13      	ldr	r3, [pc, #76]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4910      	ldr	r1, [pc, #64]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fe0:	f000 f824 	bl	800802c <HAL_RCC_GetSysClockFreq>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <HAL_RCC_ClockConfig+0x1f0>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	490b      	ldr	r1, [pc, #44]	@ (8008020 <HAL_RCC_ClockConfig+0x1f4>)
 8007ff2:	5ccb      	ldrb	r3, [r1, r3]
 8007ff4:	f003 031f 	and.w	r3, r3, #31
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffc:	4a09      	ldr	r2, [pc, #36]	@ (8008024 <HAL_RCC_ClockConfig+0x1f8>)
 8007ffe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008000:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCC_ClockConfig+0x1fc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7fc f8c5 	bl	8004194 <HAL_InitTick>
 800800a:	4603      	mov	r3, r0
 800800c:	72fb      	strb	r3, [r7, #11]

  return status;
 800800e:	7afb      	ldrb	r3, [r7, #11]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40022000 	.word	0x40022000
 800801c:	40021000 	.word	0x40021000
 8008020:	08012920 	.word	0x08012920
 8008024:	20000004 	.word	0x20000004
 8008028:	20000008 	.word	0x20000008

0800802c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800802c:	b480      	push	{r7}
 800802e:	b089      	sub	sp, #36	@ 0x24
 8008030:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803a:	4b3e      	ldr	r3, [pc, #248]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 030c 	and.w	r3, r3, #12
 8008042:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008044:	4b3b      	ldr	r3, [pc, #236]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0303 	and.w	r3, r3, #3
 800804c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_RCC_GetSysClockFreq+0x34>
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b0c      	cmp	r3, #12
 8008058:	d121      	bne.n	800809e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d11e      	bne.n	800809e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008060:	4b34      	ldr	r3, [pc, #208]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d107      	bne.n	800807c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800806c:	4b31      	ldr	r3, [pc, #196]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 800806e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	e005      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800807c:	4b2d      	ldr	r3, [pc, #180]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	091b      	lsrs	r3, r3, #4
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008088:	4a2b      	ldr	r2, [pc, #172]	@ (8008138 <HAL_RCC_GetSysClockFreq+0x10c>)
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008090:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10d      	bne.n	80080b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800809c:	e00a      	b.n	80080b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d102      	bne.n	80080aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080a4:	4b25      	ldr	r3, [pc, #148]	@ (800813c <HAL_RCC_GetSysClockFreq+0x110>)
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	e004      	b.n	80080b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d101      	bne.n	80080b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080b0:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x114>)
 80080b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d134      	bne.n	8008124 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d003      	beq.n	80080d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d003      	beq.n	80080d8 <HAL_RCC_GetSysClockFreq+0xac>
 80080d0:	e005      	b.n	80080de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80080d2:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <HAL_RCC_GetSysClockFreq+0x110>)
 80080d4:	617b      	str	r3, [r7, #20]
      break;
 80080d6:	e005      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80080d8:	4b19      	ldr	r3, [pc, #100]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x114>)
 80080da:	617b      	str	r3, [r7, #20]
      break;
 80080dc:	e002      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	617b      	str	r3, [r7, #20]
      break;
 80080e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080e4:	4b13      	ldr	r3, [pc, #76]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	091b      	lsrs	r3, r3, #4
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	3301      	adds	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80080f2:	4b10      	ldr	r3, [pc, #64]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	fb03 f202 	mul.w	r2, r3, r2
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	fbb2 f3f3 	udiv	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800810a:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x108>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	0e5b      	lsrs	r3, r3, #25
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	3301      	adds	r3, #1
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008122:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008124:	69bb      	ldr	r3, [r7, #24]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3724      	adds	r7, #36	@ 0x24
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40021000 	.word	0x40021000
 8008138:	08012938 	.word	0x08012938
 800813c:	00f42400 	.word	0x00f42400
 8008140:	007a1200 	.word	0x007a1200

08008144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008148:	4b03      	ldr	r3, [pc, #12]	@ (8008158 <HAL_RCC_GetHCLKFreq+0x14>)
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20000004 	.word	0x20000004

0800815c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008160:	f7ff fff0 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 8008164:	4602      	mov	r2, r0
 8008166:	4b06      	ldr	r3, [pc, #24]	@ (8008180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0a1b      	lsrs	r3, r3, #8
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4904      	ldr	r1, [pc, #16]	@ (8008184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008172:	5ccb      	ldrb	r3, [r1, r3]
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40021000 	.word	0x40021000
 8008184:	08012930 	.word	0x08012930

08008188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800818c:	f7ff ffda 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 8008190:	4602      	mov	r2, r0
 8008192:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	0adb      	lsrs	r3, r3, #11
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	4904      	ldr	r1, [pc, #16]	@ (80081b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800819e:	5ccb      	ldrb	r3, [r1, r3]
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40021000 	.word	0x40021000
 80081b0:	08012930 	.word	0x08012930

080081b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220f      	movs	r2, #15
 80081c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80081c4:	4b12      	ldr	r3, [pc, #72]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0203 	and.w	r2, r3, #3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80081d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <HAL_RCC_GetClockConfig+0x5c>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	08db      	lsrs	r3, r3, #3
 80081ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80081f6:	4b07      	ldr	r3, [pc, #28]	@ (8008214 <HAL_RCC_GetClockConfig+0x60>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0207 	and.w	r2, r3, #7
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40021000 	.word	0x40021000
 8008214:	40022000 	.word	0x40022000

08008218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008224:	4b2a      	ldr	r3, [pc, #168]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008230:	f7ff f9bc 	bl	80075ac <HAL_PWREx_GetVoltageRange>
 8008234:	6178      	str	r0, [r7, #20]
 8008236:	e014      	b.n	8008262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008238:	4b25      	ldr	r3, [pc, #148]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800823a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823c:	4a24      	ldr	r2, [pc, #144]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800823e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008242:	6593      	str	r3, [r2, #88]	@ 0x58
 8008244:	4b22      	ldr	r3, [pc, #136]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008250:	f7ff f9ac 	bl	80075ac <HAL_PWREx_GetVoltageRange>
 8008254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008256:	4b1e      	ldr	r3, [pc, #120]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825a:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800825c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008260:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008268:	d10b      	bne.n	8008282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b80      	cmp	r3, #128	@ 0x80
 800826e:	d919      	bls.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2ba0      	cmp	r3, #160	@ 0xa0
 8008274:	d902      	bls.n	800827c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008276:	2302      	movs	r3, #2
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e013      	b.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800827c:	2301      	movs	r3, #1
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	e010      	b.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b80      	cmp	r3, #128	@ 0x80
 8008286:	d902      	bls.n	800828e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008288:	2303      	movs	r3, #3
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	e00a      	b.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b80      	cmp	r3, #128	@ 0x80
 8008292:	d102      	bne.n	800829a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008294:	2302      	movs	r3, #2
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	e004      	b.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b70      	cmp	r3, #112	@ 0x70
 800829e:	d101      	bne.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80082a0:	2301      	movs	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082a4:	4b0b      	ldr	r3, [pc, #44]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f023 0207 	bic.w	r2, r3, #7
 80082ac:	4909      	ldr	r1, [pc, #36]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80082b4:	4b07      	ldr	r3, [pc, #28]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d001      	beq.n	80082c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40021000 	.word	0x40021000
 80082d4:	40022000 	.word	0x40022000

080082d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082e0:	2300      	movs	r3, #0
 80082e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082e4:	2300      	movs	r3, #0
 80082e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d041      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80082fc:	d02a      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80082fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008302:	d824      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008308:	d008      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800830a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800830e:	d81e      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008318:	d010      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800831a:	e018      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800831c:	4b86      	ldr	r3, [pc, #536]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4a85      	ldr	r2, [pc, #532]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008328:	e015      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3304      	adds	r3, #4
 800832e:	2100      	movs	r1, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f000 fabb 	bl	80088ac <RCCEx_PLLSAI1_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800833a:	e00c      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3320      	adds	r3, #32
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fba6 	bl	8008a94 <RCCEx_PLLSAI2_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800834c:	e003      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	74fb      	strb	r3, [r7, #19]
      break;
 8008352:	e000      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008356:	7cfb      	ldrb	r3, [r7, #19]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10b      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800835c:	4b76      	ldr	r3, [pc, #472]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836a:	4973      	ldr	r1, [pc, #460]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800836c:	4313      	orrs	r3, r2
 800836e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008372:	e001      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008374:	7cfb      	ldrb	r3, [r7, #19]
 8008376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d041      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800838c:	d02a      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800838e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008392:	d824      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008398:	d008      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800839a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800839e:	d81e      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80083a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083a8:	d010      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80083aa:	e018      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083ac:	4b62      	ldr	r3, [pc, #392]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4a61      	ldr	r2, [pc, #388]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80083b8:	e015      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fa73 	bl	80088ac <RCCEx_PLLSAI1_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80083ca:	e00c      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3320      	adds	r3, #32
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb5e 	bl	8008a94 <RCCEx_PLLSAI2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	74fb      	strb	r3, [r7, #19]
      break;
 80083e2:	e000      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80083e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e6:	7cfb      	ldrb	r3, [r7, #19]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083ec:	4b52      	ldr	r3, [pc, #328]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083fa:	494f      	ldr	r1, [pc, #316]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7cfb      	ldrb	r3, [r7, #19]
 8008406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 80a0 	beq.w	8008556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008416:	2300      	movs	r3, #0
 8008418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800841a:	4b47      	ldr	r3, [pc, #284]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800841e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008430:	4b41      	ldr	r3, [pc, #260]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008434:	4a40      	ldr	r2, [pc, #256]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800843a:	6593      	str	r3, [r2, #88]	@ 0x58
 800843c:	4b3e      	ldr	r3, [pc, #248]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008448:	2301      	movs	r3, #1
 800844a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800844c:	4b3b      	ldr	r3, [pc, #236]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a3a      	ldr	r2, [pc, #232]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008458:	f7fc f974 	bl	8004744 <HAL_GetTick>
 800845c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800845e:	e009      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008460:	f7fc f970 	bl	8004744 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d902      	bls.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	74fb      	strb	r3, [r7, #19]
        break;
 8008472:	e005      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008474:	4b31      	ldr	r3, [pc, #196]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0ef      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008480:	7cfb      	ldrb	r3, [r7, #19]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d15c      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008486:	4b2c      	ldr	r3, [pc, #176]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01f      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d019      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084a4:	4b24      	ldr	r3, [pc, #144]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084b0:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b6:	4a20      	ldr	r2, [pc, #128]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084d0:	4a19      	ldr	r2, [pc, #100]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d016      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e2:	f7fc f92f 	bl	8004744 <HAL_GetTick>
 80084e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084e8:	e00b      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ea:	f7fc f92b 	bl	8004744 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d902      	bls.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	74fb      	strb	r3, [r7, #19]
            break;
 8008500:	e006      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0ec      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008510:	7cfb      	ldrb	r3, [r7, #19]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10c      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008516:	4b08      	ldr	r3, [pc, #32]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008526:	4904      	ldr	r1, [pc, #16]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800852e:	e009      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008530:	7cfb      	ldrb	r3, [r7, #19]
 8008532:	74bb      	strb	r3, [r7, #18]
 8008534:	e006      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008536:	bf00      	nop
 8008538:	40021000 	.word	0x40021000
 800853c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	7cfb      	ldrb	r3, [r7, #19]
 8008542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008544:	7c7b      	ldrb	r3, [r7, #17]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d105      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800854a:	4b9e      	ldr	r3, [pc, #632]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800854c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854e:	4a9d      	ldr	r2, [pc, #628]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008554:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008562:	4b98      	ldr	r3, [pc, #608]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008568:	f023 0203 	bic.w	r2, r3, #3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	4994      	ldr	r1, [pc, #592]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008572:	4313      	orrs	r3, r2
 8008574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008584:	4b8f      	ldr	r3, [pc, #572]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858a:	f023 020c 	bic.w	r2, r3, #12
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008592:	498c      	ldr	r1, [pc, #560]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008594:	4313      	orrs	r3, r2
 8008596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085a6:	4b87      	ldr	r3, [pc, #540]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b4:	4983      	ldr	r1, [pc, #524]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085c8:	4b7e      	ldr	r3, [pc, #504]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d6:	497b      	ldr	r1, [pc, #492]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085ea:	4b76      	ldr	r3, [pc, #472]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f8:	4972      	ldr	r1, [pc, #456]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800860c:	4b6d      	ldr	r3, [pc, #436]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800861a:	496a      	ldr	r1, [pc, #424]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800861c:	4313      	orrs	r3, r2
 800861e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800862e:	4b65      	ldr	r3, [pc, #404]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008634:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800863c:	4961      	ldr	r1, [pc, #388]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800863e:	4313      	orrs	r3, r2
 8008640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008650:	4b5c      	ldr	r3, [pc, #368]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865e:	4959      	ldr	r1, [pc, #356]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008660:	4313      	orrs	r3, r2
 8008662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008672:	4b54      	ldr	r3, [pc, #336]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008678:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008680:	4950      	ldr	r1, [pc, #320]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008682:	4313      	orrs	r3, r2
 8008684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008694:	4b4b      	ldr	r3, [pc, #300]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a2:	4948      	ldr	r1, [pc, #288]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086b6:	4b43      	ldr	r3, [pc, #268]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c4:	493f      	ldr	r1, [pc, #252]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d028      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086d8:	4b3a      	ldr	r3, [pc, #232]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e6:	4937      	ldr	r1, [pc, #220]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086f6:	d106      	bne.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086f8:	4b32      	ldr	r3, [pc, #200]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4a31      	ldr	r2, [pc, #196]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008702:	60d3      	str	r3, [r2, #12]
 8008704:	e011      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800870a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800870e:	d10c      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	2101      	movs	r1, #1
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f8c8 	bl	80088ac <RCCEx_PLLSAI1_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008720:	7cfb      	ldrb	r3, [r7, #19]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008726:	7cfb      	ldrb	r3, [r7, #19]
 8008728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d028      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008736:	4b23      	ldr	r3, [pc, #140]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800873c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008744:	491f      	ldr	r1, [pc, #124]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008746:	4313      	orrs	r3, r2
 8008748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008756:	4b1b      	ldr	r3, [pc, #108]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	4a1a      	ldr	r2, [pc, #104]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800875c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008760:	60d3      	str	r3, [r2, #12]
 8008762:	e011      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800876c:	d10c      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2101      	movs	r1, #1
 8008774:	4618      	mov	r0, r3
 8008776:	f000 f899 	bl	80088ac <RCCEx_PLLSAI1_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800877e:	7cfb      	ldrb	r3, [r7, #19]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008784:	7cfb      	ldrb	r3, [r7, #19]
 8008786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d02b      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008794:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a2:	4908      	ldr	r1, [pc, #32]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b2:	d109      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b4:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a02      	ldr	r2, [pc, #8]	@ (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087be:	60d3      	str	r3, [r2, #12]
 80087c0:	e014      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80087c2:	bf00      	nop
 80087c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087d0:	d10c      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	2101      	movs	r1, #1
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 f867 	bl	80088ac <RCCEx_PLLSAI1_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80087e2:	7cfb      	ldrb	r3, [r7, #19]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80087e8:	7cfb      	ldrb	r3, [r7, #19]
 80087ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d02f      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087f8:	4b2b      	ldr	r3, [pc, #172]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008806:	4928      	ldr	r1, [pc, #160]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008816:	d10d      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f844 	bl	80088ac <RCCEx_PLLSAI1_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008828:	7cfb      	ldrb	r3, [r7, #19]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d014      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800882e:	7cfb      	ldrb	r3, [r7, #19]
 8008830:	74bb      	strb	r3, [r7, #18]
 8008832:	e011      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883c:	d10c      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3320      	adds	r3, #32
 8008842:	2102      	movs	r1, #2
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f925 	bl	8008a94 <RCCEx_PLLSAI2_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800884e:	7cfb      	ldrb	r3, [r7, #19]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008854:	7cfb      	ldrb	r3, [r7, #19]
 8008856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008864:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008872:	490d      	ldr	r1, [pc, #52]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008874:	4313      	orrs	r3, r2
 8008876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008886:	4b08      	ldr	r3, [pc, #32]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008896:	4904      	ldr	r1, [pc, #16]	@ (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008898:	4313      	orrs	r3, r2
 800889a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800889e:	7cbb      	ldrb	r3, [r7, #18]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40021000 	.word	0x40021000

080088ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088ba:	4b75      	ldr	r3, [pc, #468]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d018      	beq.n	80088f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80088c6:	4b72      	ldr	r3, [pc, #456]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f003 0203 	and.w	r2, r3, #3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d10d      	bne.n	80088f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
       ||
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80088de:	4b6c      	ldr	r3, [pc, #432]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	091b      	lsrs	r3, r3, #4
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
       ||
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d047      	beq.n	8008982 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
 80088f6:	e044      	b.n	8008982 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d018      	beq.n	8008932 <RCCEx_PLLSAI1_Config+0x86>
 8008900:	2b03      	cmp	r3, #3
 8008902:	d825      	bhi.n	8008950 <RCCEx_PLLSAI1_Config+0xa4>
 8008904:	2b01      	cmp	r3, #1
 8008906:	d002      	beq.n	800890e <RCCEx_PLLSAI1_Config+0x62>
 8008908:	2b02      	cmp	r3, #2
 800890a:	d009      	beq.n	8008920 <RCCEx_PLLSAI1_Config+0x74>
 800890c:	e020      	b.n	8008950 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800890e:	4b60      	ldr	r3, [pc, #384]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11d      	bne.n	8008956 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800891e:	e01a      	b.n	8008956 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008920:	4b5b      	ldr	r3, [pc, #364]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008928:	2b00      	cmp	r3, #0
 800892a:	d116      	bne.n	800895a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008930:	e013      	b.n	800895a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008932:	4b57      	ldr	r3, [pc, #348]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10f      	bne.n	800895e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800893e:	4b54      	ldr	r3, [pc, #336]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800894e:	e006      	b.n	800895e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e004      	b.n	8008960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008956:	bf00      	nop
 8008958:	e002      	b.n	8008960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800895a:	bf00      	nop
 800895c:	e000      	b.n	8008960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800895e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10d      	bne.n	8008982 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008966:	4b4a      	ldr	r3, [pc, #296]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	3b01      	subs	r3, #1
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	430b      	orrs	r3, r1
 800897c:	4944      	ldr	r1, [pc, #272]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800897e:	4313      	orrs	r3, r2
 8008980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d17d      	bne.n	8008a84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008988:	4b41      	ldr	r3, [pc, #260]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a40      	ldr	r2, [pc, #256]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800898e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008994:	f7fb fed6 	bl	8004744 <HAL_GetTick>
 8008998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800899a:	e009      	b.n	80089b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800899c:	f7fb fed2 	bl	8004744 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d902      	bls.n	80089b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	73fb      	strb	r3, [r7, #15]
        break;
 80089ae:	e005      	b.n	80089bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80089b0:	4b37      	ldr	r3, [pc, #220]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1ef      	bne.n	800899c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d160      	bne.n	8008a84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d111      	bne.n	80089ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80089c8:	4b31      	ldr	r3, [pc, #196]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80089d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6892      	ldr	r2, [r2, #8]
 80089d8:	0211      	lsls	r1, r2, #8
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	68d2      	ldr	r2, [r2, #12]
 80089de:	0912      	lsrs	r2, r2, #4
 80089e0:	0452      	lsls	r2, r2, #17
 80089e2:	430a      	orrs	r2, r1
 80089e4:	492a      	ldr	r1, [pc, #168]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	610b      	str	r3, [r1, #16]
 80089ea:	e027      	b.n	8008a3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d112      	bne.n	8008a18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80089f2:	4b27      	ldr	r3, [pc, #156]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80089fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6892      	ldr	r2, [r2, #8]
 8008a02:	0211      	lsls	r1, r2, #8
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6912      	ldr	r2, [r2, #16]
 8008a08:	0852      	lsrs	r2, r2, #1
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	0552      	lsls	r2, r2, #21
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	491f      	ldr	r1, [pc, #124]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	610b      	str	r3, [r1, #16]
 8008a16:	e011      	b.n	8008a3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a18:	4b1d      	ldr	r3, [pc, #116]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008a20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6892      	ldr	r2, [r2, #8]
 8008a28:	0211      	lsls	r1, r2, #8
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6952      	ldr	r2, [r2, #20]
 8008a2e:	0852      	lsrs	r2, r2, #1
 8008a30:	3a01      	subs	r2, #1
 8008a32:	0652      	lsls	r2, r2, #25
 8008a34:	430a      	orrs	r2, r1
 8008a36:	4916      	ldr	r1, [pc, #88]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008a3c:	4b14      	ldr	r3, [pc, #80]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a13      	ldr	r2, [pc, #76]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a48:	f7fb fe7c 	bl	8004744 <HAL_GetTick>
 8008a4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008a4e:	e009      	b.n	8008a64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a50:	f7fb fe78 	bl	8004744 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d902      	bls.n	8008a64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	73fb      	strb	r3, [r7, #15]
          break;
 8008a62:	e005      	b.n	8008a70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008a64:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0ef      	beq.n	8008a50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008a76:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	4904      	ldr	r1, [pc, #16]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40021000 	.word	0x40021000

08008a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008aae:	4b67      	ldr	r3, [pc, #412]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0203 	and.w	r2, r3, #3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d10d      	bne.n	8008ada <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008ac6:	4b61      	ldr	r3, [pc, #388]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	091b      	lsrs	r3, r3, #4
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d047      	beq.n	8008b6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	e044      	b.n	8008b6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d018      	beq.n	8008b1a <RCCEx_PLLSAI2_Config+0x86>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d825      	bhi.n	8008b38 <RCCEx_PLLSAI2_Config+0xa4>
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d002      	beq.n	8008af6 <RCCEx_PLLSAI2_Config+0x62>
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d009      	beq.n	8008b08 <RCCEx_PLLSAI2_Config+0x74>
 8008af4:	e020      	b.n	8008b38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008af6:	4b55      	ldr	r3, [pc, #340]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d11d      	bne.n	8008b3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b06:	e01a      	b.n	8008b3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008b08:	4b50      	ldr	r3, [pc, #320]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d116      	bne.n	8008b42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b18:	e013      	b.n	8008b42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10f      	bne.n	8008b46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008b26:	4b49      	ldr	r3, [pc, #292]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b36:	e006      	b.n	8008b46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3c:	e004      	b.n	8008b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008b3e:	bf00      	nop
 8008b40:	e002      	b.n	8008b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008b42:	bf00      	nop
 8008b44:	e000      	b.n	8008b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10d      	bne.n	8008b6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6819      	ldr	r1, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	430b      	orrs	r3, r1
 8008b64:	4939      	ldr	r1, [pc, #228]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d167      	bne.n	8008c40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008b70:	4b36      	ldr	r3, [pc, #216]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a35      	ldr	r2, [pc, #212]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b7c:	f7fb fde2 	bl	8004744 <HAL_GetTick>
 8008b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008b82:	e009      	b.n	8008b98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b84:	f7fb fdde 	bl	8004744 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d902      	bls.n	8008b98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	73fb      	strb	r3, [r7, #15]
        break;
 8008b96:	e005      	b.n	8008ba4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008b98:	4b2c      	ldr	r3, [pc, #176]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1ef      	bne.n	8008b84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d14a      	bne.n	8008c40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d111      	bne.n	8008bd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008bb0:	4b26      	ldr	r3, [pc, #152]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6892      	ldr	r2, [r2, #8]
 8008bc0:	0211      	lsls	r1, r2, #8
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68d2      	ldr	r2, [r2, #12]
 8008bc6:	0912      	lsrs	r2, r2, #4
 8008bc8:	0452      	lsls	r2, r2, #17
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	491f      	ldr	r1, [pc, #124]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	614b      	str	r3, [r1, #20]
 8008bd2:	e011      	b.n	8008bf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008bdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6892      	ldr	r2, [r2, #8]
 8008be4:	0211      	lsls	r1, r2, #8
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6912      	ldr	r2, [r2, #16]
 8008bea:	0852      	lsrs	r2, r2, #1
 8008bec:	3a01      	subs	r2, #1
 8008bee:	0652      	lsls	r2, r2, #25
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	4916      	ldr	r1, [pc, #88]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008bf8:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a13      	ldr	r2, [pc, #76]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c04:	f7fb fd9e 	bl	8004744 <HAL_GetTick>
 8008c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008c0a:	e009      	b.n	8008c20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c0c:	f7fb fd9a 	bl	8004744 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d902      	bls.n	8008c20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8008c1e:	e005      	b.n	8008c2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0ef      	beq.n	8008c0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008c32:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c34:	695a      	ldr	r2, [r3, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	4904      	ldr	r1, [pc, #16]	@ (8008c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	40021000 	.word	0x40021000

08008c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e049      	b.n	8008cf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fb fc5a 	bl	8004530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f000 fb06 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d001      	beq.n	8008d18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e047      	b.n	8008da8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a23      	ldr	r2, [pc, #140]	@ (8008db4 <HAL_TIM_Base_Start+0xb4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d01d      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d32:	d018      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1f      	ldr	r2, [pc, #124]	@ (8008db8 <HAL_TIM_Base_Start+0xb8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1e      	ldr	r2, [pc, #120]	@ (8008dbc <HAL_TIM_Base_Start+0xbc>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00e      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc0 <HAL_TIM_Base_Start+0xc0>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d009      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc4 <HAL_TIM_Base_Start+0xc4>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d004      	beq.n	8008d66 <HAL_TIM_Base_Start+0x66>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a19      	ldr	r2, [pc, #100]	@ (8008dc8 <HAL_TIM_Base_Start+0xc8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d115      	bne.n	8008d92 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	4b17      	ldr	r3, [pc, #92]	@ (8008dcc <HAL_TIM_Base_Start+0xcc>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b06      	cmp	r3, #6
 8008d76:	d015      	beq.n	8008da4 <HAL_TIM_Base_Start+0xa4>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d7e:	d011      	beq.n	8008da4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	e008      	b.n	8008da4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e000      	b.n	8008da6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40000400 	.word	0x40000400
 8008dbc:	40000800 	.word	0x40000800
 8008dc0:	40000c00 	.word	0x40000c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	00010007 	.word	0x00010007

08008dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d001      	beq.n	8008de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e04f      	b.n	8008e88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a23      	ldr	r2, [pc, #140]	@ (8008e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01d      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e12:	d018      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1f      	ldr	r2, [pc, #124]	@ (8008e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d013      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1e      	ldr	r2, [pc, #120]	@ (8008e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00e      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d009      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <HAL_TIM_Base_Start_IT+0x76>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a19      	ldr	r2, [pc, #100]	@ (8008ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d115      	bne.n	8008e72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	4b17      	ldr	r3, [pc, #92]	@ (8008eac <HAL_TIM_Base_Start_IT+0xdc>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	d015      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0xb4>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e5e:	d011      	beq.n	8008e84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e70:	e008      	b.n	8008e84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0201 	orr.w	r2, r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e000      	b.n	8008e86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40013400 	.word	0x40013400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	00010007 	.word	0x00010007

08008eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d020      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01b      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0202 	mvn.w	r2, #2
 8008ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9b2 	bl	8009264 <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9a4 	bl	8009250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9b5 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d020      	beq.n	8008f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0204 	mvn.w	r2, #4
 8008f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f98c 	bl	8009264 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f97e 	bl	8009250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f98f 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d020      	beq.n	8008fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0208 	mvn.w	r2, #8
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2204      	movs	r2, #4
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f966 	bl	8009264 <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f958 	bl	8009250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f969 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0310 	and.w	r3, r3, #16
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d020      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0210 	mvn.w	r2, #16
 8008fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2208      	movs	r2, #8
 8008fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f940 	bl	8009264 <HAL_TIM_IC_CaptureCallback>
 8008fe4:	e005      	b.n	8008ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f932 	bl	8009250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f943 	bl	8009278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00c      	beq.n	800901c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0201 	mvn.w	r2, #1
 8009014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f9 fbdc 	bl	80027d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009036:	2b00      	cmp	r3, #0
 8009038:	d007      	beq.n	800904a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fafd 	bl	8009644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 faf5 	bl	8009658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00c      	beq.n	8009092 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800908a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8fd 	bl	800928c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00c      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d007      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f06f 0220 	mvn.w	r2, #32
 80090ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fabd 	bl	8009630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_TIM_ConfigClockSource+0x1c>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e0b6      	b.n	8009248 <HAL_TIM_ConfigClockSource+0x18a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2202      	movs	r2, #2
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009104:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009116:	d03e      	beq.n	8009196 <HAL_TIM_ConfigClockSource+0xd8>
 8009118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800911c:	f200 8087 	bhi.w	800922e <HAL_TIM_ConfigClockSource+0x170>
 8009120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009124:	f000 8086 	beq.w	8009234 <HAL_TIM_ConfigClockSource+0x176>
 8009128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912c:	d87f      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 800912e:	2b70      	cmp	r3, #112	@ 0x70
 8009130:	d01a      	beq.n	8009168 <HAL_TIM_ConfigClockSource+0xaa>
 8009132:	2b70      	cmp	r3, #112	@ 0x70
 8009134:	d87b      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 8009136:	2b60      	cmp	r3, #96	@ 0x60
 8009138:	d050      	beq.n	80091dc <HAL_TIM_ConfigClockSource+0x11e>
 800913a:	2b60      	cmp	r3, #96	@ 0x60
 800913c:	d877      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 800913e:	2b50      	cmp	r3, #80	@ 0x50
 8009140:	d03c      	beq.n	80091bc <HAL_TIM_ConfigClockSource+0xfe>
 8009142:	2b50      	cmp	r3, #80	@ 0x50
 8009144:	d873      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 8009146:	2b40      	cmp	r3, #64	@ 0x40
 8009148:	d058      	beq.n	80091fc <HAL_TIM_ConfigClockSource+0x13e>
 800914a:	2b40      	cmp	r3, #64	@ 0x40
 800914c:	d86f      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 800914e:	2b30      	cmp	r3, #48	@ 0x30
 8009150:	d064      	beq.n	800921c <HAL_TIM_ConfigClockSource+0x15e>
 8009152:	2b30      	cmp	r3, #48	@ 0x30
 8009154:	d86b      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 8009156:	2b20      	cmp	r3, #32
 8009158:	d060      	beq.n	800921c <HAL_TIM_ConfigClockSource+0x15e>
 800915a:	2b20      	cmp	r3, #32
 800915c:	d867      	bhi.n	800922e <HAL_TIM_ConfigClockSource+0x170>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d05c      	beq.n	800921c <HAL_TIM_ConfigClockSource+0x15e>
 8009162:	2b10      	cmp	r3, #16
 8009164:	d05a      	beq.n	800921c <HAL_TIM_ConfigClockSource+0x15e>
 8009166:	e062      	b.n	800922e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009178:	f000 f9b2 	bl	80094e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800918a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	609a      	str	r2, [r3, #8]
      break;
 8009194:	e04f      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091a6:	f000 f99b 	bl	80094e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091b8:	609a      	str	r2, [r3, #8]
      break;
 80091ba:	e03c      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c8:	461a      	mov	r2, r3
 80091ca:	f000 f90f 	bl	80093ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2150      	movs	r1, #80	@ 0x50
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f968 	bl	80094aa <TIM_ITRx_SetConfig>
      break;
 80091da:	e02c      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091e8:	461a      	mov	r2, r3
 80091ea:	f000 f92e 	bl	800944a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2160      	movs	r1, #96	@ 0x60
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f958 	bl	80094aa <TIM_ITRx_SetConfig>
      break;
 80091fa:	e01c      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009208:	461a      	mov	r2, r3
 800920a:	f000 f8ef 	bl	80093ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2140      	movs	r1, #64	@ 0x40
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f948 	bl	80094aa <TIM_ITRx_SetConfig>
      break;
 800921a:	e00c      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f000 f93f 	bl	80094aa <TIM_ITRx_SetConfig>
      break;
 800922c:	e003      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	73fb      	strb	r3, [r7, #15]
      break;
 8009232:	e000      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a46      	ldr	r2, [pc, #280]	@ (80093cc <TIM_Base_SetConfig+0x12c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d013      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092be:	d00f      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a43      	ldr	r2, [pc, #268]	@ (80093d0 <TIM_Base_SetConfig+0x130>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a42      	ldr	r2, [pc, #264]	@ (80093d4 <TIM_Base_SetConfig+0x134>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a41      	ldr	r2, [pc, #260]	@ (80093d8 <TIM_Base_SetConfig+0x138>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_Base_SetConfig+0x40>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a40      	ldr	r2, [pc, #256]	@ (80093dc <TIM_Base_SetConfig+0x13c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d108      	bne.n	80092f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a35      	ldr	r2, [pc, #212]	@ (80093cc <TIM_Base_SetConfig+0x12c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d01f      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009300:	d01b      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a32      	ldr	r2, [pc, #200]	@ (80093d0 <TIM_Base_SetConfig+0x130>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d017      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a31      	ldr	r2, [pc, #196]	@ (80093d4 <TIM_Base_SetConfig+0x134>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a30      	ldr	r2, [pc, #192]	@ (80093d8 <TIM_Base_SetConfig+0x138>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a2f      	ldr	r2, [pc, #188]	@ (80093dc <TIM_Base_SetConfig+0x13c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a2e      	ldr	r2, [pc, #184]	@ (80093e0 <TIM_Base_SetConfig+0x140>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a2d      	ldr	r2, [pc, #180]	@ (80093e4 <TIM_Base_SetConfig+0x144>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_Base_SetConfig+0x9a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a2c      	ldr	r2, [pc, #176]	@ (80093e8 <TIM_Base_SetConfig+0x148>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d108      	bne.n	800934c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a16      	ldr	r2, [pc, #88]	@ (80093cc <TIM_Base_SetConfig+0x12c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a18      	ldr	r2, [pc, #96]	@ (80093dc <TIM_Base_SetConfig+0x13c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00b      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a17      	ldr	r2, [pc, #92]	@ (80093e0 <TIM_Base_SetConfig+0x140>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a16      	ldr	r2, [pc, #88]	@ (80093e4 <TIM_Base_SetConfig+0x144>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0xf8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <TIM_Base_SetConfig+0x148>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d103      	bne.n	80093a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d105      	bne.n	80093be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f023 0201 	bic.w	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	611a      	str	r2, [r3, #16]
  }
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40000400 	.word	0x40000400
 80093d4:	40000800 	.word	0x40000800
 80093d8:	40000c00 	.word	0x40000c00
 80093dc:	40013400 	.word	0x40013400
 80093e0:	40014000 	.word	0x40014000
 80093e4:	40014400 	.word	0x40014400
 80093e8:	40014800 	.word	0x40014800

080093ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f023 0201 	bic.w	r2, r3, #1
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f023 030a 	bic.w	r3, r3, #10
 8009428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800944a:	b480      	push	{r7}
 800944c:	b087      	sub	sp, #28
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f023 0210 	bic.w	r2, r3, #16
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	031b      	lsls	r3, r3, #12
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	4313      	orrs	r3, r2
 800947e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009486:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f043 0307 	orr.w	r3, r3, #7
 80094cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	609a      	str	r2, [r3, #8]
}
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	021a      	lsls	r2, r3, #8
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	431a      	orrs	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4313      	orrs	r3, r2
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	4313      	orrs	r3, r2
 800950c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	609a      	str	r2, [r3, #8]
}
 8009514:	bf00      	nop
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009534:	2302      	movs	r3, #2
 8009536:	e068      	b.n	800960a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a2e      	ldr	r2, [pc, #184]	@ (8009618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a2d      	ldr	r2, [pc, #180]	@ (800961c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d108      	bne.n	800957e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1e      	ldr	r2, [pc, #120]	@ (8009618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d01d      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095aa:	d018      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d013      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00e      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a18      	ldr	r2, [pc, #96]	@ (8009628 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d009      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a13      	ldr	r2, [pc, #76]	@ (800961c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d004      	beq.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a14      	ldr	r2, [pc, #80]	@ (800962c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d10c      	bne.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	40012c00 	.word	0x40012c00
 800961c:	40013400 	.word	0x40013400
 8009620:	40000400 	.word	0x40000400
 8009624:	40000800 	.word	0x40000800
 8009628:	40000c00 	.word	0x40000c00
 800962c:	40014000 	.word	0x40014000

08009630 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e040      	b.n	8009700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fa ff9e 	bl	80045d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2224      	movs	r2, #36	@ 0x24
 8009698:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb6a 	bl	8009d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8af 	bl	800981c <UART_SetConfig>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e01b      	b.n	8009700 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689a      	ldr	r2, [r3, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fbe9 	bl	8009ed0 <UART_CheckIdleState>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	@ 0x28
 800970c:	af02      	add	r7, sp, #8
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800971c:	2b20      	cmp	r3, #32
 800971e:	d177      	bne.n	8009810 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <HAL_UART_Transmit+0x24>
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e070      	b.n	8009812 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2221      	movs	r2, #33	@ 0x21
 800973c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800973e:	f7fb f801 	bl	8004744 <HAL_GetTick>
 8009742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	88fa      	ldrh	r2, [r7, #6]
 8009748:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800975c:	d108      	bne.n	8009770 <HAL_UART_Transmit+0x68>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	e003      	b.n	8009778 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009774:	2300      	movs	r3, #0
 8009776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009778:	e02f      	b.n	80097da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2200      	movs	r2, #0
 8009782:	2180      	movs	r1, #128	@ 0x80
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 fc4b 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e03b      	b.n	8009812 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	881a      	ldrh	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097ac:	b292      	uxth	r2, r2
 80097ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	3302      	adds	r3, #2
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e007      	b.n	80097c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3301      	adds	r3, #1
 80097c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1c9      	bne.n	800977a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2200      	movs	r2, #0
 80097ee:	2140      	movs	r1, #64	@ 0x40
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fc15 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e005      	b.n	8009812 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2220      	movs	r2, #32
 800980a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	e000      	b.n	8009812 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009810:	2302      	movs	r3, #2
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800981c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009820:	b08a      	sub	sp, #40	@ 0x28
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	431a      	orrs	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	431a      	orrs	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	4313      	orrs	r3, r2
 8009842:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4ba4      	ldr	r3, [pc, #656]	@ (8009adc <UART_SetConfig+0x2c0>)
 800984c:	4013      	ands	r3, r2
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009854:	430b      	orrs	r3, r1
 8009856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a99      	ldr	r2, [pc, #612]	@ (8009ae0 <UART_SetConfig+0x2c4>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009884:	4313      	orrs	r3, r2
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a90      	ldr	r2, [pc, #576]	@ (8009ae4 <UART_SetConfig+0x2c8>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d126      	bne.n	80098f4 <UART_SetConfig+0xd8>
 80098a6:	4b90      	ldr	r3, [pc, #576]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d81b      	bhi.n	80098ec <UART_SetConfig+0xd0>
 80098b4:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <UART_SetConfig+0xa0>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	080098cd 	.word	0x080098cd
 80098c0:	080098dd 	.word	0x080098dd
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e5 	.word	0x080098e5
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098d2:	e116      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80098d4:	2302      	movs	r3, #2
 80098d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098da:	e112      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80098dc:	2304      	movs	r3, #4
 80098de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098e2:	e10e      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80098e4:	2308      	movs	r3, #8
 80098e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098ea:	e10a      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80098ec:	2310      	movs	r3, #16
 80098ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098f2:	e106      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a7c      	ldr	r2, [pc, #496]	@ (8009aec <UART_SetConfig+0x2d0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d138      	bne.n	8009970 <UART_SetConfig+0x154>
 80098fe:	4b7a      	ldr	r3, [pc, #488]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 8009900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009904:	f003 030c 	and.w	r3, r3, #12
 8009908:	2b0c      	cmp	r3, #12
 800990a:	d82d      	bhi.n	8009968 <UART_SetConfig+0x14c>
 800990c:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <UART_SetConfig+0xf8>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	08009949 	.word	0x08009949
 8009918:	08009969 	.word	0x08009969
 800991c:	08009969 	.word	0x08009969
 8009920:	08009969 	.word	0x08009969
 8009924:	08009959 	.word	0x08009959
 8009928:	08009969 	.word	0x08009969
 800992c:	08009969 	.word	0x08009969
 8009930:	08009969 	.word	0x08009969
 8009934:	08009951 	.word	0x08009951
 8009938:	08009969 	.word	0x08009969
 800993c:	08009969 	.word	0x08009969
 8009940:	08009969 	.word	0x08009969
 8009944:	08009961 	.word	0x08009961
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800994e:	e0d8      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009950:	2302      	movs	r3, #2
 8009952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009956:	e0d4      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009958:	2304      	movs	r3, #4
 800995a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800995e:	e0d0      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009960:	2308      	movs	r3, #8
 8009962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009966:	e0cc      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009968:	2310      	movs	r3, #16
 800996a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800996e:	e0c8      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a5e      	ldr	r2, [pc, #376]	@ (8009af0 <UART_SetConfig+0x2d4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d125      	bne.n	80099c6 <UART_SetConfig+0x1aa>
 800997a:	4b5b      	ldr	r3, [pc, #364]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 800997c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009980:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009984:	2b30      	cmp	r3, #48	@ 0x30
 8009986:	d016      	beq.n	80099b6 <UART_SetConfig+0x19a>
 8009988:	2b30      	cmp	r3, #48	@ 0x30
 800998a:	d818      	bhi.n	80099be <UART_SetConfig+0x1a2>
 800998c:	2b20      	cmp	r3, #32
 800998e:	d00a      	beq.n	80099a6 <UART_SetConfig+0x18a>
 8009990:	2b20      	cmp	r3, #32
 8009992:	d814      	bhi.n	80099be <UART_SetConfig+0x1a2>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <UART_SetConfig+0x182>
 8009998:	2b10      	cmp	r3, #16
 800999a:	d008      	beq.n	80099ae <UART_SetConfig+0x192>
 800999c:	e00f      	b.n	80099be <UART_SetConfig+0x1a2>
 800999e:	2300      	movs	r3, #0
 80099a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099a4:	e0ad      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099a6:	2302      	movs	r3, #2
 80099a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ac:	e0a9      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099ae:	2304      	movs	r3, #4
 80099b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b4:	e0a5      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099b6:	2308      	movs	r3, #8
 80099b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099bc:	e0a1      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099be:	2310      	movs	r3, #16
 80099c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c4:	e09d      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a4a      	ldr	r2, [pc, #296]	@ (8009af4 <UART_SetConfig+0x2d8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d125      	bne.n	8009a1c <UART_SetConfig+0x200>
 80099d0:	4b45      	ldr	r3, [pc, #276]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 80099d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099da:	2bc0      	cmp	r3, #192	@ 0xc0
 80099dc:	d016      	beq.n	8009a0c <UART_SetConfig+0x1f0>
 80099de:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e0:	d818      	bhi.n	8009a14 <UART_SetConfig+0x1f8>
 80099e2:	2b80      	cmp	r3, #128	@ 0x80
 80099e4:	d00a      	beq.n	80099fc <UART_SetConfig+0x1e0>
 80099e6:	2b80      	cmp	r3, #128	@ 0x80
 80099e8:	d814      	bhi.n	8009a14 <UART_SetConfig+0x1f8>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <UART_SetConfig+0x1d8>
 80099ee:	2b40      	cmp	r3, #64	@ 0x40
 80099f0:	d008      	beq.n	8009a04 <UART_SetConfig+0x1e8>
 80099f2:	e00f      	b.n	8009a14 <UART_SetConfig+0x1f8>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099fa:	e082      	b.n	8009b02 <UART_SetConfig+0x2e6>
 80099fc:	2302      	movs	r3, #2
 80099fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a02:	e07e      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a04:	2304      	movs	r3, #4
 8009a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a0a:	e07a      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a12:	e076      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a1a:	e072      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a35      	ldr	r2, [pc, #212]	@ (8009af8 <UART_SetConfig+0x2dc>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d12a      	bne.n	8009a7c <UART_SetConfig+0x260>
 8009a26:	4b30      	ldr	r3, [pc, #192]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a34:	d01a      	beq.n	8009a6c <UART_SetConfig+0x250>
 8009a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a3a:	d81b      	bhi.n	8009a74 <UART_SetConfig+0x258>
 8009a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a40:	d00c      	beq.n	8009a5c <UART_SetConfig+0x240>
 8009a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a46:	d815      	bhi.n	8009a74 <UART_SetConfig+0x258>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <UART_SetConfig+0x238>
 8009a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a50:	d008      	beq.n	8009a64 <UART_SetConfig+0x248>
 8009a52:	e00f      	b.n	8009a74 <UART_SetConfig+0x258>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a5a:	e052      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a62:	e04e      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a64:	2304      	movs	r3, #4
 8009a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a6a:	e04a      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a72:	e046      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a74:	2310      	movs	r3, #16
 8009a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a7a:	e042      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a17      	ldr	r2, [pc, #92]	@ (8009ae0 <UART_SetConfig+0x2c4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d13a      	bne.n	8009afc <UART_SetConfig+0x2e0>
 8009a86:	4b18      	ldr	r3, [pc, #96]	@ (8009ae8 <UART_SetConfig+0x2cc>)
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a94:	d01a      	beq.n	8009acc <UART_SetConfig+0x2b0>
 8009a96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a9a:	d81b      	bhi.n	8009ad4 <UART_SetConfig+0x2b8>
 8009a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa0:	d00c      	beq.n	8009abc <UART_SetConfig+0x2a0>
 8009aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa6:	d815      	bhi.n	8009ad4 <UART_SetConfig+0x2b8>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <UART_SetConfig+0x298>
 8009aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab0:	d008      	beq.n	8009ac4 <UART_SetConfig+0x2a8>
 8009ab2:	e00f      	b.n	8009ad4 <UART_SetConfig+0x2b8>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aba:	e022      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009abc:	2302      	movs	r3, #2
 8009abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ac2:	e01e      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aca:	e01a      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009acc:	2308      	movs	r3, #8
 8009ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ad2:	e016      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ada:	e012      	b.n	8009b02 <UART_SetConfig+0x2e6>
 8009adc:	efff69f3 	.word	0xefff69f3
 8009ae0:	40008000 	.word	0x40008000
 8009ae4:	40013800 	.word	0x40013800
 8009ae8:	40021000 	.word	0x40021000
 8009aec:	40004400 	.word	0x40004400
 8009af0:	40004800 	.word	0x40004800
 8009af4:	40004c00 	.word	0x40004c00
 8009af8:	40005000 	.word	0x40005000
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a9f      	ldr	r2, [pc, #636]	@ (8009d84 <UART_SetConfig+0x568>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d17a      	bne.n	8009c02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d824      	bhi.n	8009b5e <UART_SetConfig+0x342>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <UART_SetConfig+0x300>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b5f 	.word	0x08009b5f
 8009b24:	08009b49 	.word	0x08009b49
 8009b28:	08009b5f 	.word	0x08009b5f
 8009b2c:	08009b4f 	.word	0x08009b4f
 8009b30:	08009b5f 	.word	0x08009b5f
 8009b34:	08009b5f 	.word	0x08009b5f
 8009b38:	08009b5f 	.word	0x08009b5f
 8009b3c:	08009b57 	.word	0x08009b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b40:	f7fe fb0c 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8009b44:	61f8      	str	r0, [r7, #28]
        break;
 8009b46:	e010      	b.n	8009b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b48:	4b8f      	ldr	r3, [pc, #572]	@ (8009d88 <UART_SetConfig+0x56c>)
 8009b4a:	61fb      	str	r3, [r7, #28]
        break;
 8009b4c:	e00d      	b.n	8009b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b4e:	f7fe fa6d 	bl	800802c <HAL_RCC_GetSysClockFreq>
 8009b52:	61f8      	str	r0, [r7, #28]
        break;
 8009b54:	e009      	b.n	8009b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b5a:	61fb      	str	r3, [r7, #28]
        break;
 8009b5c:	e005      	b.n	8009b6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80fb 	beq.w	8009d68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	4413      	add	r3, r2
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d305      	bcc.n	8009b8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d903      	bls.n	8009b96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009b94:	e0e8      	b.n	8009d68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	461c      	mov	r4, r3
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	022b      	lsls	r3, r5, #8
 8009ba8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009bac:	0222      	lsls	r2, r4, #8
 8009bae:	68f9      	ldr	r1, [r7, #12]
 8009bb0:	6849      	ldr	r1, [r1, #4]
 8009bb2:	0849      	lsrs	r1, r1, #1
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	4688      	mov	r8, r1
 8009bb8:	4681      	mov	r9, r0
 8009bba:	eb12 0a08 	adds.w	sl, r2, r8
 8009bbe:	eb43 0b09 	adc.w	fp, r3, r9
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	f7f7 f8b8 	bl	8000d48 <__aeabi_uldivmod>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4613      	mov	r3, r2
 8009bde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009be6:	d308      	bcc.n	8009bfa <UART_SetConfig+0x3de>
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d204      	bcs.n	8009bfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	60da      	str	r2, [r3, #12]
 8009bf8:	e0b6      	b.n	8009d68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c00:	e0b2      	b.n	8009d68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c0a:	d15e      	bne.n	8009cca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d828      	bhi.n	8009c66 <UART_SetConfig+0x44a>
 8009c14:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <UART_SetConfig+0x400>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	08009c67 	.word	0x08009c67
 8009c2c:	08009c57 	.word	0x08009c57
 8009c30:	08009c67 	.word	0x08009c67
 8009c34:	08009c67 	.word	0x08009c67
 8009c38:	08009c67 	.word	0x08009c67
 8009c3c:	08009c5f 	.word	0x08009c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c40:	f7fe fa8c 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8009c44:	61f8      	str	r0, [r7, #28]
        break;
 8009c46:	e014      	b.n	8009c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c48:	f7fe fa9e 	bl	8008188 <HAL_RCC_GetPCLK2Freq>
 8009c4c:	61f8      	str	r0, [r7, #28]
        break;
 8009c4e:	e010      	b.n	8009c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c50:	4b4d      	ldr	r3, [pc, #308]	@ (8009d88 <UART_SetConfig+0x56c>)
 8009c52:	61fb      	str	r3, [r7, #28]
        break;
 8009c54:	e00d      	b.n	8009c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c56:	f7fe f9e9 	bl	800802c <HAL_RCC_GetSysClockFreq>
 8009c5a:	61f8      	str	r0, [r7, #28]
        break;
 8009c5c:	e009      	b.n	8009c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c62:	61fb      	str	r3, [r7, #28]
        break;
 8009c64:	e005      	b.n	8009c72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d077      	beq.n	8009d68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	005a      	lsls	r2, r3, #1
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	085b      	lsrs	r3, r3, #1
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b0f      	cmp	r3, #15
 8009c92:	d916      	bls.n	8009cc2 <UART_SetConfig+0x4a6>
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c9a:	d212      	bcs.n	8009cc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f023 030f 	bic.w	r3, r3, #15
 8009ca4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	8afb      	ldrh	r3, [r7, #22]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	8afa      	ldrh	r2, [r7, #22]
 8009cbe:	60da      	str	r2, [r3, #12]
 8009cc0:	e052      	b.n	8009d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009cc8:	e04e      	b.n	8009d68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d827      	bhi.n	8009d22 <UART_SetConfig+0x506>
 8009cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd8 <UART_SetConfig+0x4bc>)
 8009cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd8:	08009cfd 	.word	0x08009cfd
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	08009d23 	.word	0x08009d23
 8009ce8:	08009d13 	.word	0x08009d13
 8009cec:	08009d23 	.word	0x08009d23
 8009cf0:	08009d23 	.word	0x08009d23
 8009cf4:	08009d23 	.word	0x08009d23
 8009cf8:	08009d1b 	.word	0x08009d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7fe fa2e 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8009d00:	61f8      	str	r0, [r7, #28]
        break;
 8009d02:	e014      	b.n	8009d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d04:	f7fe fa40 	bl	8008188 <HAL_RCC_GetPCLK2Freq>
 8009d08:	61f8      	str	r0, [r7, #28]
        break;
 8009d0a:	e010      	b.n	8009d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8009d88 <UART_SetConfig+0x56c>)
 8009d0e:	61fb      	str	r3, [r7, #28]
        break;
 8009d10:	e00d      	b.n	8009d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d12:	f7fe f98b 	bl	800802c <HAL_RCC_GetSysClockFreq>
 8009d16:	61f8      	str	r0, [r7, #28]
        break;
 8009d18:	e009      	b.n	8009d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d1e:	61fb      	str	r3, [r7, #28]
        break;
 8009d20:	e005      	b.n	8009d2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d019      	beq.n	8009d68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	085a      	lsrs	r2, r3, #1
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	441a      	add	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2b0f      	cmp	r3, #15
 8009d4c:	d909      	bls.n	8009d62 <UART_SetConfig+0x546>
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d54:	d205      	bcs.n	8009d62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60da      	str	r2, [r3, #12]
 8009d60:	e002      	b.n	8009d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009d74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3728      	adds	r7, #40	@ 0x28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d82:	bf00      	nop
 8009d84:	40008000 	.word	0x40008000
 8009d88:	00f42400 	.word	0x00f42400

08009d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8a:	d10a      	bne.n	8009ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b098      	sub	sp, #96	@ 0x60
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee0:	f7fa fc30 	bl	8004744 <HAL_GetTick>
 8009ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d12e      	bne.n	8009f52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f88c 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d021      	beq.n	8009f52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e062      	b.n	800a018 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d149      	bne.n	8009ff4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f856 	bl	800a020 <UART_WaitOnFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d03c      	beq.n	8009ff4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	623b      	str	r3, [r7, #32]
   return(result);
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e6      	bne.n	8009f7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fcc:	61fa      	str	r2, [r7, #28]
 8009fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	69b9      	ldr	r1, [r7, #24]
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e5      	bne.n	8009fac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e011      	b.n	800a018 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3758      	adds	r7, #88	@ 0x58
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	4613      	mov	r3, r2
 800a02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a030:	e04f      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a038:	d04b      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a03a:	f7fa fb83 	bl	8004744 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	429a      	cmp	r2, r3
 800a048:	d302      	bcc.n	800a050 <UART_WaitOnFlagUntilTimeout+0x30>
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e04e      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d037      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b80      	cmp	r3, #128	@ 0x80
 800a066:	d034      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b40      	cmp	r3, #64	@ 0x40
 800a06c:	d031      	beq.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d110      	bne.n	800a09e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2208      	movs	r2, #8
 800a082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f838 	bl	800a0fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2208      	movs	r2, #8
 800a08e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e029      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0ac:	d111      	bne.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f81e 	bl	800a0fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e00f      	b.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	bf0c      	ite	eq
 800a0e2:	2301      	moveq	r3, #1
 800a0e4:	2300      	movne	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d0a0      	beq.n	800a032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b095      	sub	sp, #84	@ 0x54
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	461a      	mov	r2, r3
 800a11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a120:	643b      	str	r3, [r7, #64]	@ 0x40
 800a122:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a124:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a126:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a128:	e841 2300 	strex	r3, r2, [r1]
 800a12c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e6      	bne.n	800a102 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	61fb      	str	r3, [r7, #28]
   return(result);
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f023 0301 	bic.w	r3, r3, #1
 800a14a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a154:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a156:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a15a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e5      	bne.n	800a134 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d118      	bne.n	800a1a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f023 0310 	bic.w	r3, r3, #16
 800a184:	647b      	str	r3, [r7, #68]	@ 0x44
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a18e:	61bb      	str	r3, [r7, #24]
 800a190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6979      	ldr	r1, [r7, #20]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	613b      	str	r3, [r7, #16]
   return(result);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e6      	bne.n	800a170 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a1b6:	bf00      	nop
 800a1b8:	3754      	adds	r7, #84	@ 0x54
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <__NVIC_SetPriority>:
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	db0a      	blt.n	800a1ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	490c      	ldr	r1, [pc, #48]	@ (800a210 <__NVIC_SetPriority+0x4c>)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	0112      	lsls	r2, r2, #4
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a1ec:	e00a      	b.n	800a204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4908      	ldr	r1, [pc, #32]	@ (800a214 <__NVIC_SetPriority+0x50>)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	0112      	lsls	r2, r2, #4
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	440b      	add	r3, r1
 800a202:	761a      	strb	r2, [r3, #24]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000e100 	.word	0xe000e100
 800a214:	e000ed00 	.word	0xe000ed00

0800a218 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a21c:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <SysTick_Handler+0x1c>)
 800a21e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a220:	f002 ff1a 	bl	800d058 <xTaskGetSchedulerState>
 800a224:	4603      	mov	r3, r0
 800a226:	2b01      	cmp	r3, #1
 800a228:	d001      	beq.n	800a22e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a22a:	f004 f8c5 	bl	800e3b8 <xPortSysTickHandler>
  }
}
 800a22e:	bf00      	nop
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	e000e010 	.word	0xe000e010

0800a238 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a23c:	2100      	movs	r1, #0
 800a23e:	f06f 0004 	mvn.w	r0, #4
 800a242:	f7ff ffbf 	bl	800a1c4 <__NVIC_SetPriority>
#endif
}
 800a246:	bf00      	nop
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a252:	f3ef 8305 	mrs	r3, IPSR
 800a256:	603b      	str	r3, [r7, #0]
  return(result);
 800a258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a25e:	f06f 0305 	mvn.w	r3, #5
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	e00c      	b.n	800a280 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a266:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <osKernelInitialize+0x44>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a26e:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <osKernelInitialize+0x44>)
 800a270:	2201      	movs	r2, #1
 800a272:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a274:	2300      	movs	r3, #0
 800a276:	607b      	str	r3, [r7, #4]
 800a278:	e002      	b.n	800a280 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a27e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a280:	687b      	ldr	r3, [r7, #4]
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20000854 	.word	0x20000854

0800a294 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a29a:	f3ef 8305 	mrs	r3, IPSR
 800a29e:	603b      	str	r3, [r7, #0]
  return(result);
 800a2a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800a2a6:	f06f 0305 	mvn.w	r3, #5
 800a2aa:	607b      	str	r3, [r7, #4]
 800a2ac:	e010      	b.n	800a2d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a2dc <osKernelStart+0x48>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d109      	bne.n	800a2ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2b6:	f7ff ffbf 	bl	800a238 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2ba:	4b08      	ldr	r3, [pc, #32]	@ (800a2dc <osKernelStart+0x48>)
 800a2bc:	2202      	movs	r2, #2
 800a2be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2c0:	f002 fa34 	bl	800c72c <vTaskStartScheduler>
      stat = osOK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	e002      	b.n	800a2d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2d0:	687b      	ldr	r3, [r7, #4]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000854 	.word	0x20000854

0800a2e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e6:	f3ef 8305 	mrs	r3, IPSR
 800a2ea:	603b      	str	r3, [r7, #0]
  return(result);
 800a2ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a2f2:	f002 fb3f 	bl	800c974 <xTaskGetTickCountFromISR>
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	e002      	b.n	800a300 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a2fa:	f002 fb2b 	bl	800c954 <xTaskGetTickCount>
 800a2fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a300:	687b      	ldr	r3, [r7, #4]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b08e      	sub	sp, #56	@ 0x38
 800a30e:	af04      	add	r7, sp, #16
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a31a:	f3ef 8305 	mrs	r3, IPSR
 800a31e:	617b      	str	r3, [r7, #20]
  return(result);
 800a320:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a322:	2b00      	cmp	r3, #0
 800a324:	d17e      	bne.n	800a424 <osThreadNew+0x11a>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d07b      	beq.n	800a424 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a32c:	2380      	movs	r3, #128	@ 0x80
 800a32e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a330:	2318      	movs	r3, #24
 800a332:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a33c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d045      	beq.n	800a3d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <osThreadNew+0x48>
        name = attr->name;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d008      	beq.n	800a378 <osThreadNew+0x6e>
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2b38      	cmp	r3, #56	@ 0x38
 800a36a:	d805      	bhi.n	800a378 <osThreadNew+0x6e>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <osThreadNew+0x72>
        return (NULL);
 800a378:	2300      	movs	r3, #0
 800a37a:	e054      	b.n	800a426 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	089b      	lsrs	r3, r3, #2
 800a38a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00e      	beq.n	800a3b2 <osThreadNew+0xa8>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2b5b      	cmp	r3, #91	@ 0x5b
 800a39a:	d90a      	bls.n	800a3b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <osThreadNew+0xa8>
        mem = 1;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e010      	b.n	800a3d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10c      	bne.n	800a3d4 <osThreadNew+0xca>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d108      	bne.n	800a3d4 <osThreadNew+0xca>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d104      	bne.n	800a3d4 <osThreadNew+0xca>
          mem = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	e001      	b.n	800a3d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d110      	bne.n	800a3fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3e2:	9202      	str	r2, [sp, #8]
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6a3a      	ldr	r2, [r7, #32]
 800a3ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f001 ff3f 	bl	800c274 <xTaskCreateStatic>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	e013      	b.n	800a424 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d110      	bne.n	800a424 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	b29a      	uxth	r2, r3
 800a406:	f107 0310 	add.w	r3, r7, #16
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f001 ff8d 	bl	800c334 <xTaskCreate>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d001      	beq.n	800a424 <osThreadNew+0x11a>
            hTask = NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a424:	693b      	ldr	r3, [r7, #16]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3728      	adds	r7, #40	@ 0x28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a436:	f3ef 8305 	mrs	r3, IPSR
 800a43a:	603b      	str	r3, [r7, #0]
  return(result);
 800a43c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <osThreadYield+0x1a>
    stat = osErrorISR;
 800a442:	f06f 0305 	mvn.w	r3, #5
 800a446:	607b      	str	r3, [r7, #4]
 800a448:	e009      	b.n	800a45e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a44e:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <osThreadYield+0x3c>)
 800a450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a45e:	687b      	ldr	r3, [r7, #4]
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af02      	add	r7, sp, #8
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <osThreadFlagsSet+0x1a>
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	da03      	bge.n	800a492 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a48a:	f06f 0303 	mvn.w	r3, #3
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	e035      	b.n	800a4fe <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a496:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a498:	f3ef 8305 	mrs	r3, IPSR
 800a49c:	613b      	str	r3, [r7, #16]
  return(result);
 800a49e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01f      	beq.n	800a4e4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6978      	ldr	r0, [r7, #20]
 800a4b6:	f003 f871 	bl	800d59c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a4ba:	f107 030c 	add.w	r3, r7, #12
 800a4be:	2200      	movs	r2, #0
 800a4c0:	9200      	str	r2, [sp, #0]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	6978      	ldr	r0, [r7, #20]
 800a4c8:	f003 f868 	bl	800d59c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <osThreadFlagsSet+0x8e>
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <osThreadFlagsSet+0x98>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	e00c      	b.n	800a4fe <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6978      	ldr	r0, [r7, #20]
 800a4ec:	f002 ff9c 	bl	800d428 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a4f0:	f107 030c 	add.w	r3, r7, #12
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6978      	ldr	r0, [r7, #20]
 800a4fa:	f002 ff95 	bl	800d428 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08c      	sub	sp, #48	@ 0x30
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a518:	f3ef 8305 	mrs	r3, IPSR
 800a51c:	617b      	str	r3, [r7, #20]
  return(result);
 800a51e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a524:	f06f 0305 	mvn.w	r3, #5
 800a528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a52a:	e06b      	b.n	800a604 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da03      	bge.n	800a53a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a532:	f06f 0303 	mvn.w	r3, #3
 800a536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a538:	e064      	b.n	800a604 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a548:	e001      	b.n	800a54e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800a556:	f002 f9fd 	bl	800c954 <xTaskGetTickCount>
 800a55a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a55c:	f107 0210 	add.w	r2, r7, #16
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a564:	2000      	movs	r0, #0
 800a566:	f002 ff05 	bl	800d374 <xTaskNotifyWait>
 800a56a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d137      	bne.n	800a5e2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4013      	ands	r3, r2
 800a578:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a57e:	4313      	orrs	r3, r2
 800a580:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00c      	beq.n	800a5a6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	4013      	ands	r3, r2
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	429a      	cmp	r2, r3
 800a596:	d032      	beq.n	800a5fe <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10f      	bne.n	800a5be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a59e:	f06f 0302 	mvn.w	r3, #2
 800a5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a5a4:	e02e      	b.n	800a604 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d128      	bne.n	800a602 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d103      	bne.n	800a5be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a5b6:	f06f 0302 	mvn.w	r3, #2
 800a5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a5bc:	e022      	b.n	800a604 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a5be:	f002 f9c9 	bl	800c954 <xTaskGetTickCount>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d902      	bls.n	800a5d8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d6:	e00e      	b.n	800a5f6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5e0:	e009      	b.n	800a5f6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a5e8:	f06f 0302 	mvn.w	r3, #2
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5ee:	e002      	b.n	800a5f6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a5f0:	f06f 0301 	mvn.w	r3, #1
 800a5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1af      	bne.n	800a55c <osThreadFlagsWait+0x50>
 800a5fc:	e002      	b.n	800a604 <osThreadFlagsWait+0xf8>
            break;
 800a5fe:	bf00      	nop
 800a600:	e000      	b.n	800a604 <osThreadFlagsWait+0xf8>
            break;
 800a602:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a606:	4618      	mov	r0, r3
 800a608:	3730      	adds	r7, #48	@ 0x30
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a616:	f3ef 8305 	mrs	r3, IPSR
 800a61a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a61c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <osDelay+0x1c>
    stat = osErrorISR;
 800a622:	f06f 0305 	mvn.w	r3, #5
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	e007      	b.n	800a63a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f002 f843 	bl	800c6c0 <vTaskDelay>
    }
  }

  return (stat);
 800a63a:	68fb      	ldr	r3, [r7, #12]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a64c:	f3ef 8305 	mrs	r3, IPSR
 800a650:	60fb      	str	r3, [r7, #12]
  return(result);
 800a652:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a658:	f06f 0305 	mvn.w	r3, #5
 800a65c:	617b      	str	r3, [r7, #20]
 800a65e:	e019      	b.n	800a694 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a664:	f002 f976 	bl	800c954 <xTaskGetTickCount>
 800a668:	4603      	mov	r3, r0
 800a66a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d009      	beq.n	800a68e <osDelayUntil+0x4a>
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	db06      	blt.n	800a68e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	6939      	ldr	r1, [r7, #16]
 800a686:	4618      	mov	r0, r3
 800a688:	f001 ff9a 	bl	800c5c0 <vTaskDelayUntil>
 800a68c:	e002      	b.n	800a694 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a68e:	f06f 0303 	mvn.w	r3, #3
 800a692:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a694:	697b      	ldr	r3, [r7, #20]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f003 fca4 	bl	800dff4 <pvTimerGetTimerID>
 800a6ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d005      	beq.n	800a6c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	6852      	ldr	r2, [r2, #4]
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08c      	sub	sp, #48	@ 0x30
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6dc:	f3ef 8305 	mrs	r3, IPSR
 800a6e0:	613b      	str	r3, [r7, #16]
  return(result);
 800a6e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d163      	bne.n	800a7b0 <osTimerNew+0xe8>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d060      	beq.n	800a7b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a6ee:	2008      	movs	r0, #8
 800a6f0:	f003 fef4 	bl	800e4dc <pvPortMalloc>
 800a6f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d059      	beq.n	800a7b0 <osTimerNew+0xe8>
      callb->func = func;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	61fb      	str	r3, [r7, #28]
 800a712:	e001      	b.n	800a718 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a71c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01c      	beq.n	800a762 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <osTimerNew+0x6e>
          name = attr->name;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d006      	beq.n	800a74c <osTimerNew+0x84>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	2b2b      	cmp	r3, #43	@ 0x2b
 800a744:	d902      	bls.n	800a74c <osTimerNew+0x84>
          mem = 1;
 800a746:	2301      	movs	r3, #1
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	e00c      	b.n	800a766 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <osTimerNew+0x9e>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <osTimerNew+0x9e>
            mem = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	e001      	b.n	800a766 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10c      	bne.n	800a786 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	4b12      	ldr	r3, [pc, #72]	@ (800a7bc <osTimerNew+0xf4>)
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	2101      	movs	r1, #1
 800a77c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a77e:	f003 f8ac 	bl	800d8da <xTimerCreateStatic>
 800a782:	6238      	str	r0, [r7, #32]
 800a784:	e00b      	b.n	800a79e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d108      	bne.n	800a79e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a78c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7bc <osTimerNew+0xf4>)
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	69fa      	ldr	r2, [r7, #28]
 800a794:	2101      	movs	r1, #1
 800a796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a798:	f003 f87e 	bl	800d898 <xTimerCreate>
 800a79c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d105      	bne.n	800a7b0 <osTimerNew+0xe8>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <osTimerNew+0xe8>
        vPortFree (callb);
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	f003 ff6a 	bl	800e684 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3728      	adds	r7, #40	@ 0x28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800a69f 	.word	0x0800a69f

0800a7c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ce:	f3ef 8305 	mrs	r3, IPSR
 800a7d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <osTimerStart+0x22>
    stat = osErrorISR;
 800a7da:	f06f 0305 	mvn.w	r3, #5
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	e017      	b.n	800a812 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a7e8:	f06f 0303 	mvn.w	r3, #3
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	e010      	b.n	800a812 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	6938      	ldr	r0, [r7, #16]
 800a7fc:	f003 f8ea 	bl	800d9d4 <xTimerGenericCommand>
 800a800:	4603      	mov	r3, r0
 800a802:	2b01      	cmp	r3, #1
 800a804:	d102      	bne.n	800a80c <osTimerStart+0x4c>
      stat = osOK;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e002      	b.n	800a812 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a80c:	f06f 0302 	mvn.w	r3, #2
 800a810:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a812:	697b      	ldr	r3, [r7, #20]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a828:	f3ef 8305 	mrs	r3, IPSR
 800a82c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a82e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a830:	2b00      	cmp	r3, #0
 800a832:	d174      	bne.n	800a91e <osMutexNew+0x102>
    if (attr != NULL) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	e001      	b.n	800a846 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <osMutexNew+0x3a>
      rmtx = 1U;
 800a850:	2301      	movs	r3, #1
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	e001      	b.n	800a85a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	f003 0308 	and.w	r3, r3, #8
 800a860:	2b00      	cmp	r3, #0
 800a862:	d15c      	bne.n	800a91e <osMutexNew+0x102>
      mem = -1;
 800a864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a868:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d015      	beq.n	800a89c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <osMutexNew+0x6a>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a87e:	d902      	bls.n	800a886 <osMutexNew+0x6a>
          mem = 1;
 800a880:	2301      	movs	r3, #1
 800a882:	613b      	str	r3, [r7, #16]
 800a884:	e00c      	b.n	800a8a0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d108      	bne.n	800a8a0 <osMutexNew+0x84>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d104      	bne.n	800a8a0 <osMutexNew+0x84>
            mem = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	e001      	b.n	800a8a0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d112      	bne.n	800a8cc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	2004      	movs	r0, #4
 800a8b4:	f000 fd71 	bl	800b39a <xQueueCreateMutexStatic>
 800a8b8:	61f8      	str	r0, [r7, #28]
 800a8ba:	e016      	b.n	800a8ea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	f000 fd69 	bl	800b39a <xQueueCreateMutexStatic>
 800a8c8:	61f8      	str	r0, [r7, #28]
 800a8ca:	e00e      	b.n	800a8ea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10b      	bne.n	800a8ea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a8d8:	2004      	movs	r0, #4
 800a8da:	f000 fd46 	bl	800b36a <xQueueCreateMutex>
 800a8de:	61f8      	str	r0, [r7, #28]
 800a8e0:	e003      	b.n	800a8ea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	f000 fd41 	bl	800b36a <xQueueCreateMutex>
 800a8e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00c      	beq.n	800a90a <osMutexNew+0xee>
        if (attr != NULL) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <osMutexNew+0xe2>
          name = attr->name;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e001      	b.n	800a902 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	69f8      	ldr	r0, [r7, #28]
 800a906:	f001 fc2d 	bl	800c164 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d006      	beq.n	800a91e <osMutexNew+0x102>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a91e:	69fb      	ldr	r3, [r7, #28]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f023 0301 	bic.w	r3, r3, #1
 800a938:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a946:	f3ef 8305 	mrs	r3, IPSR
 800a94a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a94c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a952:	f06f 0305 	mvn.w	r3, #5
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e02c      	b.n	800a9b4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d103      	bne.n	800a968 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a960:	f06f 0303 	mvn.w	r3, #3
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	e025      	b.n	800a9b4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d011      	beq.n	800a992 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6938      	ldr	r0, [r7, #16]
 800a972:	f000 fd62 	bl	800b43a <xQueueTakeMutexRecursive>
 800a976:	4603      	mov	r3, r0
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d01b      	beq.n	800a9b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a982:	f06f 0301 	mvn.w	r3, #1
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	e014      	b.n	800a9b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a98a:	f06f 0302 	mvn.w	r3, #2
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e010      	b.n	800a9b4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f001 f907 	bl	800bba8 <xQueueSemaphoreTake>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d009      	beq.n	800a9b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a9a6:	f06f 0301 	mvn.w	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	e002      	b.n	800a9b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a9ae:	f06f 0302 	mvn.w	r3, #2
 800a9b2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a9b4:	697b      	ldr	r3, [r7, #20]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b086      	sub	sp, #24
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9da:	f3ef 8305 	mrs	r3, IPSR
 800a9de:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9e0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <osMutexRelease+0x30>
    stat = osErrorISR;
 800a9e6:	f06f 0305 	mvn.w	r3, #5
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e01f      	b.n	800aa2e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a9f4:	f06f 0303 	mvn.w	r3, #3
 800a9f8:	617b      	str	r3, [r7, #20]
 800a9fa:	e018      	b.n	800aa2e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800aa02:	6938      	ldr	r0, [r7, #16]
 800aa04:	f000 fce4 	bl	800b3d0 <xQueueGiveMutexRecursive>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d00f      	beq.n	800aa2e <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa0e:	f06f 0302 	mvn.w	r3, #2
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e00b      	b.n	800aa2e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aa16:	2300      	movs	r3, #0
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	6938      	ldr	r0, [r7, #16]
 800aa1e:	f000 fdb1 	bl	800b584 <xQueueGenericSend>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d002      	beq.n	800aa2e <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa28:	f06f 0302 	mvn.w	r3, #2
 800aa2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aa2e:	697b      	ldr	r3, [r7, #20]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	@ 0x28
 800aa3c:	af02      	add	r7, sp, #8
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa48:	f3ef 8305 	mrs	r3, IPSR
 800aa4c:	613b      	str	r3, [r7, #16]
  return(result);
 800aa4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d175      	bne.n	800ab40 <osSemaphoreNew+0x108>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d072      	beq.n	800ab40 <osSemaphoreNew+0x108>
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d86e      	bhi.n	800ab40 <osSemaphoreNew+0x108>
    mem = -1;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d015      	beq.n	800aa9a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d006      	beq.n	800aa84 <osSemaphoreNew+0x4c>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	2b4f      	cmp	r3, #79	@ 0x4f
 800aa7c:	d902      	bls.n	800aa84 <osSemaphoreNew+0x4c>
        mem = 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	61bb      	str	r3, [r7, #24]
 800aa82:	e00c      	b.n	800aa9e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d108      	bne.n	800aa9e <osSemaphoreNew+0x66>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <osSemaphoreNew+0x66>
          mem = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	e001      	b.n	800aa9e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa4:	d04c      	beq.n	800ab40 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d128      	bne.n	800aafe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d10a      	bne.n	800aac8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	2203      	movs	r2, #3
 800aab8:	9200      	str	r2, [sp, #0]
 800aaba:	2200      	movs	r2, #0
 800aabc:	2100      	movs	r1, #0
 800aabe:	2001      	movs	r0, #1
 800aac0:	f000 fb5e 	bl	800b180 <xQueueGenericCreateStatic>
 800aac4:	61f8      	str	r0, [r7, #28]
 800aac6:	e005      	b.n	800aad4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aac8:	2203      	movs	r2, #3
 800aaca:	2100      	movs	r1, #0
 800aacc:	2001      	movs	r0, #1
 800aace:	f000 fbd4 	bl	800b27a <xQueueGenericCreate>
 800aad2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d022      	beq.n	800ab20 <osSemaphoreNew+0xe8>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01f      	beq.n	800ab20 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aae0:	2300      	movs	r3, #0
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	69f8      	ldr	r0, [r7, #28]
 800aae8:	f000 fd4c 	bl	800b584 <xQueueGenericSend>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d016      	beq.n	800ab20 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aaf2:	69f8      	ldr	r0, [r7, #28]
 800aaf4:	f001 f9ea 	bl	800becc <vQueueDelete>
            hSemaphore = NULL;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	e010      	b.n	800ab20 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d108      	bne.n	800ab16 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fccb 	bl	800b4a8 <xQueueCreateCountingSemaphoreStatic>
 800ab12:	61f8      	str	r0, [r7, #28]
 800ab14:	e004      	b.n	800ab20 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 fcfe 	bl	800b51a <xQueueCreateCountingSemaphore>
 800ab1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00c      	beq.n	800ab40 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	617b      	str	r3, [r7, #20]
 800ab32:	e001      	b.n	800ab38 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ab38:	6979      	ldr	r1, [r7, #20]
 800ab3a:	69f8      	ldr	r0, [r7, #28]
 800ab3c:	f001 fb12 	bl	800c164 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ab40:	69fb      	ldr	r3, [r7, #28]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ab64:	f06f 0303 	mvn.w	r3, #3
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	e039      	b.n	800abe0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab6c:	f3ef 8305 	mrs	r3, IPSR
 800ab70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d022      	beq.n	800abbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ab7e:	f06f 0303 	mvn.w	r3, #3
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e02c      	b.n	800abe0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ab8a:	f107 0308 	add.w	r3, r7, #8
 800ab8e:	461a      	mov	r2, r3
 800ab90:	2100      	movs	r1, #0
 800ab92:	6938      	ldr	r0, [r7, #16]
 800ab94:	f001 f918 	bl	800bdc8 <xQueueReceiveFromISR>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d003      	beq.n	800aba6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ab9e:	f06f 0302 	mvn.w	r3, #2
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	e01c      	b.n	800abe0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d019      	beq.n	800abe0 <osSemaphoreAcquire+0x94>
 800abac:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <osSemaphoreAcquire+0xa0>)
 800abae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	e010      	b.n	800abe0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6938      	ldr	r0, [r7, #16]
 800abc2:	f000 fff1 	bl	800bba8 <xQueueSemaphoreTake>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d009      	beq.n	800abe0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800abd2:	f06f 0301 	mvn.w	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	e002      	b.n	800abe0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800abda:	f06f 0302 	mvn.w	r3, #2
 800abde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800abe0:	697b      	ldr	r3, [r7, #20]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ac06:	f06f 0303 	mvn.w	r3, #3
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	e02c      	b.n	800ac68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac0e:	f3ef 8305 	mrs	r3, IPSR
 800ac12:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01a      	beq.n	800ac50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4619      	mov	r1, r3
 800ac24:	6938      	ldr	r0, [r7, #16]
 800ac26:	f000 fe4d 	bl	800b8c4 <xQueueGiveFromISR>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d003      	beq.n	800ac38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ac30:	f06f 0302 	mvn.w	r3, #2
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e017      	b.n	800ac68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d014      	beq.n	800ac68 <osSemaphoreRelease+0x78>
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac74 <osSemaphoreRelease+0x84>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	e00b      	b.n	800ac68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ac50:	2300      	movs	r3, #0
 800ac52:	2200      	movs	r2, #0
 800ac54:	2100      	movs	r1, #0
 800ac56:	6938      	ldr	r0, [r7, #16]
 800ac58:	f000 fc94 	bl	800b584 <xQueueGenericSend>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d002      	beq.n	800ac68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ac62:	f06f 0302 	mvn.w	r3, #2
 800ac66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ac68:	697b      	ldr	r3, [r7, #20]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	@ 0x28
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac88:	f3ef 8305 	mrs	r3, IPSR
 800ac8c:	613b      	str	r3, [r7, #16]
  return(result);
 800ac8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d15f      	bne.n	800ad54 <osMessageQueueNew+0xdc>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d05c      	beq.n	800ad54 <osMessageQueueNew+0xdc>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d059      	beq.n	800ad54 <osMessageQueueNew+0xdc>
    mem = -1;
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aca4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d029      	beq.n	800ad00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d012      	beq.n	800acda <osMessageQueueNew+0x62>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	2b4f      	cmp	r3, #79	@ 0x4f
 800acba:	d90e      	bls.n	800acda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	695a      	ldr	r2, [r3, #20]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	fb01 f303 	mul.w	r3, r1, r3
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d302      	bcc.n	800acda <osMessageQueueNew+0x62>
        mem = 1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	61bb      	str	r3, [r7, #24]
 800acd8:	e014      	b.n	800ad04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d110      	bne.n	800ad04 <osMessageQueueNew+0x8c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10c      	bne.n	800ad04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d108      	bne.n	800ad04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d104      	bne.n	800ad04 <osMessageQueueNew+0x8c>
          mem = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e001      	b.n	800ad04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d10b      	bne.n	800ad22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691a      	ldr	r2, [r3, #16]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2100      	movs	r1, #0
 800ad14:	9100      	str	r1, [sp, #0]
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 fa31 	bl	800b180 <xQueueGenericCreateStatic>
 800ad1e:	61f8      	str	r0, [r7, #28]
 800ad20:	e008      	b.n	800ad34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ad28:	2200      	movs	r2, #0
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 faa4 	bl	800b27a <xQueueGenericCreate>
 800ad32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00c      	beq.n	800ad54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e001      	b.n	800ad4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ad4c:	6979      	ldr	r1, [r7, #20]
 800ad4e:	69f8      	ldr	r0, [r7, #28]
 800ad50:	f001 fa08 	bl	800c164 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ad54:	69fb      	ldr	r3, [r7, #28]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad78:	f3ef 8305 	mrs	r3, IPSR
 800ad7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ad7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d028      	beq.n	800add6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <osMessageQueuePut+0x36>
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <osMessageQueuePut+0x36>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ad96:	f06f 0303 	mvn.w	r3, #3
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	e038      	b.n	800ae10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ada2:	f107 0210 	add.w	r2, r7, #16
 800ada6:	2300      	movs	r3, #0
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	69b8      	ldr	r0, [r7, #24]
 800adac:	f000 fcec 	bl	800b788 <xQueueGenericSendFromISR>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d003      	beq.n	800adbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800adb6:	f06f 0302 	mvn.w	r3, #2
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e028      	b.n	800ae10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d025      	beq.n	800ae10 <osMessageQueuePut+0xb0>
 800adc4:	4b15      	ldr	r3, [pc, #84]	@ (800ae1c <osMessageQueuePut+0xbc>)
 800adc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	e01c      	b.n	800ae10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <osMessageQueuePut+0x82>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ade2:	f06f 0303 	mvn.w	r3, #3
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	e012      	b.n	800ae10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800adea:	2300      	movs	r3, #0
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	69b8      	ldr	r0, [r7, #24]
 800adf2:	f000 fbc7 	bl	800b584 <xQueueGenericSend>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d009      	beq.n	800ae10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ae02:	f06f 0301 	mvn.w	r3, #1
 800ae06:	61fb      	str	r3, [r7, #28]
 800ae08:	e002      	b.n	800ae10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ae0a:	f06f 0302 	mvn.w	r3, #2
 800ae0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae10:	69fb      	ldr	r3, [r7, #28]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	e000ed04 	.word	0xe000ed04

0800ae20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b088      	sub	sp, #32
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae36:	f3ef 8305 	mrs	r3, IPSR
 800ae3a:	617b      	str	r3, [r7, #20]
  return(result);
 800ae3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d028      	beq.n	800ae94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <osMessageQueueGet+0x34>
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <osMessageQueueGet+0x34>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ae54:	f06f 0303 	mvn.w	r3, #3
 800ae58:	61fb      	str	r3, [r7, #28]
 800ae5a:	e037      	b.n	800aecc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ae60:	f107 0310 	add.w	r3, r7, #16
 800ae64:	461a      	mov	r2, r3
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	69b8      	ldr	r0, [r7, #24]
 800ae6a:	f000 ffad 	bl	800bdc8 <xQueueReceiveFromISR>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d003      	beq.n	800ae7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ae74:	f06f 0302 	mvn.w	r3, #2
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	e027      	b.n	800aecc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d024      	beq.n	800aecc <osMessageQueueGet+0xac>
 800ae82:	4b15      	ldr	r3, [pc, #84]	@ (800aed8 <osMessageQueueGet+0xb8>)
 800ae84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	e01b      	b.n	800aecc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <osMessageQueueGet+0x80>
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d103      	bne.n	800aea8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aea0:	f06f 0303 	mvn.w	r3, #3
 800aea4:	61fb      	str	r3, [r7, #28]
 800aea6:	e011      	b.n	800aecc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	69b8      	ldr	r0, [r7, #24]
 800aeae:	f000 fd99 	bl	800b9e4 <xQueueReceive>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d009      	beq.n	800aecc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aebe:	f06f 0301 	mvn.w	r3, #1
 800aec2:	61fb      	str	r3, [r7, #28]
 800aec4:	e002      	b.n	800aecc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aec6:	f06f 0302 	mvn.w	r3, #2
 800aeca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4a07      	ldr	r2, [pc, #28]	@ (800af08 <vApplicationGetIdleTaskMemory+0x2c>)
 800aeec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	4a06      	ldr	r2, [pc, #24]	@ (800af0c <vApplicationGetIdleTaskMemory+0x30>)
 800aef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	@ 0x80
 800aef8:	601a      	str	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20000858 	.word	0x20000858
 800af0c:	200008b4 	.word	0x200008b4

0800af10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4a07      	ldr	r2, [pc, #28]	@ (800af3c <vApplicationGetTimerTaskMemory+0x2c>)
 800af20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a06      	ldr	r2, [pc, #24]	@ (800af40 <vApplicationGetTimerTaskMemory+0x30>)
 800af26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af2e:	601a      	str	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20000ab4 	.word	0x20000ab4
 800af40:	20000b10 	.word	0x20000b10

0800af44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f103 0208 	add.w	r2, r3, #8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f103 0208 	add.w	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f103 0208 	add.w	r2, r3, #8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	601a      	str	r2, [r3, #0]
}
 800afda:	bf00      	nop
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800affc:	d103      	bne.n	800b006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e00c      	b.n	800b020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3308      	adds	r3, #8
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e002      	b.n	800b014 <vListInsert+0x2e>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d2f6      	bcs.n	800b00e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	601a      	str	r2, [r3, #0]
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	6892      	ldr	r2, [r2, #8]
 800b06e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6852      	ldr	r2, [r2, #4]
 800b078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d103      	bne.n	800b08c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	1e5a      	subs	r2, r3, #1
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10b      	bne.n	800b0d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0d2:	bf00      	nop
 800b0d4:	bf00      	nop
 800b0d6:	e7fd      	b.n	800b0d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0d8:	f003 f8de 	bl	800e298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e4:	68f9      	ldr	r1, [r7, #12]
 800b0e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	441a      	add	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b108:	3b01      	subs	r3, #1
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b10e:	fb01 f303 	mul.w	r3, r1, r3
 800b112:	441a      	add	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	22ff      	movs	r2, #255	@ 0xff
 800b11c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	22ff      	movs	r2, #255	@ 0xff
 800b124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d114      	bne.n	800b158 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01a      	beq.n	800b16c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3310      	adds	r3, #16
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 fdbc 	bl	800ccb8 <xTaskRemoveFromEventList>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d012      	beq.n	800b16c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <xQueueGenericReset+0xd0>)
 800b148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	e009      	b.n	800b16c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3310      	adds	r3, #16
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fef1 	bl	800af44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3324      	adds	r3, #36	@ 0x24
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff feec 	bl	800af44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b16c:	f003 f8c6 	bl	800e2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b170:	2301      	movs	r3, #1
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	e000ed04 	.word	0xe000ed04

0800b180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08e      	sub	sp, #56	@ 0x38
 800b184:	af02      	add	r7, sp, #8
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	e7fd      	b.n	800b1a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10b      	bne.n	800b1ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop
 800b1c8:	e7fd      	b.n	800b1c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <xQueueGenericCreateStatic+0x56>
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <xQueueGenericCreateStatic+0x5a>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e000      	b.n	800b1dc <xQueueGenericCreateStatic+0x5c>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10b      	bne.n	800b1f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	623b      	str	r3, [r7, #32]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <xQueueGenericCreateStatic+0x84>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <xQueueGenericCreateStatic+0x88>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <xQueueGenericCreateStatic+0x8a>
 800b208:	2300      	movs	r3, #0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10b      	bne.n	800b226 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	61fb      	str	r3, [r7, #28]
}
 800b220:	bf00      	nop
 800b222:	bf00      	nop
 800b224:	e7fd      	b.n	800b222 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b226:	2350      	movs	r3, #80	@ 0x50
 800b228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b50      	cmp	r3, #80	@ 0x50
 800b22e:	d00b      	beq.n	800b248 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	61bb      	str	r3, [r7, #24]
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b248:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00d      	beq.n	800b270 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b25c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4613      	mov	r3, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f840 	bl	800b2f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b272:	4618      	mov	r0, r3
 800b274:	3730      	adds	r7, #48	@ 0x30
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b08a      	sub	sp, #40	@ 0x28
 800b27e:	af02      	add	r7, sp, #8
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	4613      	mov	r3, r2
 800b286:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	613b      	str	r3, [r7, #16]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	fb02 f303 	mul.w	r3, r2, r3
 800b2ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	3350      	adds	r3, #80	@ 0x50
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f003 f911 	bl	800e4dc <pvPortMalloc>
 800b2ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d011      	beq.n	800b2e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	3350      	adds	r3, #80	@ 0x50
 800b2ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2d4:	79fa      	ldrb	r2, [r7, #7]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f805 	bl	800b2f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
	}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3720      	adds	r7, #32
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e002      	b.n	800b312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b31e:	2101      	movs	r1, #1
 800b320:	69b8      	ldr	r0, [r7, #24]
 800b322:	f7ff fec3 	bl	800b0ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b336:	b580      	push	{r7, lr}
 800b338:	b082      	sub	sp, #8
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00e      	beq.n	800b362 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b356:	2300      	movs	r3, #0
 800b358:	2200      	movs	r2, #0
 800b35a:	2100      	movs	r1, #0
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f911 	bl	800b584 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b086      	sub	sp, #24
 800b36e:	af00      	add	r7, sp, #0
 800b370:	4603      	mov	r3, r0
 800b372:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b374:	2301      	movs	r3, #1
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b37c:	79fb      	ldrb	r3, [r7, #7]
 800b37e:	461a      	mov	r2, r3
 800b380:	6939      	ldr	r1, [r7, #16]
 800b382:	6978      	ldr	r0, [r7, #20]
 800b384:	f7ff ff79 	bl	800b27a <xQueueGenericCreate>
 800b388:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff ffd3 	bl	800b336 <prvInitialiseMutex>

		return xNewQueue;
 800b390:	68fb      	ldr	r3, [r7, #12]
	}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b088      	sub	sp, #32
 800b39e:	af02      	add	r7, sp, #8
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	6039      	str	r1, [r7, #0]
 800b3a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	6939      	ldr	r1, [r7, #16]
 800b3b8:	6978      	ldr	r0, [r7, #20]
 800b3ba:	f7ff fee1 	bl	800b180 <xQueueGenericCreateStatic>
 800b3be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff ffb8 	bl	800b336 <prvInitialiseMutex>

		return xNewQueue;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
	}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3718      	adds	r7, #24
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10b      	bne.n	800b3fa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60fb      	str	r3, [r7, #12]
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	e7fd      	b.n	800b3f6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	689c      	ldr	r4, [r3, #8]
 800b3fe:	f001 fe1b 	bl	800d038 <xTaskGetCurrentTaskHandle>
 800b402:	4603      	mov	r3, r0
 800b404:	429c      	cmp	r4, r3
 800b406:	d111      	bne.n	800b42c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b41a:	2300      	movs	r3, #0
 800b41c:	2200      	movs	r2, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	6938      	ldr	r0, [r7, #16]
 800b422:	f000 f8af 	bl	800b584 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b426:	2301      	movs	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	e001      	b.n	800b430 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b430:	697b      	ldr	r3, [r7, #20]
	}
 800b432:	4618      	mov	r0, r3
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	bd90      	pop	{r4, r7, pc}

0800b43a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b43a:	b590      	push	{r4, r7, lr}
 800b43c:	b087      	sub	sp, #28
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	60fb      	str	r3, [r7, #12]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	689c      	ldr	r4, [r3, #8]
 800b46a:	f001 fde5 	bl	800d038 <xTaskGetCurrentTaskHandle>
 800b46e:	4603      	mov	r3, r0
 800b470:	429c      	cmp	r4, r3
 800b472:	d107      	bne.n	800b484 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b47e:	2301      	movs	r3, #1
 800b480:	617b      	str	r3, [r7, #20]
 800b482:	e00c      	b.n	800b49e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6938      	ldr	r0, [r7, #16]
 800b488:	f000 fb8e 	bl	800bba8 <xQueueSemaphoreTake>
 800b48c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d004      	beq.n	800b49e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b49e:	697b      	ldr	r3, [r7, #20]
	}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd90      	pop	{r4, r7, pc}

0800b4a8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	@ 0x28
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10b      	bne.n	800b4d2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	61bb      	str	r3, [r7, #24]
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	e7fd      	b.n	800b4ce <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d90b      	bls.n	800b4f2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	617b      	str	r3, [r7, #20]
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	e7fd      	b.n	800b4ee <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fe3f 	bl	800b180 <xQueueGenericCreateStatic>
 800b502:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b510:	69fb      	ldr	r3, [r7, #28]
	}
 800b512:	4618      	mov	r0, r3
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b086      	sub	sp, #24
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10b      	bne.n	800b542 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	613b      	str	r3, [r7, #16]
}
 800b53c:	bf00      	nop
 800b53e:	bf00      	nop
 800b540:	e7fd      	b.n	800b53e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	429a      	cmp	r2, r3
 800b548:	d90b      	bls.n	800b562 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60fb      	str	r3, [r7, #12]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b562:	2202      	movs	r2, #2
 800b564:	2100      	movs	r1, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff fe87 	bl	800b27a <xQueueGenericCreate>
 800b56c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b57a:	697b      	ldr	r3, [r7, #20]
	}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08e      	sub	sp, #56	@ 0x38
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b592:	2300      	movs	r3, #0
 800b594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10b      	bne.n	800b5b8 <xQueueGenericSend+0x34>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	e7fd      	b.n	800b5b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d103      	bne.n	800b5c6 <xQueueGenericSend+0x42>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <xQueueGenericSend+0x46>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e000      	b.n	800b5cc <xQueueGenericSend+0x48>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10b      	bne.n	800b5e8 <xQueueGenericSend+0x64>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5e2:	bf00      	nop
 800b5e4:	bf00      	nop
 800b5e6:	e7fd      	b.n	800b5e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d103      	bne.n	800b5f6 <xQueueGenericSend+0x72>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d101      	bne.n	800b5fa <xQueueGenericSend+0x76>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <xQueueGenericSend+0x78>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10b      	bne.n	800b618 <xQueueGenericSend+0x94>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	623b      	str	r3, [r7, #32]
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b618:	f001 fd1e 	bl	800d058 <xTaskGetSchedulerState>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d102      	bne.n	800b628 <xQueueGenericSend+0xa4>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <xQueueGenericSend+0xa8>
 800b628:	2301      	movs	r3, #1
 800b62a:	e000      	b.n	800b62e <xQueueGenericSend+0xaa>
 800b62c:	2300      	movs	r3, #0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <xQueueGenericSend+0xc6>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	61fb      	str	r3, [r7, #28]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b64a:	f002 fe25 	bl	800e298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b656:	429a      	cmp	r2, r3
 800b658:	d302      	bcc.n	800b660 <xQueueGenericSend+0xdc>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d129      	bne.n	800b6b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b666:	f000 fc6d 	bl	800bf44 <prvCopyDataToQueue>
 800b66a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d010      	beq.n	800b696 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	3324      	adds	r3, #36	@ 0x24
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 fb1d 	bl	800ccb8 <xTaskRemoveFromEventList>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d013      	beq.n	800b6ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b684:	4b3f      	ldr	r3, [pc, #252]	@ (800b784 <xQueueGenericSend+0x200>)
 800b686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	e00a      	b.n	800b6ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b69c:	4b39      	ldr	r3, [pc, #228]	@ (800b784 <xQueueGenericSend+0x200>)
 800b69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6ac:	f002 fe26 	bl	800e2fc <vPortExitCritical>
				return pdPASS;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e063      	b.n	800b77c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d103      	bne.n	800b6c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6ba:	f002 fe1f 	bl	800e2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e05c      	b.n	800b77c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 fb57 	bl	800cd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d6:	f002 fe11 	bl	800e2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6da:	f001 f88f 	bl	800c7fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6de:	f002 fddb 	bl	800e298 <vPortEnterCritical>
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6e8:	b25b      	sxtb	r3, r3
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6ee:	d103      	bne.n	800b6f8 <xQueueGenericSend+0x174>
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b704:	d103      	bne.n	800b70e <xQueueGenericSend+0x18a>
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b70e:	f002 fdf5 	bl	800e2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b712:	1d3a      	adds	r2, r7, #4
 800b714:	f107 0314 	add.w	r3, r7, #20
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f001 fb46 	bl	800cdac <xTaskCheckForTimeOut>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d124      	bne.n	800b770 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b728:	f000 fd04 	bl	800c134 <prvIsQueueFull>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d018      	beq.n	800b764 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b734:	3310      	adds	r3, #16
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 fa6a 	bl	800cc14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b742:	f000 fc8f 	bl	800c064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b746:	f001 f867 	bl	800c818 <xTaskResumeAll>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f47f af7c 	bne.w	800b64a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b752:	4b0c      	ldr	r3, [pc, #48]	@ (800b784 <xQueueGenericSend+0x200>)
 800b754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	e772      	b.n	800b64a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b766:	f000 fc7d 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b76a:	f001 f855 	bl	800c818 <xTaskResumeAll>
 800b76e:	e76c      	b.n	800b64a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b772:	f000 fc77 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b776:	f001 f84f 	bl	800c818 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b77a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3738      	adds	r7, #56	@ 0x38
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b090      	sub	sp, #64	@ 0x40
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10b      	bne.n	800b7b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d103      	bne.n	800b7c6 <xQueueGenericSendFromISR+0x3e>
 800b7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <xQueueGenericSendFromISR+0x42>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <xQueueGenericSendFromISR+0x44>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	e7fd      	b.n	800b7e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d103      	bne.n	800b7f6 <xQueueGenericSendFromISR+0x6e>
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <xQueueGenericSendFromISR+0x72>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e000      	b.n	800b7fc <xQueueGenericSendFromISR+0x74>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10b      	bne.n	800b818 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	623b      	str	r3, [r7, #32]
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	e7fd      	b.n	800b814 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b818:	f002 fe1e 	bl	800e458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b81c:	f3ef 8211 	mrs	r2, BASEPRI
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	61fa      	str	r2, [r7, #28]
 800b832:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b834:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b836:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b840:	429a      	cmp	r2, r3
 800b842:	d302      	bcc.n	800b84a <xQueueGenericSendFromISR+0xc2>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b02      	cmp	r3, #2
 800b848:	d12f      	bne.n	800b8aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b858:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	68b9      	ldr	r1, [r7, #8]
 800b85e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b860:	f000 fb70 	bl	800bf44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b864:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b86c:	d112      	bne.n	800b894 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b872:	2b00      	cmp	r3, #0
 800b874:	d016      	beq.n	800b8a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	3324      	adds	r3, #36	@ 0x24
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 fa1c 	bl	800ccb8 <xTaskRemoveFromEventList>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e007      	b.n	800b8a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b894:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b898:	3301      	adds	r3, #1
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	b25a      	sxtb	r2, r3
 800b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b8a8:	e001      	b.n	800b8ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3740      	adds	r7, #64	@ 0x40
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08e      	sub	sp, #56	@ 0x38
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10b      	bne.n	800b8f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	623b      	str	r3, [r7, #32]
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	61fb      	str	r3, [r7, #28]
}
 800b90a:	bf00      	nop
 800b90c:	bf00      	nop
 800b90e:	e7fd      	b.n	800b90c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <xQueueGiveFromISR+0x5c>
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <xQueueGiveFromISR+0x60>
 800b920:	2301      	movs	r3, #1
 800b922:	e000      	b.n	800b926 <xQueueGiveFromISR+0x62>
 800b924:	2300      	movs	r3, #0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10b      	bne.n	800b942 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	61bb      	str	r3, [r7, #24]
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	e7fd      	b.n	800b93e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b942:	f002 fd89 	bl	800e458 <vPortValidateInterruptPriority>
	__asm volatile
 800b946:	f3ef 8211 	mrs	r2, BASEPRI
 800b94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	617a      	str	r2, [r7, #20]
 800b95c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b95e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b960:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b966:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b96c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b96e:	429a      	cmp	r2, r3
 800b970:	d22b      	bcs.n	800b9ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b984:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b98c:	d112      	bne.n	800b9b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b992:	2b00      	cmp	r3, #0
 800b994:	d016      	beq.n	800b9c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	3324      	adds	r3, #36	@ 0x24
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 f98c 	bl	800ccb8 <xTaskRemoveFromEventList>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00e      	beq.n	800b9c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00b      	beq.n	800b9c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	e007      	b.n	800b9c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	b25a      	sxtb	r2, r3
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c8:	e001      	b.n	800b9ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f383 8811 	msr	BASEPRI, r3
}
 800b9d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3738      	adds	r7, #56	@ 0x38
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08c      	sub	sp, #48	@ 0x30
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10b      	bne.n	800ba16 <xQueueReceive+0x32>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	623b      	str	r3, [r7, #32]
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <xQueueReceive+0x40>
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <xQueueReceive+0x44>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e000      	b.n	800ba2a <xQueueReceive+0x46>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <xQueueReceive+0x62>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	61fb      	str	r3, [r7, #28]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba46:	f001 fb07 	bl	800d058 <xTaskGetSchedulerState>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d102      	bne.n	800ba56 <xQueueReceive+0x72>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <xQueueReceive+0x76>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e000      	b.n	800ba5c <xQueueReceive+0x78>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xQueueReceive+0x94>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	61bb      	str	r3, [r7, #24]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba78:	f002 fc0e 	bl	800e298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01f      	beq.n	800bac8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8c:	f000 fac4 	bl	800c018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00f      	beq.n	800bac0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa2:	3310      	adds	r3, #16
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 f907 	bl	800ccb8 <xTaskRemoveFromEventList>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d007      	beq.n	800bac0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bab0:	4b3c      	ldr	r3, [pc, #240]	@ (800bba4 <xQueueReceive+0x1c0>)
 800bab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bac0:	f002 fc1c 	bl	800e2fc <vPortExitCritical>
				return pdPASS;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e069      	b.n	800bb9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d103      	bne.n	800bad6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bace:	f002 fc15 	bl	800e2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e062      	b.n	800bb9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800badc:	f107 0310 	add.w	r3, r7, #16
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f94d 	bl	800cd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baea:	f002 fc07 	bl	800e2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baee:	f000 fe85 	bl	800c7fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baf2:	f002 fbd1 	bl	800e298 <vPortEnterCritical>
 800baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bafc:	b25b      	sxtb	r3, r3
 800bafe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb02:	d103      	bne.n	800bb0c <xQueueReceive+0x128>
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb12:	b25b      	sxtb	r3, r3
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb18:	d103      	bne.n	800bb22 <xQueueReceive+0x13e>
 800bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb22:	f002 fbeb 	bl	800e2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb26:	1d3a      	adds	r2, r7, #4
 800bb28:	f107 0310 	add.w	r3, r7, #16
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 f93c 	bl	800cdac <xTaskCheckForTimeOut>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d123      	bne.n	800bb82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb3c:	f000 fae4 	bl	800c108 <prvIsQueueEmpty>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d017      	beq.n	800bb76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb48:	3324      	adds	r3, #36	@ 0x24
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 f860 	bl	800cc14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb56:	f000 fa85 	bl	800c064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb5a:	f000 fe5d 	bl	800c818 <xTaskResumeAll>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d189      	bne.n	800ba78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bb64:	4b0f      	ldr	r3, [pc, #60]	@ (800bba4 <xQueueReceive+0x1c0>)
 800bb66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	e780      	b.n	800ba78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb78:	f000 fa74 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb7c:	f000 fe4c 	bl	800c818 <xTaskResumeAll>
 800bb80:	e77a      	b.n	800ba78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb84:	f000 fa6e 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb88:	f000 fe46 	bl	800c818 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb8e:	f000 fabb 	bl	800c108 <prvIsQueueEmpty>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f43f af6f 	beq.w	800ba78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3730      	adds	r7, #48	@ 0x30
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	@ 0x38
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10b      	bne.n	800bbdc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	623b      	str	r3, [r7, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	bf00      	nop
 800bbda:	e7fd      	b.n	800bbd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00b      	beq.n	800bbfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	61fb      	str	r3, [r7, #28]
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	e7fd      	b.n	800bbf8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbfc:	f001 fa2c 	bl	800d058 <xTaskGetSchedulerState>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d102      	bne.n	800bc0c <xQueueSemaphoreTake+0x64>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <xQueueSemaphoreTake+0x68>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <xQueueSemaphoreTake+0x6a>
 800bc10:	2300      	movs	r3, #0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	61bb      	str	r3, [r7, #24]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc2e:	f002 fb33 	bl	800e298 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d024      	beq.n	800bc88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc40:	1e5a      	subs	r2, r3, #1
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d104      	bne.n	800bc58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc4e:	f001 fb7d 	bl	800d34c <pvTaskIncrementMutexHeldCount>
 800bc52:	4602      	mov	r2, r0
 800bc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00f      	beq.n	800bc80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc62:	3310      	adds	r3, #16
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 f827 	bl	800ccb8 <xTaskRemoveFromEventList>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d007      	beq.n	800bc80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc70:	4b54      	ldr	r3, [pc, #336]	@ (800bdc4 <xQueueSemaphoreTake+0x21c>)
 800bc72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc80:	f002 fb3c 	bl	800e2fc <vPortExitCritical>
				return pdPASS;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e098      	b.n	800bdba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d112      	bne.n	800bcb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	617b      	str	r3, [r7, #20]
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	e7fd      	b.n	800bca8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bcac:	f002 fb26 	bl	800e2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e082      	b.n	800bdba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d106      	bne.n	800bcc8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcba:	f107 030c 	add.w	r3, r7, #12
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f001 f85e 	bl	800cd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcc8:	f002 fb18 	bl	800e2fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bccc:	f000 fd96 	bl	800c7fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcd0:	f002 fae2 	bl	800e298 <vPortEnterCritical>
 800bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcda:	b25b      	sxtb	r3, r3
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bce0:	d103      	bne.n	800bcea <xQueueSemaphoreTake+0x142>
 800bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcf0:	b25b      	sxtb	r3, r3
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcf6:	d103      	bne.n	800bd00 <xQueueSemaphoreTake+0x158>
 800bcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd00:	f002 fafc 	bl	800e2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd04:	463a      	mov	r2, r7
 800bd06:	f107 030c 	add.w	r3, r7, #12
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 f84d 	bl	800cdac <xTaskCheckForTimeOut>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d132      	bne.n	800bd7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd1a:	f000 f9f5 	bl	800c108 <prvIsQueueEmpty>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d026      	beq.n	800bd72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d109      	bne.n	800bd40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bd2c:	f002 fab4 	bl	800e298 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f001 f9ad 	bl	800d094 <xTaskPriorityInherit>
 800bd3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bd3c:	f002 fade 	bl	800e2fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd42:	3324      	adds	r3, #36	@ 0x24
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 ff63 	bl	800cc14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd50:	f000 f988 	bl	800c064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd54:	f000 fd60 	bl	800c818 <xTaskResumeAll>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f47f af67 	bne.w	800bc2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bd60:	4b18      	ldr	r3, [pc, #96]	@ (800bdc4 <xQueueSemaphoreTake+0x21c>)
 800bd62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	e75d      	b.n	800bc2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd74:	f000 f976 	bl	800c064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd78:	f000 fd4e 	bl	800c818 <xTaskResumeAll>
 800bd7c:	e757      	b.n	800bc2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd80:	f000 f970 	bl	800c064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd84:	f000 fd48 	bl	800c818 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd8a:	f000 f9bd 	bl	800c108 <prvIsQueueEmpty>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f43f af4c 	beq.w	800bc2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00d      	beq.n	800bdb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bd9c:	f002 fa7c 	bl	800e298 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bda0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bda2:	f000 f8b7 	bl	800bf14 <prvGetDisinheritPriorityAfterTimeout>
 800bda6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fa48 	bl	800d244 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bdb4:	f002 faa2 	bl	800e2fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3738      	adds	r7, #56	@ 0x38
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	e000ed04 	.word	0xe000ed04

0800bdc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08e      	sub	sp, #56	@ 0x38
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	623b      	str	r3, [r7, #32]
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	e7fd      	b.n	800bdf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <xQueueReceiveFromISR+0x3c>
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <xQueueReceiveFromISR+0x40>
 800be04:	2301      	movs	r3, #1
 800be06:	e000      	b.n	800be0a <xQueueReceiveFromISR+0x42>
 800be08:	2300      	movs	r3, #0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	61fb      	str	r3, [r7, #28]
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	e7fd      	b.n	800be22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be26:	f002 fb17 	bl	800e458 <vPortValidateInterruptPriority>
	__asm volatile
 800be2a:	f3ef 8211 	mrs	r2, BASEPRI
 800be2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	61ba      	str	r2, [r7, #24]
 800be40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d02f      	beq.n	800beb2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be60:	f000 f8da 	bl	800c018 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	1e5a      	subs	r2, r3, #1
 800be68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be74:	d112      	bne.n	800be9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d016      	beq.n	800beac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	3310      	adds	r3, #16
 800be82:	4618      	mov	r0, r3
 800be84:	f000 ff18 	bl	800ccb8 <xTaskRemoveFromEventList>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e007      	b.n	800beac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bea0:	3301      	adds	r3, #1
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	b25a      	sxtb	r2, r3
 800bea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800beac:	2301      	movs	r3, #1
 800beae:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb0:	e001      	b.n	800beb6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	f383 8811 	msr	BASEPRI, r3
}
 800bec0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3738      	adds	r7, #56	@ 0x38
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10b      	bne.n	800bef6 <vQueueDelete+0x2a>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	60bb      	str	r3, [r7, #8]
}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	e7fd      	b.n	800bef2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f000 f95e 	bl	800c1b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f002 fbbc 	bl	800e684 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bf0c:	bf00      	nop
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e001      	b.n	800bf36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf36:	68fb      	ldr	r3, [r7, #12]
	}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d14d      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f001 f8f8 	bl	800d164 <xTaskPriorityDisinherit>
 800bf74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	e043      	b.n	800c006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d119      	bne.n	800bfb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6858      	ldr	r0, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	f004 fa49 	bl	8010426 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d32b      	bcc.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	e026      	b.n	800c006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68d8      	ldr	r0, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	f004 fa2f 	bl	8010426 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d207      	bcs.n	800bff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfec:	425b      	negs	r3, r3
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d105      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	3b01      	subs	r3, #1
 800c004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c00e:	697b      	ldr	r3, [r7, #20]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d018      	beq.n	800c05c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	429a      	cmp	r2, r3
 800c042:	d303      	bcc.n	800c04c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68d9      	ldr	r1, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c054:	461a      	mov	r2, r3
 800c056:	6838      	ldr	r0, [r7, #0]
 800c058:	f004 f9e5 	bl	8010426 <memcpy>
	}
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c06c:	f002 f914 	bl	800e298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c078:	e011      	b.n	800c09e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d012      	beq.n	800c0a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3324      	adds	r3, #36	@ 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fe16 	bl	800ccb8 <xTaskRemoveFromEventList>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c092:	f000 feef 	bl	800ce74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	3b01      	subs	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dce9      	bgt.n	800c07a <prvUnlockQueue+0x16>
 800c0a6:	e000      	b.n	800c0aa <prvUnlockQueue+0x46>
					break;
 800c0a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	22ff      	movs	r2, #255	@ 0xff
 800c0ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c0b2:	f002 f923 	bl	800e2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0b6:	f002 f8ef 	bl	800e298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c2:	e011      	b.n	800c0e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d012      	beq.n	800c0f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3310      	adds	r3, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fdf1 	bl	800ccb8 <xTaskRemoveFromEventList>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0dc:	f000 feca 	bl	800ce74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dce9      	bgt.n	800c0c4 <prvUnlockQueue+0x60>
 800c0f0:	e000      	b.n	800c0f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	22ff      	movs	r2, #255	@ 0xff
 800c0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c0fc:	f002 f8fe 	bl	800e2fc <vPortExitCritical>
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c110:	f002 f8c2 	bl	800e298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c11c:	2301      	movs	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e001      	b.n	800c126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c122:	2300      	movs	r3, #0
 800c124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c126:	f002 f8e9 	bl	800e2fc <vPortExitCritical>

	return xReturn;
 800c12a:	68fb      	ldr	r3, [r7, #12]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c13c:	f002 f8ac 	bl	800e298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c148:	429a      	cmp	r2, r3
 800c14a:	d102      	bne.n	800c152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c14c:	2301      	movs	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e001      	b.n	800c156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c156:	f002 f8d1 	bl	800e2fc <vPortExitCritical>

	return xReturn;
 800c15a:	68fb      	ldr	r3, [r7, #12]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e014      	b.n	800c19e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c174:	4a0f      	ldr	r2, [pc, #60]	@ (800c1b4 <vQueueAddToRegistry+0x50>)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c180:	490c      	ldr	r1, [pc, #48]	@ (800c1b4 <vQueueAddToRegistry+0x50>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c18a:	4a0a      	ldr	r2, [pc, #40]	@ (800c1b4 <vQueueAddToRegistry+0x50>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c196:	e006      	b.n	800c1a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	d9e7      	bls.n	800c174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20000f10 	.word	0x20000f10

0800c1b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	e016      	b.n	800c1f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c1c6:	4a10      	ldr	r2, [pc, #64]	@ (800c208 <vQueueUnregisterQueue+0x50>)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	4413      	add	r3, r2
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d10b      	bne.n	800c1ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c208 <vQueueUnregisterQueue+0x50>)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c1e0:	4a09      	ldr	r2, [pc, #36]	@ (800c208 <vQueueUnregisterQueue+0x50>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	4413      	add	r3, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	605a      	str	r2, [r3, #4]
				break;
 800c1ec:	e006      	b.n	800c1fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b07      	cmp	r3, #7
 800c1f8:	d9e5      	bls.n	800c1c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	20000f10 	.word	0x20000f10

0800c20c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c21c:	f002 f83c 	bl	800e298 <vPortEnterCritical>
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c226:	b25b      	sxtb	r3, r3
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c22c:	d103      	bne.n	800c236 <vQueueWaitForMessageRestricted+0x2a>
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c242:	d103      	bne.n	800c24c <vQueueWaitForMessageRestricted+0x40>
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c24c:	f002 f856 	bl	800e2fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	3324      	adds	r3, #36	@ 0x24
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	68b9      	ldr	r1, [r7, #8]
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fcfd 	bl	800cc60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c266:	6978      	ldr	r0, [r7, #20]
 800c268:	f7ff fefc 	bl	800c064 <prvUnlockQueue>
	}
 800c26c:	bf00      	nop
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08e      	sub	sp, #56	@ 0x38
 800c278:	af04      	add	r7, sp, #16
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10b      	bne.n	800c2a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	623b      	str	r3, [r7, #32]
}
 800c29a:	bf00      	nop
 800c29c:	bf00      	nop
 800c29e:	e7fd      	b.n	800c29c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <xTaskCreateStatic+0x4a>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	61fb      	str	r3, [r7, #28]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2be:	235c      	movs	r3, #92	@ 0x5c
 800c2c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2c6:	d00b      	beq.n	800c2e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	61bb      	str	r3, [r7, #24]
}
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	e7fd      	b.n	800c2dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01e      	beq.n	800c326 <xTaskCreateStatic+0xb2>
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01b      	beq.n	800c326 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c300:	2300      	movs	r3, #0
 800c302:	9303      	str	r3, [sp, #12]
 800c304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c306:	9302      	str	r3, [sp, #8]
 800c308:	f107 0314 	add.w	r3, r7, #20
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 f850 	bl	800c3be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c31e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c320:	f000 f8de 	bl	800c4e0 <prvAddNewTaskToReadyList>
 800c324:	e001      	b.n	800c32a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c32a:	697b      	ldr	r3, [r7, #20]
	}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3728      	adds	r7, #40	@ 0x28
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08c      	sub	sp, #48	@ 0x30
 800c338:	af04      	add	r7, sp, #16
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	4613      	mov	r3, r2
 800c342:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4618      	mov	r0, r3
 800c34a:	f002 f8c7 	bl	800e4dc <pvPortMalloc>
 800c34e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00e      	beq.n	800c374 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c356:	205c      	movs	r0, #92	@ 0x5c
 800c358:	f002 f8c0 	bl	800e4dc <pvPortMalloc>
 800c35c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	631a      	str	r2, [r3, #48]	@ 0x30
 800c36a:	e005      	b.n	800c378 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c36c:	6978      	ldr	r0, [r7, #20]
 800c36e:	f002 f989 	bl	800e684 <vPortFree>
 800c372:	e001      	b.n	800c378 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d017      	beq.n	800c3ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c386:	88fa      	ldrh	r2, [r7, #6]
 800c388:	2300      	movs	r3, #0
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	9302      	str	r3, [sp, #8]
 800c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 f80e 	bl	800c3be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3a2:	69f8      	ldr	r0, [r7, #28]
 800c3a4:	f000 f89c 	bl	800c4e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	61bb      	str	r3, [r7, #24]
 800c3ac:	e002      	b.n	800c3b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3b4:	69bb      	ldr	r3, [r7, #24]
	}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3720      	adds	r7, #32
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b088      	sub	sp, #32
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	607a      	str	r2, [r7, #4]
 800c3ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	21a5      	movs	r1, #165	@ 0xa5
 800c3d8:	f003 ffa5 	bl	8010326 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	f023 0307 	bic.w	r3, r3, #7
 800c3f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	617b      	str	r3, [r7, #20]
}
 800c412:	bf00      	nop
 800c414:	bf00      	nop
 800c416:	e7fd      	b.n	800c414 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d01f      	beq.n	800c45e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c41e:	2300      	movs	r3, #0
 800c420:	61fb      	str	r3, [r7, #28]
 800c422:	e012      	b.n	800c44a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	4413      	add	r3, r2
 800c42a:	7819      	ldrb	r1, [r3, #0]
 800c42c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	3334      	adds	r3, #52	@ 0x34
 800c434:	460a      	mov	r2, r1
 800c436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	4413      	add	r3, r2
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d006      	beq.n	800c452 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	3301      	adds	r3, #1
 800c448:	61fb      	str	r3, [r7, #28]
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	2b0f      	cmp	r3, #15
 800c44e:	d9e9      	bls.n	800c424 <prvInitialiseNewTask+0x66>
 800c450:	e000      	b.n	800c454 <prvInitialiseNewTask+0x96>
			{
				break;
 800c452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c45c:	e003      	b.n	800c466 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	2b37      	cmp	r3, #55	@ 0x37
 800c46a:	d901      	bls.n	800c470 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c46c:	2337      	movs	r3, #55	@ 0x37
 800c46e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c474:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c47a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47e:	2200      	movs	r2, #0
 800c480:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	3304      	adds	r3, #4
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe fd7c 	bl	800af84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	3318      	adds	r3, #24
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe fd77 	bl	800af84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c49a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	68f9      	ldr	r1, [r7, #12]
 800c4be:	69b8      	ldr	r0, [r7, #24]
 800c4c0:	f001 fdba 	bl	800e038 <pxPortInitialiseStack>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4d6:	bf00      	nop
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4e8:	f001 fed6 	bl	800e298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4ec:	4b2d      	ldr	r3, [pc, #180]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c4f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4f6:	4b2c      	ldr	r3, [pc, #176]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c504:	4b27      	ldr	r3, [pc, #156]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d110      	bne.n	800c52e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c50c:	f000 fcd6 	bl	800cebc <prvInitialiseTaskLists>
 800c510:	e00d      	b.n	800c52e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c512:	4b26      	ldr	r3, [pc, #152]	@ (800c5ac <prvAddNewTaskToReadyList+0xcc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c51a:	4b23      	ldr	r3, [pc, #140]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c524:	429a      	cmp	r2, r3
 800c526:	d802      	bhi.n	800c52e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c528:	4a1f      	ldr	r2, [pc, #124]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c52e:	4b20      	ldr	r3, [pc, #128]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	4a1e      	ldr	r2, [pc, #120]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c538:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c544:	4b1b      	ldr	r3, [pc, #108]	@ (800c5b4 <prvAddNewTaskToReadyList+0xd4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d903      	bls.n	800c554 <prvAddNewTaskToReadyList+0x74>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	4a18      	ldr	r2, [pc, #96]	@ (800c5b4 <prvAddNewTaskToReadyList+0xd4>)
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a15      	ldr	r2, [pc, #84]	@ (800c5b8 <prvAddNewTaskToReadyList+0xd8>)
 800c562:	441a      	add	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fe fd17 	bl	800af9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c570:	f001 fec4 	bl	800e2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c574:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ac <prvAddNewTaskToReadyList+0xcc>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00e      	beq.n	800c59a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c586:	429a      	cmp	r2, r3
 800c588:	d207      	bcs.n	800c59a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c58a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5bc <prvAddNewTaskToReadyList+0xdc>)
 800c58c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20001424 	.word	0x20001424
 800c5a8:	20000f50 	.word	0x20000f50
 800c5ac:	20001430 	.word	0x20001430
 800c5b0:	20001440 	.word	0x20001440
 800c5b4:	2000142c 	.word	0x2000142c
 800c5b8:	20000f54 	.word	0x20000f54
 800c5bc:	e000ed04 	.word	0xe000ed04

0800c5c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10b      	bne.n	800c5ec <vTaskDelayUntil+0x2c>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	617b      	str	r3, [r7, #20]
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	e7fd      	b.n	800c5e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10b      	bne.n	800c60a <vTaskDelayUntil+0x4a>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	613b      	str	r3, [r7, #16]
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	e7fd      	b.n	800c606 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800c60a:	4b2a      	ldr	r3, [pc, #168]	@ (800c6b4 <vTaskDelayUntil+0xf4>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00b      	beq.n	800c62a <vTaskDelayUntil+0x6a>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60fb      	str	r3, [r7, #12]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800c62a:	f000 f8e7 	bl	800c7fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c62e:	4b22      	ldr	r3, [pc, #136]	@ (800c6b8 <vTaskDelayUntil+0xf8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	4413      	add	r3, r2
 800c63c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6a3a      	ldr	r2, [r7, #32]
 800c644:	429a      	cmp	r2, r3
 800c646:	d20b      	bcs.n	800c660 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d211      	bcs.n	800c676 <vTaskDelayUntil+0xb6>
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	429a      	cmp	r2, r3
 800c658:	d90d      	bls.n	800c676 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c65e:	e00a      	b.n	800c676 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69fa      	ldr	r2, [r7, #28]
 800c666:	429a      	cmp	r2, r3
 800c668:	d303      	bcc.n	800c672 <vTaskDelayUntil+0xb2>
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d901      	bls.n	800c676 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c672:	2301      	movs	r3, #1
 800c674:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2100      	movs	r1, #0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f001 f866 	bl	800d75c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c690:	f000 f8c2 	bl	800c818 <xTaskResumeAll>
 800c694:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d107      	bne.n	800c6ac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <vTaskDelayUntil+0xfc>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6ac:	bf00      	nop
 800c6ae:	3728      	adds	r7, #40	@ 0x28
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	2000144c 	.word	0x2000144c
 800c6b8:	20001428 	.word	0x20001428
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d018      	beq.n	800c704 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6d2:	4b14      	ldr	r3, [pc, #80]	@ (800c724 <vTaskDelay+0x64>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00b      	beq.n	800c6f2 <vTaskDelay+0x32>
	__asm volatile
 800c6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	60bb      	str	r3, [r7, #8]
}
 800c6ec:	bf00      	nop
 800c6ee:	bf00      	nop
 800c6f0:	e7fd      	b.n	800c6ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6f2:	f000 f883 	bl	800c7fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f82f 	bl	800d75c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6fe:	f000 f88b 	bl	800c818 <xTaskResumeAll>
 800c702:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d107      	bne.n	800c71a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c70a:	4b07      	ldr	r3, [pc, #28]	@ (800c728 <vTaskDelay+0x68>)
 800c70c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	2000144c 	.word	0x2000144c
 800c728:	e000ed04 	.word	0xe000ed04

0800c72c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c73a:	463a      	mov	r2, r7
 800c73c:	1d39      	adds	r1, r7, #4
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe fbca 	bl	800aedc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	9202      	str	r2, [sp, #8]
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	2300      	movs	r3, #0
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	2300      	movs	r3, #0
 800c758:	460a      	mov	r2, r1
 800c75a:	4922      	ldr	r1, [pc, #136]	@ (800c7e4 <vTaskStartScheduler+0xb8>)
 800c75c:	4822      	ldr	r0, [pc, #136]	@ (800c7e8 <vTaskStartScheduler+0xbc>)
 800c75e:	f7ff fd89 	bl	800c274 <xTaskCreateStatic>
 800c762:	4603      	mov	r3, r0
 800c764:	4a21      	ldr	r2, [pc, #132]	@ (800c7ec <vTaskStartScheduler+0xc0>)
 800c766:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c768:	4b20      	ldr	r3, [pc, #128]	@ (800c7ec <vTaskStartScheduler+0xc0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c770:	2301      	movs	r3, #1
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	e001      	b.n	800c77a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c776:	2300      	movs	r3, #0
 800c778:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d102      	bne.n	800c786 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c780:	f001 f840 	bl	800d804 <xTimerCreateTimerTask>
 800c784:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d116      	bne.n	800c7ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	613b      	str	r3, [r7, #16]
}
 800c79e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7a0:	4b13      	ldr	r3, [pc, #76]	@ (800c7f0 <vTaskStartScheduler+0xc4>)
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	@ (800c7f4 <vTaskStartScheduler+0xc8>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	@ (800c7f8 <vTaskStartScheduler+0xcc>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7b4:	f001 fccc 	bl	800e150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7b8:	e00f      	b.n	800c7da <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7c0:	d10b      	bne.n	800c7da <vTaskStartScheduler+0xae>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60fb      	str	r3, [r7, #12]
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	e7fd      	b.n	800c7d6 <vTaskStartScheduler+0xaa>
}
 800c7da:	bf00      	nop
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	080125c4 	.word	0x080125c4
 800c7e8:	0800ce8d 	.word	0x0800ce8d
 800c7ec:	20001448 	.word	0x20001448
 800c7f0:	20001444 	.word	0x20001444
 800c7f4:	20001430 	.word	0x20001430
 800c7f8:	20001428 	.word	0x20001428

0800c7fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c800:	4b04      	ldr	r3, [pc, #16]	@ (800c814 <vTaskSuspendAll+0x18>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a03      	ldr	r2, [pc, #12]	@ (800c814 <vTaskSuspendAll+0x18>)
 800c808:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c80a:	bf00      	nop
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	2000144c 	.word	0x2000144c

0800c818 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c822:	2300      	movs	r3, #0
 800c824:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c826:	4b42      	ldr	r3, [pc, #264]	@ (800c930 <xTaskResumeAll+0x118>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10b      	bne.n	800c846 <xTaskResumeAll+0x2e>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	603b      	str	r3, [r7, #0]
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	e7fd      	b.n	800c842 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c846:	f001 fd27 	bl	800e298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c84a:	4b39      	ldr	r3, [pc, #228]	@ (800c930 <xTaskResumeAll+0x118>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3b01      	subs	r3, #1
 800c850:	4a37      	ldr	r2, [pc, #220]	@ (800c930 <xTaskResumeAll+0x118>)
 800c852:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c854:	4b36      	ldr	r3, [pc, #216]	@ (800c930 <xTaskResumeAll+0x118>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d162      	bne.n	800c922 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c85c:	4b35      	ldr	r3, [pc, #212]	@ (800c934 <xTaskResumeAll+0x11c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d05e      	beq.n	800c922 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c864:	e02f      	b.n	800c8c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c866:	4b34      	ldr	r3, [pc, #208]	@ (800c938 <xTaskResumeAll+0x120>)
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3318      	adds	r3, #24
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe fbf0 	bl	800b058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3304      	adds	r3, #4
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe fbeb 	bl	800b058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c886:	4b2d      	ldr	r3, [pc, #180]	@ (800c93c <xTaskResumeAll+0x124>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d903      	bls.n	800c896 <xTaskResumeAll+0x7e>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c892:	4a2a      	ldr	r2, [pc, #168]	@ (800c93c <xTaskResumeAll+0x124>)
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4a27      	ldr	r2, [pc, #156]	@ (800c940 <xTaskResumeAll+0x128>)
 800c8a4:	441a      	add	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	f7fe fb76 	bl	800af9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b6:	4b23      	ldr	r3, [pc, #140]	@ (800c944 <xTaskResumeAll+0x12c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c8c0:	4b21      	ldr	r3, [pc, #132]	@ (800c948 <xTaskResumeAll+0x130>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8c6:	4b1c      	ldr	r3, [pc, #112]	@ (800c938 <xTaskResumeAll+0x120>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1cb      	bne.n	800c866 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8d4:	f000 fb90 	bl	800cff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c94c <xTaskResumeAll+0x134>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d010      	beq.n	800c906 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8e4:	f000 f858 	bl	800c998 <xTaskIncrementTick>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d002      	beq.n	800c8f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c8ee:	4b16      	ldr	r3, [pc, #88]	@ (800c948 <xTaskResumeAll+0x130>)
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1f1      	bne.n	800c8e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c900:	4b12      	ldr	r3, [pc, #72]	@ (800c94c <xTaskResumeAll+0x134>)
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c906:	4b10      	ldr	r3, [pc, #64]	@ (800c948 <xTaskResumeAll+0x130>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c90e:	2301      	movs	r3, #1
 800c910:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c912:	4b0f      	ldr	r3, [pc, #60]	@ (800c950 <xTaskResumeAll+0x138>)
 800c914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c922:	f001 fceb 	bl	800e2fc <vPortExitCritical>

	return xAlreadyYielded;
 800c926:	68bb      	ldr	r3, [r7, #8]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	2000144c 	.word	0x2000144c
 800c934:	20001424 	.word	0x20001424
 800c938:	200013e4 	.word	0x200013e4
 800c93c:	2000142c 	.word	0x2000142c
 800c940:	20000f54 	.word	0x20000f54
 800c944:	20000f50 	.word	0x20000f50
 800c948:	20001438 	.word	0x20001438
 800c94c:	20001434 	.word	0x20001434
 800c950:	e000ed04 	.word	0xe000ed04

0800c954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c95a:	4b05      	ldr	r3, [pc, #20]	@ (800c970 <xTaskGetTickCount+0x1c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c960:	687b      	ldr	r3, [r7, #4]
}
 800c962:	4618      	mov	r0, r3
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	20001428 	.word	0x20001428

0800c974 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c97a:	f001 fd6d 	bl	800e458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c982:	4b04      	ldr	r3, [pc, #16]	@ (800c994 <xTaskGetTickCountFromISR+0x20>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c988:	683b      	ldr	r3, [r7, #0]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	20001428 	.word	0x20001428

0800c998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9a2:	4b4f      	ldr	r3, [pc, #316]	@ (800cae0 <xTaskIncrementTick+0x148>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f040 8090 	bne.w	800cacc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9ac:	4b4d      	ldr	r3, [pc, #308]	@ (800cae4 <xTaskIncrementTick+0x14c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9b4:	4a4b      	ldr	r2, [pc, #300]	@ (800cae4 <xTaskIncrementTick+0x14c>)
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d121      	bne.n	800ca04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9c0:	4b49      	ldr	r3, [pc, #292]	@ (800cae8 <xTaskIncrementTick+0x150>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00b      	beq.n	800c9e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	603b      	str	r3, [r7, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	e7fd      	b.n	800c9de <xTaskIncrementTick+0x46>
 800c9e2:	4b41      	ldr	r3, [pc, #260]	@ (800cae8 <xTaskIncrementTick+0x150>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	4b40      	ldr	r3, [pc, #256]	@ (800caec <xTaskIncrementTick+0x154>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a3e      	ldr	r2, [pc, #248]	@ (800cae8 <xTaskIncrementTick+0x150>)
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	4a3e      	ldr	r2, [pc, #248]	@ (800caec <xTaskIncrementTick+0x154>)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	4b3e      	ldr	r3, [pc, #248]	@ (800caf0 <xTaskIncrementTick+0x158>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	4a3c      	ldr	r2, [pc, #240]	@ (800caf0 <xTaskIncrementTick+0x158>)
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	f000 fafa 	bl	800cff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca04:	4b3b      	ldr	r3, [pc, #236]	@ (800caf4 <xTaskIncrementTick+0x15c>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d349      	bcc.n	800caa2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca0e:	4b36      	ldr	r3, [pc, #216]	@ (800cae8 <xTaskIncrementTick+0x150>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d104      	bne.n	800ca22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca18:	4b36      	ldr	r3, [pc, #216]	@ (800caf4 <xTaskIncrementTick+0x15c>)
 800ca1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca1e:	601a      	str	r2, [r3, #0]
					break;
 800ca20:	e03f      	b.n	800caa2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca22:	4b31      	ldr	r3, [pc, #196]	@ (800cae8 <xTaskIncrementTick+0x150>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d203      	bcs.n	800ca42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca3a:	4a2e      	ldr	r2, [pc, #184]	@ (800caf4 <xTaskIncrementTick+0x15c>)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca40:	e02f      	b.n	800caa2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	3304      	adds	r3, #4
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe fb06 	bl	800b058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	3318      	adds	r3, #24
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fafd 	bl	800b058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca62:	4b25      	ldr	r3, [pc, #148]	@ (800caf8 <xTaskIncrementTick+0x160>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d903      	bls.n	800ca72 <xTaskIncrementTick+0xda>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6e:	4a22      	ldr	r2, [pc, #136]	@ (800caf8 <xTaskIncrementTick+0x160>)
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4a1f      	ldr	r2, [pc, #124]	@ (800cafc <xTaskIncrementTick+0x164>)
 800ca80:	441a      	add	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7fe fa88 	bl	800af9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca92:	4b1b      	ldr	r3, [pc, #108]	@ (800cb00 <xTaskIncrementTick+0x168>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d3b8      	bcc.n	800ca0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caa0:	e7b5      	b.n	800ca0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800caa2:	4b17      	ldr	r3, [pc, #92]	@ (800cb00 <xTaskIncrementTick+0x168>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caa8:	4914      	ldr	r1, [pc, #80]	@ (800cafc <xTaskIncrementTick+0x164>)
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d901      	bls.n	800cabe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cabe:	4b11      	ldr	r3, [pc, #68]	@ (800cb04 <xTaskIncrementTick+0x16c>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d007      	beq.n	800cad6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cac6:	2301      	movs	r3, #1
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	e004      	b.n	800cad6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cacc:	4b0e      	ldr	r3, [pc, #56]	@ (800cb08 <xTaskIncrementTick+0x170>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3301      	adds	r3, #1
 800cad2:	4a0d      	ldr	r2, [pc, #52]	@ (800cb08 <xTaskIncrementTick+0x170>)
 800cad4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cad6:	697b      	ldr	r3, [r7, #20]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	2000144c 	.word	0x2000144c
 800cae4:	20001428 	.word	0x20001428
 800cae8:	200013dc 	.word	0x200013dc
 800caec:	200013e0 	.word	0x200013e0
 800caf0:	2000143c 	.word	0x2000143c
 800caf4:	20001444 	.word	0x20001444
 800caf8:	2000142c 	.word	0x2000142c
 800cafc:	20000f54 	.word	0x20000f54
 800cb00:	20000f50 	.word	0x20000f50
 800cb04:	20001438 	.word	0x20001438
 800cb08:	20001434 	.word	0x20001434

0800cb0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb12:	4b3b      	ldr	r3, [pc, #236]	@ (800cc00 <vTaskSwitchContext+0xf4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb1a:	4b3a      	ldr	r3, [pc, #232]	@ (800cc04 <vTaskSwitchContext+0xf8>)
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb20:	e069      	b.n	800cbf6 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800cb22:	4b38      	ldr	r3, [pc, #224]	@ (800cc04 <vTaskSwitchContext+0xf8>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cb28:	4b37      	ldr	r3, [pc, #220]	@ (800cc08 <vTaskSwitchContext+0xfc>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d111      	bne.n	800cb64 <vTaskSwitchContext+0x58>
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	3304      	adds	r3, #4
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d10b      	bne.n	800cb64 <vTaskSwitchContext+0x58>
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d105      	bne.n	800cb64 <vTaskSwitchContext+0x58>
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	330c      	adds	r3, #12
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d008      	beq.n	800cb76 <vTaskSwitchContext+0x6a>
 800cb64:	4b28      	ldr	r3, [pc, #160]	@ (800cc08 <vTaskSwitchContext+0xfc>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	4b27      	ldr	r3, [pc, #156]	@ (800cc08 <vTaskSwitchContext+0xfc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3334      	adds	r3, #52	@ 0x34
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4610      	mov	r0, r2
 800cb72:	f7f5 f9ef 	bl	8001f54 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb76:	4b25      	ldr	r3, [pc, #148]	@ (800cc0c <vTaskSwitchContext+0x100>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	e011      	b.n	800cba2 <vTaskSwitchContext+0x96>
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10b      	bne.n	800cb9c <vTaskSwitchContext+0x90>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	607b      	str	r3, [r7, #4]
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	e7fd      	b.n	800cb98 <vTaskSwitchContext+0x8c>
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	617b      	str	r3, [r7, #20]
 800cba2:	491b      	ldr	r1, [pc, #108]	@ (800cc10 <vTaskSwitchContext+0x104>)
 800cba4:	697a      	ldr	r2, [r7, #20]
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	440b      	add	r3, r1
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0e3      	beq.n	800cb7e <vTaskSwitchContext+0x72>
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4a13      	ldr	r2, [pc, #76]	@ (800cc10 <vTaskSwitchContext+0x104>)
 800cbc2:	4413      	add	r3, r2
 800cbc4:	60bb      	str	r3, [r7, #8]
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	605a      	str	r2, [r3, #4]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d104      	bne.n	800cbe6 <vTaskSwitchContext+0xda>
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	605a      	str	r2, [r3, #4]
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	4a06      	ldr	r2, [pc, #24]	@ (800cc08 <vTaskSwitchContext+0xfc>)
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	4a06      	ldr	r2, [pc, #24]	@ (800cc0c <vTaskSwitchContext+0x100>)
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	6013      	str	r3, [r2, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	2000144c 	.word	0x2000144c
 800cc04:	20001438 	.word	0x20001438
 800cc08:	20000f50 	.word	0x20000f50
 800cc0c:	2000142c 	.word	0x2000142c
 800cc10:	20000f54 	.word	0x20000f54

0800cc14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10b      	bne.n	800cc3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	60fb      	str	r3, [r7, #12]
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	e7fd      	b.n	800cc38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc3c:	4b07      	ldr	r3, [pc, #28]	@ (800cc5c <vTaskPlaceOnEventList+0x48>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3318      	adds	r3, #24
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7fe f9ce 	bl	800afe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	6838      	ldr	r0, [r7, #0]
 800cc4e:	f000 fd85 	bl	800d75c <prvAddCurrentTaskToDelayedList>
}
 800cc52:	bf00      	nop
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20000f50 	.word	0x20000f50

0800cc60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10b      	bne.n	800cc8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	617b      	str	r3, [r7, #20]
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3318      	adds	r3, #24
 800cc90:	4619      	mov	r1, r3
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f7fe f983 	bl	800af9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cca2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cca4:	6879      	ldr	r1, [r7, #4]
 800cca6:	68b8      	ldr	r0, [r7, #8]
 800cca8:	f000 fd58 	bl	800d75c <prvAddCurrentTaskToDelayedList>
	}
 800ccac:	bf00      	nop
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	20000f50 	.word	0x20000f50

0800ccb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10b      	bne.n	800cce6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	60fb      	str	r3, [r7, #12]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	3318      	adds	r3, #24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe f9b4 	bl	800b058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd68 <xTaskRemoveFromEventList+0xb0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d11d      	bne.n	800cd34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe f9ab 	bl	800b058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd06:	4b19      	ldr	r3, [pc, #100]	@ (800cd6c <xTaskRemoveFromEventList+0xb4>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d903      	bls.n	800cd16 <xTaskRemoveFromEventList+0x5e>
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd12:	4a16      	ldr	r2, [pc, #88]	@ (800cd6c <xTaskRemoveFromEventList+0xb4>)
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4a13      	ldr	r2, [pc, #76]	@ (800cd70 <xTaskRemoveFromEventList+0xb8>)
 800cd24:	441a      	add	r2, r3
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7fe f936 	bl	800af9e <vListInsertEnd>
 800cd32:	e005      	b.n	800cd40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	3318      	adds	r3, #24
 800cd38:	4619      	mov	r1, r3
 800cd3a:	480e      	ldr	r0, [pc, #56]	@ (800cd74 <xTaskRemoveFromEventList+0xbc>)
 800cd3c:	f7fe f92f 	bl	800af9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd44:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <xTaskRemoveFromEventList+0xc0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d905      	bls.n	800cd5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd52:	4b0a      	ldr	r3, [pc, #40]	@ (800cd7c <xTaskRemoveFromEventList+0xc4>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	e001      	b.n	800cd5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd5e:	697b      	ldr	r3, [r7, #20]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3718      	adds	r7, #24
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	2000144c 	.word	0x2000144c
 800cd6c:	2000142c 	.word	0x2000142c
 800cd70:	20000f54 	.word	0x20000f54
 800cd74:	200013e4 	.word	0x200013e4
 800cd78:	20000f50 	.word	0x20000f50
 800cd7c:	20001438 	.word	0x20001438

0800cd80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd88:	4b06      	ldr	r3, [pc, #24]	@ (800cda4 <vTaskInternalSetTimeOutState+0x24>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd90:	4b05      	ldr	r3, [pc, #20]	@ (800cda8 <vTaskInternalSetTimeOutState+0x28>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	605a      	str	r2, [r3, #4]
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	2000143c 	.word	0x2000143c
 800cda8:	20001428 	.word	0x20001428

0800cdac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10b      	bne.n	800cdd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	613b      	str	r3, [r7, #16]
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10b      	bne.n	800cdf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60fb      	str	r3, [r7, #12]
}
 800cdec:	bf00      	nop
 800cdee:	bf00      	nop
 800cdf0:	e7fd      	b.n	800cdee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cdf2:	f001 fa51 	bl	800e298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cdf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ce6c <xTaskCheckForTimeOut+0xc0>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce0e:	d102      	bne.n	800ce16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
 800ce14:	e023      	b.n	800ce5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b15      	ldr	r3, [pc, #84]	@ (800ce70 <xTaskCheckForTimeOut+0xc4>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d007      	beq.n	800ce32 <xTaskCheckForTimeOut+0x86>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	69ba      	ldr	r2, [r7, #24]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d302      	bcc.n	800ce32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	61fb      	str	r3, [r7, #28]
 800ce30:	e015      	b.n	800ce5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d20b      	bcs.n	800ce54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	1ad2      	subs	r2, r2, r3
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ff99 	bl	800cd80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	e004      	b.n	800ce5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce5e:	f001 fa4d 	bl	800e2fc <vPortExitCritical>

	return xReturn;
 800ce62:	69fb      	ldr	r3, [r7, #28]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3720      	adds	r7, #32
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20001428 	.word	0x20001428
 800ce70:	2000143c 	.word	0x2000143c

0800ce74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce78:	4b03      	ldr	r3, [pc, #12]	@ (800ce88 <vTaskMissedYield+0x14>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	601a      	str	r2, [r3, #0]
}
 800ce7e:	bf00      	nop
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	20001438 	.word	0x20001438

0800ce8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce94:	f000 f852 	bl	800cf3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce98:	4b06      	ldr	r3, [pc, #24]	@ (800ceb4 <prvIdleTask+0x28>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d9f9      	bls.n	800ce94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cea0:	4b05      	ldr	r3, [pc, #20]	@ (800ceb8 <prvIdleTask+0x2c>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ceb0:	e7f0      	b.n	800ce94 <prvIdleTask+0x8>
 800ceb2:	bf00      	nop
 800ceb4:	20000f54 	.word	0x20000f54
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cec2:	2300      	movs	r3, #0
 800cec4:	607b      	str	r3, [r7, #4]
 800cec6:	e00c      	b.n	800cee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	4a12      	ldr	r2, [pc, #72]	@ (800cf1c <prvInitialiseTaskLists+0x60>)
 800ced4:	4413      	add	r3, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe f834 	bl	800af44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	3301      	adds	r3, #1
 800cee0:	607b      	str	r3, [r7, #4]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b37      	cmp	r3, #55	@ 0x37
 800cee6:	d9ef      	bls.n	800cec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cee8:	480d      	ldr	r0, [pc, #52]	@ (800cf20 <prvInitialiseTaskLists+0x64>)
 800ceea:	f7fe f82b 	bl	800af44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ceee:	480d      	ldr	r0, [pc, #52]	@ (800cf24 <prvInitialiseTaskLists+0x68>)
 800cef0:	f7fe f828 	bl	800af44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cef4:	480c      	ldr	r0, [pc, #48]	@ (800cf28 <prvInitialiseTaskLists+0x6c>)
 800cef6:	f7fe f825 	bl	800af44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cefa:	480c      	ldr	r0, [pc, #48]	@ (800cf2c <prvInitialiseTaskLists+0x70>)
 800cefc:	f7fe f822 	bl	800af44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf00:	480b      	ldr	r0, [pc, #44]	@ (800cf30 <prvInitialiseTaskLists+0x74>)
 800cf02:	f7fe f81f 	bl	800af44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf06:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <prvInitialiseTaskLists+0x78>)
 800cf08:	4a05      	ldr	r2, [pc, #20]	@ (800cf20 <prvInitialiseTaskLists+0x64>)
 800cf0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf38 <prvInitialiseTaskLists+0x7c>)
 800cf0e:	4a05      	ldr	r2, [pc, #20]	@ (800cf24 <prvInitialiseTaskLists+0x68>)
 800cf10:	601a      	str	r2, [r3, #0]
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000f54 	.word	0x20000f54
 800cf20:	200013b4 	.word	0x200013b4
 800cf24:	200013c8 	.word	0x200013c8
 800cf28:	200013e4 	.word	0x200013e4
 800cf2c:	200013f8 	.word	0x200013f8
 800cf30:	20001410 	.word	0x20001410
 800cf34:	200013dc 	.word	0x200013dc
 800cf38:	200013e0 	.word	0x200013e0

0800cf3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf42:	e019      	b.n	800cf78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf44:	f001 f9a8 	bl	800e298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf48:	4b10      	ldr	r3, [pc, #64]	@ (800cf8c <prvCheckTasksWaitingTermination+0x50>)
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe f87f 	bl	800b058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf90 <prvCheckTasksWaitingTermination+0x54>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	4a0b      	ldr	r2, [pc, #44]	@ (800cf90 <prvCheckTasksWaitingTermination+0x54>)
 800cf62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf64:	4b0b      	ldr	r3, [pc, #44]	@ (800cf94 <prvCheckTasksWaitingTermination+0x58>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	4a0a      	ldr	r2, [pc, #40]	@ (800cf94 <prvCheckTasksWaitingTermination+0x58>)
 800cf6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf6e:	f001 f9c5 	bl	800e2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f810 	bl	800cf98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf78:	4b06      	ldr	r3, [pc, #24]	@ (800cf94 <prvCheckTasksWaitingTermination+0x58>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e1      	bne.n	800cf44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	200013f8 	.word	0x200013f8
 800cf90:	20001424 	.word	0x20001424
 800cf94:	2000140c 	.word	0x2000140c

0800cf98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d108      	bne.n	800cfbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f001 fb68 	bl	800e684 <vPortFree>
				vPortFree( pxTCB );
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f001 fb65 	bl	800e684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfba:	e019      	b.n	800cff0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d103      	bne.n	800cfce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f001 fb5c 	bl	800e684 <vPortFree>
	}
 800cfcc:	e010      	b.n	800cff0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d00b      	beq.n	800cff0 <prvDeleteTCB+0x58>
	__asm volatile
 800cfd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	60fb      	str	r3, [r7, #12]
}
 800cfea:	bf00      	nop
 800cfec:	bf00      	nop
 800cfee:	e7fd      	b.n	800cfec <prvDeleteTCB+0x54>
	}
 800cff0:	bf00      	nop
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cffe:	4b0c      	ldr	r3, [pc, #48]	@ (800d030 <prvResetNextTaskUnblockTime+0x38>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d104      	bne.n	800d012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d008:	4b0a      	ldr	r3, [pc, #40]	@ (800d034 <prvResetNextTaskUnblockTime+0x3c>)
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d00e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d010:	e008      	b.n	800d024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d012:	4b07      	ldr	r3, [pc, #28]	@ (800d030 <prvResetNextTaskUnblockTime+0x38>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	4a04      	ldr	r2, [pc, #16]	@ (800d034 <prvResetNextTaskUnblockTime+0x3c>)
 800d022:	6013      	str	r3, [r2, #0]
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	200013dc 	.word	0x200013dc
 800d034:	20001444 	.word	0x20001444

0800d038 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d03e:	4b05      	ldr	r3, [pc, #20]	@ (800d054 <xTaskGetCurrentTaskHandle+0x1c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d044:	687b      	ldr	r3, [r7, #4]
	}
 800d046:	4618      	mov	r0, r3
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20000f50 	.word	0x20000f50

0800d058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d05e:	4b0b      	ldr	r3, [pc, #44]	@ (800d08c <xTaskGetSchedulerState+0x34>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d066:	2301      	movs	r3, #1
 800d068:	607b      	str	r3, [r7, #4]
 800d06a:	e008      	b.n	800d07e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d06c:	4b08      	ldr	r3, [pc, #32]	@ (800d090 <xTaskGetSchedulerState+0x38>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d074:	2302      	movs	r3, #2
 800d076:	607b      	str	r3, [r7, #4]
 800d078:	e001      	b.n	800d07e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d07a:	2300      	movs	r3, #0
 800d07c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d07e:	687b      	ldr	r3, [r7, #4]
	}
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	20001430 	.word	0x20001430
 800d090:	2000144c 	.word	0x2000144c

0800d094 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d051      	beq.n	800d14e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d158 <xTaskPriorityInherit+0xc4>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d241      	bcs.n	800d13c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	db06      	blt.n	800d0ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c0:	4b25      	ldr	r3, [pc, #148]	@ (800d158 <xTaskPriorityInherit+0xc4>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	6959      	ldr	r1, [r3, #20]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4a1f      	ldr	r2, [pc, #124]	@ (800d15c <xTaskPriorityInherit+0xc8>)
 800d0e0:	4413      	add	r3, r2
 800d0e2:	4299      	cmp	r1, r3
 800d0e4:	d122      	bne.n	800d12c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fd ffb4 	bl	800b058 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0f0:	4b19      	ldr	r3, [pc, #100]	@ (800d158 <xTaskPriorityInherit+0xc4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fe:	4b18      	ldr	r3, [pc, #96]	@ (800d160 <xTaskPriorityInherit+0xcc>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d903      	bls.n	800d10e <xTaskPriorityInherit+0x7a>
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10a:	4a15      	ldr	r2, [pc, #84]	@ (800d160 <xTaskPriorityInherit+0xcc>)
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4a10      	ldr	r2, [pc, #64]	@ (800d15c <xTaskPriorityInherit+0xc8>)
 800d11c:	441a      	add	r2, r3
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	3304      	adds	r3, #4
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fd ff3a 	bl	800af9e <vListInsertEnd>
 800d12a:	e004      	b.n	800d136 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d12c:	4b0a      	ldr	r3, [pc, #40]	@ (800d158 <xTaskPriorityInherit+0xc4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d136:	2301      	movs	r3, #1
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	e008      	b.n	800d14e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d140:	4b05      	ldr	r3, [pc, #20]	@ (800d158 <xTaskPriorityInherit+0xc4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d146:	429a      	cmp	r2, r3
 800d148:	d201      	bcs.n	800d14e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d14a:	2301      	movs	r3, #1
 800d14c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d14e:	68fb      	ldr	r3, [r7, #12]
	}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20000f50 	.word	0x20000f50
 800d15c:	20000f54 	.word	0x20000f54
 800d160:	2000142c 	.word	0x2000142c

0800d164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d170:	2300      	movs	r3, #0
 800d172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d058      	beq.n	800d22c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d17a:	4b2f      	ldr	r3, [pc, #188]	@ (800d238 <xTaskPriorityDisinherit+0xd4>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	429a      	cmp	r2, r3
 800d182:	d00b      	beq.n	800d19c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	60fb      	str	r3, [r7, #12]
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10b      	bne.n	800d1bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	60bb      	str	r3, [r7, #8]
}
 800d1b6:	bf00      	nop
 800d1b8:	bf00      	nop
 800d1ba:	e7fd      	b.n	800d1b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1c0:	1e5a      	subs	r2, r3, #1
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d02c      	beq.n	800d22c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d128      	bne.n	800d22c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd ff3a 	bl	800b058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d23c <xTaskPriorityDisinherit+0xd8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d903      	bls.n	800d20c <xTaskPriorityDisinherit+0xa8>
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d208:	4a0c      	ldr	r2, [pc, #48]	@ (800d23c <xTaskPriorityDisinherit+0xd8>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4a09      	ldr	r2, [pc, #36]	@ (800d240 <xTaskPriorityDisinherit+0xdc>)
 800d21a:	441a      	add	r2, r3
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	3304      	adds	r3, #4
 800d220:	4619      	mov	r1, r3
 800d222:	4610      	mov	r0, r2
 800d224:	f7fd febb 	bl	800af9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d228:	2301      	movs	r3, #1
 800d22a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d22c:	697b      	ldr	r3, [r7, #20]
	}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000f50 	.word	0x20000f50
 800d23c:	2000142c 	.word	0x2000142c
 800d240:	20000f54 	.word	0x20000f54

0800d244 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d252:	2301      	movs	r3, #1
 800d254:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d06c      	beq.n	800d336 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10b      	bne.n	800d27c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	60fb      	str	r3, [r7, #12]
}
 800d276:	bf00      	nop
 800d278:	bf00      	nop
 800d27a:	e7fd      	b.n	800d278 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d902      	bls.n	800d28c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	61fb      	str	r3, [r7, #28]
 800d28a:	e002      	b.n	800d292 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d290:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	69fa      	ldr	r2, [r7, #28]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d04c      	beq.n	800d336 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d147      	bne.n	800d336 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d2a6:	4b26      	ldr	r3, [pc, #152]	@ (800d340 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	69ba      	ldr	r2, [r7, #24]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d10b      	bne.n	800d2c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	60bb      	str	r3, [r7, #8]
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	e7fd      	b.n	800d2c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	69fa      	ldr	r2, [r7, #28]
 800d2d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	db04      	blt.n	800d2e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	6959      	ldr	r1, [r3, #20]
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4a13      	ldr	r2, [pc, #76]	@ (800d344 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d2f6:	4413      	add	r3, r2
 800d2f8:	4299      	cmp	r1, r3
 800d2fa:	d11c      	bne.n	800d336 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	3304      	adds	r3, #4
 800d300:	4618      	mov	r0, r3
 800d302:	f7fd fea9 	bl	800b058 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d30a:	4b0f      	ldr	r3, [pc, #60]	@ (800d348 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d903      	bls.n	800d31a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	4a0c      	ldr	r2, [pc, #48]	@ (800d348 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d318:	6013      	str	r3, [r2, #0]
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31e:	4613      	mov	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4a07      	ldr	r2, [pc, #28]	@ (800d344 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d328:	441a      	add	r2, r3
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	3304      	adds	r3, #4
 800d32e:	4619      	mov	r1, r3
 800d330:	4610      	mov	r0, r2
 800d332:	f7fd fe34 	bl	800af9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d336:	bf00      	nop
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20000f50 	.word	0x20000f50
 800d344:	20000f54 	.word	0x20000f54
 800d348:	2000142c 	.word	0x2000142c

0800d34c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d350:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <pvTaskIncrementMutexHeldCount+0x24>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d358:	4b05      	ldr	r3, [pc, #20]	@ (800d370 <pvTaskIncrementMutexHeldCount+0x24>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d35e:	3201      	adds	r2, #1
 800d360:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d362:	4b03      	ldr	r3, [pc, #12]	@ (800d370 <pvTaskIncrementMutexHeldCount+0x24>)
 800d364:	681b      	ldr	r3, [r3, #0]
	}
 800d366:	4618      	mov	r0, r3
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	20000f50 	.word	0x20000f50

0800d374 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
 800d380:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d382:	f000 ff89 	bl	800e298 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d386:	4b26      	ldr	r3, [pc, #152]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	2b02      	cmp	r3, #2
 800d392:	d01a      	beq.n	800d3ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d394:	4b22      	ldr	r3, [pc, #136]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	43d2      	mvns	r2, r2
 800d39e:	400a      	ands	r2, r1
 800d3a0:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d3a2:	4b1f      	ldr	r3, [pc, #124]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00b      	beq.n	800d3ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	6838      	ldr	r0, [r7, #0]
 800d3b6:	f000 f9d1 	bl	800d75c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d3ba:	4b1a      	ldr	r3, [pc, #104]	@ (800d424 <xTaskNotifyWait+0xb0>)
 800d3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d3ca:	f000 ff97 	bl	800e2fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800d3ce:	f000 ff63 	bl	800e298 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d3d8:	4b11      	ldr	r3, [pc, #68]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d3e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d002      	beq.n	800d3f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e008      	b.n	800d408 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	43d2      	mvns	r2, r2
 800d400:	400a      	ands	r2, r1
 800d402:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 800d404:	2301      	movs	r3, #1
 800d406:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d408:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <xTaskNotifyWait+0xac>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800d412:	f000 ff73 	bl	800e2fc <vPortExitCritical>

		return xReturn;
 800d416:	697b      	ldr	r3, [r7, #20]
	}
 800d418:	4618      	mov	r0, r3
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	20000f50 	.word	0x20000f50
 800d424:	e000ed04 	.word	0xe000ed04

0800d428 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08a      	sub	sp, #40	@ 0x28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	603b      	str	r3, [r7, #0]
 800d434:	4613      	mov	r3, r2
 800d436:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d438:	2301      	movs	r3, #1
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10b      	bne.n	800d45a <xTaskGenericNotify+0x32>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	61bb      	str	r3, [r7, #24]
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop
 800d458:	e7fd      	b.n	800d456 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d45e:	f000 ff1b 	bl	800e298 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d470:	6a3b      	ldr	r3, [r7, #32]
 800d472:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d476:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	2202      	movs	r2, #2
 800d47c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	2b04      	cmp	r3, #4
 800d484:	d827      	bhi.n	800d4d6 <xTaskGenericNotify+0xae>
 800d486:	a201      	add	r2, pc, #4	@ (adr r2, 800d48c <xTaskGenericNotify+0x64>)
 800d488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48c:	0800d4f9 	.word	0x0800d4f9
 800d490:	0800d4a1 	.word	0x0800d4a1
 800d494:	0800d4af 	.word	0x0800d4af
 800d498:	0800d4bb 	.word	0x0800d4bb
 800d49c:	0800d4c3 	.word	0x0800d4c3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d4ac:	e027      	b.n	800d4fe <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d4ae:	6a3b      	ldr	r3, [r7, #32]
 800d4b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d4b8:	e021      	b.n	800d4fe <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d4ba:	6a3b      	ldr	r3, [r7, #32]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d4c0:	e01d      	b.n	800d4fe <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d4c2:	7ffb      	ldrb	r3, [r7, #31]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d003      	beq.n	800d4d0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d4c8:	6a3b      	ldr	r3, [r7, #32]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d4ce:	e016      	b.n	800d4fe <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800d4d4:	e013      	b.n	800d4fe <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4de:	d00d      	beq.n	800d4fc <xTaskGenericNotify+0xd4>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	617b      	str	r3, [r7, #20]
}
 800d4f2:	bf00      	nop
 800d4f4:	bf00      	nop
 800d4f6:	e7fd      	b.n	800d4f4 <xTaskGenericNotify+0xcc>
					break;
 800d4f8:	bf00      	nop
 800d4fa:	e000      	b.n	800d4fe <xTaskGenericNotify+0xd6>

					break;
 800d4fc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d4fe:	7ffb      	ldrb	r3, [r7, #31]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d13b      	bne.n	800d57c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	3304      	adds	r3, #4
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fd fda5 	bl	800b058 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d50e:	6a3b      	ldr	r3, [r7, #32]
 800d510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d512:	4b1e      	ldr	r3, [pc, #120]	@ (800d58c <xTaskGenericNotify+0x164>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d903      	bls.n	800d522 <xTaskGenericNotify+0xfa>
 800d51a:	6a3b      	ldr	r3, [r7, #32]
 800d51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51e:	4a1b      	ldr	r2, [pc, #108]	@ (800d58c <xTaskGenericNotify+0x164>)
 800d520:	6013      	str	r3, [r2, #0]
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d526:	4613      	mov	r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4a18      	ldr	r2, [pc, #96]	@ (800d590 <xTaskGenericNotify+0x168>)
 800d530:	441a      	add	r2, r3
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	3304      	adds	r3, #4
 800d536:	4619      	mov	r1, r3
 800d538:	4610      	mov	r0, r2
 800d53a:	f7fd fd30 	bl	800af9e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <xTaskGenericNotify+0x136>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	613b      	str	r3, [r7, #16]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d562:	4b0c      	ldr	r3, [pc, #48]	@ (800d594 <xTaskGenericNotify+0x16c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d568:	429a      	cmp	r2, r3
 800d56a:	d907      	bls.n	800d57c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <xTaskGenericNotify+0x170>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d57c:	f000 febe 	bl	800e2fc <vPortExitCritical>

		return xReturn;
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d582:	4618      	mov	r0, r3
 800d584:	3728      	adds	r7, #40	@ 0x28
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	2000142c 	.word	0x2000142c
 800d590:	20000f54 	.word	0x20000f54
 800d594:	20000f50 	.word	0x20000f50
 800d598:	e000ed04 	.word	0xe000ed04

0800d59c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08e      	sub	sp, #56	@ 0x38
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10b      	bne.n	800d5ce <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5ce:	f000 ff43 	bl	800e458 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800d5d6:	f3ef 8211 	mrs	r2, BASEPRI
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	623a      	str	r2, [r7, #32]
 800d5ec:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d5ee:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d602:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	2202      	movs	r2, #2
 800d60e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	2b04      	cmp	r3, #4
 800d616:	d829      	bhi.n	800d66c <xTaskGenericNotifyFromISR+0xd0>
 800d618:	a201      	add	r2, pc, #4	@ (adr r2, 800d620 <xTaskGenericNotifyFromISR+0x84>)
 800d61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61e:	bf00      	nop
 800d620:	0800d68f 	.word	0x0800d68f
 800d624:	0800d635 	.word	0x0800d635
 800d628:	0800d643 	.word	0x0800d643
 800d62c:	0800d64f 	.word	0x0800d64f
 800d630:	0800d657 	.word	0x0800d657
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d636:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	431a      	orrs	r2, r3
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d640:	e028      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d64c:	e022      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800d654:	e01e      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d003      	beq.n	800d666 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d664:	e016      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800d666:	2300      	movs	r3, #0
 800d668:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800d66a:	e013      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d674:	d00d      	beq.n	800d692 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	61bb      	str	r3, [r7, #24]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <xTaskGenericNotifyFromISR+0xee>
					break;
 800d68e:	bf00      	nop
 800d690:	e000      	b.n	800d694 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800d692:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d694:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d147      	bne.n	800d72c <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	617b      	str	r3, [r7, #20]
}
 800d6b6:	bf00      	nop
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6bc:	4b21      	ldr	r3, [pc, #132]	@ (800d744 <xTaskGenericNotifyFromISR+0x1a8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11d      	bne.n	800d700 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fd fcc5 	bl	800b058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d2:	4b1d      	ldr	r3, [pc, #116]	@ (800d748 <xTaskGenericNotifyFromISR+0x1ac>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d903      	bls.n	800d6e2 <xTaskGenericNotifyFromISR+0x146>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6de:	4a1a      	ldr	r2, [pc, #104]	@ (800d748 <xTaskGenericNotifyFromISR+0x1ac>)
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	4413      	add	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4a17      	ldr	r2, [pc, #92]	@ (800d74c <xTaskGenericNotifyFromISR+0x1b0>)
 800d6f0:	441a      	add	r2, r3
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	3304      	adds	r3, #4
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	f7fd fc50 	bl	800af9e <vListInsertEnd>
 800d6fe:	e005      	b.n	800d70c <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	3318      	adds	r3, #24
 800d704:	4619      	mov	r1, r3
 800d706:	4812      	ldr	r0, [pc, #72]	@ (800d750 <xTaskGenericNotifyFromISR+0x1b4>)
 800d708:	f7fd fc49 	bl	800af9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d710:	4b10      	ldr	r3, [pc, #64]	@ (800d754 <xTaskGenericNotifyFromISR+0x1b8>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d908      	bls.n	800d72c <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d71a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d722:	2201      	movs	r2, #1
 800d724:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d726:	4b0c      	ldr	r3, [pc, #48]	@ (800d758 <xTaskGenericNotifyFromISR+0x1bc>)
 800d728:	2201      	movs	r2, #1
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	f383 8811 	msr	BASEPRI, r3
}
 800d736:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3738      	adds	r7, #56	@ 0x38
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	2000144c 	.word	0x2000144c
 800d748:	2000142c 	.word	0x2000142c
 800d74c:	20000f54 	.word	0x20000f54
 800d750:	200013e4 	.word	0x200013e4
 800d754:	20000f50 	.word	0x20000f50
 800d758:	20001438 	.word	0x20001438

0800d75c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d766:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <prvAddCurrentTaskToDelayedList+0x90>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d76c:	4b20      	ldr	r3, [pc, #128]	@ (800d7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3304      	adds	r3, #4
 800d772:	4618      	mov	r0, r3
 800d774:	f7fd fc70 	bl	800b058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d77e:	d10a      	bne.n	800d796 <prvAddCurrentTaskToDelayedList+0x3a>
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d007      	beq.n	800d796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d786:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3304      	adds	r3, #4
 800d78c:	4619      	mov	r1, r3
 800d78e:	4819      	ldr	r0, [pc, #100]	@ (800d7f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d790:	f7fd fc05 	bl	800af9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d794:	e026      	b.n	800d7e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4413      	add	r3, r2
 800d79c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d79e:	4b14      	ldr	r3, [pc, #80]	@ (800d7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d209      	bcs.n	800d7c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7ae:	4b12      	ldr	r3, [pc, #72]	@ (800d7f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	f7fd fc13 	bl	800afe6 <vListInsert>
}
 800d7c0:	e010      	b.n	800d7e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d7fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f7fd fc09 	bl	800afe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d800 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d202      	bcs.n	800d7e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d7de:	4a08      	ldr	r2, [pc, #32]	@ (800d800 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	6013      	str	r3, [r2, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20001428 	.word	0x20001428
 800d7f0:	20000f50 	.word	0x20000f50
 800d7f4:	20001410 	.word	0x20001410
 800d7f8:	200013e0 	.word	0x200013e0
 800d7fc:	200013dc 	.word	0x200013dc
 800d800:	20001444 	.word	0x20001444

0800d804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	@ 0x28
 800d808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d80a:	2300      	movs	r3, #0
 800d80c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d80e:	f000 fbb1 	bl	800df74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d812:	4b1d      	ldr	r3, [pc, #116]	@ (800d888 <xTimerCreateTimerTask+0x84>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d021      	beq.n	800d85e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d822:	1d3a      	adds	r2, r7, #4
 800d824:	f107 0108 	add.w	r1, r7, #8
 800d828:	f107 030c 	add.w	r3, r7, #12
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fd fb6f 	bl	800af10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	9202      	str	r2, [sp, #8]
 800d83a:	9301      	str	r3, [sp, #4]
 800d83c:	2312      	movs	r3, #18
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	2300      	movs	r3, #0
 800d842:	460a      	mov	r2, r1
 800d844:	4911      	ldr	r1, [pc, #68]	@ (800d88c <xTimerCreateTimerTask+0x88>)
 800d846:	4812      	ldr	r0, [pc, #72]	@ (800d890 <xTimerCreateTimerTask+0x8c>)
 800d848:	f7fe fd14 	bl	800c274 <xTaskCreateStatic>
 800d84c:	4603      	mov	r3, r0
 800d84e:	4a11      	ldr	r2, [pc, #68]	@ (800d894 <xTimerCreateTimerTask+0x90>)
 800d850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d852:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <xTimerCreateTimerTask+0x90>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d85a:	2301      	movs	r3, #1
 800d85c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10b      	bne.n	800d87c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	613b      	str	r3, [r7, #16]
}
 800d876:	bf00      	nop
 800d878:	bf00      	nop
 800d87a:	e7fd      	b.n	800d878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d87c:	697b      	ldr	r3, [r7, #20]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20001480 	.word	0x20001480
 800d88c:	080125cc 	.word	0x080125cc
 800d890:	0800db0d 	.word	0x0800db0d
 800d894:	20001484 	.word	0x20001484

0800d898 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b088      	sub	sp, #32
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d8a6:	202c      	movs	r0, #44	@ 0x2c
 800d8a8:	f000 fe18 	bl	800e4dc <pvPortMalloc>
 800d8ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00d      	beq.n	800d8d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	68b9      	ldr	r1, [r7, #8]
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 f845 	bl	800d95a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d8d0:	697b      	ldr	r3, [r7, #20]
	}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3718      	adds	r7, #24
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b08a      	sub	sp, #40	@ 0x28
 800d8de:	af02      	add	r7, sp, #8
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	60b9      	str	r1, [r7, #8]
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d8e8:	232c      	movs	r3, #44	@ 0x2c
 800d8ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	2b2c      	cmp	r3, #44	@ 0x2c
 800d8f0:	d00b      	beq.n	800d90a <xTimerCreateStatic+0x30>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	61bb      	str	r3, [r7, #24]
}
 800d904:	bf00      	nop
 800d906:	bf00      	nop
 800d908:	e7fd      	b.n	800d906 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d90a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10b      	bne.n	800d92a <xTimerCreateStatic+0x50>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	617b      	str	r3, [r7, #20]
}
 800d924:	bf00      	nop
 800d926:	bf00      	nop
 800d928:	e7fd      	b.n	800d926 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00d      	beq.n	800d950 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	2202      	movs	r2, #2
 800d938:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	68b9      	ldr	r1, [r7, #8]
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 f805 	bl	800d95a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d950:	69fb      	ldr	r3, [r7, #28]
	}
 800d952:	4618      	mov	r0, r3
 800d954:	3720      	adds	r7, #32
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b086      	sub	sp, #24
 800d95e:	af00      	add	r7, sp, #0
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10b      	bne.n	800d986 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	617b      	str	r3, [r7, #20]
}
 800d980:	bf00      	nop
 800d982:	bf00      	nop
 800d984:	e7fd      	b.n	800d982 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01e      	beq.n	800d9ca <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d98c:	f000 faf2 	bl	800df74 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a4:	6a3a      	ldr	r2, [r7, #32]
 800d9a6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fd fae9 	bl	800af84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d008      	beq.n	800d9ca <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9be:	f043 0304 	orr.w	r3, r3, #4
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d9ca:	bf00      	nop
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
	...

0800d9d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08a      	sub	sp, #40	@ 0x28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10b      	bne.n	800da04 <xTimerGenericCommand+0x30>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	623b      	str	r3, [r7, #32]
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	e7fd      	b.n	800da00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da04:	4b19      	ldr	r3, [pc, #100]	@ (800da6c <xTimerGenericCommand+0x98>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d02a      	beq.n	800da62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	dc18      	bgt.n	800da50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da1e:	f7ff fb1b 	bl	800d058 <xTaskGetSchedulerState>
 800da22:	4603      	mov	r3, r0
 800da24:	2b02      	cmp	r3, #2
 800da26:	d109      	bne.n	800da3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da28:	4b10      	ldr	r3, [pc, #64]	@ (800da6c <xTimerGenericCommand+0x98>)
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	f107 0110 	add.w	r1, r7, #16
 800da30:	2300      	movs	r3, #0
 800da32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da34:	f7fd fda6 	bl	800b584 <xQueueGenericSend>
 800da38:	6278      	str	r0, [r7, #36]	@ 0x24
 800da3a:	e012      	b.n	800da62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da3c:	4b0b      	ldr	r3, [pc, #44]	@ (800da6c <xTimerGenericCommand+0x98>)
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	f107 0110 	add.w	r1, r7, #16
 800da44:	2300      	movs	r3, #0
 800da46:	2200      	movs	r2, #0
 800da48:	f7fd fd9c 	bl	800b584 <xQueueGenericSend>
 800da4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800da4e:	e008      	b.n	800da62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da50:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <xTimerGenericCommand+0x98>)
 800da52:	6818      	ldr	r0, [r3, #0]
 800da54:	f107 0110 	add.w	r1, r7, #16
 800da58:	2300      	movs	r3, #0
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	f7fd fe94 	bl	800b788 <xQueueGenericSendFromISR>
 800da60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da64:	4618      	mov	r0, r3
 800da66:	3728      	adds	r7, #40	@ 0x28
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	20001480 	.word	0x20001480

0800da70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af02      	add	r7, sp, #8
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7a:	4b23      	ldr	r3, [pc, #140]	@ (800db08 <prvProcessExpiredTimer+0x98>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	3304      	adds	r3, #4
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fd fae5 	bl	800b058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d023      	beq.n	800dae4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	699a      	ldr	r2, [r3, #24]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	18d1      	adds	r1, r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	6978      	ldr	r0, [r7, #20]
 800daaa:	f000 f8d5 	bl	800dc58 <prvInsertTimerInActiveList>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d020      	beq.n	800daf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dab4:	2300      	movs	r3, #0
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	2300      	movs	r3, #0
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	2100      	movs	r1, #0
 800dabe:	6978      	ldr	r0, [r7, #20]
 800dac0:	f7ff ff88 	bl	800d9d4 <xTimerGenericCommand>
 800dac4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d114      	bne.n	800daf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	60fb      	str	r3, [r7, #12]
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	e7fd      	b.n	800dae0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daea:	f023 0301 	bic.w	r3, r3, #1
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	6978      	ldr	r0, [r7, #20]
 800dafc:	4798      	blx	r3
}
 800dafe:	bf00      	nop
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20001478 	.word	0x20001478

0800db0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db14:	f107 0308 	add.w	r3, r7, #8
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 f859 	bl	800dbd0 <prvGetNextExpireTime>
 800db1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	4619      	mov	r1, r3
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 f805 	bl	800db34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db2a:	f000 f8d7 	bl	800dcdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db2e:	bf00      	nop
 800db30:	e7f0      	b.n	800db14 <prvTimerTask+0x8>
	...

0800db34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db3e:	f7fe fe5d 	bl	800c7fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db42:	f107 0308 	add.w	r3, r7, #8
 800db46:	4618      	mov	r0, r3
 800db48:	f000 f866 	bl	800dc18 <prvSampleTimeNow>
 800db4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d130      	bne.n	800dbb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d10a      	bne.n	800db70 <prvProcessTimerOrBlockTask+0x3c>
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d806      	bhi.n	800db70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db62:	f7fe fe59 	bl	800c818 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ff81 	bl	800da70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db6e:	e024      	b.n	800dbba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d008      	beq.n	800db88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db76:	4b13      	ldr	r3, [pc, #76]	@ (800dbc4 <prvProcessTimerOrBlockTask+0x90>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <prvProcessTimerOrBlockTask+0x50>
 800db80:	2301      	movs	r3, #1
 800db82:	e000      	b.n	800db86 <prvProcessTimerOrBlockTask+0x52>
 800db84:	2300      	movs	r3, #0
 800db86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db88:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc8 <prvProcessTimerOrBlockTask+0x94>)
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	4619      	mov	r1, r3
 800db96:	f7fe fb39 	bl	800c20c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db9a:	f7fe fe3d 	bl	800c818 <xTaskResumeAll>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10a      	bne.n	800dbba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dba4:	4b09      	ldr	r3, [pc, #36]	@ (800dbcc <prvProcessTimerOrBlockTask+0x98>)
 800dba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	f3bf 8f6f 	isb	sy
}
 800dbb4:	e001      	b.n	800dbba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbb6:	f7fe fe2f 	bl	800c818 <xTaskResumeAll>
}
 800dbba:	bf00      	nop
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	2000147c 	.word	0x2000147c
 800dbc8:	20001480 	.word	0x20001480
 800dbcc:	e000ed04 	.word	0xe000ed04

0800dbd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dbd8:	4b0e      	ldr	r3, [pc, #56]	@ (800dc14 <prvGetNextExpireTime+0x44>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d101      	bne.n	800dbe6 <prvGetNextExpireTime+0x16>
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	e000      	b.n	800dbe8 <prvGetNextExpireTime+0x18>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d105      	bne.n	800dc00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbf4:	4b07      	ldr	r3, [pc, #28]	@ (800dc14 <prvGetNextExpireTime+0x44>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	e001      	b.n	800dc04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc04:	68fb      	ldr	r3, [r7, #12]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20001478 	.word	0x20001478

0800dc18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc20:	f7fe fe98 	bl	800c954 <xTaskGetTickCount>
 800dc24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc26:	4b0b      	ldr	r3, [pc, #44]	@ (800dc54 <prvSampleTimeNow+0x3c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d205      	bcs.n	800dc3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc30:	f000 f93a 	bl	800dea8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	e002      	b.n	800dc42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc42:	4a04      	ldr	r2, [pc, #16]	@ (800dc54 <prvSampleTimeNow+0x3c>)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc48:	68fb      	ldr	r3, [r7, #12]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20001488 	.word	0x20001488

0800dc58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d812      	bhi.n	800dca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	1ad2      	subs	r2, r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d302      	bcc.n	800dc92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	617b      	str	r3, [r7, #20]
 800dc90:	e01b      	b.n	800dcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc92:	4b10      	ldr	r3, [pc, #64]	@ (800dcd4 <prvInsertTimerInActiveList+0x7c>)
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	f7fd f9a2 	bl	800afe6 <vListInsert>
 800dca2:	e012      	b.n	800dcca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d206      	bcs.n	800dcba <prvInsertTimerInActiveList+0x62>
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d302      	bcc.n	800dcba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	e007      	b.n	800dcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcba:	4b07      	ldr	r3, [pc, #28]	@ (800dcd8 <prvInsertTimerInActiveList+0x80>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	f7fd f98e 	bl	800afe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dcca:	697b      	ldr	r3, [r7, #20]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	2000147c 	.word	0x2000147c
 800dcd8:	20001478 	.word	0x20001478

0800dcdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08e      	sub	sp, #56	@ 0x38
 800dce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dce2:	e0ce      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	da19      	bge.n	800dd1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dcea:	1d3b      	adds	r3, r7, #4
 800dcec:	3304      	adds	r3, #4
 800dcee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10b      	bne.n	800dd0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	61fb      	str	r3, [r7, #28]
}
 800dd08:	bf00      	nop
 800dd0a:	bf00      	nop
 800dd0c:	e7fd      	b.n	800dd0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd14:	6850      	ldr	r0, [r2, #4]
 800dd16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd18:	6892      	ldr	r2, [r2, #8]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f2c0 80ae 	blt.w	800de82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d004      	beq.n	800dd3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd34:	3304      	adds	r3, #4
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd f98e 	bl	800b058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd3c:	463b      	mov	r3, r7
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff ff6a 	bl	800dc18 <prvSampleTimeNow>
 800dd44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b09      	cmp	r3, #9
 800dd4a:	f200 8097 	bhi.w	800de7c <prvProcessReceivedCommands+0x1a0>
 800dd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd54 <prvProcessReceivedCommands+0x78>)
 800dd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd54:	0800dd7d 	.word	0x0800dd7d
 800dd58:	0800dd7d 	.word	0x0800dd7d
 800dd5c:	0800dd7d 	.word	0x0800dd7d
 800dd60:	0800ddf3 	.word	0x0800ddf3
 800dd64:	0800de07 	.word	0x0800de07
 800dd68:	0800de53 	.word	0x0800de53
 800dd6c:	0800dd7d 	.word	0x0800dd7d
 800dd70:	0800dd7d 	.word	0x0800dd7d
 800dd74:	0800ddf3 	.word	0x0800ddf3
 800dd78:	0800de07 	.word	0x0800de07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd82:	f043 0301 	orr.w	r3, r3, #1
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	18d1      	adds	r1, r2, r3
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd9c:	f7ff ff5c 	bl	800dc58 <prvInsertTimerInActiveList>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d06c      	beq.n	800de80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d061      	beq.n	800de80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	441a      	add	r2, r3
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	2300      	movs	r3, #0
 800ddca:	2100      	movs	r1, #0
 800ddcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddce:	f7ff fe01 	bl	800d9d4 <xTimerGenericCommand>
 800ddd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d152      	bne.n	800de80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	61bb      	str	r3, [r7, #24]
}
 800ddec:	bf00      	nop
 800ddee:	bf00      	nop
 800ddf0:	e7fd      	b.n	800ddee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddf8:	f023 0301 	bic.w	r3, r3, #1
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de04:	e03d      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de0c:	f043 0301 	orr.w	r3, r3, #1
 800de10:	b2da      	uxtb	r2, r3
 800de12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de20:	699b      	ldr	r3, [r3, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10b      	bne.n	800de3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	617b      	str	r3, [r7, #20]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	699a      	ldr	r2, [r3, #24]
 800de42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de44:	18d1      	adds	r1, r2, r3
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de4c:	f7ff ff04 	bl	800dc58 <prvInsertTimerInActiveList>
					break;
 800de50:	e017      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de58:	f003 0302 	and.w	r3, r3, #2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d103      	bne.n	800de68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800de60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de62:	f000 fc0f 	bl	800e684 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de66:	e00c      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de6e:	f023 0301 	bic.w	r3, r3, #1
 800de72:	b2da      	uxtb	r2, r3
 800de74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de7a:	e002      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800de7c:	bf00      	nop
 800de7e:	e000      	b.n	800de82 <prvProcessReceivedCommands+0x1a6>
					break;
 800de80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de82:	4b08      	ldr	r3, [pc, #32]	@ (800dea4 <prvProcessReceivedCommands+0x1c8>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	1d39      	adds	r1, r7, #4
 800de88:	2200      	movs	r2, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd fdaa 	bl	800b9e4 <xQueueReceive>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	f47f af26 	bne.w	800dce4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	3730      	adds	r7, #48	@ 0x30
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	20001480 	.word	0x20001480

0800dea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b088      	sub	sp, #32
 800deac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800deae:	e049      	b.n	800df44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800deb0:	4b2e      	ldr	r3, [pc, #184]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deba:	4b2c      	ldr	r3, [pc, #176]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3304      	adds	r3, #4
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd f8c5 	bl	800b058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6a1b      	ldr	r3, [r3, #32]
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d02f      	beq.n	800df44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	4413      	add	r3, r2
 800deec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800deee:	68ba      	ldr	r2, [r7, #8]
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	429a      	cmp	r2, r3
 800def4:	d90e      	bls.n	800df14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df02:	4b1a      	ldr	r3, [pc, #104]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3304      	adds	r3, #4
 800df0a:	4619      	mov	r1, r3
 800df0c:	4610      	mov	r0, r2
 800df0e:	f7fd f86a 	bl	800afe6 <vListInsert>
 800df12:	e017      	b.n	800df44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df14:	2300      	movs	r3, #0
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	2300      	movs	r3, #0
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	2100      	movs	r1, #0
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7ff fd58 	bl	800d9d4 <xTimerGenericCommand>
 800df24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10b      	bne.n	800df44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	603b      	str	r3, [r7, #0]
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	e7fd      	b.n	800df40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df44:	4b09      	ldr	r3, [pc, #36]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1b0      	bne.n	800deb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df4e:	4b07      	ldr	r3, [pc, #28]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df54:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <prvSwitchTimerLists+0xc8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a04      	ldr	r2, [pc, #16]	@ (800df6c <prvSwitchTimerLists+0xc4>)
 800df5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df5c:	4a04      	ldr	r2, [pc, #16]	@ (800df70 <prvSwitchTimerLists+0xc8>)
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	6013      	str	r3, [r2, #0]
}
 800df62:	bf00      	nop
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20001478 	.word	0x20001478
 800df70:	2000147c 	.word	0x2000147c

0800df74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df7a:	f000 f98d 	bl	800e298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df7e:	4b15      	ldr	r3, [pc, #84]	@ (800dfd4 <prvCheckForValidListAndQueue+0x60>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d120      	bne.n	800dfc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df86:	4814      	ldr	r0, [pc, #80]	@ (800dfd8 <prvCheckForValidListAndQueue+0x64>)
 800df88:	f7fc ffdc 	bl	800af44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df8c:	4813      	ldr	r0, [pc, #76]	@ (800dfdc <prvCheckForValidListAndQueue+0x68>)
 800df8e:	f7fc ffd9 	bl	800af44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df92:	4b13      	ldr	r3, [pc, #76]	@ (800dfe0 <prvCheckForValidListAndQueue+0x6c>)
 800df94:	4a10      	ldr	r2, [pc, #64]	@ (800dfd8 <prvCheckForValidListAndQueue+0x64>)
 800df96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df98:	4b12      	ldr	r3, [pc, #72]	@ (800dfe4 <prvCheckForValidListAndQueue+0x70>)
 800df9a:	4a10      	ldr	r2, [pc, #64]	@ (800dfdc <prvCheckForValidListAndQueue+0x68>)
 800df9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df9e:	2300      	movs	r3, #0
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	4b11      	ldr	r3, [pc, #68]	@ (800dfe8 <prvCheckForValidListAndQueue+0x74>)
 800dfa4:	4a11      	ldr	r2, [pc, #68]	@ (800dfec <prvCheckForValidListAndQueue+0x78>)
 800dfa6:	2110      	movs	r1, #16
 800dfa8:	200a      	movs	r0, #10
 800dfaa:	f7fd f8e9 	bl	800b180 <xQueueGenericCreateStatic>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4a08      	ldr	r2, [pc, #32]	@ (800dfd4 <prvCheckForValidListAndQueue+0x60>)
 800dfb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfb4:	4b07      	ldr	r3, [pc, #28]	@ (800dfd4 <prvCheckForValidListAndQueue+0x60>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfbc:	4b05      	ldr	r3, [pc, #20]	@ (800dfd4 <prvCheckForValidListAndQueue+0x60>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	490b      	ldr	r1, [pc, #44]	@ (800dff0 <prvCheckForValidListAndQueue+0x7c>)
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe f8ce 	bl	800c164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfc8:	f000 f998 	bl	800e2fc <vPortExitCritical>
}
 800dfcc:	bf00      	nop
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20001480 	.word	0x20001480
 800dfd8:	20001450 	.word	0x20001450
 800dfdc:	20001464 	.word	0x20001464
 800dfe0:	20001478 	.word	0x20001478
 800dfe4:	2000147c 	.word	0x2000147c
 800dfe8:	2000152c 	.word	0x2000152c
 800dfec:	2000148c 	.word	0x2000148c
 800dff0:	080125d4 	.word	0x080125d4

0800dff4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10b      	bne.n	800e01e <pvTimerGetTimerID+0x2a>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	60fb      	str	r3, [r7, #12]
}
 800e018:	bf00      	nop
 800e01a:	bf00      	nop
 800e01c:	e7fd      	b.n	800e01a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e01e:	f000 f93b 	bl	800e298 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e028:	f000 f968 	bl	800e2fc <vPortExitCritical>

	return pvReturn;
 800e02c:	693b      	ldr	r3, [r7, #16]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
	...

0800e038 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3b04      	subs	r3, #4
 800e048:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3b04      	subs	r3, #4
 800e056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f023 0201 	bic.w	r2, r3, #1
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3b04      	subs	r3, #4
 800e066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e068:	4a0c      	ldr	r2, [pc, #48]	@ (800e09c <pxPortInitialiseStack+0x64>)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3b14      	subs	r3, #20
 800e072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3b04      	subs	r3, #4
 800e07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f06f 0202 	mvn.w	r2, #2
 800e086:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3b20      	subs	r3, #32
 800e08c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e08e:	68fb      	ldr	r3, [r7, #12]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	0800e0a1 	.word	0x0800e0a1

0800e0a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0aa:	4b13      	ldr	r3, [pc, #76]	@ (800e0f8 <prvTaskExitError+0x58>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0b2:	d00b      	beq.n	800e0cc <prvTaskExitError+0x2c>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	60fb      	str	r3, [r7, #12]
}
 800e0c6:	bf00      	nop
 800e0c8:	bf00      	nop
 800e0ca:	e7fd      	b.n	800e0c8 <prvTaskExitError+0x28>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	60bb      	str	r3, [r7, #8]
}
 800e0de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0e0:	bf00      	nop
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0fc      	beq.n	800e0e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0e8:	bf00      	nop
 800e0ea:	bf00      	nop
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	20000010 	.word	0x20000010
 800e0fc:	00000000 	.word	0x00000000

0800e100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e100:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <pxCurrentTCBConst2>)
 800e102:	6819      	ldr	r1, [r3, #0]
 800e104:	6808      	ldr	r0, [r1, #0]
 800e106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10a:	f380 8809 	msr	PSP, r0
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f04f 0000 	mov.w	r0, #0
 800e116:	f380 8811 	msr	BASEPRI, r0
 800e11a:	4770      	bx	lr
 800e11c:	f3af 8000 	nop.w

0800e120 <pxCurrentTCBConst2>:
 800e120:	20000f50 	.word	0x20000f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop

0800e128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e128:	4808      	ldr	r0, [pc, #32]	@ (800e14c <prvPortStartFirstTask+0x24>)
 800e12a:	6800      	ldr	r0, [r0, #0]
 800e12c:	6800      	ldr	r0, [r0, #0]
 800e12e:	f380 8808 	msr	MSP, r0
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f380 8814 	msr	CONTROL, r0
 800e13a:	b662      	cpsie	i
 800e13c:	b661      	cpsie	f
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	df00      	svc	0
 800e148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e14a:	bf00      	nop
 800e14c:	e000ed08 	.word	0xe000ed08

0800e150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e156:	4b47      	ldr	r3, [pc, #284]	@ (800e274 <xPortStartScheduler+0x124>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a47      	ldr	r2, [pc, #284]	@ (800e278 <xPortStartScheduler+0x128>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d10b      	bne.n	800e178 <xPortStartScheduler+0x28>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	613b      	str	r3, [r7, #16]
}
 800e172:	bf00      	nop
 800e174:	bf00      	nop
 800e176:	e7fd      	b.n	800e174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e178:	4b3e      	ldr	r3, [pc, #248]	@ (800e274 <xPortStartScheduler+0x124>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a3f      	ldr	r2, [pc, #252]	@ (800e27c <xPortStartScheduler+0x12c>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d10b      	bne.n	800e19a <xPortStartScheduler+0x4a>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	60fb      	str	r3, [r7, #12]
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop
 800e198:	e7fd      	b.n	800e196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e19a:	4b39      	ldr	r3, [pc, #228]	@ (800e280 <xPortStartScheduler+0x130>)
 800e19c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	22ff      	movs	r2, #255	@ 0xff
 800e1aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	4b31      	ldr	r3, [pc, #196]	@ (800e284 <xPortStartScheduler+0x134>)
 800e1c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1c2:	4b31      	ldr	r3, [pc, #196]	@ (800e288 <xPortStartScheduler+0x138>)
 800e1c4:	2207      	movs	r2, #7
 800e1c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1c8:	e009      	b.n	800e1de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e288 <xPortStartScheduler+0x138>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	4a2d      	ldr	r2, [pc, #180]	@ (800e288 <xPortStartScheduler+0x138>)
 800e1d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1de:	78fb      	ldrb	r3, [r7, #3]
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1e6:	2b80      	cmp	r3, #128	@ 0x80
 800e1e8:	d0ef      	beq.n	800e1ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1ea:	4b27      	ldr	r3, [pc, #156]	@ (800e288 <xPortStartScheduler+0x138>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f1c3 0307 	rsb	r3, r3, #7
 800e1f2:	2b04      	cmp	r3, #4
 800e1f4:	d00b      	beq.n	800e20e <xPortStartScheduler+0xbe>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	60bb      	str	r3, [r7, #8]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e20e:	4b1e      	ldr	r3, [pc, #120]	@ (800e288 <xPortStartScheduler+0x138>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	021b      	lsls	r3, r3, #8
 800e214:	4a1c      	ldr	r2, [pc, #112]	@ (800e288 <xPortStartScheduler+0x138>)
 800e216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e218:	4b1b      	ldr	r3, [pc, #108]	@ (800e288 <xPortStartScheduler+0x138>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e220:	4a19      	ldr	r2, [pc, #100]	@ (800e288 <xPortStartScheduler+0x138>)
 800e222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	b2da      	uxtb	r2, r3
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e22c:	4b17      	ldr	r3, [pc, #92]	@ (800e28c <xPortStartScheduler+0x13c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a16      	ldr	r2, [pc, #88]	@ (800e28c <xPortStartScheduler+0x13c>)
 800e232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e238:	4b14      	ldr	r3, [pc, #80]	@ (800e28c <xPortStartScheduler+0x13c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a13      	ldr	r2, [pc, #76]	@ (800e28c <xPortStartScheduler+0x13c>)
 800e23e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e244:	f000 f8da 	bl	800e3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e248:	4b11      	ldr	r3, [pc, #68]	@ (800e290 <xPortStartScheduler+0x140>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e24e:	f000 f8f9 	bl	800e444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e252:	4b10      	ldr	r3, [pc, #64]	@ (800e294 <xPortStartScheduler+0x144>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a0f      	ldr	r2, [pc, #60]	@ (800e294 <xPortStartScheduler+0x144>)
 800e258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e25c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e25e:	f7ff ff63 	bl	800e128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e262:	f7fe fc53 	bl	800cb0c <vTaskSwitchContext>
	prvTaskExitError();
 800e266:	f7ff ff1b 	bl	800e0a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	e000ed00 	.word	0xe000ed00
 800e278:	410fc271 	.word	0x410fc271
 800e27c:	410fc270 	.word	0x410fc270
 800e280:	e000e400 	.word	0xe000e400
 800e284:	2000157c 	.word	0x2000157c
 800e288:	20001580 	.word	0x20001580
 800e28c:	e000ed20 	.word	0xe000ed20
 800e290:	20000010 	.word	0x20000010
 800e294:	e000ef34 	.word	0xe000ef34

0800e298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	607b      	str	r3, [r7, #4]
}
 800e2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2b2:	4b10      	ldr	r3, [pc, #64]	@ (800e2f4 <vPortEnterCritical+0x5c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	4a0e      	ldr	r2, [pc, #56]	@ (800e2f4 <vPortEnterCritical+0x5c>)
 800e2ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f4 <vPortEnterCritical+0x5c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d110      	bne.n	800e2e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e2f8 <vPortEnterCritical+0x60>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	603b      	str	r3, [r7, #0]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <vPortEnterCritical+0x4a>
	}
}
 800e2e6:	bf00      	nop
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	20000010 	.word	0x20000010
 800e2f8:	e000ed04 	.word	0xe000ed04

0800e2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e302:	4b12      	ldr	r3, [pc, #72]	@ (800e34c <vPortExitCritical+0x50>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10b      	bne.n	800e322 <vPortExitCritical+0x26>
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	607b      	str	r3, [r7, #4]
}
 800e31c:	bf00      	nop
 800e31e:	bf00      	nop
 800e320:	e7fd      	b.n	800e31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e322:	4b0a      	ldr	r3, [pc, #40]	@ (800e34c <vPortExitCritical+0x50>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3b01      	subs	r3, #1
 800e328:	4a08      	ldr	r2, [pc, #32]	@ (800e34c <vPortExitCritical+0x50>)
 800e32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e32c:	4b07      	ldr	r3, [pc, #28]	@ (800e34c <vPortExitCritical+0x50>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d105      	bne.n	800e340 <vPortExitCritical+0x44>
 800e334:	2300      	movs	r3, #0
 800e336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f383 8811 	msr	BASEPRI, r3
}
 800e33e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	20000010 	.word	0x20000010

0800e350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e350:	f3ef 8009 	mrs	r0, PSP
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	4b15      	ldr	r3, [pc, #84]	@ (800e3b0 <pxCurrentTCBConst>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	f01e 0f10 	tst.w	lr, #16
 800e360:	bf08      	it	eq
 800e362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36a:	6010      	str	r0, [r2, #0]
 800e36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e374:	f380 8811 	msr	BASEPRI, r0
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f7fe fbc4 	bl	800cb0c <vTaskSwitchContext>
 800e384:	f04f 0000 	mov.w	r0, #0
 800e388:	f380 8811 	msr	BASEPRI, r0
 800e38c:	bc09      	pop	{r0, r3}
 800e38e:	6819      	ldr	r1, [r3, #0]
 800e390:	6808      	ldr	r0, [r1, #0]
 800e392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e396:	f01e 0f10 	tst.w	lr, #16
 800e39a:	bf08      	it	eq
 800e39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3a0:	f380 8809 	msr	PSP, r0
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	f3af 8000 	nop.w

0800e3b0 <pxCurrentTCBConst>:
 800e3b0:	20000f50 	.word	0x20000f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop

0800e3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	607b      	str	r3, [r7, #4]
}
 800e3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3d2:	f7fe fae1 	bl	800c998 <xTaskIncrementTick>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3dc:	4b06      	ldr	r3, [pc, #24]	@ (800e3f8 <xPortSysTickHandler+0x40>)
 800e3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f383 8811 	msr	BASEPRI, r3
}
 800e3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e400:	4b0b      	ldr	r3, [pc, #44]	@ (800e430 <vPortSetupTimerInterrupt+0x34>)
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e406:	4b0b      	ldr	r3, [pc, #44]	@ (800e434 <vPortSetupTimerInterrupt+0x38>)
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e40c:	4b0a      	ldr	r3, [pc, #40]	@ (800e438 <vPortSetupTimerInterrupt+0x3c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a0a      	ldr	r2, [pc, #40]	@ (800e43c <vPortSetupTimerInterrupt+0x40>)
 800e412:	fba2 2303 	umull	r2, r3, r2, r3
 800e416:	099b      	lsrs	r3, r3, #6
 800e418:	4a09      	ldr	r2, [pc, #36]	@ (800e440 <vPortSetupTimerInterrupt+0x44>)
 800e41a:	3b01      	subs	r3, #1
 800e41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e41e:	4b04      	ldr	r3, [pc, #16]	@ (800e430 <vPortSetupTimerInterrupt+0x34>)
 800e420:	2207      	movs	r2, #7
 800e422:	601a      	str	r2, [r3, #0]
}
 800e424:	bf00      	nop
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	e000e010 	.word	0xe000e010
 800e434:	e000e018 	.word	0xe000e018
 800e438:	20000004 	.word	0x20000004
 800e43c:	10624dd3 	.word	0x10624dd3
 800e440:	e000e014 	.word	0xe000e014

0800e444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e454 <vPortEnableVFP+0x10>
 800e448:	6801      	ldr	r1, [r0, #0]
 800e44a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e44e:	6001      	str	r1, [r0, #0]
 800e450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e452:	bf00      	nop
 800e454:	e000ed88 	.word	0xe000ed88

0800e458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e45e:	f3ef 8305 	mrs	r3, IPSR
 800e462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b0f      	cmp	r3, #15
 800e468:	d915      	bls.n	800e496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e46a:	4a18      	ldr	r2, [pc, #96]	@ (800e4cc <vPortValidateInterruptPriority+0x74>)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4413      	add	r3, r2
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e474:	4b16      	ldr	r3, [pc, #88]	@ (800e4d0 <vPortValidateInterruptPriority+0x78>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	7afa      	ldrb	r2, [r7, #11]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d20b      	bcs.n	800e496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	607b      	str	r3, [r7, #4]
}
 800e490:	bf00      	nop
 800e492:	bf00      	nop
 800e494:	e7fd      	b.n	800e492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e496:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d4 <vPortValidateInterruptPriority+0x7c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e49e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d8 <vPortValidateInterruptPriority+0x80>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d90b      	bls.n	800e4be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	603b      	str	r3, [r7, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <vPortValidateInterruptPriority+0x62>
	}
 800e4be:	bf00      	nop
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	e000e3f0 	.word	0xe000e3f0
 800e4d0:	2000157c 	.word	0x2000157c
 800e4d4:	e000ed0c 	.word	0xe000ed0c
 800e4d8:	20001580 	.word	0x20001580

0800e4dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08a      	sub	sp, #40	@ 0x28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4e8:	f7fe f988 	bl	800c7fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4ec:	4b5f      	ldr	r3, [pc, #380]	@ (800e66c <pvPortMalloc+0x190>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4f4:	f000 f92a 	bl	800e74c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4f8:	4b5d      	ldr	r3, [pc, #372]	@ (800e670 <pvPortMalloc+0x194>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4013      	ands	r3, r2
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 8095 	bne.w	800e630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01e      	beq.n	800e54a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e50c:	2208      	movs	r2, #8
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4413      	add	r3, r2
 800e512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d015      	beq.n	800e54a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f023 0307 	bic.w	r3, r3, #7
 800e524:	3308      	adds	r3, #8
 800e526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f003 0307 	and.w	r3, r3, #7
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00b      	beq.n	800e54a <pvPortMalloc+0x6e>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	617b      	str	r3, [r7, #20]
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop
 800e548:	e7fd      	b.n	800e546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d06f      	beq.n	800e630 <pvPortMalloc+0x154>
 800e550:	4b48      	ldr	r3, [pc, #288]	@ (800e674 <pvPortMalloc+0x198>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	429a      	cmp	r2, r3
 800e558:	d86a      	bhi.n	800e630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e55a:	4b47      	ldr	r3, [pc, #284]	@ (800e678 <pvPortMalloc+0x19c>)
 800e55c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e55e:	4b46      	ldr	r3, [pc, #280]	@ (800e678 <pvPortMalloc+0x19c>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e564:	e004      	b.n	800e570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	429a      	cmp	r2, r3
 800e578:	d903      	bls.n	800e582 <pvPortMalloc+0xa6>
 800e57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1f1      	bne.n	800e566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e582:	4b3a      	ldr	r3, [pc, #232]	@ (800e66c <pvPortMalloc+0x190>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e588:	429a      	cmp	r2, r3
 800e58a:	d051      	beq.n	800e630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e58c:	6a3b      	ldr	r3, [r7, #32]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2208      	movs	r2, #8
 800e592:	4413      	add	r3, r2
 800e594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	6a3b      	ldr	r3, [r7, #32]
 800e59c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	1ad2      	subs	r2, r2, r3
 800e5a6:	2308      	movs	r3, #8
 800e5a8:	005b      	lsls	r3, r3, #1
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d920      	bls.n	800e5f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	f003 0307 	and.w	r3, r3, #7
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00b      	beq.n	800e5d8 <pvPortMalloc+0xfc>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
}
 800e5d2:	bf00      	nop
 800e5d4:	bf00      	nop
 800e5d6:	e7fd      	b.n	800e5d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	1ad2      	subs	r2, r2, r3
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5ea:	69b8      	ldr	r0, [r7, #24]
 800e5ec:	f000 f910 	bl	800e810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5f0:	4b20      	ldr	r3, [pc, #128]	@ (800e674 <pvPortMalloc+0x198>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	4a1e      	ldr	r2, [pc, #120]	@ (800e674 <pvPortMalloc+0x198>)
 800e5fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <pvPortMalloc+0x198>)
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	4b1e      	ldr	r3, [pc, #120]	@ (800e67c <pvPortMalloc+0x1a0>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d203      	bcs.n	800e612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e60a:	4b1a      	ldr	r3, [pc, #104]	@ (800e674 <pvPortMalloc+0x198>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1b      	ldr	r2, [pc, #108]	@ (800e67c <pvPortMalloc+0x1a0>)
 800e610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e614:	685a      	ldr	r2, [r3, #4]
 800e616:	4b16      	ldr	r3, [pc, #88]	@ (800e670 <pvPortMalloc+0x194>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	431a      	orrs	r2, r3
 800e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e626:	4b16      	ldr	r3, [pc, #88]	@ (800e680 <pvPortMalloc+0x1a4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3301      	adds	r3, #1
 800e62c:	4a14      	ldr	r2, [pc, #80]	@ (800e680 <pvPortMalloc+0x1a4>)
 800e62e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e630:	f7fe f8f2 	bl	800c818 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e63a:	f7f3 fc96 	bl	8001f6a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	f003 0307 	and.w	r3, r3, #7
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <pvPortMalloc+0x184>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	60fb      	str	r3, [r7, #12]
}
 800e65a:	bf00      	nop
 800e65c:	bf00      	nop
 800e65e:	e7fd      	b.n	800e65c <pvPortMalloc+0x180>
	return pvReturn;
 800e660:	69fb      	ldr	r3, [r7, #28]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3728      	adds	r7, #40	@ 0x28
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	2000928c 	.word	0x2000928c
 800e670:	200092a0 	.word	0x200092a0
 800e674:	20009290 	.word	0x20009290
 800e678:	20009284 	.word	0x20009284
 800e67c:	20009294 	.word	0x20009294
 800e680:	20009298 	.word	0x20009298

0800e684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d04f      	beq.n	800e736 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e696:	2308      	movs	r3, #8
 800e698:	425b      	negs	r3, r3
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	4413      	add	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	4b25      	ldr	r3, [pc, #148]	@ (800e740 <vPortFree+0xbc>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10b      	bne.n	800e6ca <vPortFree+0x46>
	__asm volatile
 800e6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	60fb      	str	r3, [r7, #12]
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	e7fd      	b.n	800e6c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <vPortFree+0x66>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	60bb      	str	r3, [r7, #8]
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop
 800e6e8:	e7fd      	b.n	800e6e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	4b14      	ldr	r3, [pc, #80]	@ (800e740 <vPortFree+0xbc>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4013      	ands	r3, r2
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01e      	beq.n	800e736 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d11a      	bne.n	800e736 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	4b0e      	ldr	r3, [pc, #56]	@ (800e740 <vPortFree+0xbc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	43db      	mvns	r3, r3
 800e70a:	401a      	ands	r2, r3
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e710:	f7fe f874 	bl	800c7fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	685a      	ldr	r2, [r3, #4]
 800e718:	4b0a      	ldr	r3, [pc, #40]	@ (800e744 <vPortFree+0xc0>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4413      	add	r3, r2
 800e71e:	4a09      	ldr	r2, [pc, #36]	@ (800e744 <vPortFree+0xc0>)
 800e720:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e722:	6938      	ldr	r0, [r7, #16]
 800e724:	f000 f874 	bl	800e810 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e728:	4b07      	ldr	r3, [pc, #28]	@ (800e748 <vPortFree+0xc4>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3301      	adds	r3, #1
 800e72e:	4a06      	ldr	r2, [pc, #24]	@ (800e748 <vPortFree+0xc4>)
 800e730:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e732:	f7fe f871 	bl	800c818 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e736:	bf00      	nop
 800e738:	3718      	adds	r7, #24
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	200092a0 	.word	0x200092a0
 800e744:	20009290 	.word	0x20009290
 800e748:	2000929c 	.word	0x2000929c

0800e74c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e752:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e758:	4b27      	ldr	r3, [pc, #156]	@ (800e7f8 <prvHeapInit+0xac>)
 800e75a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00c      	beq.n	800e780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3307      	adds	r3, #7
 800e76a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f023 0307 	bic.w	r3, r3, #7
 800e772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f8 <prvHeapInit+0xac>)
 800e77c:	4413      	add	r3, r2
 800e77e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e784:	4a1d      	ldr	r2, [pc, #116]	@ (800e7fc <prvHeapInit+0xb0>)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e78a:	4b1c      	ldr	r3, [pc, #112]	@ (800e7fc <prvHeapInit+0xb0>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	4413      	add	r3, r2
 800e796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e798:	2208      	movs	r2, #8
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	1a9b      	subs	r3, r3, r2
 800e79e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f023 0307 	bic.w	r3, r3, #7
 800e7a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4a15      	ldr	r2, [pc, #84]	@ (800e800 <prvHeapInit+0xb4>)
 800e7ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7ae:	4b14      	ldr	r3, [pc, #80]	@ (800e800 <prvHeapInit+0xb4>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7b6:	4b12      	ldr	r3, [pc, #72]	@ (800e800 <prvHeapInit+0xb4>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	1ad2      	subs	r2, r2, r3
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e800 <prvHeapInit+0xb4>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	4a0a      	ldr	r2, [pc, #40]	@ (800e804 <prvHeapInit+0xb8>)
 800e7da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4a09      	ldr	r2, [pc, #36]	@ (800e808 <prvHeapInit+0xbc>)
 800e7e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7e4:	4b09      	ldr	r3, [pc, #36]	@ (800e80c <prvHeapInit+0xc0>)
 800e7e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e7ea:	601a      	str	r2, [r3, #0]
}
 800e7ec:	bf00      	nop
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	20001584 	.word	0x20001584
 800e7fc:	20009284 	.word	0x20009284
 800e800:	2000928c 	.word	0x2000928c
 800e804:	20009294 	.word	0x20009294
 800e808:	20009290 	.word	0x20009290
 800e80c:	200092a0 	.word	0x200092a0

0800e810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e818:	4b28      	ldr	r3, [pc, #160]	@ (800e8bc <prvInsertBlockIntoFreeList+0xac>)
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	e002      	b.n	800e824 <prvInsertBlockIntoFreeList+0x14>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d8f7      	bhi.n	800e81e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	4413      	add	r3, r2
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d108      	bne.n	800e852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	441a      	add	r2, r3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	441a      	add	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	429a      	cmp	r2, r3
 800e864:	d118      	bne.n	800e898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	4b15      	ldr	r3, [pc, #84]	@ (800e8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d00d      	beq.n	800e88e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	441a      	add	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	e008      	b.n	800e8a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e88e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	e003      	b.n	800e8a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d002      	beq.n	800e8ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8ae:	bf00      	nop
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	20009284 	.word	0x20009284
 800e8c0:	2000928c 	.word	0x2000928c

0800e8c4 <arm_rfft_fast_init_f32>:
 800e8c4:	084b      	lsrs	r3, r1, #1
 800e8c6:	2b80      	cmp	r3, #128	@ 0x80
 800e8c8:	b410      	push	{r4}
 800e8ca:	8201      	strh	r1, [r0, #16]
 800e8cc:	8003      	strh	r3, [r0, #0]
 800e8ce:	d047      	beq.n	800e960 <arm_rfft_fast_init_f32+0x9c>
 800e8d0:	d917      	bls.n	800e902 <arm_rfft_fast_init_f32+0x3e>
 800e8d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8d6:	d03d      	beq.n	800e954 <arm_rfft_fast_init_f32+0x90>
 800e8d8:	d929      	bls.n	800e92e <arm_rfft_fast_init_f32+0x6a>
 800e8da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8de:	d020      	beq.n	800e922 <arm_rfft_fast_init_f32+0x5e>
 800e8e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e8e4:	d113      	bne.n	800e90e <arm_rfft_fast_init_f32+0x4a>
 800e8e6:	4921      	ldr	r1, [pc, #132]	@ (800e96c <arm_rfft_fast_init_f32+0xa8>)
 800e8e8:	4a21      	ldr	r2, [pc, #132]	@ (800e970 <arm_rfft_fast_init_f32+0xac>)
 800e8ea:	4b22      	ldr	r3, [pc, #136]	@ (800e974 <arm_rfft_fast_init_f32+0xb0>)
 800e8ec:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800e8f0:	8184      	strh	r4, [r0, #12]
 800e8f2:	6081      	str	r1, [r0, #8]
 800e8f4:	6042      	str	r2, [r0, #4]
 800e8f6:	6143      	str	r3, [r0, #20]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	b240      	sxtb	r0, r0
 800e8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	2b20      	cmp	r3, #32
 800e904:	d01c      	beq.n	800e940 <arm_rfft_fast_init_f32+0x7c>
 800e906:	2b40      	cmp	r3, #64	@ 0x40
 800e908:	d006      	beq.n	800e918 <arm_rfft_fast_init_f32+0x54>
 800e90a:	2b10      	cmp	r3, #16
 800e90c:	d01d      	beq.n	800e94a <arm_rfft_fast_init_f32+0x86>
 800e90e:	20ff      	movs	r0, #255	@ 0xff
 800e910:	b240      	sxtb	r0, r0
 800e912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	2438      	movs	r4, #56	@ 0x38
 800e91a:	4917      	ldr	r1, [pc, #92]	@ (800e978 <arm_rfft_fast_init_f32+0xb4>)
 800e91c:	4a17      	ldr	r2, [pc, #92]	@ (800e97c <arm_rfft_fast_init_f32+0xb8>)
 800e91e:	4b18      	ldr	r3, [pc, #96]	@ (800e980 <arm_rfft_fast_init_f32+0xbc>)
 800e920:	e7e6      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e922:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800e926:	4917      	ldr	r1, [pc, #92]	@ (800e984 <arm_rfft_fast_init_f32+0xc0>)
 800e928:	4a17      	ldr	r2, [pc, #92]	@ (800e988 <arm_rfft_fast_init_f32+0xc4>)
 800e92a:	4b18      	ldr	r3, [pc, #96]	@ (800e98c <arm_rfft_fast_init_f32+0xc8>)
 800e92c:	e7e0      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e932:	d1ec      	bne.n	800e90e <arm_rfft_fast_init_f32+0x4a>
 800e934:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800e938:	4915      	ldr	r1, [pc, #84]	@ (800e990 <arm_rfft_fast_init_f32+0xcc>)
 800e93a:	4a16      	ldr	r2, [pc, #88]	@ (800e994 <arm_rfft_fast_init_f32+0xd0>)
 800e93c:	4b16      	ldr	r3, [pc, #88]	@ (800e998 <arm_rfft_fast_init_f32+0xd4>)
 800e93e:	e7d7      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e940:	2430      	movs	r4, #48	@ 0x30
 800e942:	4916      	ldr	r1, [pc, #88]	@ (800e99c <arm_rfft_fast_init_f32+0xd8>)
 800e944:	4a16      	ldr	r2, [pc, #88]	@ (800e9a0 <arm_rfft_fast_init_f32+0xdc>)
 800e946:	4b17      	ldr	r3, [pc, #92]	@ (800e9a4 <arm_rfft_fast_init_f32+0xe0>)
 800e948:	e7d2      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e94a:	2414      	movs	r4, #20
 800e94c:	4916      	ldr	r1, [pc, #88]	@ (800e9a8 <arm_rfft_fast_init_f32+0xe4>)
 800e94e:	4a17      	ldr	r2, [pc, #92]	@ (800e9ac <arm_rfft_fast_init_f32+0xe8>)
 800e950:	4b17      	ldr	r3, [pc, #92]	@ (800e9b0 <arm_rfft_fast_init_f32+0xec>)
 800e952:	e7cd      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e954:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800e958:	4916      	ldr	r1, [pc, #88]	@ (800e9b4 <arm_rfft_fast_init_f32+0xf0>)
 800e95a:	4a17      	ldr	r2, [pc, #92]	@ (800e9b8 <arm_rfft_fast_init_f32+0xf4>)
 800e95c:	4b17      	ldr	r3, [pc, #92]	@ (800e9bc <arm_rfft_fast_init_f32+0xf8>)
 800e95e:	e7c7      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e960:	24d0      	movs	r4, #208	@ 0xd0
 800e962:	4917      	ldr	r1, [pc, #92]	@ (800e9c0 <arm_rfft_fast_init_f32+0xfc>)
 800e964:	4a17      	ldr	r2, [pc, #92]	@ (800e9c4 <arm_rfft_fast_init_f32+0x100>)
 800e966:	4b18      	ldr	r3, [pc, #96]	@ (800e9c8 <arm_rfft_fast_init_f32+0x104>)
 800e968:	e7c2      	b.n	800e8f0 <arm_rfft_fast_init_f32+0x2c>
 800e96a:	bf00      	nop
 800e96c:	08021770 	.word	0x08021770
 800e970:	08012968 	.word	0x08012968
 800e974:	08018ad8 	.word	0x08018ad8
 800e978:	08016a68 	.word	0x08016a68
 800e97c:	08023530 	.word	0x08023530
 800e980:	08025a20 	.word	0x08025a20
 800e984:	0801f458 	.word	0x0801f458
 800e988:	0801d358 	.word	0x0801d358
 800e98c:	08016ad8 	.word	0x08016ad8
 800e990:	080256b0 	.word	0x080256b0
 800e994:	0801cad8 	.word	0x0801cad8
 800e998:	08023730 	.word	0x08023730
 800e99c:	08020310 	.word	0x08020310
 800e9a0:	0801f358 	.word	0x0801f358
 800e9a4:	08016968 	.word	0x08016968
 800e9a8:	08020268 	.word	0x08020268
 800e9ac:	0801d2d8 	.word	0x0801d2d8
 800e9b0:	08020290 	.word	0x08020290
 800e9b4:	08023f30 	.word	0x08023f30
 800e9b8:	08020770 	.word	0x08020770
 800e9bc:	080242b0 	.word	0x080242b0
 800e9c0:	08025c20 	.word	0x08025c20
 800e9c4:	08020370 	.word	0x08020370
 800e9c8:	080252b0 	.word	0x080252b0

0800e9cc <arm_rfft_fast_f32>:
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	8a06      	ldrh	r6, [r0, #16]
 800e9d2:	0876      	lsrs	r6, r6, #1
 800e9d4:	4607      	mov	r7, r0
 800e9d6:	4615      	mov	r5, r2
 800e9d8:	8006      	strh	r6, [r0, #0]
 800e9da:	460c      	mov	r4, r1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d15c      	bne.n	800ea9a <arm_rfft_fast_f32+0xce>
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	f000 fbe6 	bl	800f1b4 <arm_cfft_f32>
 800e9e8:	edd4 7a00 	vldr	s15, [r4]
 800e9ec:	ed94 7a01 	vldr	s14, [r4, #4]
 800e9f0:	883e      	ldrh	r6, [r7, #0]
 800e9f2:	6978      	ldr	r0, [r7, #20]
 800e9f4:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e9f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e9fc:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ea00:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ea04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea08:	3e01      	subs	r6, #1
 800ea0a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800ea0e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ea12:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ea16:	ed85 7a00 	vstr	s14, [r5]
 800ea1a:	edc5 7a01 	vstr	s15, [r5, #4]
 800ea1e:	3010      	adds	r0, #16
 800ea20:	f105 0210 	add.w	r2, r5, #16
 800ea24:	3b08      	subs	r3, #8
 800ea26:	f104 0110 	add.w	r1, r4, #16
 800ea2a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800ea2e:	ed93 5a02 	vldr	s10, [r3, #8]
 800ea32:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ea36:	ed10 6a02 	vldr	s12, [r0, #-8]
 800ea3a:	edd3 5a03 	vldr	s11, [r3, #12]
 800ea3e:	ed50 6a01 	vldr	s13, [r0, #-4]
 800ea42:	ee75 7a64 	vsub.f32	s15, s10, s9
 800ea46:	ee35 4a87 	vadd.f32	s8, s11, s14
 800ea4a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ea4e:	ee77 5a65 	vsub.f32	s11, s14, s11
 800ea52:	ee66 4a27 	vmul.f32	s9, s12, s15
 800ea56:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800ea5a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800ea5e:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ea62:	ee66 6a84 	vmul.f32	s13, s13, s8
 800ea66:	ee77 7a25 	vadd.f32	s15, s14, s11
 800ea6a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ea6e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ea72:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ea76:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ea7a:	3e01      	subs	r6, #1
 800ea7c:	ed42 6a02 	vstr	s13, [r2, #-8]
 800ea80:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ea84:	f1a3 0308 	sub.w	r3, r3, #8
 800ea88:	f101 0108 	add.w	r1, r1, #8
 800ea8c:	f100 0008 	add.w	r0, r0, #8
 800ea90:	f102 0208 	add.w	r2, r2, #8
 800ea94:	d1c9      	bne.n	800ea2a <arm_rfft_fast_f32+0x5e>
 800ea96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9a:	edd1 7a00 	vldr	s15, [r1]
 800ea9e:	edd1 6a01 	vldr	s13, [r1, #4]
 800eaa2:	6941      	ldr	r1, [r0, #20]
 800eaa4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800eaa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eaac:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800eab0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800eab4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800eab8:	3e01      	subs	r6, #1
 800eaba:	ed82 7a00 	vstr	s14, [r2]
 800eabe:	edc2 7a01 	vstr	s15, [r2, #4]
 800eac2:	00f0      	lsls	r0, r6, #3
 800eac4:	b3ee      	cbz	r6, 800eb42 <arm_rfft_fast_f32+0x176>
 800eac6:	3808      	subs	r0, #8
 800eac8:	f101 0e10 	add.w	lr, r1, #16
 800eacc:	4420      	add	r0, r4
 800eace:	f104 0110 	add.w	r1, r4, #16
 800ead2:	f102 0c10 	add.w	ip, r2, #16
 800ead6:	ed90 7a02 	vldr	s14, [r0, #8]
 800eada:	ed51 6a02 	vldr	s13, [r1, #-8]
 800eade:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800eae2:	ed90 4a03 	vldr	s8, [r0, #12]
 800eae6:	ed11 5a01 	vldr	s10, [r1, #-4]
 800eaea:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800eaee:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800eaf2:	ee74 4a05 	vadd.f32	s9, s8, s10
 800eaf6:	ee26 3a27 	vmul.f32	s6, s12, s15
 800eafa:	ee77 6a26 	vadd.f32	s13, s14, s13
 800eafe:	ee35 5a44 	vsub.f32	s10, s10, s8
 800eb02:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800eb06:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800eb0a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800eb0e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eb12:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800eb16:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eb1a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800eb1e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800eb22:	ee27 7a23 	vmul.f32	s14, s14, s7
 800eb26:	3e01      	subs	r6, #1
 800eb28:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800eb2c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800eb30:	f1a0 0008 	sub.w	r0, r0, #8
 800eb34:	f101 0108 	add.w	r1, r1, #8
 800eb38:	f10e 0e08 	add.w	lr, lr, #8
 800eb3c:	f10c 0c08 	add.w	ip, ip, #8
 800eb40:	d1c9      	bne.n	800ead6 <arm_rfft_fast_f32+0x10a>
 800eb42:	4638      	mov	r0, r7
 800eb44:	4629      	mov	r1, r5
 800eb46:	461a      	mov	r2, r3
 800eb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	f000 bb31 	b.w	800f1b4 <arm_cfft_f32>
 800eb52:	bf00      	nop

0800eb54 <arm_cfft_radix8by2_f32>:
 800eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb58:	ed2d 8b08 	vpush	{d8-d11}
 800eb5c:	f8b0 e000 	ldrh.w	lr, [r0]
 800eb60:	6842      	ldr	r2, [r0, #4]
 800eb62:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800eb66:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800eb6a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800eb6e:	4607      	mov	r7, r0
 800eb70:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800eb74:	f000 80af 	beq.w	800ecd6 <arm_cfft_radix8by2_f32+0x182>
 800eb78:	3310      	adds	r3, #16
 800eb7a:	18ce      	adds	r6, r1, r3
 800eb7c:	3210      	adds	r2, #16
 800eb7e:	4443      	add	r3, r8
 800eb80:	f101 0510 	add.w	r5, r1, #16
 800eb84:	f108 0410 	add.w	r4, r8, #16
 800eb88:	ed54 1a04 	vldr	s3, [r4, #-16]
 800eb8c:	ed13 4a04 	vldr	s8, [r3, #-16]
 800eb90:	ed53 3a03 	vldr	s7, [r3, #-12]
 800eb94:	ed53 5a02 	vldr	s11, [r3, #-8]
 800eb98:	ed13 5a01 	vldr	s10, [r3, #-4]
 800eb9c:	ed54 6a03 	vldr	s13, [r4, #-12]
 800eba0:	ed14 0a02 	vldr	s0, [r4, #-8]
 800eba4:	ed16 2a04 	vldr	s4, [r6, #-16]
 800eba8:	ed56 2a03 	vldr	s5, [r6, #-12]
 800ebac:	ed15 6a03 	vldr	s12, [r5, #-12]
 800ebb0:	ed15 7a01 	vldr	s14, [r5, #-4]
 800ebb4:	ed15 3a04 	vldr	s6, [r5, #-16]
 800ebb8:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ebbc:	ed56 0a02 	vldr	s1, [r6, #-8]
 800ebc0:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ebc4:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ebc8:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ebcc:	ee36 ba26 	vadd.f32	s22, s12, s13
 800ebd0:	ee37 aa27 	vadd.f32	s20, s14, s15
 800ebd4:	ee72 9a04 	vadd.f32	s19, s4, s8
 800ebd8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800ebdc:	ee31 8a05 	vadd.f32	s16, s2, s10
 800ebe0:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ebe4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ebe8:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ebec:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ebf0:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ebf4:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ebf8:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ebfc:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ec00:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ec04:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ec08:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ec0c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ec10:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ec14:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ec18:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ec1c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ec20:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ec24:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ec28:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ec2c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ec30:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ec34:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ec38:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ec3c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ec40:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ec44:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ec48:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ec4c:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ec50:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ec54:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ec58:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ec5c:	ed03 6a03 	vstr	s12, [r3, #-12]
 800ec60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec64:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800ec68:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ec6c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ec70:	ee35 6a41 	vsub.f32	s12, s10, s2
 800ec74:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ec78:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ec7c:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ec80:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800ec84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec88:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ec8c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ec90:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ec94:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ec98:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ec9c:	ee74 5a23 	vadd.f32	s11, s8, s7
 800eca0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eca4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eca8:	f1be 0e01 	subs.w	lr, lr, #1
 800ecac:	ed44 5a02 	vstr	s11, [r4, #-8]
 800ecb0:	f105 0510 	add.w	r5, r5, #16
 800ecb4:	ed44 7a01 	vstr	s15, [r4, #-4]
 800ecb8:	f106 0610 	add.w	r6, r6, #16
 800ecbc:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ecc0:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ecc4:	f102 0210 	add.w	r2, r2, #16
 800ecc8:	f104 0410 	add.w	r4, r4, #16
 800eccc:	f103 0310 	add.w	r3, r3, #16
 800ecd0:	f47f af5a 	bne.w	800eb88 <arm_cfft_radix8by2_f32+0x34>
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	fa1f f48c 	uxth.w	r4, ip
 800ecda:	4608      	mov	r0, r1
 800ecdc:	2302      	movs	r3, #2
 800ecde:	4621      	mov	r1, r4
 800ece0:	f000 fae2 	bl	800f2a8 <arm_radix8_butterfly_f32>
 800ece4:	ecbd 8b08 	vpop	{d8-d11}
 800ece8:	4640      	mov	r0, r8
 800ecea:	4621      	mov	r1, r4
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf4:	f000 bad8 	b.w	800f2a8 <arm_radix8_butterfly_f32>

0800ecf8 <arm_cfft_radix8by4_f32>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	ed2d 8b0a 	vpush	{d8-d12}
 800ed00:	8802      	ldrh	r2, [r0, #0]
 800ed02:	ed91 6a00 	vldr	s12, [r1]
 800ed06:	b08f      	sub	sp, #60	@ 0x3c
 800ed08:	460f      	mov	r7, r1
 800ed0a:	0852      	lsrs	r2, r2, #1
 800ed0c:	0093      	lsls	r3, r2, #2
 800ed0e:	900c      	str	r0, [sp, #48]	@ 0x30
 800ed10:	9103      	str	r1, [sp, #12]
 800ed12:	6841      	ldr	r1, [r0, #4]
 800ed14:	ed97 7a01 	vldr	s14, [r7, #4]
 800ed18:	4638      	mov	r0, r7
 800ed1a:	4418      	add	r0, r3
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	9009      	str	r0, [sp, #36]	@ 0x24
 800ed20:	4418      	add	r0, r3
 800ed22:	edd0 6a00 	vldr	s13, [r0]
 800ed26:	edd6 3a00 	vldr	s7, [r6]
 800ed2a:	edd6 2a01 	vldr	s5, [r6, #4]
 800ed2e:	edd0 7a01 	vldr	s15, [r0, #4]
 800ed32:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed34:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ed38:	4604      	mov	r4, r0
 800ed3a:	4625      	mov	r5, r4
 800ed3c:	441c      	add	r4, r3
 800ed3e:	ed94 4a00 	vldr	s8, [r4]
 800ed42:	ed94 5a01 	vldr	s10, [r4, #4]
 800ed46:	9401      	str	r4, [sp, #4]
 800ed48:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ed52:	463e      	mov	r6, r7
 800ed54:	ee14 ea90 	vmov	lr, s9
 800ed58:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ed5c:	f846 eb08 	str.w	lr, [r6], #8
 800ed60:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ed64:	edd0 4a01 	vldr	s9, [r0, #4]
 800ed68:	9604      	str	r6, [sp, #16]
 800ed6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed6e:	9e01      	ldr	r6, [sp, #4]
 800ed70:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ed74:	ed96 2a01 	vldr	s4, [r6, #4]
 800ed78:	ee36 7a24 	vadd.f32	s14, s12, s9
 800ed7c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ed80:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800ed84:	ee36 6a62 	vsub.f32	s12, s12, s5
 800ed88:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ed8c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ed90:	ee73 3a45 	vsub.f32	s7, s6, s10
 800ed94:	4604      	mov	r4, r0
 800ed96:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ed9a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ed9e:	46a3      	mov	fp, r4
 800eda0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800eda4:	ee34 5a84 	vadd.f32	s10, s9, s8
 800eda8:	ee13 8a90 	vmov	r8, s7
 800edac:	46a4      	mov	ip, r4
 800edae:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800edb2:	ed87 7a01 	vstr	s14, [r7, #4]
 800edb6:	f84b 8b08 	str.w	r8, [fp], #8
 800edba:	f1ac 0704 	sub.w	r7, ip, #4
 800edbe:	ed8c 5a01 	vstr	s10, [ip, #4]
 800edc2:	f101 0c08 	add.w	ip, r1, #8
 800edc6:	462c      	mov	r4, r5
 800edc8:	f8cd c014 	str.w	ip, [sp, #20]
 800edcc:	ee15 ca90 	vmov	ip, s11
 800edd0:	f844 cb08 	str.w	ip, [r4], #8
 800edd4:	9407      	str	r4, [sp, #28]
 800edd6:	f101 0410 	add.w	r4, r1, #16
 800edda:	ed85 6a01 	vstr	s12, [r5, #4]
 800edde:	0852      	lsrs	r2, r2, #1
 800ede0:	9402      	str	r4, [sp, #8]
 800ede2:	462c      	mov	r4, r5
 800ede4:	f101 0518 	add.w	r5, r1, #24
 800ede8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800edea:	46b2      	mov	sl, r6
 800edec:	9506      	str	r5, [sp, #24]
 800edee:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800edf2:	3a02      	subs	r2, #2
 800edf4:	ee16 5a90 	vmov	r5, s13
 800edf8:	46b6      	mov	lr, r6
 800edfa:	4630      	mov	r0, r6
 800edfc:	0852      	lsrs	r2, r2, #1
 800edfe:	f84a 5b08 	str.w	r5, [sl], #8
 800ee02:	f1a0 0604 	sub.w	r6, r0, #4
 800ee06:	edce 7a01 	vstr	s15, [lr, #4]
 800ee0a:	9208      	str	r2, [sp, #32]
 800ee0c:	f000 8130 	beq.w	800f070 <arm_cfft_radix8by4_f32+0x378>
 800ee10:	4691      	mov	r9, r2
 800ee12:	9a03      	ldr	r2, [sp, #12]
 800ee14:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ee18:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800ee1c:	3b08      	subs	r3, #8
 800ee1e:	f102 0510 	add.w	r5, r2, #16
 800ee22:	f101 0c20 	add.w	ip, r1, #32
 800ee26:	f1a4 020c 	sub.w	r2, r4, #12
 800ee2a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800ee2e:	4433      	add	r3, r6
 800ee30:	3410      	adds	r4, #16
 800ee32:	4650      	mov	r0, sl
 800ee34:	4659      	mov	r1, fp
 800ee36:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ee3a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ee3e:	ed91 7a00 	vldr	s14, [r1]
 800ee42:	edd0 7a00 	vldr	s15, [r0]
 800ee46:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ee4a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ee4e:	edd0 6a01 	vldr	s13, [r0, #4]
 800ee52:	ed91 6a01 	vldr	s12, [r1, #4]
 800ee56:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ee5a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800ee5e:	ee78 4a07 	vadd.f32	s9, s16, s14
 800ee62:	ee74 5a65 	vsub.f32	s11, s8, s11
 800ee66:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800ee6a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ee6e:	ed45 4a02 	vstr	s9, [r5, #-8]
 800ee72:	edd1 4a01 	vldr	s9, [r1, #4]
 800ee76:	ed90 4a01 	vldr	s8, [r0, #4]
 800ee7a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ee7e:	ee76 aa05 	vadd.f32	s21, s12, s10
 800ee82:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ee86:	ee35 aac7 	vsub.f32	s20, s11, s14
 800ee8a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800ee8e:	edd6 1a00 	vldr	s3, [r6]
 800ee92:	edd7 0a00 	vldr	s1, [r7]
 800ee96:	ed92 4a02 	vldr	s8, [r2, #8]
 800ee9a:	edd3 3a02 	vldr	s7, [r3, #8]
 800ee9e:	ed93 2a01 	vldr	s4, [r3, #4]
 800eea2:	ed16 1a01 	vldr	s2, [r6, #-4]
 800eea6:	edd2 2a01 	vldr	s5, [r2, #4]
 800eeaa:	ed57 9a01 	vldr	s19, [r7, #-4]
 800eeae:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800eeb2:	ee39 3a81 	vadd.f32	s6, s19, s2
 800eeb6:	ee74 8a84 	vadd.f32	s17, s9, s8
 800eeba:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800eebe:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800eec2:	ee7a aae6 	vsub.f32	s21, s21, s13
 800eec6:	ee18 aa90 	vmov	sl, s17
 800eeca:	f847 a908 	str.w	sl, [r7], #-8
 800eece:	edd2 8a01 	vldr	s17, [r2, #4]
 800eed2:	ed93 9a01 	vldr	s18, [r3, #4]
 800eed6:	ee73 8a28 	vadd.f32	s17, s6, s17
 800eeda:	ee3a aa27 	vadd.f32	s20, s20, s15
 800eede:	ee78 8a89 	vadd.f32	s17, s17, s18
 800eee2:	ee74 0a63 	vsub.f32	s1, s8, s7
 800eee6:	edc7 8a01 	vstr	s17, [r7, #4]
 800eeea:	ed18 ba02 	vldr	s22, [r8, #-8]
 800eeee:	ed58 8a01 	vldr	s17, [r8, #-4]
 800eef2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800eef6:	ee6a ba28 	vmul.f32	s23, s20, s17
 800eefa:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800eefe:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800ef02:	ee30 9a81 	vadd.f32	s18, s1, s2
 800ef06:	ee79 9a82 	vadd.f32	s19, s19, s4
 800ef0a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800ef0e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800ef12:	ee69 baa8 	vmul.f32	s23, s19, s17
 800ef16:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800ef1a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800ef1e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800ef22:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800ef26:	ee1c aa10 	vmov	sl, s24
 800ef2a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800ef2e:	f841 ab08 	str.w	sl, [r1], #8
 800ef32:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800ef36:	ee3b bacb 	vsub.f32	s22, s23, s22
 800ef3a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800ef3e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800ef42:	ed01 aa01 	vstr	s20, [r1, #-4]
 800ef46:	edc2 8a01 	vstr	s17, [r2, #4]
 800ef4a:	ed82 ba02 	vstr	s22, [r2, #8]
 800ef4e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800ef52:	ee74 3a63 	vsub.f32	s7, s8, s7
 800ef56:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ef5a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800ef5e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ef62:	ee33 3a42 	vsub.f32	s6, s6, s4
 800ef66:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ef6a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ef6e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800ef72:	ee63 8a04 	vmul.f32	s17, s6, s8
 800ef76:	ee28 aa24 	vmul.f32	s20, s16, s9
 800ef7a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800ef7e:	ee28 8a04 	vmul.f32	s16, s16, s8
 800ef82:	ee20 0a24 	vmul.f32	s0, s0, s9
 800ef86:	ee63 3a84 	vmul.f32	s7, s7, s8
 800ef8a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800ef8e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800ef92:	ee14 aa10 	vmov	sl, s8
 800ef96:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ef9a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800ef9e:	ed44 9a02 	vstr	s19, [r4, #-8]
 800efa2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800efa6:	ed04 0a01 	vstr	s0, [r4, #-4]
 800efaa:	f846 a908 	str.w	sl, [r6], #-8
 800efae:	ee35 6a46 	vsub.f32	s12, s10, s12
 800efb2:	ee35 7a87 	vadd.f32	s14, s11, s14
 800efb6:	edc6 3a01 	vstr	s7, [r6, #4]
 800efba:	ee76 6a86 	vadd.f32	s13, s13, s12
 800efbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efc2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800efc6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800efca:	ee67 5a86 	vmul.f32	s11, s15, s12
 800efce:	ee26 5a87 	vmul.f32	s10, s13, s14
 800efd2:	ee72 2a62 	vsub.f32	s5, s4, s5
 800efd6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800efda:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800efde:	ee75 5a25 	vadd.f32	s11, s10, s11
 800efe2:	ee62 0a86 	vmul.f32	s1, s5, s12
 800efe6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800efea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efee:	ee21 6a06 	vmul.f32	s12, s2, s12
 800eff2:	ee62 2a87 	vmul.f32	s5, s5, s14
 800eff6:	ee21 1a07 	vmul.f32	s2, s2, s14
 800effa:	ee15 aa90 	vmov	sl, s11
 800effe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f002:	f840 ab08 	str.w	sl, [r0], #8
 800f006:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f00a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800f00e:	f1b9 0901 	subs.w	r9, r9, #1
 800f012:	ed40 7a01 	vstr	s15, [r0, #-4]
 800f016:	f105 0508 	add.w	r5, r5, #8
 800f01a:	ed83 1a02 	vstr	s2, [r3, #8]
 800f01e:	edc3 2a01 	vstr	s5, [r3, #4]
 800f022:	f108 0808 	add.w	r8, r8, #8
 800f026:	f1a2 0208 	sub.w	r2, r2, #8
 800f02a:	f10c 0c10 	add.w	ip, ip, #16
 800f02e:	f104 0408 	add.w	r4, r4, #8
 800f032:	f10e 0e18 	add.w	lr, lr, #24
 800f036:	f1a3 0308 	sub.w	r3, r3, #8
 800f03a:	f47f aefc 	bne.w	800ee36 <arm_cfft_radix8by4_f32+0x13e>
 800f03e:	9908      	ldr	r1, [sp, #32]
 800f040:	9802      	ldr	r0, [sp, #8]
 800f042:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800f046:	00cb      	lsls	r3, r1, #3
 800f048:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f04c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f050:	9102      	str	r1, [sp, #8]
 800f052:	9904      	ldr	r1, [sp, #16]
 800f054:	4419      	add	r1, r3
 800f056:	9104      	str	r1, [sp, #16]
 800f058:	9905      	ldr	r1, [sp, #20]
 800f05a:	4419      	add	r1, r3
 800f05c:	9105      	str	r1, [sp, #20]
 800f05e:	9907      	ldr	r1, [sp, #28]
 800f060:	449b      	add	fp, r3
 800f062:	4419      	add	r1, r3
 800f064:	449a      	add	sl, r3
 800f066:	9b06      	ldr	r3, [sp, #24]
 800f068:	9107      	str	r1, [sp, #28]
 800f06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f06e:	9306      	str	r3, [sp, #24]
 800f070:	9a04      	ldr	r2, [sp, #16]
 800f072:	9807      	ldr	r0, [sp, #28]
 800f074:	edd2 3a00 	vldr	s7, [r2]
 800f078:	ed90 4a00 	vldr	s8, [r0]
 800f07c:	eddb 7a00 	vldr	s15, [fp]
 800f080:	ed9a 3a00 	vldr	s6, [sl]
 800f084:	edd2 4a01 	vldr	s9, [r2, #4]
 800f088:	ed90 7a01 	vldr	s14, [r0, #4]
 800f08c:	ed9b 2a01 	vldr	s4, [fp, #4]
 800f090:	edda 5a01 	vldr	s11, [sl, #4]
 800f094:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800f098:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f09a:	ee73 6a84 	vadd.f32	s13, s7, s8
 800f09e:	ee34 6a87 	vadd.f32	s12, s9, s14
 800f0a2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800f0a6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800f0aa:	ee33 5a05 	vadd.f32	s10, s6, s10
 800f0ae:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f0b2:	ed82 5a00 	vstr	s10, [r2]
 800f0b6:	ed9b 5a01 	vldr	s10, [fp, #4]
 800f0ba:	edda 4a01 	vldr	s9, [sl, #4]
 800f0be:	ee36 5a05 	vadd.f32	s10, s12, s10
 800f0c2:	ee72 3a04 	vadd.f32	s7, s4, s8
 800f0c6:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f0ca:	ee77 4a67 	vsub.f32	s9, s14, s15
 800f0ce:	ed82 5a01 	vstr	s10, [r2, #4]
 800f0d2:	9a05      	ldr	r2, [sp, #20]
 800f0d4:	ee34 5a83 	vadd.f32	s10, s9, s6
 800f0d8:	edd2 1a00 	vldr	s3, [r2]
 800f0dc:	edd2 2a01 	vldr	s5, [r2, #4]
 800f0e0:	9a02      	ldr	r2, [sp, #8]
 800f0e2:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800f0e6:	ee36 6a42 	vsub.f32	s12, s12, s4
 800f0ea:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800f0ee:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800f0f2:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f0f6:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f0fa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f0fe:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f102:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f106:	edcb 2a00 	vstr	s5, [fp]
 800f10a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800f10e:	edd2 3a01 	vldr	s7, [r2, #4]
 800f112:	ed92 5a00 	vldr	s10, [r2]
 800f116:	9a06      	ldr	r2, [sp, #24]
 800f118:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f11c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f120:	ee66 4a85 	vmul.f32	s9, s13, s10
 800f124:	ee26 5a05 	vmul.f32	s10, s12, s10
 800f128:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f12c:	ee26 6a23 	vmul.f32	s12, s12, s7
 800f130:	ee75 6a66 	vsub.f32	s13, s10, s13
 800f134:	ee34 6a86 	vadd.f32	s12, s9, s12
 800f138:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f13c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f140:	edc0 6a01 	vstr	s13, [r0, #4]
 800f144:	ed80 6a00 	vstr	s12, [r0]
 800f148:	ed92 6a01 	vldr	s12, [r2, #4]
 800f14c:	9803      	ldr	r0, [sp, #12]
 800f14e:	ee77 7a43 	vsub.f32	s15, s14, s6
 800f152:	ee75 5a84 	vadd.f32	s11, s11, s8
 800f156:	ed92 7a00 	vldr	s14, [r2]
 800f15a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800f15e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f162:	ee65 5a86 	vmul.f32	s11, s11, s12
 800f166:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f16a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800f16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f172:	edca 5a01 	vstr	s11, [sl, #4]
 800f176:	edca 7a00 	vstr	s15, [sl]
 800f17a:	6872      	ldr	r2, [r6, #4]
 800f17c:	4621      	mov	r1, r4
 800f17e:	2304      	movs	r3, #4
 800f180:	f000 f892 	bl	800f2a8 <arm_radix8_butterfly_f32>
 800f184:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f186:	6872      	ldr	r2, [r6, #4]
 800f188:	4621      	mov	r1, r4
 800f18a:	2304      	movs	r3, #4
 800f18c:	f000 f88c 	bl	800f2a8 <arm_radix8_butterfly_f32>
 800f190:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f192:	6872      	ldr	r2, [r6, #4]
 800f194:	4621      	mov	r1, r4
 800f196:	2304      	movs	r3, #4
 800f198:	f000 f886 	bl	800f2a8 <arm_radix8_butterfly_f32>
 800f19c:	9801      	ldr	r0, [sp, #4]
 800f19e:	6872      	ldr	r2, [r6, #4]
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	2304      	movs	r3, #4
 800f1a4:	b00f      	add	sp, #60	@ 0x3c
 800f1a6:	ecbd 8b0a 	vpop	{d8-d12}
 800f1aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ae:	f000 b87b 	b.w	800f2a8 <arm_radix8_butterfly_f32>
 800f1b2:	bf00      	nop

0800f1b4 <arm_cfft_f32>:
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	2a01      	cmp	r2, #1
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	4617      	mov	r7, r2
 800f1be:	460c      	mov	r4, r1
 800f1c0:	4698      	mov	r8, r3
 800f1c2:	8805      	ldrh	r5, [r0, #0]
 800f1c4:	d054      	beq.n	800f270 <arm_cfft_f32+0xbc>
 800f1c6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f1ca:	d04c      	beq.n	800f266 <arm_cfft_f32+0xb2>
 800f1cc:	d916      	bls.n	800f1fc <arm_cfft_f32+0x48>
 800f1ce:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800f1d2:	d01a      	beq.n	800f20a <arm_cfft_f32+0x56>
 800f1d4:	d95c      	bls.n	800f290 <arm_cfft_f32+0xdc>
 800f1d6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800f1da:	d044      	beq.n	800f266 <arm_cfft_f32+0xb2>
 800f1dc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800f1e0:	d105      	bne.n	800f1ee <arm_cfft_f32+0x3a>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	6872      	ldr	r2, [r6, #4]
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	f000 f85d 	bl	800f2a8 <arm_radix8_butterfly_f32>
 800f1ee:	f1b8 0f00 	cmp.w	r8, #0
 800f1f2:	d111      	bne.n	800f218 <arm_cfft_f32+0x64>
 800f1f4:	2f01      	cmp	r7, #1
 800f1f6:	d016      	beq.n	800f226 <arm_cfft_f32+0x72>
 800f1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fc:	2d20      	cmp	r5, #32
 800f1fe:	d032      	beq.n	800f266 <arm_cfft_f32+0xb2>
 800f200:	d94a      	bls.n	800f298 <arm_cfft_f32+0xe4>
 800f202:	2d40      	cmp	r5, #64	@ 0x40
 800f204:	d0ed      	beq.n	800f1e2 <arm_cfft_f32+0x2e>
 800f206:	2d80      	cmp	r5, #128	@ 0x80
 800f208:	d1f1      	bne.n	800f1ee <arm_cfft_f32+0x3a>
 800f20a:	4630      	mov	r0, r6
 800f20c:	4621      	mov	r1, r4
 800f20e:	f7ff fca1 	bl	800eb54 <arm_cfft_radix8by2_f32>
 800f212:	f1b8 0f00 	cmp.w	r8, #0
 800f216:	d0ed      	beq.n	800f1f4 <arm_cfft_f32+0x40>
 800f218:	4620      	mov	r0, r4
 800f21a:	89b1      	ldrh	r1, [r6, #12]
 800f21c:	68b2      	ldr	r2, [r6, #8]
 800f21e:	f7f0 ffd7 	bl	80001d0 <arm_bitreversal_32>
 800f222:	2f01      	cmp	r7, #1
 800f224:	d1e8      	bne.n	800f1f8 <arm_cfft_f32+0x44>
 800f226:	ee07 5a90 	vmov	s15, r5
 800f22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f22e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f232:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f236:	2d00      	cmp	r5, #0
 800f238:	d0de      	beq.n	800f1f8 <arm_cfft_f32+0x44>
 800f23a:	f104 0108 	add.w	r1, r4, #8
 800f23e:	2300      	movs	r3, #0
 800f240:	3301      	adds	r3, #1
 800f242:	429d      	cmp	r5, r3
 800f244:	f101 0108 	add.w	r1, r1, #8
 800f248:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f24c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f250:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f254:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f258:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f25c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f260:	d1ee      	bne.n	800f240 <arm_cfft_f32+0x8c>
 800f262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f266:	4630      	mov	r0, r6
 800f268:	4621      	mov	r1, r4
 800f26a:	f7ff fd45 	bl	800ecf8 <arm_cfft_radix8by4_f32>
 800f26e:	e7be      	b.n	800f1ee <arm_cfft_f32+0x3a>
 800f270:	b1ad      	cbz	r5, 800f29e <arm_cfft_f32+0xea>
 800f272:	f101 030c 	add.w	r3, r1, #12
 800f276:	2200      	movs	r2, #0
 800f278:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f27c:	3201      	adds	r2, #1
 800f27e:	eef1 7a67 	vneg.f32	s15, s15
 800f282:	4295      	cmp	r5, r2
 800f284:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f288:	f103 0308 	add.w	r3, r3, #8
 800f28c:	d1f4      	bne.n	800f278 <arm_cfft_f32+0xc4>
 800f28e:	e79a      	b.n	800f1c6 <arm_cfft_f32+0x12>
 800f290:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800f294:	d0a5      	beq.n	800f1e2 <arm_cfft_f32+0x2e>
 800f296:	e7aa      	b.n	800f1ee <arm_cfft_f32+0x3a>
 800f298:	2d10      	cmp	r5, #16
 800f29a:	d0b6      	beq.n	800f20a <arm_cfft_f32+0x56>
 800f29c:	e7a7      	b.n	800f1ee <arm_cfft_f32+0x3a>
 800f29e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f2a2:	d894      	bhi.n	800f1ce <arm_cfft_f32+0x1a>
 800f2a4:	e7aa      	b.n	800f1fc <arm_cfft_f32+0x48>
 800f2a6:	bf00      	nop

0800f2a8 <arm_radix8_butterfly_f32>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	ed2d 8b10 	vpush	{d8-d15}
 800f2b0:	b09d      	sub	sp, #116	@ 0x74
 800f2b2:	461c      	mov	r4, r3
 800f2b4:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800f5d8 <arm_radix8_butterfly_f32+0x330>
 800f2b8:	921a      	str	r2, [sp, #104]	@ 0x68
 800f2ba:	1d03      	adds	r3, r0, #4
 800f2bc:	4682      	mov	sl, r0
 800f2be:	4689      	mov	r9, r1
 800f2c0:	468b      	mov	fp, r1
 800f2c2:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f2c4:	9400      	str	r4, [sp, #0]
 800f2c6:	469e      	mov	lr, r3
 800f2c8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f2cc:	005a      	lsls	r2, r3, #1
 800f2ce:	18d6      	adds	r6, r2, r3
 800f2d0:	18f5      	adds	r5, r6, r3
 800f2d2:	9203      	str	r2, [sp, #12]
 800f2d4:	195a      	adds	r2, r3, r5
 800f2d6:	18d0      	adds	r0, r2, r3
 800f2d8:	00df      	lsls	r7, r3, #3
 800f2da:	1819      	adds	r1, r3, r0
 800f2dc:	463c      	mov	r4, r7
 800f2de:	9701      	str	r7, [sp, #4]
 800f2e0:	4457      	add	r7, sl
 800f2e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2e4:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f2e8:	011b      	lsls	r3, r3, #4
 800f2ea:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f2ee:	eb07 0c04 	add.w	ip, r7, r4
 800f2f2:	9c00      	ldr	r4, [sp, #0]
 800f2f4:	9302      	str	r3, [sp, #8]
 800f2f6:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f2fa:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f2fe:	3204      	adds	r2, #4
 800f300:	3104      	adds	r1, #4
 800f302:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f306:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f30a:	f04f 0800 	mov.w	r8, #0
 800f30e:	eddc 7a00 	vldr	s15, [ip]
 800f312:	edd7 6a00 	vldr	s13, [r7]
 800f316:	edd6 3a00 	vldr	s7, [r6]
 800f31a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f31e:	edd5 4a00 	vldr	s9, [r5]
 800f322:	ed90 2a00 	vldr	s4, [r0]
 800f326:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f32a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f32e:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f332:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f336:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f33a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f33e:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f342:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f346:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f34a:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f34e:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f352:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f356:	ed85 5a00 	vstr	s10, [r5]
 800f35a:	ed96 1a01 	vldr	s2, [r6, #4]
 800f35e:	edd7 5a01 	vldr	s11, [r7, #4]
 800f362:	ed92 aa00 	vldr	s20, [r2]
 800f366:	ed91 6a00 	vldr	s12, [r1]
 800f36a:	ed9e 9a00 	vldr	s18, [lr]
 800f36e:	ed95 5a01 	vldr	s10, [r5, #4]
 800f372:	eddc 6a01 	vldr	s13, [ip, #4]
 800f376:	edd0 9a01 	vldr	s19, [r0, #4]
 800f37a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f37e:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f382:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f386:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f38a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f38e:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f392:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f396:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f39a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f39e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f3a2:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f3a6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f3aa:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f3ae:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f3b2:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f3b6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f3ba:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f3be:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f3c2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f3c6:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f3ca:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f3ce:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f3d2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f3d6:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f3da:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f3de:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f3e2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f3e6:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f3ea:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f3ee:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f3f2:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f3f6:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f3fa:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f3fe:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f402:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f406:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f40a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f40e:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f412:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f416:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f41a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f41e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f422:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f426:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f42a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f42e:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f432:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f436:	44d8      	add	r8, fp
 800f438:	45c1      	cmp	r9, r8
 800f43a:	ed8e 9a00 	vstr	s18, [lr]
 800f43e:	ed85 1a01 	vstr	s2, [r5, #4]
 800f442:	449e      	add	lr, r3
 800f444:	ed8c 8a00 	vstr	s16, [ip]
 800f448:	441d      	add	r5, r3
 800f44a:	ed80 6a00 	vstr	s12, [r0]
 800f44e:	edcc 0a01 	vstr	s1, [ip, #4]
 800f452:	ed80 4a01 	vstr	s8, [r0, #4]
 800f456:	449c      	add	ip, r3
 800f458:	ed87 2a00 	vstr	s4, [r7]
 800f45c:	4418      	add	r0, r3
 800f45e:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f462:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f466:	ed86 7a00 	vstr	s14, [r6]
 800f46a:	ed87 3a01 	vstr	s6, [r7, #4]
 800f46e:	edc1 4a00 	vstr	s9, [r1]
 800f472:	441f      	add	r7, r3
 800f474:	edc2 5a00 	vstr	s11, [r2]
 800f478:	4419      	add	r1, r3
 800f47a:	edc6 6a01 	vstr	s13, [r6, #4]
 800f47e:	441a      	add	r2, r3
 800f480:	441e      	add	r6, r3
 800f482:	f63f af44 	bhi.w	800f30e <arm_radix8_butterfly_f32+0x66>
 800f486:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f488:	2907      	cmp	r1, #7
 800f48a:	4620      	mov	r0, r4
 800f48c:	f240 81e9 	bls.w	800f862 <arm_radix8_butterfly_f32+0x5ba>
 800f490:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f494:	193e      	adds	r6, r7, r4
 800f496:	1935      	adds	r5, r6, r4
 800f498:	9c03      	ldr	r4, [sp, #12]
 800f49a:	9000      	str	r0, [sp, #0]
 800f49c:	4622      	mov	r2, r4
 800f49e:	3201      	adds	r2, #1
 800f4a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f4a4:	9900      	ldr	r1, [sp, #0]
 800f4a6:	1828      	adds	r0, r5, r0
 800f4a8:	eb00 0e01 	add.w	lr, r0, r1
 800f4ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f4ae:	440a      	add	r2, r1
 800f4b0:	eb04 0c01 	add.w	ip, r4, r1
 800f4b4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f4b8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f4bc:	9a00      	ldr	r2, [sp, #0]
 800f4be:	940f      	str	r4, [sp, #60]	@ 0x3c
 800f4c0:	00ed      	lsls	r5, r5, #3
 800f4c2:	9511      	str	r5, [sp, #68]	@ 0x44
 800f4c4:	00d5      	lsls	r5, r2, #3
 800f4c6:	950d      	str	r5, [sp, #52]	@ 0x34
 800f4c8:	9d01      	ldr	r5, [sp, #4]
 800f4ca:	3508      	adds	r5, #8
 800f4cc:	9516      	str	r5, [sp, #88]	@ 0x58
 800f4ce:	9d02      	ldr	r5, [sp, #8]
 800f4d0:	3508      	adds	r5, #8
 800f4d2:	0114      	lsls	r4, r2, #4
 800f4d4:	9517      	str	r5, [sp, #92]	@ 0x5c
 800f4d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f4d8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800f4da:	940e      	str	r4, [sp, #56]	@ 0x38
 800f4dc:	00c0      	lsls	r0, r0, #3
 800f4de:	9010      	str	r0, [sp, #64]	@ 0x40
 800f4e0:	18aa      	adds	r2, r5, r2
 800f4e2:	9207      	str	r2, [sp, #28]
 800f4e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f4e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f4e8:	18aa      	adds	r2, r5, r2
 800f4ea:	9208      	str	r2, [sp, #32]
 800f4ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f4ee:	18aa      	adds	r2, r5, r2
 800f4f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f4f6:	f10e 0204 	add.w	r2, lr, #4
 800f4fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800f4fc:	00c9      	lsls	r1, r1, #3
 800f4fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f500:	310c      	adds	r1, #12
 800f502:	00f6      	lsls	r6, r6, #3
 800f504:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f508:	9114      	str	r1, [sp, #80]	@ 0x50
 800f50a:	18a9      	adds	r1, r5, r2
 800f50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f50e:	9612      	str	r6, [sp, #72]	@ 0x48
 800f510:	00ff      	lsls	r7, r7, #3
 800f512:	19ae      	adds	r6, r5, r6
 800f514:	3008      	adds	r0, #8
 800f516:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f51a:	9606      	str	r6, [sp, #24]
 800f51c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f51e:	18aa      	adds	r2, r5, r2
 800f520:	0164      	lsls	r4, r4, #5
 800f522:	19ee      	adds	r6, r5, r7
 800f524:	f10c 000c 	add.w	r0, ip, #12
 800f528:	9713      	str	r7, [sp, #76]	@ 0x4c
 800f52a:	9604      	str	r6, [sp, #16]
 800f52c:	9015      	str	r0, [sp, #84]	@ 0x54
 800f52e:	9103      	str	r1, [sp, #12]
 800f530:	9205      	str	r2, [sp, #20]
 800f532:	f104 0208 	add.w	r2, r4, #8
 800f536:	9218      	str	r2, [sp, #96]	@ 0x60
 800f538:	f04f 0801 	mov.w	r8, #1
 800f53c:	2200      	movs	r2, #0
 800f53e:	f102 0108 	add.w	r1, r2, #8
 800f542:	460f      	mov	r7, r1
 800f544:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f546:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f548:	188e      	adds	r6, r1, r2
 800f54a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800f54c:	188d      	adds	r5, r1, r2
 800f54e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800f550:	188c      	adds	r4, r1, r2
 800f552:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800f554:	1888      	adds	r0, r1, r2
 800f556:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800f558:	eb01 0c02 	add.w	ip, r1, r2
 800f55c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800f55e:	440a      	add	r2, r1
 800f560:	9903      	ldr	r1, [sp, #12]
 800f562:	edd1 fa00 	vldr	s31, [r1]
 800f566:	9905      	ldr	r1, [sp, #20]
 800f568:	ed91 fa00 	vldr	s30, [r1]
 800f56c:	9904      	ldr	r1, [sp, #16]
 800f56e:	edd1 ea00 	vldr	s29, [r1]
 800f572:	9906      	ldr	r1, [sp, #24]
 800f574:	ed91 ea00 	vldr	s28, [r1]
 800f578:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f57a:	edd1 da00 	vldr	s27, [r1]
 800f57e:	9908      	ldr	r1, [sp, #32]
 800f580:	ed91 da00 	vldr	s26, [r1]
 800f584:	9907      	ldr	r1, [sp, #28]
 800f586:	edd1 ca00 	vldr	s25, [r1]
 800f58a:	9903      	ldr	r1, [sp, #12]
 800f58c:	ed91 ca01 	vldr	s24, [r1, #4]
 800f590:	9905      	ldr	r1, [sp, #20]
 800f592:	edd1 ba01 	vldr	s23, [r1, #4]
 800f596:	9904      	ldr	r1, [sp, #16]
 800f598:	edd1 aa01 	vldr	s21, [r1, #4]
 800f59c:	9906      	ldr	r1, [sp, #24]
 800f59e:	ed91 aa01 	vldr	s20, [r1, #4]
 800f5a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f5a4:	edd1 7a01 	vldr	s15, [r1, #4]
 800f5a8:	9908      	ldr	r1, [sp, #32]
 800f5aa:	edcd 7a00 	vstr	s15, [sp]
 800f5ae:	edd1 7a01 	vldr	s15, [r1, #4]
 800f5b2:	9907      	ldr	r1, [sp, #28]
 800f5b4:	edcd 7a01 	vstr	s15, [sp, #4]
 800f5b8:	edd1 7a01 	vldr	s15, [r1, #4]
 800f5bc:	eb0a 0e07 	add.w	lr, sl, r7
 800f5c0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800f5c2:	edcd 7a02 	vstr	s15, [sp, #8]
 800f5c6:	eb0c 010a 	add.w	r1, ip, sl
 800f5ca:	4456      	add	r6, sl
 800f5cc:	4455      	add	r5, sl
 800f5ce:	4454      	add	r4, sl
 800f5d0:	4450      	add	r0, sl
 800f5d2:	4452      	add	r2, sl
 800f5d4:	46c4      	mov	ip, r8
 800f5d6:	e001      	b.n	800f5dc <arm_radix8_butterfly_f32+0x334>
 800f5d8:	3f3504f3 	.word	0x3f3504f3
 800f5dc:	ed96 5a00 	vldr	s10, [r6]
 800f5e0:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f5e4:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f5e8:	edd0 7a00 	vldr	s15, [r0]
 800f5ec:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f5f0:	edde 3a00 	vldr	s7, [lr]
 800f5f4:	ed94 3a00 	vldr	s6, [r4]
 800f5f8:	ed95 2a00 	vldr	s4, [r5]
 800f5fc:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f600:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f604:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f608:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f60c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f610:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f614:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f618:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f61c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f624:	ed8e 6a00 	vstr	s12, [lr]
 800f628:	edd0 8a01 	vldr	s17, [r0, #4]
 800f62c:	ed95 9a01 	vldr	s18, [r5, #4]
 800f630:	edd1 2a00 	vldr	s5, [r1]
 800f634:	ed97 7a00 	vldr	s14, [r7]
 800f638:	edd4 0a01 	vldr	s1, [r4, #4]
 800f63c:	ed96 6a01 	vldr	s12, [r6, #4]
 800f640:	edd2 5a00 	vldr	s11, [r2]
 800f644:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f648:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f64c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f650:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f654:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f658:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f65c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f660:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f664:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f668:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f66c:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f670:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f674:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f678:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f67c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f680:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f684:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f688:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f68c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f690:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f694:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f698:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f69c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f6a0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f6a4:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f6a8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f6ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f6b0:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f6b4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f6b8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f6bc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f6c0:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f6c4:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f6c8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f6cc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f6d0:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f6d4:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f6d8:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f6dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f6e0:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f6e4:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f6e8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f6ec:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f6f0:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f6f4:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f6f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f6fc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800f700:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800f704:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800f708:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800f70c:	ee39 1a01 	vadd.f32	s2, s18, s2
 800f710:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800f714:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800f718:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800f71c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800f720:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800f724:	ee35 3a03 	vadd.f32	s6, s10, s6
 800f728:	ee72 6a66 	vsub.f32	s13, s4, s13
 800f72c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800f730:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800f734:	ed9d 4a02 	vldr	s8, [sp, #8]
 800f738:	ed8e 1a01 	vstr	s2, [lr, #4]
 800f73c:	ee77 3a63 	vsub.f32	s7, s14, s7
 800f740:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f744:	ed9d 7a01 	vldr	s14, [sp, #4]
 800f748:	ed86 3a00 	vstr	s6, [r6]
 800f74c:	ee30 9a89 	vadd.f32	s18, s1, s18
 800f750:	ee32 2a05 	vadd.f32	s4, s4, s10
 800f754:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800f758:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800f75c:	ee67 2a22 	vmul.f32	s5, s14, s5
 800f760:	ee64 1a00 	vmul.f32	s3, s8, s0
 800f764:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f768:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800f76c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800f770:	ee64 8a28 	vmul.f32	s17, s8, s17
 800f774:	ed9d 4a00 	vldr	s8, [sp]
 800f778:	edc6 6a01 	vstr	s13, [r6, #4]
 800f77c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f780:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800f784:	ee64 9a29 	vmul.f32	s19, s8, s19
 800f788:	ee24 4a25 	vmul.f32	s8, s8, s11
 800f78c:	ee30 7a87 	vadd.f32	s14, s1, s14
 800f790:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f794:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800f798:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800f79c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800f7a0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800f7a4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800f7a8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800f7ac:	ee75 1a21 	vadd.f32	s3, s10, s3
 800f7b0:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f7b4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800f7b8:	ee70 0a84 	vadd.f32	s1, s1, s8
 800f7bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f7c0:	44dc      	add	ip, fp
 800f7c2:	45e1      	cmp	r9, ip
 800f7c4:	ed84 9a00 	vstr	s18, [r4]
 800f7c8:	edc4 3a01 	vstr	s7, [r4, #4]
 800f7cc:	449e      	add	lr, r3
 800f7ce:	ed02 7a01 	vstr	s14, [r2, #-4]
 800f7d2:	edc2 2a00 	vstr	s5, [r2]
 800f7d6:	441e      	add	r6, r3
 800f7d8:	ed85 2a00 	vstr	s4, [r5]
 800f7dc:	ed85 8a01 	vstr	s16, [r5, #4]
 800f7e0:	441c      	add	r4, r3
 800f7e2:	ed47 1a01 	vstr	s3, [r7, #-4]
 800f7e6:	ed87 0a00 	vstr	s0, [r7]
 800f7ea:	441a      	add	r2, r3
 800f7ec:	ed41 4a01 	vstr	s9, [r1, #-4]
 800f7f0:	edc1 9a00 	vstr	s19, [r1]
 800f7f4:	441d      	add	r5, r3
 800f7f6:	edc0 0a00 	vstr	s1, [r0]
 800f7fa:	441f      	add	r7, r3
 800f7fc:	ed80 6a01 	vstr	s12, [r0, #4]
 800f800:	4419      	add	r1, r3
 800f802:	4418      	add	r0, r3
 800f804:	f63f aeea 	bhi.w	800f5dc <arm_radix8_butterfly_f32+0x334>
 800f808:	9a03      	ldr	r2, [sp, #12]
 800f80a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f80c:	440a      	add	r2, r1
 800f80e:	9203      	str	r2, [sp, #12]
 800f810:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f812:	9a05      	ldr	r2, [sp, #20]
 800f814:	440a      	add	r2, r1
 800f816:	9205      	str	r2, [sp, #20]
 800f818:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f81a:	9a04      	ldr	r2, [sp, #16]
 800f81c:	440a      	add	r2, r1
 800f81e:	9204      	str	r2, [sp, #16]
 800f820:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f822:	9a06      	ldr	r2, [sp, #24]
 800f824:	440a      	add	r2, r1
 800f826:	9206      	str	r2, [sp, #24]
 800f828:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f82c:	440a      	add	r2, r1
 800f82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f830:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f832:	9a08      	ldr	r2, [sp, #32]
 800f834:	440a      	add	r2, r1
 800f836:	9208      	str	r2, [sp, #32]
 800f838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f83a:	9a07      	ldr	r2, [sp, #28]
 800f83c:	440a      	add	r2, r1
 800f83e:	9207      	str	r2, [sp, #28]
 800f840:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f842:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f844:	f108 0801 	add.w	r8, r8, #1
 800f848:	3208      	adds	r2, #8
 800f84a:	4588      	cmp	r8, r1
 800f84c:	920a      	str	r2, [sp, #40]	@ 0x28
 800f84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f850:	f47f ae75 	bne.w	800f53e <arm_radix8_butterfly_f32+0x296>
 800f854:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	46c3      	mov	fp, r8
 800f85c:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800f860:	e532      	b.n	800f2c8 <arm_radix8_butterfly_f32+0x20>
 800f862:	b01d      	add	sp, #116	@ 0x74
 800f864:	ecbd 8b10 	vpop	{d8-d15}
 800f868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f86c <__cvt>:
 800f86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	ec57 6b10 	vmov	r6, r7, d0
 800f874:	2f00      	cmp	r7, #0
 800f876:	460c      	mov	r4, r1
 800f878:	4619      	mov	r1, r3
 800f87a:	463b      	mov	r3, r7
 800f87c:	bfbb      	ittet	lt
 800f87e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f882:	461f      	movlt	r7, r3
 800f884:	2300      	movge	r3, #0
 800f886:	232d      	movlt	r3, #45	@ 0x2d
 800f888:	700b      	strb	r3, [r1, #0]
 800f88a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f88c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f890:	4691      	mov	r9, r2
 800f892:	f023 0820 	bic.w	r8, r3, #32
 800f896:	bfbc      	itt	lt
 800f898:	4632      	movlt	r2, r6
 800f89a:	4616      	movlt	r6, r2
 800f89c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f8a0:	d005      	beq.n	800f8ae <__cvt+0x42>
 800f8a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f8a6:	d100      	bne.n	800f8aa <__cvt+0x3e>
 800f8a8:	3401      	adds	r4, #1
 800f8aa:	2102      	movs	r1, #2
 800f8ac:	e000      	b.n	800f8b0 <__cvt+0x44>
 800f8ae:	2103      	movs	r1, #3
 800f8b0:	ab03      	add	r3, sp, #12
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	ab02      	add	r3, sp, #8
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	ec47 6b10 	vmov	d0, r6, r7
 800f8bc:	4653      	mov	r3, sl
 800f8be:	4622      	mov	r2, r4
 800f8c0:	f000 fe4a 	bl	8010558 <_dtoa_r>
 800f8c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	d119      	bne.n	800f900 <__cvt+0x94>
 800f8cc:	f019 0f01 	tst.w	r9, #1
 800f8d0:	d00e      	beq.n	800f8f0 <__cvt+0x84>
 800f8d2:	eb00 0904 	add.w	r9, r0, r4
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f1 f953 	bl	8000b88 <__aeabi_dcmpeq>
 800f8e2:	b108      	cbz	r0, 800f8e8 <__cvt+0x7c>
 800f8e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f8e8:	2230      	movs	r2, #48	@ 0x30
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	454b      	cmp	r3, r9
 800f8ee:	d31e      	bcc.n	800f92e <__cvt+0xc2>
 800f8f0:	9b03      	ldr	r3, [sp, #12]
 800f8f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8f4:	1b5b      	subs	r3, r3, r5
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	6013      	str	r3, [r2, #0]
 800f8fa:	b004      	add	sp, #16
 800f8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f900:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f904:	eb00 0904 	add.w	r9, r0, r4
 800f908:	d1e5      	bne.n	800f8d6 <__cvt+0x6a>
 800f90a:	7803      	ldrb	r3, [r0, #0]
 800f90c:	2b30      	cmp	r3, #48	@ 0x30
 800f90e:	d10a      	bne.n	800f926 <__cvt+0xba>
 800f910:	2200      	movs	r2, #0
 800f912:	2300      	movs	r3, #0
 800f914:	4630      	mov	r0, r6
 800f916:	4639      	mov	r1, r7
 800f918:	f7f1 f936 	bl	8000b88 <__aeabi_dcmpeq>
 800f91c:	b918      	cbnz	r0, 800f926 <__cvt+0xba>
 800f91e:	f1c4 0401 	rsb	r4, r4, #1
 800f922:	f8ca 4000 	str.w	r4, [sl]
 800f926:	f8da 3000 	ldr.w	r3, [sl]
 800f92a:	4499      	add	r9, r3
 800f92c:	e7d3      	b.n	800f8d6 <__cvt+0x6a>
 800f92e:	1c59      	adds	r1, r3, #1
 800f930:	9103      	str	r1, [sp, #12]
 800f932:	701a      	strb	r2, [r3, #0]
 800f934:	e7d9      	b.n	800f8ea <__cvt+0x7e>

0800f936 <__exponent>:
 800f936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f938:	2900      	cmp	r1, #0
 800f93a:	bfba      	itte	lt
 800f93c:	4249      	neglt	r1, r1
 800f93e:	232d      	movlt	r3, #45	@ 0x2d
 800f940:	232b      	movge	r3, #43	@ 0x2b
 800f942:	2909      	cmp	r1, #9
 800f944:	7002      	strb	r2, [r0, #0]
 800f946:	7043      	strb	r3, [r0, #1]
 800f948:	dd29      	ble.n	800f99e <__exponent+0x68>
 800f94a:	f10d 0307 	add.w	r3, sp, #7
 800f94e:	461d      	mov	r5, r3
 800f950:	270a      	movs	r7, #10
 800f952:	461a      	mov	r2, r3
 800f954:	fbb1 f6f7 	udiv	r6, r1, r7
 800f958:	fb07 1416 	mls	r4, r7, r6, r1
 800f95c:	3430      	adds	r4, #48	@ 0x30
 800f95e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f962:	460c      	mov	r4, r1
 800f964:	2c63      	cmp	r4, #99	@ 0x63
 800f966:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f96a:	4631      	mov	r1, r6
 800f96c:	dcf1      	bgt.n	800f952 <__exponent+0x1c>
 800f96e:	3130      	adds	r1, #48	@ 0x30
 800f970:	1e94      	subs	r4, r2, #2
 800f972:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f976:	1c41      	adds	r1, r0, #1
 800f978:	4623      	mov	r3, r4
 800f97a:	42ab      	cmp	r3, r5
 800f97c:	d30a      	bcc.n	800f994 <__exponent+0x5e>
 800f97e:	f10d 0309 	add.w	r3, sp, #9
 800f982:	1a9b      	subs	r3, r3, r2
 800f984:	42ac      	cmp	r4, r5
 800f986:	bf88      	it	hi
 800f988:	2300      	movhi	r3, #0
 800f98a:	3302      	adds	r3, #2
 800f98c:	4403      	add	r3, r0
 800f98e:	1a18      	subs	r0, r3, r0
 800f990:	b003      	add	sp, #12
 800f992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f994:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f998:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f99c:	e7ed      	b.n	800f97a <__exponent+0x44>
 800f99e:	2330      	movs	r3, #48	@ 0x30
 800f9a0:	3130      	adds	r1, #48	@ 0x30
 800f9a2:	7083      	strb	r3, [r0, #2]
 800f9a4:	70c1      	strb	r1, [r0, #3]
 800f9a6:	1d03      	adds	r3, r0, #4
 800f9a8:	e7f1      	b.n	800f98e <__exponent+0x58>
	...

0800f9ac <_printf_float>:
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	b08d      	sub	sp, #52	@ 0x34
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f9b8:	4616      	mov	r6, r2
 800f9ba:	461f      	mov	r7, r3
 800f9bc:	4605      	mov	r5, r0
 800f9be:	f000 fcbb 	bl	8010338 <_localeconv_r>
 800f9c2:	6803      	ldr	r3, [r0, #0]
 800f9c4:	9304      	str	r3, [sp, #16]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f0 fcb2 	bl	8000330 <strlen>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f9d4:	9005      	str	r0, [sp, #20]
 800f9d6:	3307      	adds	r3, #7
 800f9d8:	f023 0307 	bic.w	r3, r3, #7
 800f9dc:	f103 0208 	add.w	r2, r3, #8
 800f9e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f9e4:	f8d4 b000 	ldr.w	fp, [r4]
 800f9e8:	f8c8 2000 	str.w	r2, [r8]
 800f9ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f9f4:	9307      	str	r3, [sp, #28]
 800f9f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800f9fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa02:	4b9c      	ldr	r3, [pc, #624]	@ (800fc74 <_printf_float+0x2c8>)
 800fa04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa08:	f7f1 f8f0 	bl	8000bec <__aeabi_dcmpun>
 800fa0c:	bb70      	cbnz	r0, 800fa6c <_printf_float+0xc0>
 800fa0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa12:	4b98      	ldr	r3, [pc, #608]	@ (800fc74 <_printf_float+0x2c8>)
 800fa14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa18:	f7f1 f8ca 	bl	8000bb0 <__aeabi_dcmple>
 800fa1c:	bb30      	cbnz	r0, 800fa6c <_printf_float+0xc0>
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2300      	movs	r3, #0
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f1 f8b9 	bl	8000b9c <__aeabi_dcmplt>
 800fa2a:	b110      	cbz	r0, 800fa32 <_printf_float+0x86>
 800fa2c:	232d      	movs	r3, #45	@ 0x2d
 800fa2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa32:	4a91      	ldr	r2, [pc, #580]	@ (800fc78 <_printf_float+0x2cc>)
 800fa34:	4b91      	ldr	r3, [pc, #580]	@ (800fc7c <_printf_float+0x2d0>)
 800fa36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fa3a:	bf94      	ite	ls
 800fa3c:	4690      	movls	r8, r2
 800fa3e:	4698      	movhi	r8, r3
 800fa40:	2303      	movs	r3, #3
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	f02b 0304 	bic.w	r3, fp, #4
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	f04f 0900 	mov.w	r9, #0
 800fa4e:	9700      	str	r7, [sp, #0]
 800fa50:	4633      	mov	r3, r6
 800fa52:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fa54:	4621      	mov	r1, r4
 800fa56:	4628      	mov	r0, r5
 800fa58:	f000 f9d2 	bl	800fe00 <_printf_common>
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	f040 808d 	bne.w	800fb7c <_printf_float+0x1d0>
 800fa62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa66:	b00d      	add	sp, #52	@ 0x34
 800fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6c:	4642      	mov	r2, r8
 800fa6e:	464b      	mov	r3, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	4649      	mov	r1, r9
 800fa74:	f7f1 f8ba 	bl	8000bec <__aeabi_dcmpun>
 800fa78:	b140      	cbz	r0, 800fa8c <_printf_float+0xe0>
 800fa7a:	464b      	mov	r3, r9
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	bfbc      	itt	lt
 800fa80:	232d      	movlt	r3, #45	@ 0x2d
 800fa82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fa86:	4a7e      	ldr	r2, [pc, #504]	@ (800fc80 <_printf_float+0x2d4>)
 800fa88:	4b7e      	ldr	r3, [pc, #504]	@ (800fc84 <_printf_float+0x2d8>)
 800fa8a:	e7d4      	b.n	800fa36 <_printf_float+0x8a>
 800fa8c:	6863      	ldr	r3, [r4, #4]
 800fa8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fa92:	9206      	str	r2, [sp, #24]
 800fa94:	1c5a      	adds	r2, r3, #1
 800fa96:	d13b      	bne.n	800fb10 <_printf_float+0x164>
 800fa98:	2306      	movs	r3, #6
 800fa9a:	6063      	str	r3, [r4, #4]
 800fa9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800faa0:	2300      	movs	r3, #0
 800faa2:	6022      	str	r2, [r4, #0]
 800faa4:	9303      	str	r3, [sp, #12]
 800faa6:	ab0a      	add	r3, sp, #40	@ 0x28
 800faa8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800faac:	ab09      	add	r3, sp, #36	@ 0x24
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	6861      	ldr	r1, [r4, #4]
 800fab2:	ec49 8b10 	vmov	d0, r8, r9
 800fab6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800faba:	4628      	mov	r0, r5
 800fabc:	f7ff fed6 	bl	800f86c <__cvt>
 800fac0:	9b06      	ldr	r3, [sp, #24]
 800fac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fac4:	2b47      	cmp	r3, #71	@ 0x47
 800fac6:	4680      	mov	r8, r0
 800fac8:	d129      	bne.n	800fb1e <_printf_float+0x172>
 800faca:	1cc8      	adds	r0, r1, #3
 800facc:	db02      	blt.n	800fad4 <_printf_float+0x128>
 800face:	6863      	ldr	r3, [r4, #4]
 800fad0:	4299      	cmp	r1, r3
 800fad2:	dd41      	ble.n	800fb58 <_printf_float+0x1ac>
 800fad4:	f1aa 0a02 	sub.w	sl, sl, #2
 800fad8:	fa5f fa8a 	uxtb.w	sl, sl
 800fadc:	3901      	subs	r1, #1
 800fade:	4652      	mov	r2, sl
 800fae0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fae4:	9109      	str	r1, [sp, #36]	@ 0x24
 800fae6:	f7ff ff26 	bl	800f936 <__exponent>
 800faea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faec:	1813      	adds	r3, r2, r0
 800faee:	2a01      	cmp	r2, #1
 800faf0:	4681      	mov	r9, r0
 800faf2:	6123      	str	r3, [r4, #16]
 800faf4:	dc02      	bgt.n	800fafc <_printf_float+0x150>
 800faf6:	6822      	ldr	r2, [r4, #0]
 800faf8:	07d2      	lsls	r2, r2, #31
 800fafa:	d501      	bpl.n	800fb00 <_printf_float+0x154>
 800fafc:	3301      	adds	r3, #1
 800fafe:	6123      	str	r3, [r4, #16]
 800fb00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d0a2      	beq.n	800fa4e <_printf_float+0xa2>
 800fb08:	232d      	movs	r3, #45	@ 0x2d
 800fb0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb0e:	e79e      	b.n	800fa4e <_printf_float+0xa2>
 800fb10:	9a06      	ldr	r2, [sp, #24]
 800fb12:	2a47      	cmp	r2, #71	@ 0x47
 800fb14:	d1c2      	bne.n	800fa9c <_printf_float+0xf0>
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d1c0      	bne.n	800fa9c <_printf_float+0xf0>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e7bd      	b.n	800fa9a <_printf_float+0xee>
 800fb1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb22:	d9db      	bls.n	800fadc <_printf_float+0x130>
 800fb24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fb28:	d118      	bne.n	800fb5c <_printf_float+0x1b0>
 800fb2a:	2900      	cmp	r1, #0
 800fb2c:	6863      	ldr	r3, [r4, #4]
 800fb2e:	dd0b      	ble.n	800fb48 <_printf_float+0x19c>
 800fb30:	6121      	str	r1, [r4, #16]
 800fb32:	b913      	cbnz	r3, 800fb3a <_printf_float+0x18e>
 800fb34:	6822      	ldr	r2, [r4, #0]
 800fb36:	07d0      	lsls	r0, r2, #31
 800fb38:	d502      	bpl.n	800fb40 <_printf_float+0x194>
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	440b      	add	r3, r1
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fb42:	f04f 0900 	mov.w	r9, #0
 800fb46:	e7db      	b.n	800fb00 <_printf_float+0x154>
 800fb48:	b913      	cbnz	r3, 800fb50 <_printf_float+0x1a4>
 800fb4a:	6822      	ldr	r2, [r4, #0]
 800fb4c:	07d2      	lsls	r2, r2, #31
 800fb4e:	d501      	bpl.n	800fb54 <_printf_float+0x1a8>
 800fb50:	3302      	adds	r3, #2
 800fb52:	e7f4      	b.n	800fb3e <_printf_float+0x192>
 800fb54:	2301      	movs	r3, #1
 800fb56:	e7f2      	b.n	800fb3e <_printf_float+0x192>
 800fb58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb5e:	4299      	cmp	r1, r3
 800fb60:	db05      	blt.n	800fb6e <_printf_float+0x1c2>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	6121      	str	r1, [r4, #16]
 800fb66:	07d8      	lsls	r0, r3, #31
 800fb68:	d5ea      	bpl.n	800fb40 <_printf_float+0x194>
 800fb6a:	1c4b      	adds	r3, r1, #1
 800fb6c:	e7e7      	b.n	800fb3e <_printf_float+0x192>
 800fb6e:	2900      	cmp	r1, #0
 800fb70:	bfd4      	ite	le
 800fb72:	f1c1 0202 	rsble	r2, r1, #2
 800fb76:	2201      	movgt	r2, #1
 800fb78:	4413      	add	r3, r2
 800fb7a:	e7e0      	b.n	800fb3e <_printf_float+0x192>
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	055a      	lsls	r2, r3, #21
 800fb80:	d407      	bmi.n	800fb92 <_printf_float+0x1e6>
 800fb82:	6923      	ldr	r3, [r4, #16]
 800fb84:	4642      	mov	r2, r8
 800fb86:	4631      	mov	r1, r6
 800fb88:	4628      	mov	r0, r5
 800fb8a:	47b8      	blx	r7
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	d12b      	bne.n	800fbe8 <_printf_float+0x23c>
 800fb90:	e767      	b.n	800fa62 <_printf_float+0xb6>
 800fb92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb96:	f240 80dd 	bls.w	800fd54 <_printf_float+0x3a8>
 800fb9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2300      	movs	r3, #0
 800fba2:	f7f0 fff1 	bl	8000b88 <__aeabi_dcmpeq>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d033      	beq.n	800fc12 <_printf_float+0x266>
 800fbaa:	4a37      	ldr	r2, [pc, #220]	@ (800fc88 <_printf_float+0x2dc>)
 800fbac:	2301      	movs	r3, #1
 800fbae:	4631      	mov	r1, r6
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	47b8      	blx	r7
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	f43f af54 	beq.w	800fa62 <_printf_float+0xb6>
 800fbba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fbbe:	4543      	cmp	r3, r8
 800fbc0:	db02      	blt.n	800fbc8 <_printf_float+0x21c>
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	07d8      	lsls	r0, r3, #31
 800fbc6:	d50f      	bpl.n	800fbe8 <_printf_float+0x23c>
 800fbc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4628      	mov	r0, r5
 800fbd0:	47b8      	blx	r7
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	f43f af45 	beq.w	800fa62 <_printf_float+0xb6>
 800fbd8:	f04f 0900 	mov.w	r9, #0
 800fbdc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fbe0:	f104 0a1a 	add.w	sl, r4, #26
 800fbe4:	45c8      	cmp	r8, r9
 800fbe6:	dc09      	bgt.n	800fbfc <_printf_float+0x250>
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	079b      	lsls	r3, r3, #30
 800fbec:	f100 8103 	bmi.w	800fdf6 <_printf_float+0x44a>
 800fbf0:	68e0      	ldr	r0, [r4, #12]
 800fbf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbf4:	4298      	cmp	r0, r3
 800fbf6:	bfb8      	it	lt
 800fbf8:	4618      	movlt	r0, r3
 800fbfa:	e734      	b.n	800fa66 <_printf_float+0xba>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	4652      	mov	r2, sl
 800fc00:	4631      	mov	r1, r6
 800fc02:	4628      	mov	r0, r5
 800fc04:	47b8      	blx	r7
 800fc06:	3001      	adds	r0, #1
 800fc08:	f43f af2b 	beq.w	800fa62 <_printf_float+0xb6>
 800fc0c:	f109 0901 	add.w	r9, r9, #1
 800fc10:	e7e8      	b.n	800fbe4 <_printf_float+0x238>
 800fc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dc39      	bgt.n	800fc8c <_printf_float+0x2e0>
 800fc18:	4a1b      	ldr	r2, [pc, #108]	@ (800fc88 <_printf_float+0x2dc>)
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	4628      	mov	r0, r5
 800fc20:	47b8      	blx	r7
 800fc22:	3001      	adds	r0, #1
 800fc24:	f43f af1d 	beq.w	800fa62 <_printf_float+0xb6>
 800fc28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fc2c:	ea59 0303 	orrs.w	r3, r9, r3
 800fc30:	d102      	bne.n	800fc38 <_printf_float+0x28c>
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	07d9      	lsls	r1, r3, #31
 800fc36:	d5d7      	bpl.n	800fbe8 <_printf_float+0x23c>
 800fc38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	47b8      	blx	r7
 800fc42:	3001      	adds	r0, #1
 800fc44:	f43f af0d 	beq.w	800fa62 <_printf_float+0xb6>
 800fc48:	f04f 0a00 	mov.w	sl, #0
 800fc4c:	f104 0b1a 	add.w	fp, r4, #26
 800fc50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc52:	425b      	negs	r3, r3
 800fc54:	4553      	cmp	r3, sl
 800fc56:	dc01      	bgt.n	800fc5c <_printf_float+0x2b0>
 800fc58:	464b      	mov	r3, r9
 800fc5a:	e793      	b.n	800fb84 <_printf_float+0x1d8>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	465a      	mov	r2, fp
 800fc60:	4631      	mov	r1, r6
 800fc62:	4628      	mov	r0, r5
 800fc64:	47b8      	blx	r7
 800fc66:	3001      	adds	r0, #1
 800fc68:	f43f aefb 	beq.w	800fa62 <_printf_float+0xb6>
 800fc6c:	f10a 0a01 	add.w	sl, sl, #1
 800fc70:	e7ee      	b.n	800fc50 <_printf_float+0x2a4>
 800fc72:	bf00      	nop
 800fc74:	7fefffff 	.word	0x7fefffff
 800fc78:	08025dc0 	.word	0x08025dc0
 800fc7c:	08025dc4 	.word	0x08025dc4
 800fc80:	08025dc8 	.word	0x08025dc8
 800fc84:	08025dcc 	.word	0x08025dcc
 800fc88:	08025dd0 	.word	0x08025dd0
 800fc8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fc8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc92:	4553      	cmp	r3, sl
 800fc94:	bfa8      	it	ge
 800fc96:	4653      	movge	r3, sl
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	4699      	mov	r9, r3
 800fc9c:	dc36      	bgt.n	800fd0c <_printf_float+0x360>
 800fc9e:	f04f 0b00 	mov.w	fp, #0
 800fca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fca6:	f104 021a 	add.w	r2, r4, #26
 800fcaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcac:	9306      	str	r3, [sp, #24]
 800fcae:	eba3 0309 	sub.w	r3, r3, r9
 800fcb2:	455b      	cmp	r3, fp
 800fcb4:	dc31      	bgt.n	800fd1a <_printf_float+0x36e>
 800fcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb8:	459a      	cmp	sl, r3
 800fcba:	dc3a      	bgt.n	800fd32 <_printf_float+0x386>
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	07da      	lsls	r2, r3, #31
 800fcc0:	d437      	bmi.n	800fd32 <_printf_float+0x386>
 800fcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcc4:	ebaa 0903 	sub.w	r9, sl, r3
 800fcc8:	9b06      	ldr	r3, [sp, #24]
 800fcca:	ebaa 0303 	sub.w	r3, sl, r3
 800fcce:	4599      	cmp	r9, r3
 800fcd0:	bfa8      	it	ge
 800fcd2:	4699      	movge	r9, r3
 800fcd4:	f1b9 0f00 	cmp.w	r9, #0
 800fcd8:	dc33      	bgt.n	800fd42 <_printf_float+0x396>
 800fcda:	f04f 0800 	mov.w	r8, #0
 800fcde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fce2:	f104 0b1a 	add.w	fp, r4, #26
 800fce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce8:	ebaa 0303 	sub.w	r3, sl, r3
 800fcec:	eba3 0309 	sub.w	r3, r3, r9
 800fcf0:	4543      	cmp	r3, r8
 800fcf2:	f77f af79 	ble.w	800fbe8 <_printf_float+0x23c>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	465a      	mov	r2, fp
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f aeae 	beq.w	800fa62 <_printf_float+0xb6>
 800fd06:	f108 0801 	add.w	r8, r8, #1
 800fd0a:	e7ec      	b.n	800fce6 <_printf_float+0x33a>
 800fd0c:	4642      	mov	r2, r8
 800fd0e:	4631      	mov	r1, r6
 800fd10:	4628      	mov	r0, r5
 800fd12:	47b8      	blx	r7
 800fd14:	3001      	adds	r0, #1
 800fd16:	d1c2      	bne.n	800fc9e <_printf_float+0x2f2>
 800fd18:	e6a3      	b.n	800fa62 <_printf_float+0xb6>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4631      	mov	r1, r6
 800fd1e:	4628      	mov	r0, r5
 800fd20:	9206      	str	r2, [sp, #24]
 800fd22:	47b8      	blx	r7
 800fd24:	3001      	adds	r0, #1
 800fd26:	f43f ae9c 	beq.w	800fa62 <_printf_float+0xb6>
 800fd2a:	9a06      	ldr	r2, [sp, #24]
 800fd2c:	f10b 0b01 	add.w	fp, fp, #1
 800fd30:	e7bb      	b.n	800fcaa <_printf_float+0x2fe>
 800fd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd36:	4631      	mov	r1, r6
 800fd38:	4628      	mov	r0, r5
 800fd3a:	47b8      	blx	r7
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	d1c0      	bne.n	800fcc2 <_printf_float+0x316>
 800fd40:	e68f      	b.n	800fa62 <_printf_float+0xb6>
 800fd42:	9a06      	ldr	r2, [sp, #24]
 800fd44:	464b      	mov	r3, r9
 800fd46:	4442      	add	r2, r8
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	47b8      	blx	r7
 800fd4e:	3001      	adds	r0, #1
 800fd50:	d1c3      	bne.n	800fcda <_printf_float+0x32e>
 800fd52:	e686      	b.n	800fa62 <_printf_float+0xb6>
 800fd54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd58:	f1ba 0f01 	cmp.w	sl, #1
 800fd5c:	dc01      	bgt.n	800fd62 <_printf_float+0x3b6>
 800fd5e:	07db      	lsls	r3, r3, #31
 800fd60:	d536      	bpl.n	800fdd0 <_printf_float+0x424>
 800fd62:	2301      	movs	r3, #1
 800fd64:	4642      	mov	r2, r8
 800fd66:	4631      	mov	r1, r6
 800fd68:	4628      	mov	r0, r5
 800fd6a:	47b8      	blx	r7
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	f43f ae78 	beq.w	800fa62 <_printf_float+0xb6>
 800fd72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd76:	4631      	mov	r1, r6
 800fd78:	4628      	mov	r0, r5
 800fd7a:	47b8      	blx	r7
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	f43f ae70 	beq.w	800fa62 <_printf_float+0xb6>
 800fd82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd86:	2200      	movs	r2, #0
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fd8e:	f7f0 fefb 	bl	8000b88 <__aeabi_dcmpeq>
 800fd92:	b9c0      	cbnz	r0, 800fdc6 <_printf_float+0x41a>
 800fd94:	4653      	mov	r3, sl
 800fd96:	f108 0201 	add.w	r2, r8, #1
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	47b8      	blx	r7
 800fda0:	3001      	adds	r0, #1
 800fda2:	d10c      	bne.n	800fdbe <_printf_float+0x412>
 800fda4:	e65d      	b.n	800fa62 <_printf_float+0xb6>
 800fda6:	2301      	movs	r3, #1
 800fda8:	465a      	mov	r2, fp
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4628      	mov	r0, r5
 800fdae:	47b8      	blx	r7
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f43f ae56 	beq.w	800fa62 <_printf_float+0xb6>
 800fdb6:	f108 0801 	add.w	r8, r8, #1
 800fdba:	45d0      	cmp	r8, sl
 800fdbc:	dbf3      	blt.n	800fda6 <_printf_float+0x3fa>
 800fdbe:	464b      	mov	r3, r9
 800fdc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fdc4:	e6df      	b.n	800fb86 <_printf_float+0x1da>
 800fdc6:	f04f 0800 	mov.w	r8, #0
 800fdca:	f104 0b1a 	add.w	fp, r4, #26
 800fdce:	e7f4      	b.n	800fdba <_printf_float+0x40e>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	4642      	mov	r2, r8
 800fdd4:	e7e1      	b.n	800fd9a <_printf_float+0x3ee>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	464a      	mov	r2, r9
 800fdda:	4631      	mov	r1, r6
 800fddc:	4628      	mov	r0, r5
 800fdde:	47b8      	blx	r7
 800fde0:	3001      	adds	r0, #1
 800fde2:	f43f ae3e 	beq.w	800fa62 <_printf_float+0xb6>
 800fde6:	f108 0801 	add.w	r8, r8, #1
 800fdea:	68e3      	ldr	r3, [r4, #12]
 800fdec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fdee:	1a5b      	subs	r3, r3, r1
 800fdf0:	4543      	cmp	r3, r8
 800fdf2:	dcf0      	bgt.n	800fdd6 <_printf_float+0x42a>
 800fdf4:	e6fc      	b.n	800fbf0 <_printf_float+0x244>
 800fdf6:	f04f 0800 	mov.w	r8, #0
 800fdfa:	f104 0919 	add.w	r9, r4, #25
 800fdfe:	e7f4      	b.n	800fdea <_printf_float+0x43e>

0800fe00 <_printf_common>:
 800fe00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe04:	4616      	mov	r6, r2
 800fe06:	4698      	mov	r8, r3
 800fe08:	688a      	ldr	r2, [r1, #8]
 800fe0a:	690b      	ldr	r3, [r1, #16]
 800fe0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe10:	4293      	cmp	r3, r2
 800fe12:	bfb8      	it	lt
 800fe14:	4613      	movlt	r3, r2
 800fe16:	6033      	str	r3, [r6, #0]
 800fe18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe1c:	4607      	mov	r7, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	b10a      	cbz	r2, 800fe26 <_printf_common+0x26>
 800fe22:	3301      	adds	r3, #1
 800fe24:	6033      	str	r3, [r6, #0]
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	0699      	lsls	r1, r3, #26
 800fe2a:	bf42      	ittt	mi
 800fe2c:	6833      	ldrmi	r3, [r6, #0]
 800fe2e:	3302      	addmi	r3, #2
 800fe30:	6033      	strmi	r3, [r6, #0]
 800fe32:	6825      	ldr	r5, [r4, #0]
 800fe34:	f015 0506 	ands.w	r5, r5, #6
 800fe38:	d106      	bne.n	800fe48 <_printf_common+0x48>
 800fe3a:	f104 0a19 	add.w	sl, r4, #25
 800fe3e:	68e3      	ldr	r3, [r4, #12]
 800fe40:	6832      	ldr	r2, [r6, #0]
 800fe42:	1a9b      	subs	r3, r3, r2
 800fe44:	42ab      	cmp	r3, r5
 800fe46:	dc26      	bgt.n	800fe96 <_printf_common+0x96>
 800fe48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe4c:	6822      	ldr	r2, [r4, #0]
 800fe4e:	3b00      	subs	r3, #0
 800fe50:	bf18      	it	ne
 800fe52:	2301      	movne	r3, #1
 800fe54:	0692      	lsls	r2, r2, #26
 800fe56:	d42b      	bmi.n	800feb0 <_printf_common+0xb0>
 800fe58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe5c:	4641      	mov	r1, r8
 800fe5e:	4638      	mov	r0, r7
 800fe60:	47c8      	blx	r9
 800fe62:	3001      	adds	r0, #1
 800fe64:	d01e      	beq.n	800fea4 <_printf_common+0xa4>
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	6922      	ldr	r2, [r4, #16]
 800fe6a:	f003 0306 	and.w	r3, r3, #6
 800fe6e:	2b04      	cmp	r3, #4
 800fe70:	bf02      	ittt	eq
 800fe72:	68e5      	ldreq	r5, [r4, #12]
 800fe74:	6833      	ldreq	r3, [r6, #0]
 800fe76:	1aed      	subeq	r5, r5, r3
 800fe78:	68a3      	ldr	r3, [r4, #8]
 800fe7a:	bf0c      	ite	eq
 800fe7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe80:	2500      	movne	r5, #0
 800fe82:	4293      	cmp	r3, r2
 800fe84:	bfc4      	itt	gt
 800fe86:	1a9b      	subgt	r3, r3, r2
 800fe88:	18ed      	addgt	r5, r5, r3
 800fe8a:	2600      	movs	r6, #0
 800fe8c:	341a      	adds	r4, #26
 800fe8e:	42b5      	cmp	r5, r6
 800fe90:	d11a      	bne.n	800fec8 <_printf_common+0xc8>
 800fe92:	2000      	movs	r0, #0
 800fe94:	e008      	b.n	800fea8 <_printf_common+0xa8>
 800fe96:	2301      	movs	r3, #1
 800fe98:	4652      	mov	r2, sl
 800fe9a:	4641      	mov	r1, r8
 800fe9c:	4638      	mov	r0, r7
 800fe9e:	47c8      	blx	r9
 800fea0:	3001      	adds	r0, #1
 800fea2:	d103      	bne.n	800feac <_printf_common+0xac>
 800fea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feac:	3501      	adds	r5, #1
 800feae:	e7c6      	b.n	800fe3e <_printf_common+0x3e>
 800feb0:	18e1      	adds	r1, r4, r3
 800feb2:	1c5a      	adds	r2, r3, #1
 800feb4:	2030      	movs	r0, #48	@ 0x30
 800feb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800feba:	4422      	add	r2, r4
 800febc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fec4:	3302      	adds	r3, #2
 800fec6:	e7c7      	b.n	800fe58 <_printf_common+0x58>
 800fec8:	2301      	movs	r3, #1
 800feca:	4622      	mov	r2, r4
 800fecc:	4641      	mov	r1, r8
 800fece:	4638      	mov	r0, r7
 800fed0:	47c8      	blx	r9
 800fed2:	3001      	adds	r0, #1
 800fed4:	d0e6      	beq.n	800fea4 <_printf_common+0xa4>
 800fed6:	3601      	adds	r6, #1
 800fed8:	e7d9      	b.n	800fe8e <_printf_common+0x8e>
	...

0800fedc <_printf_i>:
 800fedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fee0:	7e0f      	ldrb	r7, [r1, #24]
 800fee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fee4:	2f78      	cmp	r7, #120	@ 0x78
 800fee6:	4691      	mov	r9, r2
 800fee8:	4680      	mov	r8, r0
 800feea:	460c      	mov	r4, r1
 800feec:	469a      	mov	sl, r3
 800feee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fef2:	d807      	bhi.n	800ff04 <_printf_i+0x28>
 800fef4:	2f62      	cmp	r7, #98	@ 0x62
 800fef6:	d80a      	bhi.n	800ff0e <_printf_i+0x32>
 800fef8:	2f00      	cmp	r7, #0
 800fefa:	f000 80d2 	beq.w	80100a2 <_printf_i+0x1c6>
 800fefe:	2f58      	cmp	r7, #88	@ 0x58
 800ff00:	f000 80b9 	beq.w	8010076 <_printf_i+0x19a>
 800ff04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff0c:	e03a      	b.n	800ff84 <_printf_i+0xa8>
 800ff0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff12:	2b15      	cmp	r3, #21
 800ff14:	d8f6      	bhi.n	800ff04 <_printf_i+0x28>
 800ff16:	a101      	add	r1, pc, #4	@ (adr r1, 800ff1c <_printf_i+0x40>)
 800ff18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff1c:	0800ff75 	.word	0x0800ff75
 800ff20:	0800ff89 	.word	0x0800ff89
 800ff24:	0800ff05 	.word	0x0800ff05
 800ff28:	0800ff05 	.word	0x0800ff05
 800ff2c:	0800ff05 	.word	0x0800ff05
 800ff30:	0800ff05 	.word	0x0800ff05
 800ff34:	0800ff89 	.word	0x0800ff89
 800ff38:	0800ff05 	.word	0x0800ff05
 800ff3c:	0800ff05 	.word	0x0800ff05
 800ff40:	0800ff05 	.word	0x0800ff05
 800ff44:	0800ff05 	.word	0x0800ff05
 800ff48:	08010089 	.word	0x08010089
 800ff4c:	0800ffb3 	.word	0x0800ffb3
 800ff50:	08010043 	.word	0x08010043
 800ff54:	0800ff05 	.word	0x0800ff05
 800ff58:	0800ff05 	.word	0x0800ff05
 800ff5c:	080100ab 	.word	0x080100ab
 800ff60:	0800ff05 	.word	0x0800ff05
 800ff64:	0800ffb3 	.word	0x0800ffb3
 800ff68:	0800ff05 	.word	0x0800ff05
 800ff6c:	0800ff05 	.word	0x0800ff05
 800ff70:	0801004b 	.word	0x0801004b
 800ff74:	6833      	ldr	r3, [r6, #0]
 800ff76:	1d1a      	adds	r2, r3, #4
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6032      	str	r2, [r6, #0]
 800ff7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff84:	2301      	movs	r3, #1
 800ff86:	e09d      	b.n	80100c4 <_printf_i+0x1e8>
 800ff88:	6833      	ldr	r3, [r6, #0]
 800ff8a:	6820      	ldr	r0, [r4, #0]
 800ff8c:	1d19      	adds	r1, r3, #4
 800ff8e:	6031      	str	r1, [r6, #0]
 800ff90:	0606      	lsls	r6, r0, #24
 800ff92:	d501      	bpl.n	800ff98 <_printf_i+0xbc>
 800ff94:	681d      	ldr	r5, [r3, #0]
 800ff96:	e003      	b.n	800ffa0 <_printf_i+0xc4>
 800ff98:	0645      	lsls	r5, r0, #25
 800ff9a:	d5fb      	bpl.n	800ff94 <_printf_i+0xb8>
 800ff9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffa0:	2d00      	cmp	r5, #0
 800ffa2:	da03      	bge.n	800ffac <_printf_i+0xd0>
 800ffa4:	232d      	movs	r3, #45	@ 0x2d
 800ffa6:	426d      	negs	r5, r5
 800ffa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffac:	4859      	ldr	r0, [pc, #356]	@ (8010114 <_printf_i+0x238>)
 800ffae:	230a      	movs	r3, #10
 800ffb0:	e011      	b.n	800ffd6 <_printf_i+0xfa>
 800ffb2:	6821      	ldr	r1, [r4, #0]
 800ffb4:	6833      	ldr	r3, [r6, #0]
 800ffb6:	0608      	lsls	r0, r1, #24
 800ffb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ffbc:	d402      	bmi.n	800ffc4 <_printf_i+0xe8>
 800ffbe:	0649      	lsls	r1, r1, #25
 800ffc0:	bf48      	it	mi
 800ffc2:	b2ad      	uxthmi	r5, r5
 800ffc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ffc6:	4853      	ldr	r0, [pc, #332]	@ (8010114 <_printf_i+0x238>)
 800ffc8:	6033      	str	r3, [r6, #0]
 800ffca:	bf14      	ite	ne
 800ffcc:	230a      	movne	r3, #10
 800ffce:	2308      	moveq	r3, #8
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ffd6:	6866      	ldr	r6, [r4, #4]
 800ffd8:	60a6      	str	r6, [r4, #8]
 800ffda:	2e00      	cmp	r6, #0
 800ffdc:	bfa2      	ittt	ge
 800ffde:	6821      	ldrge	r1, [r4, #0]
 800ffe0:	f021 0104 	bicge.w	r1, r1, #4
 800ffe4:	6021      	strge	r1, [r4, #0]
 800ffe6:	b90d      	cbnz	r5, 800ffec <_printf_i+0x110>
 800ffe8:	2e00      	cmp	r6, #0
 800ffea:	d04b      	beq.n	8010084 <_printf_i+0x1a8>
 800ffec:	4616      	mov	r6, r2
 800ffee:	fbb5 f1f3 	udiv	r1, r5, r3
 800fff2:	fb03 5711 	mls	r7, r3, r1, r5
 800fff6:	5dc7      	ldrb	r7, [r0, r7]
 800fff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fffc:	462f      	mov	r7, r5
 800fffe:	42bb      	cmp	r3, r7
 8010000:	460d      	mov	r5, r1
 8010002:	d9f4      	bls.n	800ffee <_printf_i+0x112>
 8010004:	2b08      	cmp	r3, #8
 8010006:	d10b      	bne.n	8010020 <_printf_i+0x144>
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	07df      	lsls	r7, r3, #31
 801000c:	d508      	bpl.n	8010020 <_printf_i+0x144>
 801000e:	6923      	ldr	r3, [r4, #16]
 8010010:	6861      	ldr	r1, [r4, #4]
 8010012:	4299      	cmp	r1, r3
 8010014:	bfde      	ittt	le
 8010016:	2330      	movle	r3, #48	@ 0x30
 8010018:	f806 3c01 	strble.w	r3, [r6, #-1]
 801001c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010020:	1b92      	subs	r2, r2, r6
 8010022:	6122      	str	r2, [r4, #16]
 8010024:	f8cd a000 	str.w	sl, [sp]
 8010028:	464b      	mov	r3, r9
 801002a:	aa03      	add	r2, sp, #12
 801002c:	4621      	mov	r1, r4
 801002e:	4640      	mov	r0, r8
 8010030:	f7ff fee6 	bl	800fe00 <_printf_common>
 8010034:	3001      	adds	r0, #1
 8010036:	d14a      	bne.n	80100ce <_printf_i+0x1f2>
 8010038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801003c:	b004      	add	sp, #16
 801003e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	f043 0320 	orr.w	r3, r3, #32
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	4833      	ldr	r0, [pc, #204]	@ (8010118 <_printf_i+0x23c>)
 801004c:	2778      	movs	r7, #120	@ 0x78
 801004e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	6831      	ldr	r1, [r6, #0]
 8010056:	061f      	lsls	r7, r3, #24
 8010058:	f851 5b04 	ldr.w	r5, [r1], #4
 801005c:	d402      	bmi.n	8010064 <_printf_i+0x188>
 801005e:	065f      	lsls	r7, r3, #25
 8010060:	bf48      	it	mi
 8010062:	b2ad      	uxthmi	r5, r5
 8010064:	6031      	str	r1, [r6, #0]
 8010066:	07d9      	lsls	r1, r3, #31
 8010068:	bf44      	itt	mi
 801006a:	f043 0320 	orrmi.w	r3, r3, #32
 801006e:	6023      	strmi	r3, [r4, #0]
 8010070:	b11d      	cbz	r5, 801007a <_printf_i+0x19e>
 8010072:	2310      	movs	r3, #16
 8010074:	e7ac      	b.n	800ffd0 <_printf_i+0xf4>
 8010076:	4827      	ldr	r0, [pc, #156]	@ (8010114 <_printf_i+0x238>)
 8010078:	e7e9      	b.n	801004e <_printf_i+0x172>
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	f023 0320 	bic.w	r3, r3, #32
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	e7f6      	b.n	8010072 <_printf_i+0x196>
 8010084:	4616      	mov	r6, r2
 8010086:	e7bd      	b.n	8010004 <_printf_i+0x128>
 8010088:	6833      	ldr	r3, [r6, #0]
 801008a:	6825      	ldr	r5, [r4, #0]
 801008c:	6961      	ldr	r1, [r4, #20]
 801008e:	1d18      	adds	r0, r3, #4
 8010090:	6030      	str	r0, [r6, #0]
 8010092:	062e      	lsls	r6, r5, #24
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	d501      	bpl.n	801009c <_printf_i+0x1c0>
 8010098:	6019      	str	r1, [r3, #0]
 801009a:	e002      	b.n	80100a2 <_printf_i+0x1c6>
 801009c:	0668      	lsls	r0, r5, #25
 801009e:	d5fb      	bpl.n	8010098 <_printf_i+0x1bc>
 80100a0:	8019      	strh	r1, [r3, #0]
 80100a2:	2300      	movs	r3, #0
 80100a4:	6123      	str	r3, [r4, #16]
 80100a6:	4616      	mov	r6, r2
 80100a8:	e7bc      	b.n	8010024 <_printf_i+0x148>
 80100aa:	6833      	ldr	r3, [r6, #0]
 80100ac:	1d1a      	adds	r2, r3, #4
 80100ae:	6032      	str	r2, [r6, #0]
 80100b0:	681e      	ldr	r6, [r3, #0]
 80100b2:	6862      	ldr	r2, [r4, #4]
 80100b4:	2100      	movs	r1, #0
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7f0 f8ea 	bl	8000290 <memchr>
 80100bc:	b108      	cbz	r0, 80100c2 <_printf_i+0x1e6>
 80100be:	1b80      	subs	r0, r0, r6
 80100c0:	6060      	str	r0, [r4, #4]
 80100c2:	6863      	ldr	r3, [r4, #4]
 80100c4:	6123      	str	r3, [r4, #16]
 80100c6:	2300      	movs	r3, #0
 80100c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100cc:	e7aa      	b.n	8010024 <_printf_i+0x148>
 80100ce:	6923      	ldr	r3, [r4, #16]
 80100d0:	4632      	mov	r2, r6
 80100d2:	4649      	mov	r1, r9
 80100d4:	4640      	mov	r0, r8
 80100d6:	47d0      	blx	sl
 80100d8:	3001      	adds	r0, #1
 80100da:	d0ad      	beq.n	8010038 <_printf_i+0x15c>
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	079b      	lsls	r3, r3, #30
 80100e0:	d413      	bmi.n	801010a <_printf_i+0x22e>
 80100e2:	68e0      	ldr	r0, [r4, #12]
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	4298      	cmp	r0, r3
 80100e8:	bfb8      	it	lt
 80100ea:	4618      	movlt	r0, r3
 80100ec:	e7a6      	b.n	801003c <_printf_i+0x160>
 80100ee:	2301      	movs	r3, #1
 80100f0:	4632      	mov	r2, r6
 80100f2:	4649      	mov	r1, r9
 80100f4:	4640      	mov	r0, r8
 80100f6:	47d0      	blx	sl
 80100f8:	3001      	adds	r0, #1
 80100fa:	d09d      	beq.n	8010038 <_printf_i+0x15c>
 80100fc:	3501      	adds	r5, #1
 80100fe:	68e3      	ldr	r3, [r4, #12]
 8010100:	9903      	ldr	r1, [sp, #12]
 8010102:	1a5b      	subs	r3, r3, r1
 8010104:	42ab      	cmp	r3, r5
 8010106:	dcf2      	bgt.n	80100ee <_printf_i+0x212>
 8010108:	e7eb      	b.n	80100e2 <_printf_i+0x206>
 801010a:	2500      	movs	r5, #0
 801010c:	f104 0619 	add.w	r6, r4, #25
 8010110:	e7f5      	b.n	80100fe <_printf_i+0x222>
 8010112:	bf00      	nop
 8010114:	08025dd2 	.word	0x08025dd2
 8010118:	08025de3 	.word	0x08025de3

0801011c <std>:
 801011c:	2300      	movs	r3, #0
 801011e:	b510      	push	{r4, lr}
 8010120:	4604      	mov	r4, r0
 8010122:	e9c0 3300 	strd	r3, r3, [r0]
 8010126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801012a:	6083      	str	r3, [r0, #8]
 801012c:	8181      	strh	r1, [r0, #12]
 801012e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010130:	81c2      	strh	r2, [r0, #14]
 8010132:	6183      	str	r3, [r0, #24]
 8010134:	4619      	mov	r1, r3
 8010136:	2208      	movs	r2, #8
 8010138:	305c      	adds	r0, #92	@ 0x5c
 801013a:	f000 f8f4 	bl	8010326 <memset>
 801013e:	4b0d      	ldr	r3, [pc, #52]	@ (8010174 <std+0x58>)
 8010140:	6263      	str	r3, [r4, #36]	@ 0x24
 8010142:	4b0d      	ldr	r3, [pc, #52]	@ (8010178 <std+0x5c>)
 8010144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010146:	4b0d      	ldr	r3, [pc, #52]	@ (801017c <std+0x60>)
 8010148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801014a:	4b0d      	ldr	r3, [pc, #52]	@ (8010180 <std+0x64>)
 801014c:	6323      	str	r3, [r4, #48]	@ 0x30
 801014e:	4b0d      	ldr	r3, [pc, #52]	@ (8010184 <std+0x68>)
 8010150:	6224      	str	r4, [r4, #32]
 8010152:	429c      	cmp	r4, r3
 8010154:	d006      	beq.n	8010164 <std+0x48>
 8010156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801015a:	4294      	cmp	r4, r2
 801015c:	d002      	beq.n	8010164 <std+0x48>
 801015e:	33d0      	adds	r3, #208	@ 0xd0
 8010160:	429c      	cmp	r4, r3
 8010162:	d105      	bne.n	8010170 <std+0x54>
 8010164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801016c:	f000 b958 	b.w	8010420 <__retarget_lock_init_recursive>
 8010170:	bd10      	pop	{r4, pc}
 8010172:	bf00      	nop
 8010174:	080102a1 	.word	0x080102a1
 8010178:	080102c3 	.word	0x080102c3
 801017c:	080102fb 	.word	0x080102fb
 8010180:	0801031f 	.word	0x0801031f
 8010184:	200092a4 	.word	0x200092a4

08010188 <stdio_exit_handler>:
 8010188:	4a02      	ldr	r2, [pc, #8]	@ (8010194 <stdio_exit_handler+0xc>)
 801018a:	4903      	ldr	r1, [pc, #12]	@ (8010198 <stdio_exit_handler+0x10>)
 801018c:	4803      	ldr	r0, [pc, #12]	@ (801019c <stdio_exit_handler+0x14>)
 801018e:	f000 b869 	b.w	8010264 <_fwalk_sglue>
 8010192:	bf00      	nop
 8010194:	20000014 	.word	0x20000014
 8010198:	08011aed 	.word	0x08011aed
 801019c:	20000024 	.word	0x20000024

080101a0 <cleanup_stdio>:
 80101a0:	6841      	ldr	r1, [r0, #4]
 80101a2:	4b0c      	ldr	r3, [pc, #48]	@ (80101d4 <cleanup_stdio+0x34>)
 80101a4:	4299      	cmp	r1, r3
 80101a6:	b510      	push	{r4, lr}
 80101a8:	4604      	mov	r4, r0
 80101aa:	d001      	beq.n	80101b0 <cleanup_stdio+0x10>
 80101ac:	f001 fc9e 	bl	8011aec <_fflush_r>
 80101b0:	68a1      	ldr	r1, [r4, #8]
 80101b2:	4b09      	ldr	r3, [pc, #36]	@ (80101d8 <cleanup_stdio+0x38>)
 80101b4:	4299      	cmp	r1, r3
 80101b6:	d002      	beq.n	80101be <cleanup_stdio+0x1e>
 80101b8:	4620      	mov	r0, r4
 80101ba:	f001 fc97 	bl	8011aec <_fflush_r>
 80101be:	68e1      	ldr	r1, [r4, #12]
 80101c0:	4b06      	ldr	r3, [pc, #24]	@ (80101dc <cleanup_stdio+0x3c>)
 80101c2:	4299      	cmp	r1, r3
 80101c4:	d004      	beq.n	80101d0 <cleanup_stdio+0x30>
 80101c6:	4620      	mov	r0, r4
 80101c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101cc:	f001 bc8e 	b.w	8011aec <_fflush_r>
 80101d0:	bd10      	pop	{r4, pc}
 80101d2:	bf00      	nop
 80101d4:	200092a4 	.word	0x200092a4
 80101d8:	2000930c 	.word	0x2000930c
 80101dc:	20009374 	.word	0x20009374

080101e0 <global_stdio_init.part.0>:
 80101e0:	b510      	push	{r4, lr}
 80101e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010210 <global_stdio_init.part.0+0x30>)
 80101e4:	4c0b      	ldr	r4, [pc, #44]	@ (8010214 <global_stdio_init.part.0+0x34>)
 80101e6:	4a0c      	ldr	r2, [pc, #48]	@ (8010218 <global_stdio_init.part.0+0x38>)
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	4620      	mov	r0, r4
 80101ec:	2200      	movs	r2, #0
 80101ee:	2104      	movs	r1, #4
 80101f0:	f7ff ff94 	bl	801011c <std>
 80101f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80101f8:	2201      	movs	r2, #1
 80101fa:	2109      	movs	r1, #9
 80101fc:	f7ff ff8e 	bl	801011c <std>
 8010200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010204:	2202      	movs	r2, #2
 8010206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801020a:	2112      	movs	r1, #18
 801020c:	f7ff bf86 	b.w	801011c <std>
 8010210:	200093dc 	.word	0x200093dc
 8010214:	200092a4 	.word	0x200092a4
 8010218:	08010189 	.word	0x08010189

0801021c <__sfp_lock_acquire>:
 801021c:	4801      	ldr	r0, [pc, #4]	@ (8010224 <__sfp_lock_acquire+0x8>)
 801021e:	f000 b900 	b.w	8010422 <__retarget_lock_acquire_recursive>
 8010222:	bf00      	nop
 8010224:	200093e5 	.word	0x200093e5

08010228 <__sfp_lock_release>:
 8010228:	4801      	ldr	r0, [pc, #4]	@ (8010230 <__sfp_lock_release+0x8>)
 801022a:	f000 b8fb 	b.w	8010424 <__retarget_lock_release_recursive>
 801022e:	bf00      	nop
 8010230:	200093e5 	.word	0x200093e5

08010234 <__sinit>:
 8010234:	b510      	push	{r4, lr}
 8010236:	4604      	mov	r4, r0
 8010238:	f7ff fff0 	bl	801021c <__sfp_lock_acquire>
 801023c:	6a23      	ldr	r3, [r4, #32]
 801023e:	b11b      	cbz	r3, 8010248 <__sinit+0x14>
 8010240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010244:	f7ff bff0 	b.w	8010228 <__sfp_lock_release>
 8010248:	4b04      	ldr	r3, [pc, #16]	@ (801025c <__sinit+0x28>)
 801024a:	6223      	str	r3, [r4, #32]
 801024c:	4b04      	ldr	r3, [pc, #16]	@ (8010260 <__sinit+0x2c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1f5      	bne.n	8010240 <__sinit+0xc>
 8010254:	f7ff ffc4 	bl	80101e0 <global_stdio_init.part.0>
 8010258:	e7f2      	b.n	8010240 <__sinit+0xc>
 801025a:	bf00      	nop
 801025c:	080101a1 	.word	0x080101a1
 8010260:	200093dc 	.word	0x200093dc

08010264 <_fwalk_sglue>:
 8010264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010268:	4607      	mov	r7, r0
 801026a:	4688      	mov	r8, r1
 801026c:	4614      	mov	r4, r2
 801026e:	2600      	movs	r6, #0
 8010270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010274:	f1b9 0901 	subs.w	r9, r9, #1
 8010278:	d505      	bpl.n	8010286 <_fwalk_sglue+0x22>
 801027a:	6824      	ldr	r4, [r4, #0]
 801027c:	2c00      	cmp	r4, #0
 801027e:	d1f7      	bne.n	8010270 <_fwalk_sglue+0xc>
 8010280:	4630      	mov	r0, r6
 8010282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010286:	89ab      	ldrh	r3, [r5, #12]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d907      	bls.n	801029c <_fwalk_sglue+0x38>
 801028c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010290:	3301      	adds	r3, #1
 8010292:	d003      	beq.n	801029c <_fwalk_sglue+0x38>
 8010294:	4629      	mov	r1, r5
 8010296:	4638      	mov	r0, r7
 8010298:	47c0      	blx	r8
 801029a:	4306      	orrs	r6, r0
 801029c:	3568      	adds	r5, #104	@ 0x68
 801029e:	e7e9      	b.n	8010274 <_fwalk_sglue+0x10>

080102a0 <__sread>:
 80102a0:	b510      	push	{r4, lr}
 80102a2:	460c      	mov	r4, r1
 80102a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a8:	f000 f86c 	bl	8010384 <_read_r>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	bfab      	itete	ge
 80102b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80102b2:	89a3      	ldrhlt	r3, [r4, #12]
 80102b4:	181b      	addge	r3, r3, r0
 80102b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80102ba:	bfac      	ite	ge
 80102bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80102be:	81a3      	strhlt	r3, [r4, #12]
 80102c0:	bd10      	pop	{r4, pc}

080102c2 <__swrite>:
 80102c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c6:	461f      	mov	r7, r3
 80102c8:	898b      	ldrh	r3, [r1, #12]
 80102ca:	05db      	lsls	r3, r3, #23
 80102cc:	4605      	mov	r5, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	4616      	mov	r6, r2
 80102d2:	d505      	bpl.n	80102e0 <__swrite+0x1e>
 80102d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d8:	2302      	movs	r3, #2
 80102da:	2200      	movs	r2, #0
 80102dc:	f000 f840 	bl	8010360 <_lseek_r>
 80102e0:	89a3      	ldrh	r3, [r4, #12]
 80102e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	4632      	mov	r2, r6
 80102ee:	463b      	mov	r3, r7
 80102f0:	4628      	mov	r0, r5
 80102f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102f6:	f000 b857 	b.w	80103a8 <_write_r>

080102fa <__sseek>:
 80102fa:	b510      	push	{r4, lr}
 80102fc:	460c      	mov	r4, r1
 80102fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010302:	f000 f82d 	bl	8010360 <_lseek_r>
 8010306:	1c43      	adds	r3, r0, #1
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	bf15      	itete	ne
 801030c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801030e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010316:	81a3      	strheq	r3, [r4, #12]
 8010318:	bf18      	it	ne
 801031a:	81a3      	strhne	r3, [r4, #12]
 801031c:	bd10      	pop	{r4, pc}

0801031e <__sclose>:
 801031e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010322:	f000 b80d 	b.w	8010340 <_close_r>

08010326 <memset>:
 8010326:	4402      	add	r2, r0
 8010328:	4603      	mov	r3, r0
 801032a:	4293      	cmp	r3, r2
 801032c:	d100      	bne.n	8010330 <memset+0xa>
 801032e:	4770      	bx	lr
 8010330:	f803 1b01 	strb.w	r1, [r3], #1
 8010334:	e7f9      	b.n	801032a <memset+0x4>
	...

08010338 <_localeconv_r>:
 8010338:	4800      	ldr	r0, [pc, #0]	@ (801033c <_localeconv_r+0x4>)
 801033a:	4770      	bx	lr
 801033c:	20000160 	.word	0x20000160

08010340 <_close_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d06      	ldr	r5, [pc, #24]	@ (801035c <_close_r+0x1c>)
 8010344:	2300      	movs	r3, #0
 8010346:	4604      	mov	r4, r0
 8010348:	4608      	mov	r0, r1
 801034a:	602b      	str	r3, [r5, #0]
 801034c:	f7f4 f826 	bl	800439c <_close>
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	d102      	bne.n	801035a <_close_r+0x1a>
 8010354:	682b      	ldr	r3, [r5, #0]
 8010356:	b103      	cbz	r3, 801035a <_close_r+0x1a>
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	bd38      	pop	{r3, r4, r5, pc}
 801035c:	200093e0 	.word	0x200093e0

08010360 <_lseek_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d07      	ldr	r5, [pc, #28]	@ (8010380 <_lseek_r+0x20>)
 8010364:	4604      	mov	r4, r0
 8010366:	4608      	mov	r0, r1
 8010368:	4611      	mov	r1, r2
 801036a:	2200      	movs	r2, #0
 801036c:	602a      	str	r2, [r5, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	f7f4 f83b 	bl	80043ea <_lseek>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_lseek_r+0x1e>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	b103      	cbz	r3, 801037e <_lseek_r+0x1e>
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	200093e0 	.word	0x200093e0

08010384 <_read_r>:
 8010384:	b538      	push	{r3, r4, r5, lr}
 8010386:	4d07      	ldr	r5, [pc, #28]	@ (80103a4 <_read_r+0x20>)
 8010388:	4604      	mov	r4, r0
 801038a:	4608      	mov	r0, r1
 801038c:	4611      	mov	r1, r2
 801038e:	2200      	movs	r2, #0
 8010390:	602a      	str	r2, [r5, #0]
 8010392:	461a      	mov	r2, r3
 8010394:	f7f3 ffc9 	bl	800432a <_read>
 8010398:	1c43      	adds	r3, r0, #1
 801039a:	d102      	bne.n	80103a2 <_read_r+0x1e>
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	b103      	cbz	r3, 80103a2 <_read_r+0x1e>
 80103a0:	6023      	str	r3, [r4, #0]
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	200093e0 	.word	0x200093e0

080103a8 <_write_r>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	4d07      	ldr	r5, [pc, #28]	@ (80103c8 <_write_r+0x20>)
 80103ac:	4604      	mov	r4, r0
 80103ae:	4608      	mov	r0, r1
 80103b0:	4611      	mov	r1, r2
 80103b2:	2200      	movs	r2, #0
 80103b4:	602a      	str	r2, [r5, #0]
 80103b6:	461a      	mov	r2, r3
 80103b8:	f7f3 ffd4 	bl	8004364 <_write>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	d102      	bne.n	80103c6 <_write_r+0x1e>
 80103c0:	682b      	ldr	r3, [r5, #0]
 80103c2:	b103      	cbz	r3, 80103c6 <_write_r+0x1e>
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	200093e0 	.word	0x200093e0

080103cc <__errno>:
 80103cc:	4b01      	ldr	r3, [pc, #4]	@ (80103d4 <__errno+0x8>)
 80103ce:	6818      	ldr	r0, [r3, #0]
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	20000020 	.word	0x20000020

080103d8 <__libc_init_array>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	4d0d      	ldr	r5, [pc, #52]	@ (8010410 <__libc_init_array+0x38>)
 80103dc:	4c0d      	ldr	r4, [pc, #52]	@ (8010414 <__libc_init_array+0x3c>)
 80103de:	1b64      	subs	r4, r4, r5
 80103e0:	10a4      	asrs	r4, r4, #2
 80103e2:	2600      	movs	r6, #0
 80103e4:	42a6      	cmp	r6, r4
 80103e6:	d109      	bne.n	80103fc <__libc_init_array+0x24>
 80103e8:	4d0b      	ldr	r5, [pc, #44]	@ (8010418 <__libc_init_array+0x40>)
 80103ea:	4c0c      	ldr	r4, [pc, #48]	@ (801041c <__libc_init_array+0x44>)
 80103ec:	f002 f85e 	bl	80124ac <_init>
 80103f0:	1b64      	subs	r4, r4, r5
 80103f2:	10a4      	asrs	r4, r4, #2
 80103f4:	2600      	movs	r6, #0
 80103f6:	42a6      	cmp	r6, r4
 80103f8:	d105      	bne.n	8010406 <__libc_init_array+0x2e>
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010400:	4798      	blx	r3
 8010402:	3601      	adds	r6, #1
 8010404:	e7ee      	b.n	80103e4 <__libc_init_array+0xc>
 8010406:	f855 3b04 	ldr.w	r3, [r5], #4
 801040a:	4798      	blx	r3
 801040c:	3601      	adds	r6, #1
 801040e:	e7f2      	b.n	80103f6 <__libc_init_array+0x1e>
 8010410:	08026138 	.word	0x08026138
 8010414:	08026138 	.word	0x08026138
 8010418:	08026138 	.word	0x08026138
 801041c:	0802613c 	.word	0x0802613c

08010420 <__retarget_lock_init_recursive>:
 8010420:	4770      	bx	lr

08010422 <__retarget_lock_acquire_recursive>:
 8010422:	4770      	bx	lr

08010424 <__retarget_lock_release_recursive>:
 8010424:	4770      	bx	lr

08010426 <memcpy>:
 8010426:	440a      	add	r2, r1
 8010428:	4291      	cmp	r1, r2
 801042a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801042e:	d100      	bne.n	8010432 <memcpy+0xc>
 8010430:	4770      	bx	lr
 8010432:	b510      	push	{r4, lr}
 8010434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010438:	f803 4f01 	strb.w	r4, [r3, #1]!
 801043c:	4291      	cmp	r1, r2
 801043e:	d1f9      	bne.n	8010434 <memcpy+0xe>
 8010440:	bd10      	pop	{r4, pc}

08010442 <quorem>:
 8010442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010446:	6903      	ldr	r3, [r0, #16]
 8010448:	690c      	ldr	r4, [r1, #16]
 801044a:	42a3      	cmp	r3, r4
 801044c:	4607      	mov	r7, r0
 801044e:	db7e      	blt.n	801054e <quorem+0x10c>
 8010450:	3c01      	subs	r4, #1
 8010452:	f101 0814 	add.w	r8, r1, #20
 8010456:	00a3      	lsls	r3, r4, #2
 8010458:	f100 0514 	add.w	r5, r0, #20
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801046c:	3301      	adds	r3, #1
 801046e:	429a      	cmp	r2, r3
 8010470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010474:	fbb2 f6f3 	udiv	r6, r2, r3
 8010478:	d32e      	bcc.n	80104d8 <quorem+0x96>
 801047a:	f04f 0a00 	mov.w	sl, #0
 801047e:	46c4      	mov	ip, r8
 8010480:	46ae      	mov	lr, r5
 8010482:	46d3      	mov	fp, sl
 8010484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010488:	b298      	uxth	r0, r3
 801048a:	fb06 a000 	mla	r0, r6, r0, sl
 801048e:	0c02      	lsrs	r2, r0, #16
 8010490:	0c1b      	lsrs	r3, r3, #16
 8010492:	fb06 2303 	mla	r3, r6, r3, r2
 8010496:	f8de 2000 	ldr.w	r2, [lr]
 801049a:	b280      	uxth	r0, r0
 801049c:	b292      	uxth	r2, r2
 801049e:	1a12      	subs	r2, r2, r0
 80104a0:	445a      	add	r2, fp
 80104a2:	f8de 0000 	ldr.w	r0, [lr]
 80104a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80104b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80104b4:	b292      	uxth	r2, r2
 80104b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80104ba:	45e1      	cmp	r9, ip
 80104bc:	f84e 2b04 	str.w	r2, [lr], #4
 80104c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80104c4:	d2de      	bcs.n	8010484 <quorem+0x42>
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	58eb      	ldr	r3, [r5, r3]
 80104ca:	b92b      	cbnz	r3, 80104d8 <quorem+0x96>
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	3b04      	subs	r3, #4
 80104d0:	429d      	cmp	r5, r3
 80104d2:	461a      	mov	r2, r3
 80104d4:	d32f      	bcc.n	8010536 <quorem+0xf4>
 80104d6:	613c      	str	r4, [r7, #16]
 80104d8:	4638      	mov	r0, r7
 80104da:	f001 f97b 	bl	80117d4 <__mcmp>
 80104de:	2800      	cmp	r0, #0
 80104e0:	db25      	blt.n	801052e <quorem+0xec>
 80104e2:	4629      	mov	r1, r5
 80104e4:	2000      	movs	r0, #0
 80104e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80104ea:	f8d1 c000 	ldr.w	ip, [r1]
 80104ee:	fa1f fe82 	uxth.w	lr, r2
 80104f2:	fa1f f38c 	uxth.w	r3, ip
 80104f6:	eba3 030e 	sub.w	r3, r3, lr
 80104fa:	4403      	add	r3, r0
 80104fc:	0c12      	lsrs	r2, r2, #16
 80104fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010502:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010506:	b29b      	uxth	r3, r3
 8010508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801050c:	45c1      	cmp	r9, r8
 801050e:	f841 3b04 	str.w	r3, [r1], #4
 8010512:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010516:	d2e6      	bcs.n	80104e6 <quorem+0xa4>
 8010518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801051c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010520:	b922      	cbnz	r2, 801052c <quorem+0xea>
 8010522:	3b04      	subs	r3, #4
 8010524:	429d      	cmp	r5, r3
 8010526:	461a      	mov	r2, r3
 8010528:	d30b      	bcc.n	8010542 <quorem+0x100>
 801052a:	613c      	str	r4, [r7, #16]
 801052c:	3601      	adds	r6, #1
 801052e:	4630      	mov	r0, r6
 8010530:	b003      	add	sp, #12
 8010532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010536:	6812      	ldr	r2, [r2, #0]
 8010538:	3b04      	subs	r3, #4
 801053a:	2a00      	cmp	r2, #0
 801053c:	d1cb      	bne.n	80104d6 <quorem+0x94>
 801053e:	3c01      	subs	r4, #1
 8010540:	e7c6      	b.n	80104d0 <quorem+0x8e>
 8010542:	6812      	ldr	r2, [r2, #0]
 8010544:	3b04      	subs	r3, #4
 8010546:	2a00      	cmp	r2, #0
 8010548:	d1ef      	bne.n	801052a <quorem+0xe8>
 801054a:	3c01      	subs	r4, #1
 801054c:	e7ea      	b.n	8010524 <quorem+0xe2>
 801054e:	2000      	movs	r0, #0
 8010550:	e7ee      	b.n	8010530 <quorem+0xee>
 8010552:	0000      	movs	r0, r0
 8010554:	0000      	movs	r0, r0
	...

08010558 <_dtoa_r>:
 8010558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055c:	69c7      	ldr	r7, [r0, #28]
 801055e:	b099      	sub	sp, #100	@ 0x64
 8010560:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010564:	ec55 4b10 	vmov	r4, r5, d0
 8010568:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801056a:	9109      	str	r1, [sp, #36]	@ 0x24
 801056c:	4683      	mov	fp, r0
 801056e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010570:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010572:	b97f      	cbnz	r7, 8010594 <_dtoa_r+0x3c>
 8010574:	2010      	movs	r0, #16
 8010576:	f000 fdfd 	bl	8011174 <malloc>
 801057a:	4602      	mov	r2, r0
 801057c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010580:	b920      	cbnz	r0, 801058c <_dtoa_r+0x34>
 8010582:	4ba7      	ldr	r3, [pc, #668]	@ (8010820 <_dtoa_r+0x2c8>)
 8010584:	21ef      	movs	r1, #239	@ 0xef
 8010586:	48a7      	ldr	r0, [pc, #668]	@ (8010824 <_dtoa_r+0x2cc>)
 8010588:	f001 fae8 	bl	8011b5c <__assert_func>
 801058c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010590:	6007      	str	r7, [r0, #0]
 8010592:	60c7      	str	r7, [r0, #12]
 8010594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010598:	6819      	ldr	r1, [r3, #0]
 801059a:	b159      	cbz	r1, 80105b4 <_dtoa_r+0x5c>
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	604a      	str	r2, [r1, #4]
 80105a0:	2301      	movs	r3, #1
 80105a2:	4093      	lsls	r3, r2
 80105a4:	608b      	str	r3, [r1, #8]
 80105a6:	4658      	mov	r0, fp
 80105a8:	f000 feda 	bl	8011360 <_Bfree>
 80105ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80105b0:	2200      	movs	r2, #0
 80105b2:	601a      	str	r2, [r3, #0]
 80105b4:	1e2b      	subs	r3, r5, #0
 80105b6:	bfb9      	ittee	lt
 80105b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80105bc:	9303      	strlt	r3, [sp, #12]
 80105be:	2300      	movge	r3, #0
 80105c0:	6033      	strge	r3, [r6, #0]
 80105c2:	9f03      	ldr	r7, [sp, #12]
 80105c4:	4b98      	ldr	r3, [pc, #608]	@ (8010828 <_dtoa_r+0x2d0>)
 80105c6:	bfbc      	itt	lt
 80105c8:	2201      	movlt	r2, #1
 80105ca:	6032      	strlt	r2, [r6, #0]
 80105cc:	43bb      	bics	r3, r7
 80105ce:	d112      	bne.n	80105f6 <_dtoa_r+0x9e>
 80105d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80105d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80105d6:	6013      	str	r3, [r2, #0]
 80105d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105dc:	4323      	orrs	r3, r4
 80105de:	f000 854d 	beq.w	801107c <_dtoa_r+0xb24>
 80105e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801083c <_dtoa_r+0x2e4>
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f000 854f 	beq.w	801108c <_dtoa_r+0xb34>
 80105ee:	f10a 0303 	add.w	r3, sl, #3
 80105f2:	f000 bd49 	b.w	8011088 <_dtoa_r+0xb30>
 80105f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105fa:	2200      	movs	r2, #0
 80105fc:	ec51 0b17 	vmov	r0, r1, d7
 8010600:	2300      	movs	r3, #0
 8010602:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010606:	f7f0 fabf 	bl	8000b88 <__aeabi_dcmpeq>
 801060a:	4680      	mov	r8, r0
 801060c:	b158      	cbz	r0, 8010626 <_dtoa_r+0xce>
 801060e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010610:	2301      	movs	r3, #1
 8010612:	6013      	str	r3, [r2, #0]
 8010614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010616:	b113      	cbz	r3, 801061e <_dtoa_r+0xc6>
 8010618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801061a:	4b84      	ldr	r3, [pc, #528]	@ (801082c <_dtoa_r+0x2d4>)
 801061c:	6013      	str	r3, [r2, #0]
 801061e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010840 <_dtoa_r+0x2e8>
 8010622:	f000 bd33 	b.w	801108c <_dtoa_r+0xb34>
 8010626:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801062a:	aa16      	add	r2, sp, #88	@ 0x58
 801062c:	a917      	add	r1, sp, #92	@ 0x5c
 801062e:	4658      	mov	r0, fp
 8010630:	f001 f980 	bl	8011934 <__d2b>
 8010634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010638:	4681      	mov	r9, r0
 801063a:	2e00      	cmp	r6, #0
 801063c:	d077      	beq.n	801072e <_dtoa_r+0x1d6>
 801063e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010640:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801064c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010658:	4619      	mov	r1, r3
 801065a:	2200      	movs	r2, #0
 801065c:	4b74      	ldr	r3, [pc, #464]	@ (8010830 <_dtoa_r+0x2d8>)
 801065e:	f7ef fe73 	bl	8000348 <__aeabi_dsub>
 8010662:	a369      	add	r3, pc, #420	@ (adr r3, 8010808 <_dtoa_r+0x2b0>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	f7f0 f826 	bl	80006b8 <__aeabi_dmul>
 801066c:	a368      	add	r3, pc, #416	@ (adr r3, 8010810 <_dtoa_r+0x2b8>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fe6b 	bl	800034c <__adddf3>
 8010676:	4604      	mov	r4, r0
 8010678:	4630      	mov	r0, r6
 801067a:	460d      	mov	r5, r1
 801067c:	f7ef ffb2 	bl	80005e4 <__aeabi_i2d>
 8010680:	a365      	add	r3, pc, #404	@ (adr r3, 8010818 <_dtoa_r+0x2c0>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7f0 f817 	bl	80006b8 <__aeabi_dmul>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	4620      	mov	r0, r4
 8010690:	4629      	mov	r1, r5
 8010692:	f7ef fe5b 	bl	800034c <__adddf3>
 8010696:	4604      	mov	r4, r0
 8010698:	460d      	mov	r5, r1
 801069a:	f7f0 fabd 	bl	8000c18 <__aeabi_d2iz>
 801069e:	2200      	movs	r2, #0
 80106a0:	4607      	mov	r7, r0
 80106a2:	2300      	movs	r3, #0
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7f0 fa78 	bl	8000b9c <__aeabi_dcmplt>
 80106ac:	b140      	cbz	r0, 80106c0 <_dtoa_r+0x168>
 80106ae:	4638      	mov	r0, r7
 80106b0:	f7ef ff98 	bl	80005e4 <__aeabi_i2d>
 80106b4:	4622      	mov	r2, r4
 80106b6:	462b      	mov	r3, r5
 80106b8:	f7f0 fa66 	bl	8000b88 <__aeabi_dcmpeq>
 80106bc:	b900      	cbnz	r0, 80106c0 <_dtoa_r+0x168>
 80106be:	3f01      	subs	r7, #1
 80106c0:	2f16      	cmp	r7, #22
 80106c2:	d851      	bhi.n	8010768 <_dtoa_r+0x210>
 80106c4:	4b5b      	ldr	r3, [pc, #364]	@ (8010834 <_dtoa_r+0x2dc>)
 80106c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106d2:	f7f0 fa63 	bl	8000b9c <__aeabi_dcmplt>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d048      	beq.n	801076c <_dtoa_r+0x214>
 80106da:	3f01      	subs	r7, #1
 80106dc:	2300      	movs	r3, #0
 80106de:	9312      	str	r3, [sp, #72]	@ 0x48
 80106e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80106e2:	1b9b      	subs	r3, r3, r6
 80106e4:	1e5a      	subs	r2, r3, #1
 80106e6:	bf44      	itt	mi
 80106e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80106ec:	2300      	movmi	r3, #0
 80106ee:	9208      	str	r2, [sp, #32]
 80106f0:	bf54      	ite	pl
 80106f2:	f04f 0800 	movpl.w	r8, #0
 80106f6:	9308      	strmi	r3, [sp, #32]
 80106f8:	2f00      	cmp	r7, #0
 80106fa:	db39      	blt.n	8010770 <_dtoa_r+0x218>
 80106fc:	9b08      	ldr	r3, [sp, #32]
 80106fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010700:	443b      	add	r3, r7
 8010702:	9308      	str	r3, [sp, #32]
 8010704:	2300      	movs	r3, #0
 8010706:	930a      	str	r3, [sp, #40]	@ 0x28
 8010708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801070a:	2b09      	cmp	r3, #9
 801070c:	d864      	bhi.n	80107d8 <_dtoa_r+0x280>
 801070e:	2b05      	cmp	r3, #5
 8010710:	bfc4      	itt	gt
 8010712:	3b04      	subgt	r3, #4
 8010714:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010718:	f1a3 0302 	sub.w	r3, r3, #2
 801071c:	bfcc      	ite	gt
 801071e:	2400      	movgt	r4, #0
 8010720:	2401      	movle	r4, #1
 8010722:	2b03      	cmp	r3, #3
 8010724:	d863      	bhi.n	80107ee <_dtoa_r+0x296>
 8010726:	e8df f003 	tbb	[pc, r3]
 801072a:	372a      	.short	0x372a
 801072c:	5535      	.short	0x5535
 801072e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010732:	441e      	add	r6, r3
 8010734:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010738:	2b20      	cmp	r3, #32
 801073a:	bfc1      	itttt	gt
 801073c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010740:	409f      	lslgt	r7, r3
 8010742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010746:	fa24 f303 	lsrgt.w	r3, r4, r3
 801074a:	bfd6      	itet	le
 801074c:	f1c3 0320 	rsble	r3, r3, #32
 8010750:	ea47 0003 	orrgt.w	r0, r7, r3
 8010754:	fa04 f003 	lslle.w	r0, r4, r3
 8010758:	f7ef ff34 	bl	80005c4 <__aeabi_ui2d>
 801075c:	2201      	movs	r2, #1
 801075e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010762:	3e01      	subs	r6, #1
 8010764:	9214      	str	r2, [sp, #80]	@ 0x50
 8010766:	e777      	b.n	8010658 <_dtoa_r+0x100>
 8010768:	2301      	movs	r3, #1
 801076a:	e7b8      	b.n	80106de <_dtoa_r+0x186>
 801076c:	9012      	str	r0, [sp, #72]	@ 0x48
 801076e:	e7b7      	b.n	80106e0 <_dtoa_r+0x188>
 8010770:	427b      	negs	r3, r7
 8010772:	930a      	str	r3, [sp, #40]	@ 0x28
 8010774:	2300      	movs	r3, #0
 8010776:	eba8 0807 	sub.w	r8, r8, r7
 801077a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801077c:	e7c4      	b.n	8010708 <_dtoa_r+0x1b0>
 801077e:	2300      	movs	r3, #0
 8010780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010784:	2b00      	cmp	r3, #0
 8010786:	dc35      	bgt.n	80107f4 <_dtoa_r+0x29c>
 8010788:	2301      	movs	r3, #1
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	9307      	str	r3, [sp, #28]
 801078e:	461a      	mov	r2, r3
 8010790:	920e      	str	r2, [sp, #56]	@ 0x38
 8010792:	e00b      	b.n	80107ac <_dtoa_r+0x254>
 8010794:	2301      	movs	r3, #1
 8010796:	e7f3      	b.n	8010780 <_dtoa_r+0x228>
 8010798:	2300      	movs	r3, #0
 801079a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801079c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801079e:	18fb      	adds	r3, r7, r3
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	3301      	adds	r3, #1
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	9307      	str	r3, [sp, #28]
 80107a8:	bfb8      	it	lt
 80107aa:	2301      	movlt	r3, #1
 80107ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80107b0:	2100      	movs	r1, #0
 80107b2:	2204      	movs	r2, #4
 80107b4:	f102 0514 	add.w	r5, r2, #20
 80107b8:	429d      	cmp	r5, r3
 80107ba:	d91f      	bls.n	80107fc <_dtoa_r+0x2a4>
 80107bc:	6041      	str	r1, [r0, #4]
 80107be:	4658      	mov	r0, fp
 80107c0:	f000 fd8e 	bl	80112e0 <_Balloc>
 80107c4:	4682      	mov	sl, r0
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d13c      	bne.n	8010844 <_dtoa_r+0x2ec>
 80107ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010838 <_dtoa_r+0x2e0>)
 80107cc:	4602      	mov	r2, r0
 80107ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80107d2:	e6d8      	b.n	8010586 <_dtoa_r+0x2e>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e7e0      	b.n	801079a <_dtoa_r+0x242>
 80107d8:	2401      	movs	r4, #1
 80107da:	2300      	movs	r3, #0
 80107dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80107de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80107e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	9307      	str	r3, [sp, #28]
 80107e8:	2200      	movs	r2, #0
 80107ea:	2312      	movs	r3, #18
 80107ec:	e7d0      	b.n	8010790 <_dtoa_r+0x238>
 80107ee:	2301      	movs	r3, #1
 80107f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107f2:	e7f5      	b.n	80107e0 <_dtoa_r+0x288>
 80107f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	9307      	str	r3, [sp, #28]
 80107fa:	e7d7      	b.n	80107ac <_dtoa_r+0x254>
 80107fc:	3101      	adds	r1, #1
 80107fe:	0052      	lsls	r2, r2, #1
 8010800:	e7d8      	b.n	80107b4 <_dtoa_r+0x25c>
 8010802:	bf00      	nop
 8010804:	f3af 8000 	nop.w
 8010808:	636f4361 	.word	0x636f4361
 801080c:	3fd287a7 	.word	0x3fd287a7
 8010810:	8b60c8b3 	.word	0x8b60c8b3
 8010814:	3fc68a28 	.word	0x3fc68a28
 8010818:	509f79fb 	.word	0x509f79fb
 801081c:	3fd34413 	.word	0x3fd34413
 8010820:	08025e01 	.word	0x08025e01
 8010824:	08025e18 	.word	0x08025e18
 8010828:	7ff00000 	.word	0x7ff00000
 801082c:	08025dd1 	.word	0x08025dd1
 8010830:	3ff80000 	.word	0x3ff80000
 8010834:	08025f10 	.word	0x08025f10
 8010838:	08025e70 	.word	0x08025e70
 801083c:	08025dfd 	.word	0x08025dfd
 8010840:	08025dd0 	.word	0x08025dd0
 8010844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010848:	6018      	str	r0, [r3, #0]
 801084a:	9b07      	ldr	r3, [sp, #28]
 801084c:	2b0e      	cmp	r3, #14
 801084e:	f200 80a4 	bhi.w	801099a <_dtoa_r+0x442>
 8010852:	2c00      	cmp	r4, #0
 8010854:	f000 80a1 	beq.w	801099a <_dtoa_r+0x442>
 8010858:	2f00      	cmp	r7, #0
 801085a:	dd33      	ble.n	80108c4 <_dtoa_r+0x36c>
 801085c:	4bad      	ldr	r3, [pc, #692]	@ (8010b14 <_dtoa_r+0x5bc>)
 801085e:	f007 020f 	and.w	r2, r7, #15
 8010862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010866:	ed93 7b00 	vldr	d7, [r3]
 801086a:	05f8      	lsls	r0, r7, #23
 801086c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010870:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010874:	d516      	bpl.n	80108a4 <_dtoa_r+0x34c>
 8010876:	4ba8      	ldr	r3, [pc, #672]	@ (8010b18 <_dtoa_r+0x5c0>)
 8010878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801087c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010880:	f7f0 f844 	bl	800090c <__aeabi_ddiv>
 8010884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010888:	f004 040f 	and.w	r4, r4, #15
 801088c:	2603      	movs	r6, #3
 801088e:	4da2      	ldr	r5, [pc, #648]	@ (8010b18 <_dtoa_r+0x5c0>)
 8010890:	b954      	cbnz	r4, 80108a8 <_dtoa_r+0x350>
 8010892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801089a:	f7f0 f837 	bl	800090c <__aeabi_ddiv>
 801089e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108a2:	e028      	b.n	80108f6 <_dtoa_r+0x39e>
 80108a4:	2602      	movs	r6, #2
 80108a6:	e7f2      	b.n	801088e <_dtoa_r+0x336>
 80108a8:	07e1      	lsls	r1, r4, #31
 80108aa:	d508      	bpl.n	80108be <_dtoa_r+0x366>
 80108ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108b4:	f7ef ff00 	bl	80006b8 <__aeabi_dmul>
 80108b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108bc:	3601      	adds	r6, #1
 80108be:	1064      	asrs	r4, r4, #1
 80108c0:	3508      	adds	r5, #8
 80108c2:	e7e5      	b.n	8010890 <_dtoa_r+0x338>
 80108c4:	f000 80d2 	beq.w	8010a6c <_dtoa_r+0x514>
 80108c8:	427c      	negs	r4, r7
 80108ca:	4b92      	ldr	r3, [pc, #584]	@ (8010b14 <_dtoa_r+0x5bc>)
 80108cc:	4d92      	ldr	r5, [pc, #584]	@ (8010b18 <_dtoa_r+0x5c0>)
 80108ce:	f004 020f 	and.w	r2, r4, #15
 80108d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80108de:	f7ef feeb 	bl	80006b8 <__aeabi_dmul>
 80108e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108e6:	1124      	asrs	r4, r4, #4
 80108e8:	2300      	movs	r3, #0
 80108ea:	2602      	movs	r6, #2
 80108ec:	2c00      	cmp	r4, #0
 80108ee:	f040 80b2 	bne.w	8010a56 <_dtoa_r+0x4fe>
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1d3      	bne.n	801089e <_dtoa_r+0x346>
 80108f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	f000 80b7 	beq.w	8010a70 <_dtoa_r+0x518>
 8010902:	4b86      	ldr	r3, [pc, #536]	@ (8010b1c <_dtoa_r+0x5c4>)
 8010904:	2200      	movs	r2, #0
 8010906:	4620      	mov	r0, r4
 8010908:	4629      	mov	r1, r5
 801090a:	f7f0 f947 	bl	8000b9c <__aeabi_dcmplt>
 801090e:	2800      	cmp	r0, #0
 8010910:	f000 80ae 	beq.w	8010a70 <_dtoa_r+0x518>
 8010914:	9b07      	ldr	r3, [sp, #28]
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 80aa 	beq.w	8010a70 <_dtoa_r+0x518>
 801091c:	9b00      	ldr	r3, [sp, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	dd37      	ble.n	8010992 <_dtoa_r+0x43a>
 8010922:	1e7b      	subs	r3, r7, #1
 8010924:	9304      	str	r3, [sp, #16]
 8010926:	4620      	mov	r0, r4
 8010928:	4b7d      	ldr	r3, [pc, #500]	@ (8010b20 <_dtoa_r+0x5c8>)
 801092a:	2200      	movs	r2, #0
 801092c:	4629      	mov	r1, r5
 801092e:	f7ef fec3 	bl	80006b8 <__aeabi_dmul>
 8010932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010936:	9c00      	ldr	r4, [sp, #0]
 8010938:	3601      	adds	r6, #1
 801093a:	4630      	mov	r0, r6
 801093c:	f7ef fe52 	bl	80005e4 <__aeabi_i2d>
 8010940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010944:	f7ef feb8 	bl	80006b8 <__aeabi_dmul>
 8010948:	4b76      	ldr	r3, [pc, #472]	@ (8010b24 <_dtoa_r+0x5cc>)
 801094a:	2200      	movs	r2, #0
 801094c:	f7ef fcfe 	bl	800034c <__adddf3>
 8010950:	4605      	mov	r5, r0
 8010952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010956:	2c00      	cmp	r4, #0
 8010958:	f040 808d 	bne.w	8010a76 <_dtoa_r+0x51e>
 801095c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010960:	4b71      	ldr	r3, [pc, #452]	@ (8010b28 <_dtoa_r+0x5d0>)
 8010962:	2200      	movs	r2, #0
 8010964:	f7ef fcf0 	bl	8000348 <__aeabi_dsub>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010970:	462a      	mov	r2, r5
 8010972:	4633      	mov	r3, r6
 8010974:	f7f0 f930 	bl	8000bd8 <__aeabi_dcmpgt>
 8010978:	2800      	cmp	r0, #0
 801097a:	f040 828b 	bne.w	8010e94 <_dtoa_r+0x93c>
 801097e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010982:	462a      	mov	r2, r5
 8010984:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010988:	f7f0 f908 	bl	8000b9c <__aeabi_dcmplt>
 801098c:	2800      	cmp	r0, #0
 801098e:	f040 8128 	bne.w	8010be2 <_dtoa_r+0x68a>
 8010992:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801099a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801099c:	2b00      	cmp	r3, #0
 801099e:	f2c0 815a 	blt.w	8010c56 <_dtoa_r+0x6fe>
 80109a2:	2f0e      	cmp	r7, #14
 80109a4:	f300 8157 	bgt.w	8010c56 <_dtoa_r+0x6fe>
 80109a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010b14 <_dtoa_r+0x5bc>)
 80109aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80109ae:	ed93 7b00 	vldr	d7, [r3]
 80109b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	ed8d 7b00 	vstr	d7, [sp]
 80109ba:	da03      	bge.n	80109c4 <_dtoa_r+0x46c>
 80109bc:	9b07      	ldr	r3, [sp, #28]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f340 8101 	ble.w	8010bc6 <_dtoa_r+0x66e>
 80109c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80109c8:	4656      	mov	r6, sl
 80109ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109ce:	4620      	mov	r0, r4
 80109d0:	4629      	mov	r1, r5
 80109d2:	f7ef ff9b 	bl	800090c <__aeabi_ddiv>
 80109d6:	f7f0 f91f 	bl	8000c18 <__aeabi_d2iz>
 80109da:	4680      	mov	r8, r0
 80109dc:	f7ef fe02 	bl	80005e4 <__aeabi_i2d>
 80109e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109e4:	f7ef fe68 	bl	80006b8 <__aeabi_dmul>
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	4620      	mov	r0, r4
 80109ee:	4629      	mov	r1, r5
 80109f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80109f4:	f7ef fca8 	bl	8000348 <__aeabi_dsub>
 80109f8:	f806 4b01 	strb.w	r4, [r6], #1
 80109fc:	9d07      	ldr	r5, [sp, #28]
 80109fe:	eba6 040a 	sub.w	r4, r6, sl
 8010a02:	42a5      	cmp	r5, r4
 8010a04:	4602      	mov	r2, r0
 8010a06:	460b      	mov	r3, r1
 8010a08:	f040 8117 	bne.w	8010c3a <_dtoa_r+0x6e2>
 8010a0c:	f7ef fc9e 	bl	800034c <__adddf3>
 8010a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a14:	4604      	mov	r4, r0
 8010a16:	460d      	mov	r5, r1
 8010a18:	f7f0 f8de 	bl	8000bd8 <__aeabi_dcmpgt>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	f040 80f9 	bne.w	8010c14 <_dtoa_r+0x6bc>
 8010a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a26:	4620      	mov	r0, r4
 8010a28:	4629      	mov	r1, r5
 8010a2a:	f7f0 f8ad 	bl	8000b88 <__aeabi_dcmpeq>
 8010a2e:	b118      	cbz	r0, 8010a38 <_dtoa_r+0x4e0>
 8010a30:	f018 0f01 	tst.w	r8, #1
 8010a34:	f040 80ee 	bne.w	8010c14 <_dtoa_r+0x6bc>
 8010a38:	4649      	mov	r1, r9
 8010a3a:	4658      	mov	r0, fp
 8010a3c:	f000 fc90 	bl	8011360 <_Bfree>
 8010a40:	2300      	movs	r3, #0
 8010a42:	7033      	strb	r3, [r6, #0]
 8010a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010a46:	3701      	adds	r7, #1
 8010a48:	601f      	str	r7, [r3, #0]
 8010a4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 831d 	beq.w	801108c <_dtoa_r+0xb34>
 8010a52:	601e      	str	r6, [r3, #0]
 8010a54:	e31a      	b.n	801108c <_dtoa_r+0xb34>
 8010a56:	07e2      	lsls	r2, r4, #31
 8010a58:	d505      	bpl.n	8010a66 <_dtoa_r+0x50e>
 8010a5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a5e:	f7ef fe2b 	bl	80006b8 <__aeabi_dmul>
 8010a62:	3601      	adds	r6, #1
 8010a64:	2301      	movs	r3, #1
 8010a66:	1064      	asrs	r4, r4, #1
 8010a68:	3508      	adds	r5, #8
 8010a6a:	e73f      	b.n	80108ec <_dtoa_r+0x394>
 8010a6c:	2602      	movs	r6, #2
 8010a6e:	e742      	b.n	80108f6 <_dtoa_r+0x39e>
 8010a70:	9c07      	ldr	r4, [sp, #28]
 8010a72:	9704      	str	r7, [sp, #16]
 8010a74:	e761      	b.n	801093a <_dtoa_r+0x3e2>
 8010a76:	4b27      	ldr	r3, [pc, #156]	@ (8010b14 <_dtoa_r+0x5bc>)
 8010a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a82:	4454      	add	r4, sl
 8010a84:	2900      	cmp	r1, #0
 8010a86:	d053      	beq.n	8010b30 <_dtoa_r+0x5d8>
 8010a88:	4928      	ldr	r1, [pc, #160]	@ (8010b2c <_dtoa_r+0x5d4>)
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	f7ef ff3e 	bl	800090c <__aeabi_ddiv>
 8010a90:	4633      	mov	r3, r6
 8010a92:	462a      	mov	r2, r5
 8010a94:	f7ef fc58 	bl	8000348 <__aeabi_dsub>
 8010a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a9c:	4656      	mov	r6, sl
 8010a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aa2:	f7f0 f8b9 	bl	8000c18 <__aeabi_d2iz>
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	f7ef fd9c 	bl	80005e4 <__aeabi_i2d>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ab4:	f7ef fc48 	bl	8000348 <__aeabi_dsub>
 8010ab8:	3530      	adds	r5, #48	@ 0x30
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ac2:	f806 5b01 	strb.w	r5, [r6], #1
 8010ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010aca:	f7f0 f867 	bl	8000b9c <__aeabi_dcmplt>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d171      	bne.n	8010bb6 <_dtoa_r+0x65e>
 8010ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ad6:	4911      	ldr	r1, [pc, #68]	@ (8010b1c <_dtoa_r+0x5c4>)
 8010ad8:	2000      	movs	r0, #0
 8010ada:	f7ef fc35 	bl	8000348 <__aeabi_dsub>
 8010ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010ae2:	f7f0 f85b 	bl	8000b9c <__aeabi_dcmplt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f040 8095 	bne.w	8010c16 <_dtoa_r+0x6be>
 8010aec:	42a6      	cmp	r6, r4
 8010aee:	f43f af50 	beq.w	8010992 <_dtoa_r+0x43a>
 8010af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010af6:	4b0a      	ldr	r3, [pc, #40]	@ (8010b20 <_dtoa_r+0x5c8>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	f7ef fddd 	bl	80006b8 <__aeabi_dmul>
 8010afe:	4b08      	ldr	r3, [pc, #32]	@ (8010b20 <_dtoa_r+0x5c8>)
 8010b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010b04:	2200      	movs	r2, #0
 8010b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b0a:	f7ef fdd5 	bl	80006b8 <__aeabi_dmul>
 8010b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b12:	e7c4      	b.n	8010a9e <_dtoa_r+0x546>
 8010b14:	08025f10 	.word	0x08025f10
 8010b18:	08025ee8 	.word	0x08025ee8
 8010b1c:	3ff00000 	.word	0x3ff00000
 8010b20:	40240000 	.word	0x40240000
 8010b24:	401c0000 	.word	0x401c0000
 8010b28:	40140000 	.word	0x40140000
 8010b2c:	3fe00000 	.word	0x3fe00000
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7ef fdc0 	bl	80006b8 <__aeabi_dmul>
 8010b38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010b3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8010b3e:	4656      	mov	r6, sl
 8010b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b44:	f7f0 f868 	bl	8000c18 <__aeabi_d2iz>
 8010b48:	4605      	mov	r5, r0
 8010b4a:	f7ef fd4b 	bl	80005e4 <__aeabi_i2d>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b56:	f7ef fbf7 	bl	8000348 <__aeabi_dsub>
 8010b5a:	3530      	adds	r5, #48	@ 0x30
 8010b5c:	f806 5b01 	strb.w	r5, [r6], #1
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	42a6      	cmp	r6, r4
 8010b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b6a:	f04f 0200 	mov.w	r2, #0
 8010b6e:	d124      	bne.n	8010bba <_dtoa_r+0x662>
 8010b70:	4bac      	ldr	r3, [pc, #688]	@ (8010e24 <_dtoa_r+0x8cc>)
 8010b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010b76:	f7ef fbe9 	bl	800034c <__adddf3>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b82:	f7f0 f829 	bl	8000bd8 <__aeabi_dcmpgt>
 8010b86:	2800      	cmp	r0, #0
 8010b88:	d145      	bne.n	8010c16 <_dtoa_r+0x6be>
 8010b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010b8e:	49a5      	ldr	r1, [pc, #660]	@ (8010e24 <_dtoa_r+0x8cc>)
 8010b90:	2000      	movs	r0, #0
 8010b92:	f7ef fbd9 	bl	8000348 <__aeabi_dsub>
 8010b96:	4602      	mov	r2, r0
 8010b98:	460b      	mov	r3, r1
 8010b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b9e:	f7ef fffd 	bl	8000b9c <__aeabi_dcmplt>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f43f aef5 	beq.w	8010992 <_dtoa_r+0x43a>
 8010ba8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010baa:	1e73      	subs	r3, r6, #1
 8010bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8010bae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010bb2:	2b30      	cmp	r3, #48	@ 0x30
 8010bb4:	d0f8      	beq.n	8010ba8 <_dtoa_r+0x650>
 8010bb6:	9f04      	ldr	r7, [sp, #16]
 8010bb8:	e73e      	b.n	8010a38 <_dtoa_r+0x4e0>
 8010bba:	4b9b      	ldr	r3, [pc, #620]	@ (8010e28 <_dtoa_r+0x8d0>)
 8010bbc:	f7ef fd7c 	bl	80006b8 <__aeabi_dmul>
 8010bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bc4:	e7bc      	b.n	8010b40 <_dtoa_r+0x5e8>
 8010bc6:	d10c      	bne.n	8010be2 <_dtoa_r+0x68a>
 8010bc8:	4b98      	ldr	r3, [pc, #608]	@ (8010e2c <_dtoa_r+0x8d4>)
 8010bca:	2200      	movs	r2, #0
 8010bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bd0:	f7ef fd72 	bl	80006b8 <__aeabi_dmul>
 8010bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bd8:	f7ef fff4 	bl	8000bc4 <__aeabi_dcmpge>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	f000 8157 	beq.w	8010e90 <_dtoa_r+0x938>
 8010be2:	2400      	movs	r4, #0
 8010be4:	4625      	mov	r5, r4
 8010be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010be8:	43db      	mvns	r3, r3
 8010bea:	9304      	str	r3, [sp, #16]
 8010bec:	4656      	mov	r6, sl
 8010bee:	2700      	movs	r7, #0
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4658      	mov	r0, fp
 8010bf4:	f000 fbb4 	bl	8011360 <_Bfree>
 8010bf8:	2d00      	cmp	r5, #0
 8010bfa:	d0dc      	beq.n	8010bb6 <_dtoa_r+0x65e>
 8010bfc:	b12f      	cbz	r7, 8010c0a <_dtoa_r+0x6b2>
 8010bfe:	42af      	cmp	r7, r5
 8010c00:	d003      	beq.n	8010c0a <_dtoa_r+0x6b2>
 8010c02:	4639      	mov	r1, r7
 8010c04:	4658      	mov	r0, fp
 8010c06:	f000 fbab 	bl	8011360 <_Bfree>
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	4658      	mov	r0, fp
 8010c0e:	f000 fba7 	bl	8011360 <_Bfree>
 8010c12:	e7d0      	b.n	8010bb6 <_dtoa_r+0x65e>
 8010c14:	9704      	str	r7, [sp, #16]
 8010c16:	4633      	mov	r3, r6
 8010c18:	461e      	mov	r6, r3
 8010c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c1e:	2a39      	cmp	r2, #57	@ 0x39
 8010c20:	d107      	bne.n	8010c32 <_dtoa_r+0x6da>
 8010c22:	459a      	cmp	sl, r3
 8010c24:	d1f8      	bne.n	8010c18 <_dtoa_r+0x6c0>
 8010c26:	9a04      	ldr	r2, [sp, #16]
 8010c28:	3201      	adds	r2, #1
 8010c2a:	9204      	str	r2, [sp, #16]
 8010c2c:	2230      	movs	r2, #48	@ 0x30
 8010c2e:	f88a 2000 	strb.w	r2, [sl]
 8010c32:	781a      	ldrb	r2, [r3, #0]
 8010c34:	3201      	adds	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
 8010c38:	e7bd      	b.n	8010bb6 <_dtoa_r+0x65e>
 8010c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8010e28 <_dtoa_r+0x8d0>)
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f7ef fd3b 	bl	80006b8 <__aeabi_dmul>
 8010c42:	2200      	movs	r2, #0
 8010c44:	2300      	movs	r3, #0
 8010c46:	4604      	mov	r4, r0
 8010c48:	460d      	mov	r5, r1
 8010c4a:	f7ef ff9d 	bl	8000b88 <__aeabi_dcmpeq>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	f43f aebb 	beq.w	80109ca <_dtoa_r+0x472>
 8010c54:	e6f0      	b.n	8010a38 <_dtoa_r+0x4e0>
 8010c56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c58:	2a00      	cmp	r2, #0
 8010c5a:	f000 80db 	beq.w	8010e14 <_dtoa_r+0x8bc>
 8010c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c60:	2a01      	cmp	r2, #1
 8010c62:	f300 80bf 	bgt.w	8010de4 <_dtoa_r+0x88c>
 8010c66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	f000 80b7 	beq.w	8010ddc <_dtoa_r+0x884>
 8010c6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010c72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010c74:	4646      	mov	r6, r8
 8010c76:	9a08      	ldr	r2, [sp, #32]
 8010c78:	2101      	movs	r1, #1
 8010c7a:	441a      	add	r2, r3
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	4498      	add	r8, r3
 8010c80:	9208      	str	r2, [sp, #32]
 8010c82:	f000 fc21 	bl	80114c8 <__i2b>
 8010c86:	4605      	mov	r5, r0
 8010c88:	b15e      	cbz	r6, 8010ca2 <_dtoa_r+0x74a>
 8010c8a:	9b08      	ldr	r3, [sp, #32]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dd08      	ble.n	8010ca2 <_dtoa_r+0x74a>
 8010c90:	42b3      	cmp	r3, r6
 8010c92:	9a08      	ldr	r2, [sp, #32]
 8010c94:	bfa8      	it	ge
 8010c96:	4633      	movge	r3, r6
 8010c98:	eba8 0803 	sub.w	r8, r8, r3
 8010c9c:	1af6      	subs	r6, r6, r3
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	9308      	str	r3, [sp, #32]
 8010ca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ca4:	b1f3      	cbz	r3, 8010ce4 <_dtoa_r+0x78c>
 8010ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f000 80b7 	beq.w	8010e1c <_dtoa_r+0x8c4>
 8010cae:	b18c      	cbz	r4, 8010cd4 <_dtoa_r+0x77c>
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	4622      	mov	r2, r4
 8010cb4:	4658      	mov	r0, fp
 8010cb6:	f000 fcc7 	bl	8011648 <__pow5mult>
 8010cba:	464a      	mov	r2, r9
 8010cbc:	4601      	mov	r1, r0
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	4658      	mov	r0, fp
 8010cc2:	f000 fc17 	bl	80114f4 <__multiply>
 8010cc6:	4649      	mov	r1, r9
 8010cc8:	9004      	str	r0, [sp, #16]
 8010cca:	4658      	mov	r0, fp
 8010ccc:	f000 fb48 	bl	8011360 <_Bfree>
 8010cd0:	9b04      	ldr	r3, [sp, #16]
 8010cd2:	4699      	mov	r9, r3
 8010cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010cd6:	1b1a      	subs	r2, r3, r4
 8010cd8:	d004      	beq.n	8010ce4 <_dtoa_r+0x78c>
 8010cda:	4649      	mov	r1, r9
 8010cdc:	4658      	mov	r0, fp
 8010cde:	f000 fcb3 	bl	8011648 <__pow5mult>
 8010ce2:	4681      	mov	r9, r0
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	4658      	mov	r0, fp
 8010ce8:	f000 fbee 	bl	80114c8 <__i2b>
 8010cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cee:	4604      	mov	r4, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 81cf 	beq.w	8011094 <_dtoa_r+0xb3c>
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	4601      	mov	r1, r0
 8010cfa:	4658      	mov	r0, fp
 8010cfc:	f000 fca4 	bl	8011648 <__pow5mult>
 8010d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d02:	2b01      	cmp	r3, #1
 8010d04:	4604      	mov	r4, r0
 8010d06:	f300 8095 	bgt.w	8010e34 <_dtoa_r+0x8dc>
 8010d0a:	9b02      	ldr	r3, [sp, #8]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f040 8087 	bne.w	8010e20 <_dtoa_r+0x8c8>
 8010d12:	9b03      	ldr	r3, [sp, #12]
 8010d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f040 8089 	bne.w	8010e30 <_dtoa_r+0x8d8>
 8010d1e:	9b03      	ldr	r3, [sp, #12]
 8010d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d24:	0d1b      	lsrs	r3, r3, #20
 8010d26:	051b      	lsls	r3, r3, #20
 8010d28:	b12b      	cbz	r3, 8010d36 <_dtoa_r+0x7de>
 8010d2a:	9b08      	ldr	r3, [sp, #32]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	9308      	str	r3, [sp, #32]
 8010d30:	f108 0801 	add.w	r8, r8, #1
 8010d34:	2301      	movs	r3, #1
 8010d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f000 81b0 	beq.w	80110a0 <_dtoa_r+0xb48>
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d46:	6918      	ldr	r0, [r3, #16]
 8010d48:	f000 fb72 	bl	8011430 <__hi0bits>
 8010d4c:	f1c0 0020 	rsb	r0, r0, #32
 8010d50:	9b08      	ldr	r3, [sp, #32]
 8010d52:	4418      	add	r0, r3
 8010d54:	f010 001f 	ands.w	r0, r0, #31
 8010d58:	d077      	beq.n	8010e4a <_dtoa_r+0x8f2>
 8010d5a:	f1c0 0320 	rsb	r3, r0, #32
 8010d5e:	2b04      	cmp	r3, #4
 8010d60:	dd6b      	ble.n	8010e3a <_dtoa_r+0x8e2>
 8010d62:	9b08      	ldr	r3, [sp, #32]
 8010d64:	f1c0 001c 	rsb	r0, r0, #28
 8010d68:	4403      	add	r3, r0
 8010d6a:	4480      	add	r8, r0
 8010d6c:	4406      	add	r6, r0
 8010d6e:	9308      	str	r3, [sp, #32]
 8010d70:	f1b8 0f00 	cmp.w	r8, #0
 8010d74:	dd05      	ble.n	8010d82 <_dtoa_r+0x82a>
 8010d76:	4649      	mov	r1, r9
 8010d78:	4642      	mov	r2, r8
 8010d7a:	4658      	mov	r0, fp
 8010d7c:	f000 fcbe 	bl	80116fc <__lshift>
 8010d80:	4681      	mov	r9, r0
 8010d82:	9b08      	ldr	r3, [sp, #32]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd05      	ble.n	8010d94 <_dtoa_r+0x83c>
 8010d88:	4621      	mov	r1, r4
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4658      	mov	r0, fp
 8010d8e:	f000 fcb5 	bl	80116fc <__lshift>
 8010d92:	4604      	mov	r4, r0
 8010d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d059      	beq.n	8010e4e <_dtoa_r+0x8f6>
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	4648      	mov	r0, r9
 8010d9e:	f000 fd19 	bl	80117d4 <__mcmp>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	da53      	bge.n	8010e4e <_dtoa_r+0x8f6>
 8010da6:	1e7b      	subs	r3, r7, #1
 8010da8:	9304      	str	r3, [sp, #16]
 8010daa:	4649      	mov	r1, r9
 8010dac:	2300      	movs	r3, #0
 8010dae:	220a      	movs	r2, #10
 8010db0:	4658      	mov	r0, fp
 8010db2:	f000 faf7 	bl	80113a4 <__multadd>
 8010db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010db8:	4681      	mov	r9, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8172 	beq.w	80110a4 <_dtoa_r+0xb4c>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	220a      	movs	r2, #10
 8010dc6:	4658      	mov	r0, fp
 8010dc8:	f000 faec 	bl	80113a4 <__multadd>
 8010dcc:	9b00      	ldr	r3, [sp, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	dc67      	bgt.n	8010ea4 <_dtoa_r+0x94c>
 8010dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	dc41      	bgt.n	8010e5e <_dtoa_r+0x906>
 8010dda:	e063      	b.n	8010ea4 <_dtoa_r+0x94c>
 8010ddc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010de2:	e746      	b.n	8010c72 <_dtoa_r+0x71a>
 8010de4:	9b07      	ldr	r3, [sp, #28]
 8010de6:	1e5c      	subs	r4, r3, #1
 8010de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dea:	42a3      	cmp	r3, r4
 8010dec:	bfbf      	itttt	lt
 8010dee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010df0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010df2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010df4:	1ae3      	sublt	r3, r4, r3
 8010df6:	bfb4      	ite	lt
 8010df8:	18d2      	addlt	r2, r2, r3
 8010dfa:	1b1c      	subge	r4, r3, r4
 8010dfc:	9b07      	ldr	r3, [sp, #28]
 8010dfe:	bfbc      	itt	lt
 8010e00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010e02:	2400      	movlt	r4, #0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	bfb5      	itete	lt
 8010e08:	eba8 0603 	sublt.w	r6, r8, r3
 8010e0c:	9b07      	ldrge	r3, [sp, #28]
 8010e0e:	2300      	movlt	r3, #0
 8010e10:	4646      	movge	r6, r8
 8010e12:	e730      	b.n	8010c76 <_dtoa_r+0x71e>
 8010e14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010e16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010e18:	4646      	mov	r6, r8
 8010e1a:	e735      	b.n	8010c88 <_dtoa_r+0x730>
 8010e1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e1e:	e75c      	b.n	8010cda <_dtoa_r+0x782>
 8010e20:	2300      	movs	r3, #0
 8010e22:	e788      	b.n	8010d36 <_dtoa_r+0x7de>
 8010e24:	3fe00000 	.word	0x3fe00000
 8010e28:	40240000 	.word	0x40240000
 8010e2c:	40140000 	.word	0x40140000
 8010e30:	9b02      	ldr	r3, [sp, #8]
 8010e32:	e780      	b.n	8010d36 <_dtoa_r+0x7de>
 8010e34:	2300      	movs	r3, #0
 8010e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e38:	e782      	b.n	8010d40 <_dtoa_r+0x7e8>
 8010e3a:	d099      	beq.n	8010d70 <_dtoa_r+0x818>
 8010e3c:	9a08      	ldr	r2, [sp, #32]
 8010e3e:	331c      	adds	r3, #28
 8010e40:	441a      	add	r2, r3
 8010e42:	4498      	add	r8, r3
 8010e44:	441e      	add	r6, r3
 8010e46:	9208      	str	r2, [sp, #32]
 8010e48:	e792      	b.n	8010d70 <_dtoa_r+0x818>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	e7f6      	b.n	8010e3c <_dtoa_r+0x8e4>
 8010e4e:	9b07      	ldr	r3, [sp, #28]
 8010e50:	9704      	str	r7, [sp, #16]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	dc20      	bgt.n	8010e98 <_dtoa_r+0x940>
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e5a:	2b02      	cmp	r3, #2
 8010e5c:	dd1e      	ble.n	8010e9c <_dtoa_r+0x944>
 8010e5e:	9b00      	ldr	r3, [sp, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f47f aec0 	bne.w	8010be6 <_dtoa_r+0x68e>
 8010e66:	4621      	mov	r1, r4
 8010e68:	2205      	movs	r2, #5
 8010e6a:	4658      	mov	r0, fp
 8010e6c:	f000 fa9a 	bl	80113a4 <__multadd>
 8010e70:	4601      	mov	r1, r0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4648      	mov	r0, r9
 8010e76:	f000 fcad 	bl	80117d4 <__mcmp>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	f77f aeb3 	ble.w	8010be6 <_dtoa_r+0x68e>
 8010e80:	4656      	mov	r6, sl
 8010e82:	2331      	movs	r3, #49	@ 0x31
 8010e84:	f806 3b01 	strb.w	r3, [r6], #1
 8010e88:	9b04      	ldr	r3, [sp, #16]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	9304      	str	r3, [sp, #16]
 8010e8e:	e6ae      	b.n	8010bee <_dtoa_r+0x696>
 8010e90:	9c07      	ldr	r4, [sp, #28]
 8010e92:	9704      	str	r7, [sp, #16]
 8010e94:	4625      	mov	r5, r4
 8010e96:	e7f3      	b.n	8010e80 <_dtoa_r+0x928>
 8010e98:	9b07      	ldr	r3, [sp, #28]
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f000 8104 	beq.w	80110ac <_dtoa_r+0xb54>
 8010ea4:	2e00      	cmp	r6, #0
 8010ea6:	dd05      	ble.n	8010eb4 <_dtoa_r+0x95c>
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4632      	mov	r2, r6
 8010eac:	4658      	mov	r0, fp
 8010eae:	f000 fc25 	bl	80116fc <__lshift>
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d05a      	beq.n	8010f70 <_dtoa_r+0xa18>
 8010eba:	6869      	ldr	r1, [r5, #4]
 8010ebc:	4658      	mov	r0, fp
 8010ebe:	f000 fa0f 	bl	80112e0 <_Balloc>
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	b928      	cbnz	r0, 8010ed2 <_dtoa_r+0x97a>
 8010ec6:	4b84      	ldr	r3, [pc, #528]	@ (80110d8 <_dtoa_r+0xb80>)
 8010ec8:	4602      	mov	r2, r0
 8010eca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010ece:	f7ff bb5a 	b.w	8010586 <_dtoa_r+0x2e>
 8010ed2:	692a      	ldr	r2, [r5, #16]
 8010ed4:	3202      	adds	r2, #2
 8010ed6:	0092      	lsls	r2, r2, #2
 8010ed8:	f105 010c 	add.w	r1, r5, #12
 8010edc:	300c      	adds	r0, #12
 8010ede:	f7ff faa2 	bl	8010426 <memcpy>
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4658      	mov	r0, fp
 8010ee8:	f000 fc08 	bl	80116fc <__lshift>
 8010eec:	f10a 0301 	add.w	r3, sl, #1
 8010ef0:	9307      	str	r3, [sp, #28]
 8010ef2:	9b00      	ldr	r3, [sp, #0]
 8010ef4:	4453      	add	r3, sl
 8010ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ef8:	9b02      	ldr	r3, [sp, #8]
 8010efa:	f003 0301 	and.w	r3, r3, #1
 8010efe:	462f      	mov	r7, r5
 8010f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f02:	4605      	mov	r5, r0
 8010f04:	9b07      	ldr	r3, [sp, #28]
 8010f06:	4621      	mov	r1, r4
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	4648      	mov	r0, r9
 8010f0c:	9300      	str	r3, [sp, #0]
 8010f0e:	f7ff fa98 	bl	8010442 <quorem>
 8010f12:	4639      	mov	r1, r7
 8010f14:	9002      	str	r0, [sp, #8]
 8010f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010f1a:	4648      	mov	r0, r9
 8010f1c:	f000 fc5a 	bl	80117d4 <__mcmp>
 8010f20:	462a      	mov	r2, r5
 8010f22:	9008      	str	r0, [sp, #32]
 8010f24:	4621      	mov	r1, r4
 8010f26:	4658      	mov	r0, fp
 8010f28:	f000 fc70 	bl	801180c <__mdiff>
 8010f2c:	68c2      	ldr	r2, [r0, #12]
 8010f2e:	4606      	mov	r6, r0
 8010f30:	bb02      	cbnz	r2, 8010f74 <_dtoa_r+0xa1c>
 8010f32:	4601      	mov	r1, r0
 8010f34:	4648      	mov	r0, r9
 8010f36:	f000 fc4d 	bl	80117d4 <__mcmp>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	4631      	mov	r1, r6
 8010f3e:	4658      	mov	r0, fp
 8010f40:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f42:	f000 fa0d 	bl	8011360 <_Bfree>
 8010f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f4a:	9e07      	ldr	r6, [sp, #28]
 8010f4c:	ea43 0102 	orr.w	r1, r3, r2
 8010f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f52:	4319      	orrs	r1, r3
 8010f54:	d110      	bne.n	8010f78 <_dtoa_r+0xa20>
 8010f56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f5a:	d029      	beq.n	8010fb0 <_dtoa_r+0xa58>
 8010f5c:	9b08      	ldr	r3, [sp, #32]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	dd02      	ble.n	8010f68 <_dtoa_r+0xa10>
 8010f62:	9b02      	ldr	r3, [sp, #8]
 8010f64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010f68:	9b00      	ldr	r3, [sp, #0]
 8010f6a:	f883 8000 	strb.w	r8, [r3]
 8010f6e:	e63f      	b.n	8010bf0 <_dtoa_r+0x698>
 8010f70:	4628      	mov	r0, r5
 8010f72:	e7bb      	b.n	8010eec <_dtoa_r+0x994>
 8010f74:	2201      	movs	r2, #1
 8010f76:	e7e1      	b.n	8010f3c <_dtoa_r+0x9e4>
 8010f78:	9b08      	ldr	r3, [sp, #32]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	db04      	blt.n	8010f88 <_dtoa_r+0xa30>
 8010f7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f80:	430b      	orrs	r3, r1
 8010f82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f84:	430b      	orrs	r3, r1
 8010f86:	d120      	bne.n	8010fca <_dtoa_r+0xa72>
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	dded      	ble.n	8010f68 <_dtoa_r+0xa10>
 8010f8c:	4649      	mov	r1, r9
 8010f8e:	2201      	movs	r2, #1
 8010f90:	4658      	mov	r0, fp
 8010f92:	f000 fbb3 	bl	80116fc <__lshift>
 8010f96:	4621      	mov	r1, r4
 8010f98:	4681      	mov	r9, r0
 8010f9a:	f000 fc1b 	bl	80117d4 <__mcmp>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	dc03      	bgt.n	8010faa <_dtoa_r+0xa52>
 8010fa2:	d1e1      	bne.n	8010f68 <_dtoa_r+0xa10>
 8010fa4:	f018 0f01 	tst.w	r8, #1
 8010fa8:	d0de      	beq.n	8010f68 <_dtoa_r+0xa10>
 8010faa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010fae:	d1d8      	bne.n	8010f62 <_dtoa_r+0xa0a>
 8010fb0:	9a00      	ldr	r2, [sp, #0]
 8010fb2:	2339      	movs	r3, #57	@ 0x39
 8010fb4:	7013      	strb	r3, [r2, #0]
 8010fb6:	4633      	mov	r3, r6
 8010fb8:	461e      	mov	r6, r3
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010fc0:	2a39      	cmp	r2, #57	@ 0x39
 8010fc2:	d052      	beq.n	801106a <_dtoa_r+0xb12>
 8010fc4:	3201      	adds	r2, #1
 8010fc6:	701a      	strb	r2, [r3, #0]
 8010fc8:	e612      	b.n	8010bf0 <_dtoa_r+0x698>
 8010fca:	2a00      	cmp	r2, #0
 8010fcc:	dd07      	ble.n	8010fde <_dtoa_r+0xa86>
 8010fce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010fd2:	d0ed      	beq.n	8010fb0 <_dtoa_r+0xa58>
 8010fd4:	9a00      	ldr	r2, [sp, #0]
 8010fd6:	f108 0301 	add.w	r3, r8, #1
 8010fda:	7013      	strb	r3, [r2, #0]
 8010fdc:	e608      	b.n	8010bf0 <_dtoa_r+0x698>
 8010fde:	9b07      	ldr	r3, [sp, #28]
 8010fe0:	9a07      	ldr	r2, [sp, #28]
 8010fe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d028      	beq.n	801103e <_dtoa_r+0xae6>
 8010fec:	4649      	mov	r1, r9
 8010fee:	2300      	movs	r3, #0
 8010ff0:	220a      	movs	r2, #10
 8010ff2:	4658      	mov	r0, fp
 8010ff4:	f000 f9d6 	bl	80113a4 <__multadd>
 8010ff8:	42af      	cmp	r7, r5
 8010ffa:	4681      	mov	r9, r0
 8010ffc:	f04f 0300 	mov.w	r3, #0
 8011000:	f04f 020a 	mov.w	r2, #10
 8011004:	4639      	mov	r1, r7
 8011006:	4658      	mov	r0, fp
 8011008:	d107      	bne.n	801101a <_dtoa_r+0xac2>
 801100a:	f000 f9cb 	bl	80113a4 <__multadd>
 801100e:	4607      	mov	r7, r0
 8011010:	4605      	mov	r5, r0
 8011012:	9b07      	ldr	r3, [sp, #28]
 8011014:	3301      	adds	r3, #1
 8011016:	9307      	str	r3, [sp, #28]
 8011018:	e774      	b.n	8010f04 <_dtoa_r+0x9ac>
 801101a:	f000 f9c3 	bl	80113a4 <__multadd>
 801101e:	4629      	mov	r1, r5
 8011020:	4607      	mov	r7, r0
 8011022:	2300      	movs	r3, #0
 8011024:	220a      	movs	r2, #10
 8011026:	4658      	mov	r0, fp
 8011028:	f000 f9bc 	bl	80113a4 <__multadd>
 801102c:	4605      	mov	r5, r0
 801102e:	e7f0      	b.n	8011012 <_dtoa_r+0xaba>
 8011030:	9b00      	ldr	r3, [sp, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	bfcc      	ite	gt
 8011036:	461e      	movgt	r6, r3
 8011038:	2601      	movle	r6, #1
 801103a:	4456      	add	r6, sl
 801103c:	2700      	movs	r7, #0
 801103e:	4649      	mov	r1, r9
 8011040:	2201      	movs	r2, #1
 8011042:	4658      	mov	r0, fp
 8011044:	f000 fb5a 	bl	80116fc <__lshift>
 8011048:	4621      	mov	r1, r4
 801104a:	4681      	mov	r9, r0
 801104c:	f000 fbc2 	bl	80117d4 <__mcmp>
 8011050:	2800      	cmp	r0, #0
 8011052:	dcb0      	bgt.n	8010fb6 <_dtoa_r+0xa5e>
 8011054:	d102      	bne.n	801105c <_dtoa_r+0xb04>
 8011056:	f018 0f01 	tst.w	r8, #1
 801105a:	d1ac      	bne.n	8010fb6 <_dtoa_r+0xa5e>
 801105c:	4633      	mov	r3, r6
 801105e:	461e      	mov	r6, r3
 8011060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011064:	2a30      	cmp	r2, #48	@ 0x30
 8011066:	d0fa      	beq.n	801105e <_dtoa_r+0xb06>
 8011068:	e5c2      	b.n	8010bf0 <_dtoa_r+0x698>
 801106a:	459a      	cmp	sl, r3
 801106c:	d1a4      	bne.n	8010fb8 <_dtoa_r+0xa60>
 801106e:	9b04      	ldr	r3, [sp, #16]
 8011070:	3301      	adds	r3, #1
 8011072:	9304      	str	r3, [sp, #16]
 8011074:	2331      	movs	r3, #49	@ 0x31
 8011076:	f88a 3000 	strb.w	r3, [sl]
 801107a:	e5b9      	b.n	8010bf0 <_dtoa_r+0x698>
 801107c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801107e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80110dc <_dtoa_r+0xb84>
 8011082:	b11b      	cbz	r3, 801108c <_dtoa_r+0xb34>
 8011084:	f10a 0308 	add.w	r3, sl, #8
 8011088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801108a:	6013      	str	r3, [r2, #0]
 801108c:	4650      	mov	r0, sl
 801108e:	b019      	add	sp, #100	@ 0x64
 8011090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011096:	2b01      	cmp	r3, #1
 8011098:	f77f ae37 	ble.w	8010d0a <_dtoa_r+0x7b2>
 801109c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801109e:	930a      	str	r3, [sp, #40]	@ 0x28
 80110a0:	2001      	movs	r0, #1
 80110a2:	e655      	b.n	8010d50 <_dtoa_r+0x7f8>
 80110a4:	9b00      	ldr	r3, [sp, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f77f aed6 	ble.w	8010e58 <_dtoa_r+0x900>
 80110ac:	4656      	mov	r6, sl
 80110ae:	4621      	mov	r1, r4
 80110b0:	4648      	mov	r0, r9
 80110b2:	f7ff f9c6 	bl	8010442 <quorem>
 80110b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80110ba:	f806 8b01 	strb.w	r8, [r6], #1
 80110be:	9b00      	ldr	r3, [sp, #0]
 80110c0:	eba6 020a 	sub.w	r2, r6, sl
 80110c4:	4293      	cmp	r3, r2
 80110c6:	ddb3      	ble.n	8011030 <_dtoa_r+0xad8>
 80110c8:	4649      	mov	r1, r9
 80110ca:	2300      	movs	r3, #0
 80110cc:	220a      	movs	r2, #10
 80110ce:	4658      	mov	r0, fp
 80110d0:	f000 f968 	bl	80113a4 <__multadd>
 80110d4:	4681      	mov	r9, r0
 80110d6:	e7ea      	b.n	80110ae <_dtoa_r+0xb56>
 80110d8:	08025e70 	.word	0x08025e70
 80110dc:	08025df4 	.word	0x08025df4

080110e0 <_free_r>:
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4605      	mov	r5, r0
 80110e4:	2900      	cmp	r1, #0
 80110e6:	d041      	beq.n	801116c <_free_r+0x8c>
 80110e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ec:	1f0c      	subs	r4, r1, #4
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bfb8      	it	lt
 80110f2:	18e4      	addlt	r4, r4, r3
 80110f4:	f000 f8e8 	bl	80112c8 <__malloc_lock>
 80110f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011170 <_free_r+0x90>)
 80110fa:	6813      	ldr	r3, [r2, #0]
 80110fc:	b933      	cbnz	r3, 801110c <_free_r+0x2c>
 80110fe:	6063      	str	r3, [r4, #4]
 8011100:	6014      	str	r4, [r2, #0]
 8011102:	4628      	mov	r0, r5
 8011104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011108:	f000 b8e4 	b.w	80112d4 <__malloc_unlock>
 801110c:	42a3      	cmp	r3, r4
 801110e:	d908      	bls.n	8011122 <_free_r+0x42>
 8011110:	6820      	ldr	r0, [r4, #0]
 8011112:	1821      	adds	r1, r4, r0
 8011114:	428b      	cmp	r3, r1
 8011116:	bf01      	itttt	eq
 8011118:	6819      	ldreq	r1, [r3, #0]
 801111a:	685b      	ldreq	r3, [r3, #4]
 801111c:	1809      	addeq	r1, r1, r0
 801111e:	6021      	streq	r1, [r4, #0]
 8011120:	e7ed      	b.n	80110fe <_free_r+0x1e>
 8011122:	461a      	mov	r2, r3
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	b10b      	cbz	r3, 801112c <_free_r+0x4c>
 8011128:	42a3      	cmp	r3, r4
 801112a:	d9fa      	bls.n	8011122 <_free_r+0x42>
 801112c:	6811      	ldr	r1, [r2, #0]
 801112e:	1850      	adds	r0, r2, r1
 8011130:	42a0      	cmp	r0, r4
 8011132:	d10b      	bne.n	801114c <_free_r+0x6c>
 8011134:	6820      	ldr	r0, [r4, #0]
 8011136:	4401      	add	r1, r0
 8011138:	1850      	adds	r0, r2, r1
 801113a:	4283      	cmp	r3, r0
 801113c:	6011      	str	r1, [r2, #0]
 801113e:	d1e0      	bne.n	8011102 <_free_r+0x22>
 8011140:	6818      	ldr	r0, [r3, #0]
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	6053      	str	r3, [r2, #4]
 8011146:	4408      	add	r0, r1
 8011148:	6010      	str	r0, [r2, #0]
 801114a:	e7da      	b.n	8011102 <_free_r+0x22>
 801114c:	d902      	bls.n	8011154 <_free_r+0x74>
 801114e:	230c      	movs	r3, #12
 8011150:	602b      	str	r3, [r5, #0]
 8011152:	e7d6      	b.n	8011102 <_free_r+0x22>
 8011154:	6820      	ldr	r0, [r4, #0]
 8011156:	1821      	adds	r1, r4, r0
 8011158:	428b      	cmp	r3, r1
 801115a:	bf04      	itt	eq
 801115c:	6819      	ldreq	r1, [r3, #0]
 801115e:	685b      	ldreq	r3, [r3, #4]
 8011160:	6063      	str	r3, [r4, #4]
 8011162:	bf04      	itt	eq
 8011164:	1809      	addeq	r1, r1, r0
 8011166:	6021      	streq	r1, [r4, #0]
 8011168:	6054      	str	r4, [r2, #4]
 801116a:	e7ca      	b.n	8011102 <_free_r+0x22>
 801116c:	bd38      	pop	{r3, r4, r5, pc}
 801116e:	bf00      	nop
 8011170:	200093ec 	.word	0x200093ec

08011174 <malloc>:
 8011174:	4b02      	ldr	r3, [pc, #8]	@ (8011180 <malloc+0xc>)
 8011176:	4601      	mov	r1, r0
 8011178:	6818      	ldr	r0, [r3, #0]
 801117a:	f000 b825 	b.w	80111c8 <_malloc_r>
 801117e:	bf00      	nop
 8011180:	20000020 	.word	0x20000020

08011184 <sbrk_aligned>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	4e0f      	ldr	r6, [pc, #60]	@ (80111c4 <sbrk_aligned+0x40>)
 8011188:	460c      	mov	r4, r1
 801118a:	6831      	ldr	r1, [r6, #0]
 801118c:	4605      	mov	r5, r0
 801118e:	b911      	cbnz	r1, 8011196 <sbrk_aligned+0x12>
 8011190:	f000 fcd4 	bl	8011b3c <_sbrk_r>
 8011194:	6030      	str	r0, [r6, #0]
 8011196:	4621      	mov	r1, r4
 8011198:	4628      	mov	r0, r5
 801119a:	f000 fccf 	bl	8011b3c <_sbrk_r>
 801119e:	1c43      	adds	r3, r0, #1
 80111a0:	d103      	bne.n	80111aa <sbrk_aligned+0x26>
 80111a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80111a6:	4620      	mov	r0, r4
 80111a8:	bd70      	pop	{r4, r5, r6, pc}
 80111aa:	1cc4      	adds	r4, r0, #3
 80111ac:	f024 0403 	bic.w	r4, r4, #3
 80111b0:	42a0      	cmp	r0, r4
 80111b2:	d0f8      	beq.n	80111a6 <sbrk_aligned+0x22>
 80111b4:	1a21      	subs	r1, r4, r0
 80111b6:	4628      	mov	r0, r5
 80111b8:	f000 fcc0 	bl	8011b3c <_sbrk_r>
 80111bc:	3001      	adds	r0, #1
 80111be:	d1f2      	bne.n	80111a6 <sbrk_aligned+0x22>
 80111c0:	e7ef      	b.n	80111a2 <sbrk_aligned+0x1e>
 80111c2:	bf00      	nop
 80111c4:	200093e8 	.word	0x200093e8

080111c8 <_malloc_r>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	1ccd      	adds	r5, r1, #3
 80111ce:	f025 0503 	bic.w	r5, r5, #3
 80111d2:	3508      	adds	r5, #8
 80111d4:	2d0c      	cmp	r5, #12
 80111d6:	bf38      	it	cc
 80111d8:	250c      	movcc	r5, #12
 80111da:	2d00      	cmp	r5, #0
 80111dc:	4606      	mov	r6, r0
 80111de:	db01      	blt.n	80111e4 <_malloc_r+0x1c>
 80111e0:	42a9      	cmp	r1, r5
 80111e2:	d904      	bls.n	80111ee <_malloc_r+0x26>
 80111e4:	230c      	movs	r3, #12
 80111e6:	6033      	str	r3, [r6, #0]
 80111e8:	2000      	movs	r0, #0
 80111ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80112c4 <_malloc_r+0xfc>
 80111f2:	f000 f869 	bl	80112c8 <__malloc_lock>
 80111f6:	f8d8 3000 	ldr.w	r3, [r8]
 80111fa:	461c      	mov	r4, r3
 80111fc:	bb44      	cbnz	r4, 8011250 <_malloc_r+0x88>
 80111fe:	4629      	mov	r1, r5
 8011200:	4630      	mov	r0, r6
 8011202:	f7ff ffbf 	bl	8011184 <sbrk_aligned>
 8011206:	1c43      	adds	r3, r0, #1
 8011208:	4604      	mov	r4, r0
 801120a:	d158      	bne.n	80112be <_malloc_r+0xf6>
 801120c:	f8d8 4000 	ldr.w	r4, [r8]
 8011210:	4627      	mov	r7, r4
 8011212:	2f00      	cmp	r7, #0
 8011214:	d143      	bne.n	801129e <_malloc_r+0xd6>
 8011216:	2c00      	cmp	r4, #0
 8011218:	d04b      	beq.n	80112b2 <_malloc_r+0xea>
 801121a:	6823      	ldr	r3, [r4, #0]
 801121c:	4639      	mov	r1, r7
 801121e:	4630      	mov	r0, r6
 8011220:	eb04 0903 	add.w	r9, r4, r3
 8011224:	f000 fc8a 	bl	8011b3c <_sbrk_r>
 8011228:	4581      	cmp	r9, r0
 801122a:	d142      	bne.n	80112b2 <_malloc_r+0xea>
 801122c:	6821      	ldr	r1, [r4, #0]
 801122e:	1a6d      	subs	r5, r5, r1
 8011230:	4629      	mov	r1, r5
 8011232:	4630      	mov	r0, r6
 8011234:	f7ff ffa6 	bl	8011184 <sbrk_aligned>
 8011238:	3001      	adds	r0, #1
 801123a:	d03a      	beq.n	80112b2 <_malloc_r+0xea>
 801123c:	6823      	ldr	r3, [r4, #0]
 801123e:	442b      	add	r3, r5
 8011240:	6023      	str	r3, [r4, #0]
 8011242:	f8d8 3000 	ldr.w	r3, [r8]
 8011246:	685a      	ldr	r2, [r3, #4]
 8011248:	bb62      	cbnz	r2, 80112a4 <_malloc_r+0xdc>
 801124a:	f8c8 7000 	str.w	r7, [r8]
 801124e:	e00f      	b.n	8011270 <_malloc_r+0xa8>
 8011250:	6822      	ldr	r2, [r4, #0]
 8011252:	1b52      	subs	r2, r2, r5
 8011254:	d420      	bmi.n	8011298 <_malloc_r+0xd0>
 8011256:	2a0b      	cmp	r2, #11
 8011258:	d917      	bls.n	801128a <_malloc_r+0xc2>
 801125a:	1961      	adds	r1, r4, r5
 801125c:	42a3      	cmp	r3, r4
 801125e:	6025      	str	r5, [r4, #0]
 8011260:	bf18      	it	ne
 8011262:	6059      	strne	r1, [r3, #4]
 8011264:	6863      	ldr	r3, [r4, #4]
 8011266:	bf08      	it	eq
 8011268:	f8c8 1000 	streq.w	r1, [r8]
 801126c:	5162      	str	r2, [r4, r5]
 801126e:	604b      	str	r3, [r1, #4]
 8011270:	4630      	mov	r0, r6
 8011272:	f000 f82f 	bl	80112d4 <__malloc_unlock>
 8011276:	f104 000b 	add.w	r0, r4, #11
 801127a:	1d23      	adds	r3, r4, #4
 801127c:	f020 0007 	bic.w	r0, r0, #7
 8011280:	1ac2      	subs	r2, r0, r3
 8011282:	bf1c      	itt	ne
 8011284:	1a1b      	subne	r3, r3, r0
 8011286:	50a3      	strne	r3, [r4, r2]
 8011288:	e7af      	b.n	80111ea <_malloc_r+0x22>
 801128a:	6862      	ldr	r2, [r4, #4]
 801128c:	42a3      	cmp	r3, r4
 801128e:	bf0c      	ite	eq
 8011290:	f8c8 2000 	streq.w	r2, [r8]
 8011294:	605a      	strne	r2, [r3, #4]
 8011296:	e7eb      	b.n	8011270 <_malloc_r+0xa8>
 8011298:	4623      	mov	r3, r4
 801129a:	6864      	ldr	r4, [r4, #4]
 801129c:	e7ae      	b.n	80111fc <_malloc_r+0x34>
 801129e:	463c      	mov	r4, r7
 80112a0:	687f      	ldr	r7, [r7, #4]
 80112a2:	e7b6      	b.n	8011212 <_malloc_r+0x4a>
 80112a4:	461a      	mov	r2, r3
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	d1fb      	bne.n	80112a4 <_malloc_r+0xdc>
 80112ac:	2300      	movs	r3, #0
 80112ae:	6053      	str	r3, [r2, #4]
 80112b0:	e7de      	b.n	8011270 <_malloc_r+0xa8>
 80112b2:	230c      	movs	r3, #12
 80112b4:	6033      	str	r3, [r6, #0]
 80112b6:	4630      	mov	r0, r6
 80112b8:	f000 f80c 	bl	80112d4 <__malloc_unlock>
 80112bc:	e794      	b.n	80111e8 <_malloc_r+0x20>
 80112be:	6005      	str	r5, [r0, #0]
 80112c0:	e7d6      	b.n	8011270 <_malloc_r+0xa8>
 80112c2:	bf00      	nop
 80112c4:	200093ec 	.word	0x200093ec

080112c8 <__malloc_lock>:
 80112c8:	4801      	ldr	r0, [pc, #4]	@ (80112d0 <__malloc_lock+0x8>)
 80112ca:	f7ff b8aa 	b.w	8010422 <__retarget_lock_acquire_recursive>
 80112ce:	bf00      	nop
 80112d0:	200093e4 	.word	0x200093e4

080112d4 <__malloc_unlock>:
 80112d4:	4801      	ldr	r0, [pc, #4]	@ (80112dc <__malloc_unlock+0x8>)
 80112d6:	f7ff b8a5 	b.w	8010424 <__retarget_lock_release_recursive>
 80112da:	bf00      	nop
 80112dc:	200093e4 	.word	0x200093e4

080112e0 <_Balloc>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	69c6      	ldr	r6, [r0, #28]
 80112e4:	4604      	mov	r4, r0
 80112e6:	460d      	mov	r5, r1
 80112e8:	b976      	cbnz	r6, 8011308 <_Balloc+0x28>
 80112ea:	2010      	movs	r0, #16
 80112ec:	f7ff ff42 	bl	8011174 <malloc>
 80112f0:	4602      	mov	r2, r0
 80112f2:	61e0      	str	r0, [r4, #28]
 80112f4:	b920      	cbnz	r0, 8011300 <_Balloc+0x20>
 80112f6:	4b18      	ldr	r3, [pc, #96]	@ (8011358 <_Balloc+0x78>)
 80112f8:	4818      	ldr	r0, [pc, #96]	@ (801135c <_Balloc+0x7c>)
 80112fa:	216b      	movs	r1, #107	@ 0x6b
 80112fc:	f000 fc2e 	bl	8011b5c <__assert_func>
 8011300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011304:	6006      	str	r6, [r0, #0]
 8011306:	60c6      	str	r6, [r0, #12]
 8011308:	69e6      	ldr	r6, [r4, #28]
 801130a:	68f3      	ldr	r3, [r6, #12]
 801130c:	b183      	cbz	r3, 8011330 <_Balloc+0x50>
 801130e:	69e3      	ldr	r3, [r4, #28]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011316:	b9b8      	cbnz	r0, 8011348 <_Balloc+0x68>
 8011318:	2101      	movs	r1, #1
 801131a:	fa01 f605 	lsl.w	r6, r1, r5
 801131e:	1d72      	adds	r2, r6, #5
 8011320:	0092      	lsls	r2, r2, #2
 8011322:	4620      	mov	r0, r4
 8011324:	f000 fc38 	bl	8011b98 <_calloc_r>
 8011328:	b160      	cbz	r0, 8011344 <_Balloc+0x64>
 801132a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801132e:	e00e      	b.n	801134e <_Balloc+0x6e>
 8011330:	2221      	movs	r2, #33	@ 0x21
 8011332:	2104      	movs	r1, #4
 8011334:	4620      	mov	r0, r4
 8011336:	f000 fc2f 	bl	8011b98 <_calloc_r>
 801133a:	69e3      	ldr	r3, [r4, #28]
 801133c:	60f0      	str	r0, [r6, #12]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d1e4      	bne.n	801130e <_Balloc+0x2e>
 8011344:	2000      	movs	r0, #0
 8011346:	bd70      	pop	{r4, r5, r6, pc}
 8011348:	6802      	ldr	r2, [r0, #0]
 801134a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801134e:	2300      	movs	r3, #0
 8011350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011354:	e7f7      	b.n	8011346 <_Balloc+0x66>
 8011356:	bf00      	nop
 8011358:	08025e01 	.word	0x08025e01
 801135c:	08025e81 	.word	0x08025e81

08011360 <_Bfree>:
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	69c6      	ldr	r6, [r0, #28]
 8011364:	4605      	mov	r5, r0
 8011366:	460c      	mov	r4, r1
 8011368:	b976      	cbnz	r6, 8011388 <_Bfree+0x28>
 801136a:	2010      	movs	r0, #16
 801136c:	f7ff ff02 	bl	8011174 <malloc>
 8011370:	4602      	mov	r2, r0
 8011372:	61e8      	str	r0, [r5, #28]
 8011374:	b920      	cbnz	r0, 8011380 <_Bfree+0x20>
 8011376:	4b09      	ldr	r3, [pc, #36]	@ (801139c <_Bfree+0x3c>)
 8011378:	4809      	ldr	r0, [pc, #36]	@ (80113a0 <_Bfree+0x40>)
 801137a:	218f      	movs	r1, #143	@ 0x8f
 801137c:	f000 fbee 	bl	8011b5c <__assert_func>
 8011380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011384:	6006      	str	r6, [r0, #0]
 8011386:	60c6      	str	r6, [r0, #12]
 8011388:	b13c      	cbz	r4, 801139a <_Bfree+0x3a>
 801138a:	69eb      	ldr	r3, [r5, #28]
 801138c:	6862      	ldr	r2, [r4, #4]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011394:	6021      	str	r1, [r4, #0]
 8011396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801139a:	bd70      	pop	{r4, r5, r6, pc}
 801139c:	08025e01 	.word	0x08025e01
 80113a0:	08025e81 	.word	0x08025e81

080113a4 <__multadd>:
 80113a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a8:	690d      	ldr	r5, [r1, #16]
 80113aa:	4607      	mov	r7, r0
 80113ac:	460c      	mov	r4, r1
 80113ae:	461e      	mov	r6, r3
 80113b0:	f101 0c14 	add.w	ip, r1, #20
 80113b4:	2000      	movs	r0, #0
 80113b6:	f8dc 3000 	ldr.w	r3, [ip]
 80113ba:	b299      	uxth	r1, r3
 80113bc:	fb02 6101 	mla	r1, r2, r1, r6
 80113c0:	0c1e      	lsrs	r6, r3, #16
 80113c2:	0c0b      	lsrs	r3, r1, #16
 80113c4:	fb02 3306 	mla	r3, r2, r6, r3
 80113c8:	b289      	uxth	r1, r1
 80113ca:	3001      	adds	r0, #1
 80113cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113d0:	4285      	cmp	r5, r0
 80113d2:	f84c 1b04 	str.w	r1, [ip], #4
 80113d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113da:	dcec      	bgt.n	80113b6 <__multadd+0x12>
 80113dc:	b30e      	cbz	r6, 8011422 <__multadd+0x7e>
 80113de:	68a3      	ldr	r3, [r4, #8]
 80113e0:	42ab      	cmp	r3, r5
 80113e2:	dc19      	bgt.n	8011418 <__multadd+0x74>
 80113e4:	6861      	ldr	r1, [r4, #4]
 80113e6:	4638      	mov	r0, r7
 80113e8:	3101      	adds	r1, #1
 80113ea:	f7ff ff79 	bl	80112e0 <_Balloc>
 80113ee:	4680      	mov	r8, r0
 80113f0:	b928      	cbnz	r0, 80113fe <__multadd+0x5a>
 80113f2:	4602      	mov	r2, r0
 80113f4:	4b0c      	ldr	r3, [pc, #48]	@ (8011428 <__multadd+0x84>)
 80113f6:	480d      	ldr	r0, [pc, #52]	@ (801142c <__multadd+0x88>)
 80113f8:	21ba      	movs	r1, #186	@ 0xba
 80113fa:	f000 fbaf 	bl	8011b5c <__assert_func>
 80113fe:	6922      	ldr	r2, [r4, #16]
 8011400:	3202      	adds	r2, #2
 8011402:	f104 010c 	add.w	r1, r4, #12
 8011406:	0092      	lsls	r2, r2, #2
 8011408:	300c      	adds	r0, #12
 801140a:	f7ff f80c 	bl	8010426 <memcpy>
 801140e:	4621      	mov	r1, r4
 8011410:	4638      	mov	r0, r7
 8011412:	f7ff ffa5 	bl	8011360 <_Bfree>
 8011416:	4644      	mov	r4, r8
 8011418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801141c:	3501      	adds	r5, #1
 801141e:	615e      	str	r6, [r3, #20]
 8011420:	6125      	str	r5, [r4, #16]
 8011422:	4620      	mov	r0, r4
 8011424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011428:	08025e70 	.word	0x08025e70
 801142c:	08025e81 	.word	0x08025e81

08011430 <__hi0bits>:
 8011430:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011434:	4603      	mov	r3, r0
 8011436:	bf36      	itet	cc
 8011438:	0403      	lslcc	r3, r0, #16
 801143a:	2000      	movcs	r0, #0
 801143c:	2010      	movcc	r0, #16
 801143e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011442:	bf3c      	itt	cc
 8011444:	021b      	lslcc	r3, r3, #8
 8011446:	3008      	addcc	r0, #8
 8011448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801144c:	bf3c      	itt	cc
 801144e:	011b      	lslcc	r3, r3, #4
 8011450:	3004      	addcc	r0, #4
 8011452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011456:	bf3c      	itt	cc
 8011458:	009b      	lslcc	r3, r3, #2
 801145a:	3002      	addcc	r0, #2
 801145c:	2b00      	cmp	r3, #0
 801145e:	db05      	blt.n	801146c <__hi0bits+0x3c>
 8011460:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011464:	f100 0001 	add.w	r0, r0, #1
 8011468:	bf08      	it	eq
 801146a:	2020      	moveq	r0, #32
 801146c:	4770      	bx	lr

0801146e <__lo0bits>:
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	4602      	mov	r2, r0
 8011472:	f013 0007 	ands.w	r0, r3, #7
 8011476:	d00b      	beq.n	8011490 <__lo0bits+0x22>
 8011478:	07d9      	lsls	r1, r3, #31
 801147a:	d421      	bmi.n	80114c0 <__lo0bits+0x52>
 801147c:	0798      	lsls	r0, r3, #30
 801147e:	bf49      	itett	mi
 8011480:	085b      	lsrmi	r3, r3, #1
 8011482:	089b      	lsrpl	r3, r3, #2
 8011484:	2001      	movmi	r0, #1
 8011486:	6013      	strmi	r3, [r2, #0]
 8011488:	bf5c      	itt	pl
 801148a:	6013      	strpl	r3, [r2, #0]
 801148c:	2002      	movpl	r0, #2
 801148e:	4770      	bx	lr
 8011490:	b299      	uxth	r1, r3
 8011492:	b909      	cbnz	r1, 8011498 <__lo0bits+0x2a>
 8011494:	0c1b      	lsrs	r3, r3, #16
 8011496:	2010      	movs	r0, #16
 8011498:	b2d9      	uxtb	r1, r3
 801149a:	b909      	cbnz	r1, 80114a0 <__lo0bits+0x32>
 801149c:	3008      	adds	r0, #8
 801149e:	0a1b      	lsrs	r3, r3, #8
 80114a0:	0719      	lsls	r1, r3, #28
 80114a2:	bf04      	itt	eq
 80114a4:	091b      	lsreq	r3, r3, #4
 80114a6:	3004      	addeq	r0, #4
 80114a8:	0799      	lsls	r1, r3, #30
 80114aa:	bf04      	itt	eq
 80114ac:	089b      	lsreq	r3, r3, #2
 80114ae:	3002      	addeq	r0, #2
 80114b0:	07d9      	lsls	r1, r3, #31
 80114b2:	d403      	bmi.n	80114bc <__lo0bits+0x4e>
 80114b4:	085b      	lsrs	r3, r3, #1
 80114b6:	f100 0001 	add.w	r0, r0, #1
 80114ba:	d003      	beq.n	80114c4 <__lo0bits+0x56>
 80114bc:	6013      	str	r3, [r2, #0]
 80114be:	4770      	bx	lr
 80114c0:	2000      	movs	r0, #0
 80114c2:	4770      	bx	lr
 80114c4:	2020      	movs	r0, #32
 80114c6:	4770      	bx	lr

080114c8 <__i2b>:
 80114c8:	b510      	push	{r4, lr}
 80114ca:	460c      	mov	r4, r1
 80114cc:	2101      	movs	r1, #1
 80114ce:	f7ff ff07 	bl	80112e0 <_Balloc>
 80114d2:	4602      	mov	r2, r0
 80114d4:	b928      	cbnz	r0, 80114e2 <__i2b+0x1a>
 80114d6:	4b05      	ldr	r3, [pc, #20]	@ (80114ec <__i2b+0x24>)
 80114d8:	4805      	ldr	r0, [pc, #20]	@ (80114f0 <__i2b+0x28>)
 80114da:	f240 1145 	movw	r1, #325	@ 0x145
 80114de:	f000 fb3d 	bl	8011b5c <__assert_func>
 80114e2:	2301      	movs	r3, #1
 80114e4:	6144      	str	r4, [r0, #20]
 80114e6:	6103      	str	r3, [r0, #16]
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	bf00      	nop
 80114ec:	08025e70 	.word	0x08025e70
 80114f0:	08025e81 	.word	0x08025e81

080114f4 <__multiply>:
 80114f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f8:	4614      	mov	r4, r2
 80114fa:	690a      	ldr	r2, [r1, #16]
 80114fc:	6923      	ldr	r3, [r4, #16]
 80114fe:	429a      	cmp	r2, r3
 8011500:	bfa8      	it	ge
 8011502:	4623      	movge	r3, r4
 8011504:	460f      	mov	r7, r1
 8011506:	bfa4      	itt	ge
 8011508:	460c      	movge	r4, r1
 801150a:	461f      	movge	r7, r3
 801150c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011510:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011514:	68a3      	ldr	r3, [r4, #8]
 8011516:	6861      	ldr	r1, [r4, #4]
 8011518:	eb0a 0609 	add.w	r6, sl, r9
 801151c:	42b3      	cmp	r3, r6
 801151e:	b085      	sub	sp, #20
 8011520:	bfb8      	it	lt
 8011522:	3101      	addlt	r1, #1
 8011524:	f7ff fedc 	bl	80112e0 <_Balloc>
 8011528:	b930      	cbnz	r0, 8011538 <__multiply+0x44>
 801152a:	4602      	mov	r2, r0
 801152c:	4b44      	ldr	r3, [pc, #272]	@ (8011640 <__multiply+0x14c>)
 801152e:	4845      	ldr	r0, [pc, #276]	@ (8011644 <__multiply+0x150>)
 8011530:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011534:	f000 fb12 	bl	8011b5c <__assert_func>
 8011538:	f100 0514 	add.w	r5, r0, #20
 801153c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011540:	462b      	mov	r3, r5
 8011542:	2200      	movs	r2, #0
 8011544:	4543      	cmp	r3, r8
 8011546:	d321      	bcc.n	801158c <__multiply+0x98>
 8011548:	f107 0114 	add.w	r1, r7, #20
 801154c:	f104 0214 	add.w	r2, r4, #20
 8011550:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011554:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011558:	9302      	str	r3, [sp, #8]
 801155a:	1b13      	subs	r3, r2, r4
 801155c:	3b15      	subs	r3, #21
 801155e:	f023 0303 	bic.w	r3, r3, #3
 8011562:	3304      	adds	r3, #4
 8011564:	f104 0715 	add.w	r7, r4, #21
 8011568:	42ba      	cmp	r2, r7
 801156a:	bf38      	it	cc
 801156c:	2304      	movcc	r3, #4
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	9b02      	ldr	r3, [sp, #8]
 8011572:	9103      	str	r1, [sp, #12]
 8011574:	428b      	cmp	r3, r1
 8011576:	d80c      	bhi.n	8011592 <__multiply+0x9e>
 8011578:	2e00      	cmp	r6, #0
 801157a:	dd03      	ble.n	8011584 <__multiply+0x90>
 801157c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011580:	2b00      	cmp	r3, #0
 8011582:	d05b      	beq.n	801163c <__multiply+0x148>
 8011584:	6106      	str	r6, [r0, #16]
 8011586:	b005      	add	sp, #20
 8011588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158c:	f843 2b04 	str.w	r2, [r3], #4
 8011590:	e7d8      	b.n	8011544 <__multiply+0x50>
 8011592:	f8b1 a000 	ldrh.w	sl, [r1]
 8011596:	f1ba 0f00 	cmp.w	sl, #0
 801159a:	d024      	beq.n	80115e6 <__multiply+0xf2>
 801159c:	f104 0e14 	add.w	lr, r4, #20
 80115a0:	46a9      	mov	r9, r5
 80115a2:	f04f 0c00 	mov.w	ip, #0
 80115a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115aa:	f8d9 3000 	ldr.w	r3, [r9]
 80115ae:	fa1f fb87 	uxth.w	fp, r7
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80115b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80115bc:	f8d9 7000 	ldr.w	r7, [r9]
 80115c0:	4463      	add	r3, ip
 80115c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80115c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80115ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80115d4:	4572      	cmp	r2, lr
 80115d6:	f849 3b04 	str.w	r3, [r9], #4
 80115da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80115de:	d8e2      	bhi.n	80115a6 <__multiply+0xb2>
 80115e0:	9b01      	ldr	r3, [sp, #4]
 80115e2:	f845 c003 	str.w	ip, [r5, r3]
 80115e6:	9b03      	ldr	r3, [sp, #12]
 80115e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80115ec:	3104      	adds	r1, #4
 80115ee:	f1b9 0f00 	cmp.w	r9, #0
 80115f2:	d021      	beq.n	8011638 <__multiply+0x144>
 80115f4:	682b      	ldr	r3, [r5, #0]
 80115f6:	f104 0c14 	add.w	ip, r4, #20
 80115fa:	46ae      	mov	lr, r5
 80115fc:	f04f 0a00 	mov.w	sl, #0
 8011600:	f8bc b000 	ldrh.w	fp, [ip]
 8011604:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011608:	fb09 770b 	mla	r7, r9, fp, r7
 801160c:	4457      	add	r7, sl
 801160e:	b29b      	uxth	r3, r3
 8011610:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011614:	f84e 3b04 	str.w	r3, [lr], #4
 8011618:	f85c 3b04 	ldr.w	r3, [ip], #4
 801161c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011620:	f8be 3000 	ldrh.w	r3, [lr]
 8011624:	fb09 330a 	mla	r3, r9, sl, r3
 8011628:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801162c:	4562      	cmp	r2, ip
 801162e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011632:	d8e5      	bhi.n	8011600 <__multiply+0x10c>
 8011634:	9f01      	ldr	r7, [sp, #4]
 8011636:	51eb      	str	r3, [r5, r7]
 8011638:	3504      	adds	r5, #4
 801163a:	e799      	b.n	8011570 <__multiply+0x7c>
 801163c:	3e01      	subs	r6, #1
 801163e:	e79b      	b.n	8011578 <__multiply+0x84>
 8011640:	08025e70 	.word	0x08025e70
 8011644:	08025e81 	.word	0x08025e81

08011648 <__pow5mult>:
 8011648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801164c:	4615      	mov	r5, r2
 801164e:	f012 0203 	ands.w	r2, r2, #3
 8011652:	4607      	mov	r7, r0
 8011654:	460e      	mov	r6, r1
 8011656:	d007      	beq.n	8011668 <__pow5mult+0x20>
 8011658:	4c25      	ldr	r4, [pc, #148]	@ (80116f0 <__pow5mult+0xa8>)
 801165a:	3a01      	subs	r2, #1
 801165c:	2300      	movs	r3, #0
 801165e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011662:	f7ff fe9f 	bl	80113a4 <__multadd>
 8011666:	4606      	mov	r6, r0
 8011668:	10ad      	asrs	r5, r5, #2
 801166a:	d03d      	beq.n	80116e8 <__pow5mult+0xa0>
 801166c:	69fc      	ldr	r4, [r7, #28]
 801166e:	b97c      	cbnz	r4, 8011690 <__pow5mult+0x48>
 8011670:	2010      	movs	r0, #16
 8011672:	f7ff fd7f 	bl	8011174 <malloc>
 8011676:	4602      	mov	r2, r0
 8011678:	61f8      	str	r0, [r7, #28]
 801167a:	b928      	cbnz	r0, 8011688 <__pow5mult+0x40>
 801167c:	4b1d      	ldr	r3, [pc, #116]	@ (80116f4 <__pow5mult+0xac>)
 801167e:	481e      	ldr	r0, [pc, #120]	@ (80116f8 <__pow5mult+0xb0>)
 8011680:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011684:	f000 fa6a 	bl	8011b5c <__assert_func>
 8011688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801168c:	6004      	str	r4, [r0, #0]
 801168e:	60c4      	str	r4, [r0, #12]
 8011690:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011698:	b94c      	cbnz	r4, 80116ae <__pow5mult+0x66>
 801169a:	f240 2171 	movw	r1, #625	@ 0x271
 801169e:	4638      	mov	r0, r7
 80116a0:	f7ff ff12 	bl	80114c8 <__i2b>
 80116a4:	2300      	movs	r3, #0
 80116a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80116aa:	4604      	mov	r4, r0
 80116ac:	6003      	str	r3, [r0, #0]
 80116ae:	f04f 0900 	mov.w	r9, #0
 80116b2:	07eb      	lsls	r3, r5, #31
 80116b4:	d50a      	bpl.n	80116cc <__pow5mult+0x84>
 80116b6:	4631      	mov	r1, r6
 80116b8:	4622      	mov	r2, r4
 80116ba:	4638      	mov	r0, r7
 80116bc:	f7ff ff1a 	bl	80114f4 <__multiply>
 80116c0:	4631      	mov	r1, r6
 80116c2:	4680      	mov	r8, r0
 80116c4:	4638      	mov	r0, r7
 80116c6:	f7ff fe4b 	bl	8011360 <_Bfree>
 80116ca:	4646      	mov	r6, r8
 80116cc:	106d      	asrs	r5, r5, #1
 80116ce:	d00b      	beq.n	80116e8 <__pow5mult+0xa0>
 80116d0:	6820      	ldr	r0, [r4, #0]
 80116d2:	b938      	cbnz	r0, 80116e4 <__pow5mult+0x9c>
 80116d4:	4622      	mov	r2, r4
 80116d6:	4621      	mov	r1, r4
 80116d8:	4638      	mov	r0, r7
 80116da:	f7ff ff0b 	bl	80114f4 <__multiply>
 80116de:	6020      	str	r0, [r4, #0]
 80116e0:	f8c0 9000 	str.w	r9, [r0]
 80116e4:	4604      	mov	r4, r0
 80116e6:	e7e4      	b.n	80116b2 <__pow5mult+0x6a>
 80116e8:	4630      	mov	r0, r6
 80116ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ee:	bf00      	nop
 80116f0:	08025edc 	.word	0x08025edc
 80116f4:	08025e01 	.word	0x08025e01
 80116f8:	08025e81 	.word	0x08025e81

080116fc <__lshift>:
 80116fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011700:	460c      	mov	r4, r1
 8011702:	6849      	ldr	r1, [r1, #4]
 8011704:	6923      	ldr	r3, [r4, #16]
 8011706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801170a:	68a3      	ldr	r3, [r4, #8]
 801170c:	4607      	mov	r7, r0
 801170e:	4691      	mov	r9, r2
 8011710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011714:	f108 0601 	add.w	r6, r8, #1
 8011718:	42b3      	cmp	r3, r6
 801171a:	db0b      	blt.n	8011734 <__lshift+0x38>
 801171c:	4638      	mov	r0, r7
 801171e:	f7ff fddf 	bl	80112e0 <_Balloc>
 8011722:	4605      	mov	r5, r0
 8011724:	b948      	cbnz	r0, 801173a <__lshift+0x3e>
 8011726:	4602      	mov	r2, r0
 8011728:	4b28      	ldr	r3, [pc, #160]	@ (80117cc <__lshift+0xd0>)
 801172a:	4829      	ldr	r0, [pc, #164]	@ (80117d0 <__lshift+0xd4>)
 801172c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011730:	f000 fa14 	bl	8011b5c <__assert_func>
 8011734:	3101      	adds	r1, #1
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	e7ee      	b.n	8011718 <__lshift+0x1c>
 801173a:	2300      	movs	r3, #0
 801173c:	f100 0114 	add.w	r1, r0, #20
 8011740:	f100 0210 	add.w	r2, r0, #16
 8011744:	4618      	mov	r0, r3
 8011746:	4553      	cmp	r3, sl
 8011748:	db33      	blt.n	80117b2 <__lshift+0xb6>
 801174a:	6920      	ldr	r0, [r4, #16]
 801174c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011750:	f104 0314 	add.w	r3, r4, #20
 8011754:	f019 091f 	ands.w	r9, r9, #31
 8011758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801175c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011760:	d02b      	beq.n	80117ba <__lshift+0xbe>
 8011762:	f1c9 0e20 	rsb	lr, r9, #32
 8011766:	468a      	mov	sl, r1
 8011768:	2200      	movs	r2, #0
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	fa00 f009 	lsl.w	r0, r0, r9
 8011770:	4310      	orrs	r0, r2
 8011772:	f84a 0b04 	str.w	r0, [sl], #4
 8011776:	f853 2b04 	ldr.w	r2, [r3], #4
 801177a:	459c      	cmp	ip, r3
 801177c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011780:	d8f3      	bhi.n	801176a <__lshift+0x6e>
 8011782:	ebac 0304 	sub.w	r3, ip, r4
 8011786:	3b15      	subs	r3, #21
 8011788:	f023 0303 	bic.w	r3, r3, #3
 801178c:	3304      	adds	r3, #4
 801178e:	f104 0015 	add.w	r0, r4, #21
 8011792:	4584      	cmp	ip, r0
 8011794:	bf38      	it	cc
 8011796:	2304      	movcc	r3, #4
 8011798:	50ca      	str	r2, [r1, r3]
 801179a:	b10a      	cbz	r2, 80117a0 <__lshift+0xa4>
 801179c:	f108 0602 	add.w	r6, r8, #2
 80117a0:	3e01      	subs	r6, #1
 80117a2:	4638      	mov	r0, r7
 80117a4:	612e      	str	r6, [r5, #16]
 80117a6:	4621      	mov	r1, r4
 80117a8:	f7ff fdda 	bl	8011360 <_Bfree>
 80117ac:	4628      	mov	r0, r5
 80117ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80117b6:	3301      	adds	r3, #1
 80117b8:	e7c5      	b.n	8011746 <__lshift+0x4a>
 80117ba:	3904      	subs	r1, #4
 80117bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80117c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80117c4:	459c      	cmp	ip, r3
 80117c6:	d8f9      	bhi.n	80117bc <__lshift+0xc0>
 80117c8:	e7ea      	b.n	80117a0 <__lshift+0xa4>
 80117ca:	bf00      	nop
 80117cc:	08025e70 	.word	0x08025e70
 80117d0:	08025e81 	.word	0x08025e81

080117d4 <__mcmp>:
 80117d4:	690a      	ldr	r2, [r1, #16]
 80117d6:	4603      	mov	r3, r0
 80117d8:	6900      	ldr	r0, [r0, #16]
 80117da:	1a80      	subs	r0, r0, r2
 80117dc:	b530      	push	{r4, r5, lr}
 80117de:	d10e      	bne.n	80117fe <__mcmp+0x2a>
 80117e0:	3314      	adds	r3, #20
 80117e2:	3114      	adds	r1, #20
 80117e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80117e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80117ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80117f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80117f4:	4295      	cmp	r5, r2
 80117f6:	d003      	beq.n	8011800 <__mcmp+0x2c>
 80117f8:	d205      	bcs.n	8011806 <__mcmp+0x32>
 80117fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117fe:	bd30      	pop	{r4, r5, pc}
 8011800:	42a3      	cmp	r3, r4
 8011802:	d3f3      	bcc.n	80117ec <__mcmp+0x18>
 8011804:	e7fb      	b.n	80117fe <__mcmp+0x2a>
 8011806:	2001      	movs	r0, #1
 8011808:	e7f9      	b.n	80117fe <__mcmp+0x2a>
	...

0801180c <__mdiff>:
 801180c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	4689      	mov	r9, r1
 8011812:	4606      	mov	r6, r0
 8011814:	4611      	mov	r1, r2
 8011816:	4648      	mov	r0, r9
 8011818:	4614      	mov	r4, r2
 801181a:	f7ff ffdb 	bl	80117d4 <__mcmp>
 801181e:	1e05      	subs	r5, r0, #0
 8011820:	d112      	bne.n	8011848 <__mdiff+0x3c>
 8011822:	4629      	mov	r1, r5
 8011824:	4630      	mov	r0, r6
 8011826:	f7ff fd5b 	bl	80112e0 <_Balloc>
 801182a:	4602      	mov	r2, r0
 801182c:	b928      	cbnz	r0, 801183a <__mdiff+0x2e>
 801182e:	4b3f      	ldr	r3, [pc, #252]	@ (801192c <__mdiff+0x120>)
 8011830:	f240 2137 	movw	r1, #567	@ 0x237
 8011834:	483e      	ldr	r0, [pc, #248]	@ (8011930 <__mdiff+0x124>)
 8011836:	f000 f991 	bl	8011b5c <__assert_func>
 801183a:	2301      	movs	r3, #1
 801183c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011840:	4610      	mov	r0, r2
 8011842:	b003      	add	sp, #12
 8011844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011848:	bfbc      	itt	lt
 801184a:	464b      	movlt	r3, r9
 801184c:	46a1      	movlt	r9, r4
 801184e:	4630      	mov	r0, r6
 8011850:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011854:	bfba      	itte	lt
 8011856:	461c      	movlt	r4, r3
 8011858:	2501      	movlt	r5, #1
 801185a:	2500      	movge	r5, #0
 801185c:	f7ff fd40 	bl	80112e0 <_Balloc>
 8011860:	4602      	mov	r2, r0
 8011862:	b918      	cbnz	r0, 801186c <__mdiff+0x60>
 8011864:	4b31      	ldr	r3, [pc, #196]	@ (801192c <__mdiff+0x120>)
 8011866:	f240 2145 	movw	r1, #581	@ 0x245
 801186a:	e7e3      	b.n	8011834 <__mdiff+0x28>
 801186c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011870:	6926      	ldr	r6, [r4, #16]
 8011872:	60c5      	str	r5, [r0, #12]
 8011874:	f109 0310 	add.w	r3, r9, #16
 8011878:	f109 0514 	add.w	r5, r9, #20
 801187c:	f104 0e14 	add.w	lr, r4, #20
 8011880:	f100 0b14 	add.w	fp, r0, #20
 8011884:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011888:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801188c:	9301      	str	r3, [sp, #4]
 801188e:	46d9      	mov	r9, fp
 8011890:	f04f 0c00 	mov.w	ip, #0
 8011894:	9b01      	ldr	r3, [sp, #4]
 8011896:	f85e 0b04 	ldr.w	r0, [lr], #4
 801189a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801189e:	9301      	str	r3, [sp, #4]
 80118a0:	fa1f f38a 	uxth.w	r3, sl
 80118a4:	4619      	mov	r1, r3
 80118a6:	b283      	uxth	r3, r0
 80118a8:	1acb      	subs	r3, r1, r3
 80118aa:	0c00      	lsrs	r0, r0, #16
 80118ac:	4463      	add	r3, ip
 80118ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80118b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80118bc:	4576      	cmp	r6, lr
 80118be:	f849 3b04 	str.w	r3, [r9], #4
 80118c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118c6:	d8e5      	bhi.n	8011894 <__mdiff+0x88>
 80118c8:	1b33      	subs	r3, r6, r4
 80118ca:	3b15      	subs	r3, #21
 80118cc:	f023 0303 	bic.w	r3, r3, #3
 80118d0:	3415      	adds	r4, #21
 80118d2:	3304      	adds	r3, #4
 80118d4:	42a6      	cmp	r6, r4
 80118d6:	bf38      	it	cc
 80118d8:	2304      	movcc	r3, #4
 80118da:	441d      	add	r5, r3
 80118dc:	445b      	add	r3, fp
 80118de:	461e      	mov	r6, r3
 80118e0:	462c      	mov	r4, r5
 80118e2:	4544      	cmp	r4, r8
 80118e4:	d30e      	bcc.n	8011904 <__mdiff+0xf8>
 80118e6:	f108 0103 	add.w	r1, r8, #3
 80118ea:	1b49      	subs	r1, r1, r5
 80118ec:	f021 0103 	bic.w	r1, r1, #3
 80118f0:	3d03      	subs	r5, #3
 80118f2:	45a8      	cmp	r8, r5
 80118f4:	bf38      	it	cc
 80118f6:	2100      	movcc	r1, #0
 80118f8:	440b      	add	r3, r1
 80118fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118fe:	b191      	cbz	r1, 8011926 <__mdiff+0x11a>
 8011900:	6117      	str	r7, [r2, #16]
 8011902:	e79d      	b.n	8011840 <__mdiff+0x34>
 8011904:	f854 1b04 	ldr.w	r1, [r4], #4
 8011908:	46e6      	mov	lr, ip
 801190a:	0c08      	lsrs	r0, r1, #16
 801190c:	fa1c fc81 	uxtah	ip, ip, r1
 8011910:	4471      	add	r1, lr
 8011912:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011916:	b289      	uxth	r1, r1
 8011918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801191c:	f846 1b04 	str.w	r1, [r6], #4
 8011920:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011924:	e7dd      	b.n	80118e2 <__mdiff+0xd6>
 8011926:	3f01      	subs	r7, #1
 8011928:	e7e7      	b.n	80118fa <__mdiff+0xee>
 801192a:	bf00      	nop
 801192c:	08025e70 	.word	0x08025e70
 8011930:	08025e81 	.word	0x08025e81

08011934 <__d2b>:
 8011934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011938:	460f      	mov	r7, r1
 801193a:	2101      	movs	r1, #1
 801193c:	ec59 8b10 	vmov	r8, r9, d0
 8011940:	4616      	mov	r6, r2
 8011942:	f7ff fccd 	bl	80112e0 <_Balloc>
 8011946:	4604      	mov	r4, r0
 8011948:	b930      	cbnz	r0, 8011958 <__d2b+0x24>
 801194a:	4602      	mov	r2, r0
 801194c:	4b23      	ldr	r3, [pc, #140]	@ (80119dc <__d2b+0xa8>)
 801194e:	4824      	ldr	r0, [pc, #144]	@ (80119e0 <__d2b+0xac>)
 8011950:	f240 310f 	movw	r1, #783	@ 0x30f
 8011954:	f000 f902 	bl	8011b5c <__assert_func>
 8011958:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801195c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011960:	b10d      	cbz	r5, 8011966 <__d2b+0x32>
 8011962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011966:	9301      	str	r3, [sp, #4]
 8011968:	f1b8 0300 	subs.w	r3, r8, #0
 801196c:	d023      	beq.n	80119b6 <__d2b+0x82>
 801196e:	4668      	mov	r0, sp
 8011970:	9300      	str	r3, [sp, #0]
 8011972:	f7ff fd7c 	bl	801146e <__lo0bits>
 8011976:	e9dd 1200 	ldrd	r1, r2, [sp]
 801197a:	b1d0      	cbz	r0, 80119b2 <__d2b+0x7e>
 801197c:	f1c0 0320 	rsb	r3, r0, #32
 8011980:	fa02 f303 	lsl.w	r3, r2, r3
 8011984:	430b      	orrs	r3, r1
 8011986:	40c2      	lsrs	r2, r0
 8011988:	6163      	str	r3, [r4, #20]
 801198a:	9201      	str	r2, [sp, #4]
 801198c:	9b01      	ldr	r3, [sp, #4]
 801198e:	61a3      	str	r3, [r4, #24]
 8011990:	2b00      	cmp	r3, #0
 8011992:	bf0c      	ite	eq
 8011994:	2201      	moveq	r2, #1
 8011996:	2202      	movne	r2, #2
 8011998:	6122      	str	r2, [r4, #16]
 801199a:	b1a5      	cbz	r5, 80119c6 <__d2b+0x92>
 801199c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80119a0:	4405      	add	r5, r0
 80119a2:	603d      	str	r5, [r7, #0]
 80119a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80119a8:	6030      	str	r0, [r6, #0]
 80119aa:	4620      	mov	r0, r4
 80119ac:	b003      	add	sp, #12
 80119ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119b2:	6161      	str	r1, [r4, #20]
 80119b4:	e7ea      	b.n	801198c <__d2b+0x58>
 80119b6:	a801      	add	r0, sp, #4
 80119b8:	f7ff fd59 	bl	801146e <__lo0bits>
 80119bc:	9b01      	ldr	r3, [sp, #4]
 80119be:	6163      	str	r3, [r4, #20]
 80119c0:	3020      	adds	r0, #32
 80119c2:	2201      	movs	r2, #1
 80119c4:	e7e8      	b.n	8011998 <__d2b+0x64>
 80119c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80119ce:	6038      	str	r0, [r7, #0]
 80119d0:	6918      	ldr	r0, [r3, #16]
 80119d2:	f7ff fd2d 	bl	8011430 <__hi0bits>
 80119d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119da:	e7e5      	b.n	80119a8 <__d2b+0x74>
 80119dc:	08025e70 	.word	0x08025e70
 80119e0:	08025e81 	.word	0x08025e81

080119e4 <__sflush_r>:
 80119e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ec:	0716      	lsls	r6, r2, #28
 80119ee:	4605      	mov	r5, r0
 80119f0:	460c      	mov	r4, r1
 80119f2:	d454      	bmi.n	8011a9e <__sflush_r+0xba>
 80119f4:	684b      	ldr	r3, [r1, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	dc02      	bgt.n	8011a00 <__sflush_r+0x1c>
 80119fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	dd48      	ble.n	8011a92 <__sflush_r+0xae>
 8011a00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a02:	2e00      	cmp	r6, #0
 8011a04:	d045      	beq.n	8011a92 <__sflush_r+0xae>
 8011a06:	2300      	movs	r3, #0
 8011a08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a0c:	682f      	ldr	r7, [r5, #0]
 8011a0e:	6a21      	ldr	r1, [r4, #32]
 8011a10:	602b      	str	r3, [r5, #0]
 8011a12:	d030      	beq.n	8011a76 <__sflush_r+0x92>
 8011a14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	0759      	lsls	r1, r3, #29
 8011a1a:	d505      	bpl.n	8011a28 <__sflush_r+0x44>
 8011a1c:	6863      	ldr	r3, [r4, #4]
 8011a1e:	1ad2      	subs	r2, r2, r3
 8011a20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a22:	b10b      	cbz	r3, 8011a28 <__sflush_r+0x44>
 8011a24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a26:	1ad2      	subs	r2, r2, r3
 8011a28:	2300      	movs	r3, #0
 8011a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a2c:	6a21      	ldr	r1, [r4, #32]
 8011a2e:	4628      	mov	r0, r5
 8011a30:	47b0      	blx	r6
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	89a3      	ldrh	r3, [r4, #12]
 8011a36:	d106      	bne.n	8011a46 <__sflush_r+0x62>
 8011a38:	6829      	ldr	r1, [r5, #0]
 8011a3a:	291d      	cmp	r1, #29
 8011a3c:	d82b      	bhi.n	8011a96 <__sflush_r+0xb2>
 8011a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8011ae8 <__sflush_r+0x104>)
 8011a40:	410a      	asrs	r2, r1
 8011a42:	07d6      	lsls	r6, r2, #31
 8011a44:	d427      	bmi.n	8011a96 <__sflush_r+0xb2>
 8011a46:	2200      	movs	r2, #0
 8011a48:	6062      	str	r2, [r4, #4]
 8011a4a:	04d9      	lsls	r1, r3, #19
 8011a4c:	6922      	ldr	r2, [r4, #16]
 8011a4e:	6022      	str	r2, [r4, #0]
 8011a50:	d504      	bpl.n	8011a5c <__sflush_r+0x78>
 8011a52:	1c42      	adds	r2, r0, #1
 8011a54:	d101      	bne.n	8011a5a <__sflush_r+0x76>
 8011a56:	682b      	ldr	r3, [r5, #0]
 8011a58:	b903      	cbnz	r3, 8011a5c <__sflush_r+0x78>
 8011a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a5e:	602f      	str	r7, [r5, #0]
 8011a60:	b1b9      	cbz	r1, 8011a92 <__sflush_r+0xae>
 8011a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a66:	4299      	cmp	r1, r3
 8011a68:	d002      	beq.n	8011a70 <__sflush_r+0x8c>
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f7ff fb38 	bl	80110e0 <_free_r>
 8011a70:	2300      	movs	r3, #0
 8011a72:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a74:	e00d      	b.n	8011a92 <__sflush_r+0xae>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4628      	mov	r0, r5
 8011a7a:	47b0      	blx	r6
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	1c50      	adds	r0, r2, #1
 8011a80:	d1c9      	bne.n	8011a16 <__sflush_r+0x32>
 8011a82:	682b      	ldr	r3, [r5, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d0c6      	beq.n	8011a16 <__sflush_r+0x32>
 8011a88:	2b1d      	cmp	r3, #29
 8011a8a:	d001      	beq.n	8011a90 <__sflush_r+0xac>
 8011a8c:	2b16      	cmp	r3, #22
 8011a8e:	d11e      	bne.n	8011ace <__sflush_r+0xea>
 8011a90:	602f      	str	r7, [r5, #0]
 8011a92:	2000      	movs	r0, #0
 8011a94:	e022      	b.n	8011adc <__sflush_r+0xf8>
 8011a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a9a:	b21b      	sxth	r3, r3
 8011a9c:	e01b      	b.n	8011ad6 <__sflush_r+0xf2>
 8011a9e:	690f      	ldr	r7, [r1, #16]
 8011aa0:	2f00      	cmp	r7, #0
 8011aa2:	d0f6      	beq.n	8011a92 <__sflush_r+0xae>
 8011aa4:	0793      	lsls	r3, r2, #30
 8011aa6:	680e      	ldr	r6, [r1, #0]
 8011aa8:	bf08      	it	eq
 8011aaa:	694b      	ldreq	r3, [r1, #20]
 8011aac:	600f      	str	r7, [r1, #0]
 8011aae:	bf18      	it	ne
 8011ab0:	2300      	movne	r3, #0
 8011ab2:	eba6 0807 	sub.w	r8, r6, r7
 8011ab6:	608b      	str	r3, [r1, #8]
 8011ab8:	f1b8 0f00 	cmp.w	r8, #0
 8011abc:	dde9      	ble.n	8011a92 <__sflush_r+0xae>
 8011abe:	6a21      	ldr	r1, [r4, #32]
 8011ac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011ac2:	4643      	mov	r3, r8
 8011ac4:	463a      	mov	r2, r7
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	47b0      	blx	r6
 8011aca:	2800      	cmp	r0, #0
 8011acc:	dc08      	bgt.n	8011ae0 <__sflush_r+0xfc>
 8011ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ad6:	81a3      	strh	r3, [r4, #12]
 8011ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae0:	4407      	add	r7, r0
 8011ae2:	eba8 0800 	sub.w	r8, r8, r0
 8011ae6:	e7e7      	b.n	8011ab8 <__sflush_r+0xd4>
 8011ae8:	dfbffffe 	.word	0xdfbffffe

08011aec <_fflush_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	690b      	ldr	r3, [r1, #16]
 8011af0:	4605      	mov	r5, r0
 8011af2:	460c      	mov	r4, r1
 8011af4:	b913      	cbnz	r3, 8011afc <_fflush_r+0x10>
 8011af6:	2500      	movs	r5, #0
 8011af8:	4628      	mov	r0, r5
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	b118      	cbz	r0, 8011b06 <_fflush_r+0x1a>
 8011afe:	6a03      	ldr	r3, [r0, #32]
 8011b00:	b90b      	cbnz	r3, 8011b06 <_fflush_r+0x1a>
 8011b02:	f7fe fb97 	bl	8010234 <__sinit>
 8011b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d0f3      	beq.n	8011af6 <_fflush_r+0xa>
 8011b0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b10:	07d0      	lsls	r0, r2, #31
 8011b12:	d404      	bmi.n	8011b1e <_fflush_r+0x32>
 8011b14:	0599      	lsls	r1, r3, #22
 8011b16:	d402      	bmi.n	8011b1e <_fflush_r+0x32>
 8011b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b1a:	f7fe fc82 	bl	8010422 <__retarget_lock_acquire_recursive>
 8011b1e:	4628      	mov	r0, r5
 8011b20:	4621      	mov	r1, r4
 8011b22:	f7ff ff5f 	bl	80119e4 <__sflush_r>
 8011b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b28:	07da      	lsls	r2, r3, #31
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	d4e4      	bmi.n	8011af8 <_fflush_r+0xc>
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	059b      	lsls	r3, r3, #22
 8011b32:	d4e1      	bmi.n	8011af8 <_fflush_r+0xc>
 8011b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b36:	f7fe fc75 	bl	8010424 <__retarget_lock_release_recursive>
 8011b3a:	e7dd      	b.n	8011af8 <_fflush_r+0xc>

08011b3c <_sbrk_r>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	4d06      	ldr	r5, [pc, #24]	@ (8011b58 <_sbrk_r+0x1c>)
 8011b40:	2300      	movs	r3, #0
 8011b42:	4604      	mov	r4, r0
 8011b44:	4608      	mov	r0, r1
 8011b46:	602b      	str	r3, [r5, #0]
 8011b48:	f7f2 fc5c 	bl	8004404 <_sbrk>
 8011b4c:	1c43      	adds	r3, r0, #1
 8011b4e:	d102      	bne.n	8011b56 <_sbrk_r+0x1a>
 8011b50:	682b      	ldr	r3, [r5, #0]
 8011b52:	b103      	cbz	r3, 8011b56 <_sbrk_r+0x1a>
 8011b54:	6023      	str	r3, [r4, #0]
 8011b56:	bd38      	pop	{r3, r4, r5, pc}
 8011b58:	200093e0 	.word	0x200093e0

08011b5c <__assert_func>:
 8011b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b5e:	4614      	mov	r4, r2
 8011b60:	461a      	mov	r2, r3
 8011b62:	4b09      	ldr	r3, [pc, #36]	@ (8011b88 <__assert_func+0x2c>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4605      	mov	r5, r0
 8011b68:	68d8      	ldr	r0, [r3, #12]
 8011b6a:	b954      	cbnz	r4, 8011b82 <__assert_func+0x26>
 8011b6c:	4b07      	ldr	r3, [pc, #28]	@ (8011b8c <__assert_func+0x30>)
 8011b6e:	461c      	mov	r4, r3
 8011b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b74:	9100      	str	r1, [sp, #0]
 8011b76:	462b      	mov	r3, r5
 8011b78:	4905      	ldr	r1, [pc, #20]	@ (8011b90 <__assert_func+0x34>)
 8011b7a:	f000 f841 	bl	8011c00 <fiprintf>
 8011b7e:	f000 f851 	bl	8011c24 <abort>
 8011b82:	4b04      	ldr	r3, [pc, #16]	@ (8011b94 <__assert_func+0x38>)
 8011b84:	e7f4      	b.n	8011b70 <__assert_func+0x14>
 8011b86:	bf00      	nop
 8011b88:	20000020 	.word	0x20000020
 8011b8c:	0802601d 	.word	0x0802601d
 8011b90:	08025fef 	.word	0x08025fef
 8011b94:	08025fe2 	.word	0x08025fe2

08011b98 <_calloc_r>:
 8011b98:	b570      	push	{r4, r5, r6, lr}
 8011b9a:	fba1 5402 	umull	r5, r4, r1, r2
 8011b9e:	b93c      	cbnz	r4, 8011bb0 <_calloc_r+0x18>
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	f7ff fb11 	bl	80111c8 <_malloc_r>
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	b928      	cbnz	r0, 8011bb6 <_calloc_r+0x1e>
 8011baa:	2600      	movs	r6, #0
 8011bac:	4630      	mov	r0, r6
 8011bae:	bd70      	pop	{r4, r5, r6, pc}
 8011bb0:	220c      	movs	r2, #12
 8011bb2:	6002      	str	r2, [r0, #0]
 8011bb4:	e7f9      	b.n	8011baa <_calloc_r+0x12>
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4621      	mov	r1, r4
 8011bba:	f7fe fbb4 	bl	8010326 <memset>
 8011bbe:	e7f5      	b.n	8011bac <_calloc_r+0x14>

08011bc0 <__ascii_mbtowc>:
 8011bc0:	b082      	sub	sp, #8
 8011bc2:	b901      	cbnz	r1, 8011bc6 <__ascii_mbtowc+0x6>
 8011bc4:	a901      	add	r1, sp, #4
 8011bc6:	b142      	cbz	r2, 8011bda <__ascii_mbtowc+0x1a>
 8011bc8:	b14b      	cbz	r3, 8011bde <__ascii_mbtowc+0x1e>
 8011bca:	7813      	ldrb	r3, [r2, #0]
 8011bcc:	600b      	str	r3, [r1, #0]
 8011bce:	7812      	ldrb	r2, [r2, #0]
 8011bd0:	1e10      	subs	r0, r2, #0
 8011bd2:	bf18      	it	ne
 8011bd4:	2001      	movne	r0, #1
 8011bd6:	b002      	add	sp, #8
 8011bd8:	4770      	bx	lr
 8011bda:	4610      	mov	r0, r2
 8011bdc:	e7fb      	b.n	8011bd6 <__ascii_mbtowc+0x16>
 8011bde:	f06f 0001 	mvn.w	r0, #1
 8011be2:	e7f8      	b.n	8011bd6 <__ascii_mbtowc+0x16>

08011be4 <__ascii_wctomb>:
 8011be4:	4603      	mov	r3, r0
 8011be6:	4608      	mov	r0, r1
 8011be8:	b141      	cbz	r1, 8011bfc <__ascii_wctomb+0x18>
 8011bea:	2aff      	cmp	r2, #255	@ 0xff
 8011bec:	d904      	bls.n	8011bf8 <__ascii_wctomb+0x14>
 8011bee:	228a      	movs	r2, #138	@ 0x8a
 8011bf0:	601a      	str	r2, [r3, #0]
 8011bf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bf6:	4770      	bx	lr
 8011bf8:	700a      	strb	r2, [r1, #0]
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	4770      	bx	lr
	...

08011c00 <fiprintf>:
 8011c00:	b40e      	push	{r1, r2, r3}
 8011c02:	b503      	push	{r0, r1, lr}
 8011c04:	4601      	mov	r1, r0
 8011c06:	ab03      	add	r3, sp, #12
 8011c08:	4805      	ldr	r0, [pc, #20]	@ (8011c20 <fiprintf+0x20>)
 8011c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0e:	6800      	ldr	r0, [r0, #0]
 8011c10:	9301      	str	r3, [sp, #4]
 8011c12:	f000 f837 	bl	8011c84 <_vfiprintf_r>
 8011c16:	b002      	add	sp, #8
 8011c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c1c:	b003      	add	sp, #12
 8011c1e:	4770      	bx	lr
 8011c20:	20000020 	.word	0x20000020

08011c24 <abort>:
 8011c24:	b508      	push	{r3, lr}
 8011c26:	2006      	movs	r0, #6
 8011c28:	f000 fa00 	bl	801202c <raise>
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	f7f2 fb71 	bl	8004314 <_exit>

08011c32 <__sfputc_r>:
 8011c32:	6893      	ldr	r3, [r2, #8]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	b410      	push	{r4}
 8011c3a:	6093      	str	r3, [r2, #8]
 8011c3c:	da08      	bge.n	8011c50 <__sfputc_r+0x1e>
 8011c3e:	6994      	ldr	r4, [r2, #24]
 8011c40:	42a3      	cmp	r3, r4
 8011c42:	db01      	blt.n	8011c48 <__sfputc_r+0x16>
 8011c44:	290a      	cmp	r1, #10
 8011c46:	d103      	bne.n	8011c50 <__sfputc_r+0x1e>
 8011c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c4c:	f000 b932 	b.w	8011eb4 <__swbuf_r>
 8011c50:	6813      	ldr	r3, [r2, #0]
 8011c52:	1c58      	adds	r0, r3, #1
 8011c54:	6010      	str	r0, [r2, #0]
 8011c56:	7019      	strb	r1, [r3, #0]
 8011c58:	4608      	mov	r0, r1
 8011c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <__sfputs_r>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	4614      	mov	r4, r2
 8011c68:	18d5      	adds	r5, r2, r3
 8011c6a:	42ac      	cmp	r4, r5
 8011c6c:	d101      	bne.n	8011c72 <__sfputs_r+0x12>
 8011c6e:	2000      	movs	r0, #0
 8011c70:	e007      	b.n	8011c82 <__sfputs_r+0x22>
 8011c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c76:	463a      	mov	r2, r7
 8011c78:	4630      	mov	r0, r6
 8011c7a:	f7ff ffda 	bl	8011c32 <__sfputc_r>
 8011c7e:	1c43      	adds	r3, r0, #1
 8011c80:	d1f3      	bne.n	8011c6a <__sfputs_r+0xa>
 8011c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c84 <_vfiprintf_r>:
 8011c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c88:	460d      	mov	r5, r1
 8011c8a:	b09d      	sub	sp, #116	@ 0x74
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	4698      	mov	r8, r3
 8011c90:	4606      	mov	r6, r0
 8011c92:	b118      	cbz	r0, 8011c9c <_vfiprintf_r+0x18>
 8011c94:	6a03      	ldr	r3, [r0, #32]
 8011c96:	b90b      	cbnz	r3, 8011c9c <_vfiprintf_r+0x18>
 8011c98:	f7fe facc 	bl	8010234 <__sinit>
 8011c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c9e:	07d9      	lsls	r1, r3, #31
 8011ca0:	d405      	bmi.n	8011cae <_vfiprintf_r+0x2a>
 8011ca2:	89ab      	ldrh	r3, [r5, #12]
 8011ca4:	059a      	lsls	r2, r3, #22
 8011ca6:	d402      	bmi.n	8011cae <_vfiprintf_r+0x2a>
 8011ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011caa:	f7fe fbba 	bl	8010422 <__retarget_lock_acquire_recursive>
 8011cae:	89ab      	ldrh	r3, [r5, #12]
 8011cb0:	071b      	lsls	r3, r3, #28
 8011cb2:	d501      	bpl.n	8011cb8 <_vfiprintf_r+0x34>
 8011cb4:	692b      	ldr	r3, [r5, #16]
 8011cb6:	b99b      	cbnz	r3, 8011ce0 <_vfiprintf_r+0x5c>
 8011cb8:	4629      	mov	r1, r5
 8011cba:	4630      	mov	r0, r6
 8011cbc:	f000 f938 	bl	8011f30 <__swsetup_r>
 8011cc0:	b170      	cbz	r0, 8011ce0 <_vfiprintf_r+0x5c>
 8011cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cc4:	07dc      	lsls	r4, r3, #31
 8011cc6:	d504      	bpl.n	8011cd2 <_vfiprintf_r+0x4e>
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ccc:	b01d      	add	sp, #116	@ 0x74
 8011cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd2:	89ab      	ldrh	r3, [r5, #12]
 8011cd4:	0598      	lsls	r0, r3, #22
 8011cd6:	d4f7      	bmi.n	8011cc8 <_vfiprintf_r+0x44>
 8011cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cda:	f7fe fba3 	bl	8010424 <__retarget_lock_release_recursive>
 8011cde:	e7f3      	b.n	8011cc8 <_vfiprintf_r+0x44>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ce4:	2320      	movs	r3, #32
 8011ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cee:	2330      	movs	r3, #48	@ 0x30
 8011cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ea0 <_vfiprintf_r+0x21c>
 8011cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cf8:	f04f 0901 	mov.w	r9, #1
 8011cfc:	4623      	mov	r3, r4
 8011cfe:	469a      	mov	sl, r3
 8011d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d04:	b10a      	cbz	r2, 8011d0a <_vfiprintf_r+0x86>
 8011d06:	2a25      	cmp	r2, #37	@ 0x25
 8011d08:	d1f9      	bne.n	8011cfe <_vfiprintf_r+0x7a>
 8011d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d0e:	d00b      	beq.n	8011d28 <_vfiprintf_r+0xa4>
 8011d10:	465b      	mov	r3, fp
 8011d12:	4622      	mov	r2, r4
 8011d14:	4629      	mov	r1, r5
 8011d16:	4630      	mov	r0, r6
 8011d18:	f7ff ffa2 	bl	8011c60 <__sfputs_r>
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	f000 80a7 	beq.w	8011e70 <_vfiprintf_r+0x1ec>
 8011d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d24:	445a      	add	r2, fp
 8011d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d28:	f89a 3000 	ldrb.w	r3, [sl]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f000 809f 	beq.w	8011e70 <_vfiprintf_r+0x1ec>
 8011d32:	2300      	movs	r3, #0
 8011d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d3c:	f10a 0a01 	add.w	sl, sl, #1
 8011d40:	9304      	str	r3, [sp, #16]
 8011d42:	9307      	str	r3, [sp, #28]
 8011d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d4a:	4654      	mov	r4, sl
 8011d4c:	2205      	movs	r2, #5
 8011d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d52:	4853      	ldr	r0, [pc, #332]	@ (8011ea0 <_vfiprintf_r+0x21c>)
 8011d54:	f7ee fa9c 	bl	8000290 <memchr>
 8011d58:	9a04      	ldr	r2, [sp, #16]
 8011d5a:	b9d8      	cbnz	r0, 8011d94 <_vfiprintf_r+0x110>
 8011d5c:	06d1      	lsls	r1, r2, #27
 8011d5e:	bf44      	itt	mi
 8011d60:	2320      	movmi	r3, #32
 8011d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d66:	0713      	lsls	r3, r2, #28
 8011d68:	bf44      	itt	mi
 8011d6a:	232b      	movmi	r3, #43	@ 0x2b
 8011d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d70:	f89a 3000 	ldrb.w	r3, [sl]
 8011d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d76:	d015      	beq.n	8011da4 <_vfiprintf_r+0x120>
 8011d78:	9a07      	ldr	r2, [sp, #28]
 8011d7a:	4654      	mov	r4, sl
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	f04f 0c0a 	mov.w	ip, #10
 8011d82:	4621      	mov	r1, r4
 8011d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d88:	3b30      	subs	r3, #48	@ 0x30
 8011d8a:	2b09      	cmp	r3, #9
 8011d8c:	d94b      	bls.n	8011e26 <_vfiprintf_r+0x1a2>
 8011d8e:	b1b0      	cbz	r0, 8011dbe <_vfiprintf_r+0x13a>
 8011d90:	9207      	str	r2, [sp, #28]
 8011d92:	e014      	b.n	8011dbe <_vfiprintf_r+0x13a>
 8011d94:	eba0 0308 	sub.w	r3, r0, r8
 8011d98:	fa09 f303 	lsl.w	r3, r9, r3
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	9304      	str	r3, [sp, #16]
 8011da0:	46a2      	mov	sl, r4
 8011da2:	e7d2      	b.n	8011d4a <_vfiprintf_r+0xc6>
 8011da4:	9b03      	ldr	r3, [sp, #12]
 8011da6:	1d19      	adds	r1, r3, #4
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	9103      	str	r1, [sp, #12]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	bfbb      	ittet	lt
 8011db0:	425b      	neglt	r3, r3
 8011db2:	f042 0202 	orrlt.w	r2, r2, #2
 8011db6:	9307      	strge	r3, [sp, #28]
 8011db8:	9307      	strlt	r3, [sp, #28]
 8011dba:	bfb8      	it	lt
 8011dbc:	9204      	strlt	r2, [sp, #16]
 8011dbe:	7823      	ldrb	r3, [r4, #0]
 8011dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dc2:	d10a      	bne.n	8011dda <_vfiprintf_r+0x156>
 8011dc4:	7863      	ldrb	r3, [r4, #1]
 8011dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dc8:	d132      	bne.n	8011e30 <_vfiprintf_r+0x1ac>
 8011dca:	9b03      	ldr	r3, [sp, #12]
 8011dcc:	1d1a      	adds	r2, r3, #4
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	9203      	str	r2, [sp, #12]
 8011dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011dd6:	3402      	adds	r4, #2
 8011dd8:	9305      	str	r3, [sp, #20]
 8011dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011eb0 <_vfiprintf_r+0x22c>
 8011dde:	7821      	ldrb	r1, [r4, #0]
 8011de0:	2203      	movs	r2, #3
 8011de2:	4650      	mov	r0, sl
 8011de4:	f7ee fa54 	bl	8000290 <memchr>
 8011de8:	b138      	cbz	r0, 8011dfa <_vfiprintf_r+0x176>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	eba0 000a 	sub.w	r0, r0, sl
 8011df0:	2240      	movs	r2, #64	@ 0x40
 8011df2:	4082      	lsls	r2, r0
 8011df4:	4313      	orrs	r3, r2
 8011df6:	3401      	adds	r4, #1
 8011df8:	9304      	str	r3, [sp, #16]
 8011dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dfe:	4829      	ldr	r0, [pc, #164]	@ (8011ea4 <_vfiprintf_r+0x220>)
 8011e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e04:	2206      	movs	r2, #6
 8011e06:	f7ee fa43 	bl	8000290 <memchr>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d03f      	beq.n	8011e8e <_vfiprintf_r+0x20a>
 8011e0e:	4b26      	ldr	r3, [pc, #152]	@ (8011ea8 <_vfiprintf_r+0x224>)
 8011e10:	bb1b      	cbnz	r3, 8011e5a <_vfiprintf_r+0x1d6>
 8011e12:	9b03      	ldr	r3, [sp, #12]
 8011e14:	3307      	adds	r3, #7
 8011e16:	f023 0307 	bic.w	r3, r3, #7
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	9303      	str	r3, [sp, #12]
 8011e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e20:	443b      	add	r3, r7
 8011e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e24:	e76a      	b.n	8011cfc <_vfiprintf_r+0x78>
 8011e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	2001      	movs	r0, #1
 8011e2e:	e7a8      	b.n	8011d82 <_vfiprintf_r+0xfe>
 8011e30:	2300      	movs	r3, #0
 8011e32:	3401      	adds	r4, #1
 8011e34:	9305      	str	r3, [sp, #20]
 8011e36:	4619      	mov	r1, r3
 8011e38:	f04f 0c0a 	mov.w	ip, #10
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e42:	3a30      	subs	r2, #48	@ 0x30
 8011e44:	2a09      	cmp	r2, #9
 8011e46:	d903      	bls.n	8011e50 <_vfiprintf_r+0x1cc>
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d0c6      	beq.n	8011dda <_vfiprintf_r+0x156>
 8011e4c:	9105      	str	r1, [sp, #20]
 8011e4e:	e7c4      	b.n	8011dda <_vfiprintf_r+0x156>
 8011e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e54:	4604      	mov	r4, r0
 8011e56:	2301      	movs	r3, #1
 8011e58:	e7f0      	b.n	8011e3c <_vfiprintf_r+0x1b8>
 8011e5a:	ab03      	add	r3, sp, #12
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	462a      	mov	r2, r5
 8011e60:	4b12      	ldr	r3, [pc, #72]	@ (8011eac <_vfiprintf_r+0x228>)
 8011e62:	a904      	add	r1, sp, #16
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7fd fda1 	bl	800f9ac <_printf_float>
 8011e6a:	4607      	mov	r7, r0
 8011e6c:	1c78      	adds	r0, r7, #1
 8011e6e:	d1d6      	bne.n	8011e1e <_vfiprintf_r+0x19a>
 8011e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e72:	07d9      	lsls	r1, r3, #31
 8011e74:	d405      	bmi.n	8011e82 <_vfiprintf_r+0x1fe>
 8011e76:	89ab      	ldrh	r3, [r5, #12]
 8011e78:	059a      	lsls	r2, r3, #22
 8011e7a:	d402      	bmi.n	8011e82 <_vfiprintf_r+0x1fe>
 8011e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e7e:	f7fe fad1 	bl	8010424 <__retarget_lock_release_recursive>
 8011e82:	89ab      	ldrh	r3, [r5, #12]
 8011e84:	065b      	lsls	r3, r3, #25
 8011e86:	f53f af1f 	bmi.w	8011cc8 <_vfiprintf_r+0x44>
 8011e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e8c:	e71e      	b.n	8011ccc <_vfiprintf_r+0x48>
 8011e8e:	ab03      	add	r3, sp, #12
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	462a      	mov	r2, r5
 8011e94:	4b05      	ldr	r3, [pc, #20]	@ (8011eac <_vfiprintf_r+0x228>)
 8011e96:	a904      	add	r1, sp, #16
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f7fe f81f 	bl	800fedc <_printf_i>
 8011e9e:	e7e4      	b.n	8011e6a <_vfiprintf_r+0x1e6>
 8011ea0:	0802611f 	.word	0x0802611f
 8011ea4:	08026129 	.word	0x08026129
 8011ea8:	0800f9ad 	.word	0x0800f9ad
 8011eac:	08011c61 	.word	0x08011c61
 8011eb0:	08026125 	.word	0x08026125

08011eb4 <__swbuf_r>:
 8011eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eb6:	460e      	mov	r6, r1
 8011eb8:	4614      	mov	r4, r2
 8011eba:	4605      	mov	r5, r0
 8011ebc:	b118      	cbz	r0, 8011ec6 <__swbuf_r+0x12>
 8011ebe:	6a03      	ldr	r3, [r0, #32]
 8011ec0:	b90b      	cbnz	r3, 8011ec6 <__swbuf_r+0x12>
 8011ec2:	f7fe f9b7 	bl	8010234 <__sinit>
 8011ec6:	69a3      	ldr	r3, [r4, #24]
 8011ec8:	60a3      	str	r3, [r4, #8]
 8011eca:	89a3      	ldrh	r3, [r4, #12]
 8011ecc:	071a      	lsls	r2, r3, #28
 8011ece:	d501      	bpl.n	8011ed4 <__swbuf_r+0x20>
 8011ed0:	6923      	ldr	r3, [r4, #16]
 8011ed2:	b943      	cbnz	r3, 8011ee6 <__swbuf_r+0x32>
 8011ed4:	4621      	mov	r1, r4
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f000 f82a 	bl	8011f30 <__swsetup_r>
 8011edc:	b118      	cbz	r0, 8011ee6 <__swbuf_r+0x32>
 8011ede:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee6:	6823      	ldr	r3, [r4, #0]
 8011ee8:	6922      	ldr	r2, [r4, #16]
 8011eea:	1a98      	subs	r0, r3, r2
 8011eec:	6963      	ldr	r3, [r4, #20]
 8011eee:	b2f6      	uxtb	r6, r6
 8011ef0:	4283      	cmp	r3, r0
 8011ef2:	4637      	mov	r7, r6
 8011ef4:	dc05      	bgt.n	8011f02 <__swbuf_r+0x4e>
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f7ff fdf7 	bl	8011aec <_fflush_r>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d1ed      	bne.n	8011ede <__swbuf_r+0x2a>
 8011f02:	68a3      	ldr	r3, [r4, #8]
 8011f04:	3b01      	subs	r3, #1
 8011f06:	60a3      	str	r3, [r4, #8]
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	1c5a      	adds	r2, r3, #1
 8011f0c:	6022      	str	r2, [r4, #0]
 8011f0e:	701e      	strb	r6, [r3, #0]
 8011f10:	6962      	ldr	r2, [r4, #20]
 8011f12:	1c43      	adds	r3, r0, #1
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d004      	beq.n	8011f22 <__swbuf_r+0x6e>
 8011f18:	89a3      	ldrh	r3, [r4, #12]
 8011f1a:	07db      	lsls	r3, r3, #31
 8011f1c:	d5e1      	bpl.n	8011ee2 <__swbuf_r+0x2e>
 8011f1e:	2e0a      	cmp	r6, #10
 8011f20:	d1df      	bne.n	8011ee2 <__swbuf_r+0x2e>
 8011f22:	4621      	mov	r1, r4
 8011f24:	4628      	mov	r0, r5
 8011f26:	f7ff fde1 	bl	8011aec <_fflush_r>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d0d9      	beq.n	8011ee2 <__swbuf_r+0x2e>
 8011f2e:	e7d6      	b.n	8011ede <__swbuf_r+0x2a>

08011f30 <__swsetup_r>:
 8011f30:	b538      	push	{r3, r4, r5, lr}
 8011f32:	4b29      	ldr	r3, [pc, #164]	@ (8011fd8 <__swsetup_r+0xa8>)
 8011f34:	4605      	mov	r5, r0
 8011f36:	6818      	ldr	r0, [r3, #0]
 8011f38:	460c      	mov	r4, r1
 8011f3a:	b118      	cbz	r0, 8011f44 <__swsetup_r+0x14>
 8011f3c:	6a03      	ldr	r3, [r0, #32]
 8011f3e:	b90b      	cbnz	r3, 8011f44 <__swsetup_r+0x14>
 8011f40:	f7fe f978 	bl	8010234 <__sinit>
 8011f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f48:	0719      	lsls	r1, r3, #28
 8011f4a:	d422      	bmi.n	8011f92 <__swsetup_r+0x62>
 8011f4c:	06da      	lsls	r2, r3, #27
 8011f4e:	d407      	bmi.n	8011f60 <__swsetup_r+0x30>
 8011f50:	2209      	movs	r2, #9
 8011f52:	602a      	str	r2, [r5, #0]
 8011f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f58:	81a3      	strh	r3, [r4, #12]
 8011f5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f5e:	e033      	b.n	8011fc8 <__swsetup_r+0x98>
 8011f60:	0758      	lsls	r0, r3, #29
 8011f62:	d512      	bpl.n	8011f8a <__swsetup_r+0x5a>
 8011f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f66:	b141      	cbz	r1, 8011f7a <__swsetup_r+0x4a>
 8011f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	d002      	beq.n	8011f76 <__swsetup_r+0x46>
 8011f70:	4628      	mov	r0, r5
 8011f72:	f7ff f8b5 	bl	80110e0 <_free_r>
 8011f76:	2300      	movs	r3, #0
 8011f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f7a:	89a3      	ldrh	r3, [r4, #12]
 8011f7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f80:	81a3      	strh	r3, [r4, #12]
 8011f82:	2300      	movs	r3, #0
 8011f84:	6063      	str	r3, [r4, #4]
 8011f86:	6923      	ldr	r3, [r4, #16]
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	89a3      	ldrh	r3, [r4, #12]
 8011f8c:	f043 0308 	orr.w	r3, r3, #8
 8011f90:	81a3      	strh	r3, [r4, #12]
 8011f92:	6923      	ldr	r3, [r4, #16]
 8011f94:	b94b      	cbnz	r3, 8011faa <__swsetup_r+0x7a>
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fa0:	d003      	beq.n	8011faa <__swsetup_r+0x7a>
 8011fa2:	4621      	mov	r1, r4
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f000 f883 	bl	80120b0 <__smakebuf_r>
 8011faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fae:	f013 0201 	ands.w	r2, r3, #1
 8011fb2:	d00a      	beq.n	8011fca <__swsetup_r+0x9a>
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	60a2      	str	r2, [r4, #8]
 8011fb8:	6962      	ldr	r2, [r4, #20]
 8011fba:	4252      	negs	r2, r2
 8011fbc:	61a2      	str	r2, [r4, #24]
 8011fbe:	6922      	ldr	r2, [r4, #16]
 8011fc0:	b942      	cbnz	r2, 8011fd4 <__swsetup_r+0xa4>
 8011fc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011fc6:	d1c5      	bne.n	8011f54 <__swsetup_r+0x24>
 8011fc8:	bd38      	pop	{r3, r4, r5, pc}
 8011fca:	0799      	lsls	r1, r3, #30
 8011fcc:	bf58      	it	pl
 8011fce:	6962      	ldrpl	r2, [r4, #20]
 8011fd0:	60a2      	str	r2, [r4, #8]
 8011fd2:	e7f4      	b.n	8011fbe <__swsetup_r+0x8e>
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	e7f7      	b.n	8011fc8 <__swsetup_r+0x98>
 8011fd8:	20000020 	.word	0x20000020

08011fdc <_raise_r>:
 8011fdc:	291f      	cmp	r1, #31
 8011fde:	b538      	push	{r3, r4, r5, lr}
 8011fe0:	4605      	mov	r5, r0
 8011fe2:	460c      	mov	r4, r1
 8011fe4:	d904      	bls.n	8011ff0 <_raise_r+0x14>
 8011fe6:	2316      	movs	r3, #22
 8011fe8:	6003      	str	r3, [r0, #0]
 8011fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011fee:	bd38      	pop	{r3, r4, r5, pc}
 8011ff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ff2:	b112      	cbz	r2, 8011ffa <_raise_r+0x1e>
 8011ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ff8:	b94b      	cbnz	r3, 801200e <_raise_r+0x32>
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f000 f830 	bl	8012060 <_getpid_r>
 8012000:	4622      	mov	r2, r4
 8012002:	4601      	mov	r1, r0
 8012004:	4628      	mov	r0, r5
 8012006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801200a:	f000 b817 	b.w	801203c <_kill_r>
 801200e:	2b01      	cmp	r3, #1
 8012010:	d00a      	beq.n	8012028 <_raise_r+0x4c>
 8012012:	1c59      	adds	r1, r3, #1
 8012014:	d103      	bne.n	801201e <_raise_r+0x42>
 8012016:	2316      	movs	r3, #22
 8012018:	6003      	str	r3, [r0, #0]
 801201a:	2001      	movs	r0, #1
 801201c:	e7e7      	b.n	8011fee <_raise_r+0x12>
 801201e:	2100      	movs	r1, #0
 8012020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012024:	4620      	mov	r0, r4
 8012026:	4798      	blx	r3
 8012028:	2000      	movs	r0, #0
 801202a:	e7e0      	b.n	8011fee <_raise_r+0x12>

0801202c <raise>:
 801202c:	4b02      	ldr	r3, [pc, #8]	@ (8012038 <raise+0xc>)
 801202e:	4601      	mov	r1, r0
 8012030:	6818      	ldr	r0, [r3, #0]
 8012032:	f7ff bfd3 	b.w	8011fdc <_raise_r>
 8012036:	bf00      	nop
 8012038:	20000020 	.word	0x20000020

0801203c <_kill_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4d07      	ldr	r5, [pc, #28]	@ (801205c <_kill_r+0x20>)
 8012040:	2300      	movs	r3, #0
 8012042:	4604      	mov	r4, r0
 8012044:	4608      	mov	r0, r1
 8012046:	4611      	mov	r1, r2
 8012048:	602b      	str	r3, [r5, #0]
 801204a:	f7f2 f953 	bl	80042f4 <_kill>
 801204e:	1c43      	adds	r3, r0, #1
 8012050:	d102      	bne.n	8012058 <_kill_r+0x1c>
 8012052:	682b      	ldr	r3, [r5, #0]
 8012054:	b103      	cbz	r3, 8012058 <_kill_r+0x1c>
 8012056:	6023      	str	r3, [r4, #0]
 8012058:	bd38      	pop	{r3, r4, r5, pc}
 801205a:	bf00      	nop
 801205c:	200093e0 	.word	0x200093e0

08012060 <_getpid_r>:
 8012060:	f7f2 b940 	b.w	80042e4 <_getpid>

08012064 <__swhatbuf_r>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	460c      	mov	r4, r1
 8012068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801206c:	2900      	cmp	r1, #0
 801206e:	b096      	sub	sp, #88	@ 0x58
 8012070:	4615      	mov	r5, r2
 8012072:	461e      	mov	r6, r3
 8012074:	da0d      	bge.n	8012092 <__swhatbuf_r+0x2e>
 8012076:	89a3      	ldrh	r3, [r4, #12]
 8012078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801207c:	f04f 0100 	mov.w	r1, #0
 8012080:	bf14      	ite	ne
 8012082:	2340      	movne	r3, #64	@ 0x40
 8012084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012088:	2000      	movs	r0, #0
 801208a:	6031      	str	r1, [r6, #0]
 801208c:	602b      	str	r3, [r5, #0]
 801208e:	b016      	add	sp, #88	@ 0x58
 8012090:	bd70      	pop	{r4, r5, r6, pc}
 8012092:	466a      	mov	r2, sp
 8012094:	f000 f848 	bl	8012128 <_fstat_r>
 8012098:	2800      	cmp	r0, #0
 801209a:	dbec      	blt.n	8012076 <__swhatbuf_r+0x12>
 801209c:	9901      	ldr	r1, [sp, #4]
 801209e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120a6:	4259      	negs	r1, r3
 80120a8:	4159      	adcs	r1, r3
 80120aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120ae:	e7eb      	b.n	8012088 <__swhatbuf_r+0x24>

080120b0 <__smakebuf_r>:
 80120b0:	898b      	ldrh	r3, [r1, #12]
 80120b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120b4:	079d      	lsls	r5, r3, #30
 80120b6:	4606      	mov	r6, r0
 80120b8:	460c      	mov	r4, r1
 80120ba:	d507      	bpl.n	80120cc <__smakebuf_r+0x1c>
 80120bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80120c0:	6023      	str	r3, [r4, #0]
 80120c2:	6123      	str	r3, [r4, #16]
 80120c4:	2301      	movs	r3, #1
 80120c6:	6163      	str	r3, [r4, #20]
 80120c8:	b003      	add	sp, #12
 80120ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120cc:	ab01      	add	r3, sp, #4
 80120ce:	466a      	mov	r2, sp
 80120d0:	f7ff ffc8 	bl	8012064 <__swhatbuf_r>
 80120d4:	9f00      	ldr	r7, [sp, #0]
 80120d6:	4605      	mov	r5, r0
 80120d8:	4639      	mov	r1, r7
 80120da:	4630      	mov	r0, r6
 80120dc:	f7ff f874 	bl	80111c8 <_malloc_r>
 80120e0:	b948      	cbnz	r0, 80120f6 <__smakebuf_r+0x46>
 80120e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120e6:	059a      	lsls	r2, r3, #22
 80120e8:	d4ee      	bmi.n	80120c8 <__smakebuf_r+0x18>
 80120ea:	f023 0303 	bic.w	r3, r3, #3
 80120ee:	f043 0302 	orr.w	r3, r3, #2
 80120f2:	81a3      	strh	r3, [r4, #12]
 80120f4:	e7e2      	b.n	80120bc <__smakebuf_r+0xc>
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	6020      	str	r0, [r4, #0]
 80120fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120fe:	81a3      	strh	r3, [r4, #12]
 8012100:	9b01      	ldr	r3, [sp, #4]
 8012102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012106:	b15b      	cbz	r3, 8012120 <__smakebuf_r+0x70>
 8012108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801210c:	4630      	mov	r0, r6
 801210e:	f000 f81d 	bl	801214c <_isatty_r>
 8012112:	b128      	cbz	r0, 8012120 <__smakebuf_r+0x70>
 8012114:	89a3      	ldrh	r3, [r4, #12]
 8012116:	f023 0303 	bic.w	r3, r3, #3
 801211a:	f043 0301 	orr.w	r3, r3, #1
 801211e:	81a3      	strh	r3, [r4, #12]
 8012120:	89a3      	ldrh	r3, [r4, #12]
 8012122:	431d      	orrs	r5, r3
 8012124:	81a5      	strh	r5, [r4, #12]
 8012126:	e7cf      	b.n	80120c8 <__smakebuf_r+0x18>

08012128 <_fstat_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4d07      	ldr	r5, [pc, #28]	@ (8012148 <_fstat_r+0x20>)
 801212c:	2300      	movs	r3, #0
 801212e:	4604      	mov	r4, r0
 8012130:	4608      	mov	r0, r1
 8012132:	4611      	mov	r1, r2
 8012134:	602b      	str	r3, [r5, #0]
 8012136:	f7f2 f93d 	bl	80043b4 <_fstat>
 801213a:	1c43      	adds	r3, r0, #1
 801213c:	d102      	bne.n	8012144 <_fstat_r+0x1c>
 801213e:	682b      	ldr	r3, [r5, #0]
 8012140:	b103      	cbz	r3, 8012144 <_fstat_r+0x1c>
 8012142:	6023      	str	r3, [r4, #0]
 8012144:	bd38      	pop	{r3, r4, r5, pc}
 8012146:	bf00      	nop
 8012148:	200093e0 	.word	0x200093e0

0801214c <_isatty_r>:
 801214c:	b538      	push	{r3, r4, r5, lr}
 801214e:	4d06      	ldr	r5, [pc, #24]	@ (8012168 <_isatty_r+0x1c>)
 8012150:	2300      	movs	r3, #0
 8012152:	4604      	mov	r4, r0
 8012154:	4608      	mov	r0, r1
 8012156:	602b      	str	r3, [r5, #0]
 8012158:	f7f2 f93c 	bl	80043d4 <_isatty>
 801215c:	1c43      	adds	r3, r0, #1
 801215e:	d102      	bne.n	8012166 <_isatty_r+0x1a>
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	b103      	cbz	r3, 8012166 <_isatty_r+0x1a>
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	bd38      	pop	{r3, r4, r5, pc}
 8012168:	200093e0 	.word	0x200093e0

0801216c <log10f>:
 801216c:	b508      	push	{r3, lr}
 801216e:	ed2d 8b02 	vpush	{d8}
 8012172:	eeb0 8a40 	vmov.f32	s16, s0
 8012176:	f000 f84f 	bl	8012218 <__ieee754_log10f>
 801217a:	eeb4 8a48 	vcmp.f32	s16, s16
 801217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012182:	d60f      	bvs.n	80121a4 <log10f+0x38>
 8012184:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218c:	d80a      	bhi.n	80121a4 <log10f+0x38>
 801218e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012196:	d108      	bne.n	80121aa <log10f+0x3e>
 8012198:	f7fe f918 	bl	80103cc <__errno>
 801219c:	2322      	movs	r3, #34	@ 0x22
 801219e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80121c0 <log10f+0x54>
 80121a2:	6003      	str	r3, [r0, #0]
 80121a4:	ecbd 8b02 	vpop	{d8}
 80121a8:	bd08      	pop	{r3, pc}
 80121aa:	f7fe f90f 	bl	80103cc <__errno>
 80121ae:	ecbd 8b02 	vpop	{d8}
 80121b2:	2321      	movs	r3, #33	@ 0x21
 80121b4:	6003      	str	r3, [r0, #0]
 80121b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80121ba:	4802      	ldr	r0, [pc, #8]	@ (80121c4 <log10f+0x58>)
 80121bc:	f000 b822 	b.w	8012204 <nanf>
 80121c0:	ff800000 	.word	0xff800000
 80121c4:	0802601d 	.word	0x0802601d

080121c8 <sqrtf>:
 80121c8:	b508      	push	{r3, lr}
 80121ca:	ed2d 8b02 	vpush	{d8}
 80121ce:	eeb0 8a40 	vmov.f32	s16, s0
 80121d2:	f000 f81d 	bl	8012210 <__ieee754_sqrtf>
 80121d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121de:	d60c      	bvs.n	80121fa <sqrtf+0x32>
 80121e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012200 <sqrtf+0x38>
 80121e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80121e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ec:	d505      	bpl.n	80121fa <sqrtf+0x32>
 80121ee:	f7fe f8ed 	bl	80103cc <__errno>
 80121f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80121f6:	2321      	movs	r3, #33	@ 0x21
 80121f8:	6003      	str	r3, [r0, #0]
 80121fa:	ecbd 8b02 	vpop	{d8}
 80121fe:	bd08      	pop	{r3, pc}
 8012200:	00000000 	.word	0x00000000

08012204 <nanf>:
 8012204:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801220c <nanf+0x8>
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	7fc00000 	.word	0x7fc00000

08012210 <__ieee754_sqrtf>:
 8012210:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012214:	4770      	bx	lr
	...

08012218 <__ieee754_log10f>:
 8012218:	b508      	push	{r3, lr}
 801221a:	ee10 3a10 	vmov	r3, s0
 801221e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012222:	ed2d 8b02 	vpush	{d8}
 8012226:	d108      	bne.n	801223a <__ieee754_log10f+0x22>
 8012228:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80122b0 <__ieee754_log10f+0x98>
 801222c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80122b4 <__ieee754_log10f+0x9c>
 8012230:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012234:	ecbd 8b02 	vpop	{d8}
 8012238:	bd08      	pop	{r3, pc}
 801223a:	2b00      	cmp	r3, #0
 801223c:	461a      	mov	r2, r3
 801223e:	da02      	bge.n	8012246 <__ieee754_log10f+0x2e>
 8012240:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012244:	e7f2      	b.n	801222c <__ieee754_log10f+0x14>
 8012246:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801224a:	db02      	blt.n	8012252 <__ieee754_log10f+0x3a>
 801224c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012250:	e7f0      	b.n	8012234 <__ieee754_log10f+0x1c>
 8012252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012256:	bfbf      	itttt	lt
 8012258:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 80122b8 <__ieee754_log10f+0xa0>
 801225c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012260:	f06f 0118 	mvnlt.w	r1, #24
 8012264:	ee17 2a90 	vmovlt	r2, s15
 8012268:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801226c:	bfa8      	it	ge
 801226e:	2100      	movge	r1, #0
 8012270:	3b7f      	subs	r3, #127	@ 0x7f
 8012272:	440b      	add	r3, r1
 8012274:	0fd9      	lsrs	r1, r3, #31
 8012276:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801227a:	ee07 3a90 	vmov	s15, r3
 801227e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012282:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8012286:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801228a:	ee00 3a10 	vmov	s0, r3
 801228e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012292:	f000 f819 	bl	80122c8 <__ieee754_logf>
 8012296:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80122bc <__ieee754_log10f+0xa4>
 801229a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801229e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80122c0 <__ieee754_log10f+0xa8>
 80122a2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80122a6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80122c4 <__ieee754_log10f+0xac>
 80122aa:	eea8 0a27 	vfma.f32	s0, s16, s15
 80122ae:	e7c1      	b.n	8012234 <__ieee754_log10f+0x1c>
 80122b0:	cc000000 	.word	0xcc000000
 80122b4:	00000000 	.word	0x00000000
 80122b8:	4c000000 	.word	0x4c000000
 80122bc:	3ede5bd9 	.word	0x3ede5bd9
 80122c0:	355427db 	.word	0x355427db
 80122c4:	3e9a2080 	.word	0x3e9a2080

080122c8 <__ieee754_logf>:
 80122c8:	ee10 3a10 	vmov	r3, s0
 80122cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80122d0:	d106      	bne.n	80122e0 <__ieee754_logf+0x18>
 80122d2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801246c <__ieee754_logf+0x1a4>
 80122d6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8012470 <__ieee754_logf+0x1a8>
 80122da:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80122de:	4770      	bx	lr
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	461a      	mov	r2, r3
 80122e4:	da02      	bge.n	80122ec <__ieee754_logf+0x24>
 80122e6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80122ea:	e7f4      	b.n	80122d6 <__ieee754_logf+0xe>
 80122ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122f0:	db02      	blt.n	80122f8 <__ieee754_logf+0x30>
 80122f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80122f6:	4770      	bx	lr
 80122f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80122fc:	bfb8      	it	lt
 80122fe:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8012474 <__ieee754_logf+0x1ac>
 8012302:	485d      	ldr	r0, [pc, #372]	@ (8012478 <__ieee754_logf+0x1b0>)
 8012304:	bfbe      	ittt	lt
 8012306:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801230a:	f06f 0118 	mvnlt.w	r1, #24
 801230e:	ee17 2a90 	vmovlt	r2, s15
 8012312:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8012316:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801231a:	4410      	add	r0, r2
 801231c:	bfa8      	it	ge
 801231e:	2100      	movge	r1, #0
 8012320:	3b7f      	subs	r3, #127	@ 0x7f
 8012322:	440b      	add	r3, r1
 8012324:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8012328:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801232c:	4311      	orrs	r1, r2
 801232e:	ee00 1a10 	vmov	s0, r1
 8012332:	4952      	ldr	r1, [pc, #328]	@ (801247c <__ieee754_logf+0x1b4>)
 8012334:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8012338:	f102 000f 	add.w	r0, r2, #15
 801233c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012340:	4001      	ands	r1, r0
 8012342:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012346:	bb89      	cbnz	r1, 80123ac <__ieee754_logf+0xe4>
 8012348:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012350:	d10f      	bne.n	8012372 <__ieee754_logf+0xaa>
 8012352:	2b00      	cmp	r3, #0
 8012354:	f000 8087 	beq.w	8012466 <__ieee754_logf+0x19e>
 8012358:	ee07 3a90 	vmov	s15, r3
 801235c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8012480 <__ieee754_logf+0x1b8>
 8012360:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012484 <__ieee754_logf+0x1bc>
 8012364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012368:	ee27 0a80 	vmul.f32	s0, s15, s0
 801236c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012370:	4770      	bx	lr
 8012372:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8012488 <__ieee754_logf+0x1c0>
 8012376:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801237a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801237e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012386:	b913      	cbnz	r3, 801238e <__ieee754_logf+0xc6>
 8012388:	ee30 0a47 	vsub.f32	s0, s0, s14
 801238c:	4770      	bx	lr
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012480 <__ieee754_logf+0x1b8>
 8012396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801239a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801239e:	ee37 0a40 	vsub.f32	s0, s14, s0
 80123a2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012484 <__ieee754_logf+0x1bc>
 80123a6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80123aa:	4770      	bx	lr
 80123ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80123b0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80123b4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801248c <__ieee754_logf+0x1c4>
 80123b8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8012490 <__ieee754_logf+0x1c8>
 80123bc:	4935      	ldr	r1, [pc, #212]	@ (8012494 <__ieee754_logf+0x1cc>)
 80123be:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80123c2:	4411      	add	r1, r2
 80123c4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80123c8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80123cc:	430a      	orrs	r2, r1
 80123ce:	2a00      	cmp	r2, #0
 80123d0:	ee07 3a90 	vmov	s15, r3
 80123d4:	ee26 5a06 	vmul.f32	s10, s12, s12
 80123d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80123dc:	ee25 7a05 	vmul.f32	s14, s10, s10
 80123e0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8012498 <__ieee754_logf+0x1d0>
 80123e4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80123e8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801249c <__ieee754_logf+0x1d4>
 80123ec:	eee7 5a87 	vfma.f32	s11, s15, s14
 80123f0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80124a0 <__ieee754_logf+0x1d8>
 80123f4:	eee7 7a24 	vfma.f32	s15, s14, s9
 80123f8:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80124a4 <__ieee754_logf+0x1dc>
 80123fc:	eee7 4a87 	vfma.f32	s9, s15, s14
 8012400:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80124a8 <__ieee754_logf+0x1e0>
 8012404:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012408:	ee67 7a85 	vmul.f32	s15, s15, s10
 801240c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012410:	dd1a      	ble.n	8012448 <__ieee754_logf+0x180>
 8012412:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012416:	ee20 7a07 	vmul.f32	s14, s0, s14
 801241a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801241e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012422:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012426:	b913      	cbnz	r3, 801242e <__ieee754_logf+0x166>
 8012428:	ee37 7a67 	vsub.f32	s14, s14, s15
 801242c:	e7ac      	b.n	8012388 <__ieee754_logf+0xc0>
 801242e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8012480 <__ieee754_logf+0x1b8>
 8012432:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012436:	ee37 7a67 	vsub.f32	s14, s14, s15
 801243a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801243e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012484 <__ieee754_logf+0x1bc>
 8012442:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012446:	4770      	bx	lr
 8012448:	ee70 7a67 	vsub.f32	s15, s0, s15
 801244c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012450:	b913      	cbnz	r3, 8012458 <__ieee754_logf+0x190>
 8012452:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012456:	4770      	bx	lr
 8012458:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8012480 <__ieee754_logf+0x1b8>
 801245c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012460:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012464:	e7eb      	b.n	801243e <__ieee754_logf+0x176>
 8012466:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8012470 <__ieee754_logf+0x1a8>
 801246a:	4770      	bx	lr
 801246c:	cc000000 	.word	0xcc000000
 8012470:	00000000 	.word	0x00000000
 8012474:	4c000000 	.word	0x4c000000
 8012478:	004afb20 	.word	0x004afb20
 801247c:	007ffff0 	.word	0x007ffff0
 8012480:	3717f7d1 	.word	0x3717f7d1
 8012484:	3f317180 	.word	0x3f317180
 8012488:	3eaaaaab 	.word	0x3eaaaaab
 801248c:	3e1cd04f 	.word	0x3e1cd04f
 8012490:	3e178897 	.word	0x3e178897
 8012494:	ffcf5c30 	.word	0xffcf5c30
 8012498:	3e638e29 	.word	0x3e638e29
 801249c:	3ecccccd 	.word	0x3ecccccd
 80124a0:	3e3a3325 	.word	0x3e3a3325
 80124a4:	3e924925 	.word	0x3e924925
 80124a8:	3f2aaaab 	.word	0x3f2aaaab

080124ac <_init>:
 80124ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ae:	bf00      	nop
 80124b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124b2:	bc08      	pop	{r3}
 80124b4:	469e      	mov	lr, r3
 80124b6:	4770      	bx	lr

080124b8 <_fini>:
 80124b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ba:	bf00      	nop
 80124bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124be:	bc08      	pop	{r3}
 80124c0:	469e      	mov	lr, r3
 80124c2:	4770      	bx	lr
