
RTOS_SimpleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e02c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800e1c0  0800e1c0  0000f1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e978  0800e978  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e978  0800e978  0000f978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e980  0800e980  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e980  0800e980  0000f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e984  0800e984  0000f984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e988  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fcc  200001dc  0800eb64  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021a8  0800eb64  000111a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002127d  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d3  00000000  00000000  00031489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  00035e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001664  00000000  00000000  00037b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9a5  00000000  00000000  000391a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f7c  00000000  00000000  00064b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103314  00000000  00000000  00086ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008934  00000000  00000000  00189e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00192750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1a4 	.word	0x0800e1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800e1a4 	.word	0x0800e1a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <GFX_SetFont+0x1c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001f8 	.word	0x200001f8

08000f98 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fb2:	f200 80a3 	bhi.w	80010fc <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	e096      	b.n	80010ea <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fbc:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <GFX_DrawChar+0x16c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	3b20      	subs	r3, #32
 8000fc4:	494f      	ldr	r1, [pc, #316]	@ (8001104 <GFX_DrawChar+0x16c>)
 8000fc6:	6809      	ldr	r1, [r1, #0]
 8000fc8:	3101      	adds	r1, #1
 8000fca:	7809      	ldrb	r1, [r1, #0]
 8000fcc:	fb03 f101 	mul.w	r1, r3, r1
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000fdc:	2300      	movs	r3, #0
 8000fde:	757b      	strb	r3, [r7, #21]
 8000fe0:	e078      	b.n	80010d4 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d032      	beq.n	8001052 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000fec:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <GFX_DrawChar+0x170>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d113      	bne.n	800101c <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b218      	sxth	r0, r3
 8001002:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001006:	b29a      	uxth	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21b      	sxth	r3, r3
 8001012:	79ba      	ldrb	r2, [r7, #6]
 8001014:	4619      	mov	r1, r3
 8001016:	f000 f9d3 	bl	80013c0 <SSD1306_DrawPixel>
 800101a:	e052      	b.n	80010c2 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4a3a      	ldr	r2, [pc, #232]	@ (8001108 <GFX_DrawChar+0x170>)
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	18d0      	adds	r0, r2, r3
 800102a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <GFX_DrawChar+0x170>)
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	fb03 f202 	mul.w	r2, r3, r2
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <GFX_DrawChar+0x170>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <GFX_DrawChar+0x170>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461c      	mov	r4, r3
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	f000 f960 	bl	8001310 <GFX_DrawFillRectangle>
 8001050:	e037      	b.n	80010c2 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001056:	2b00      	cmp	r3, #0
 8001058:	d133      	bne.n	80010c2 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800105a:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <GFX_DrawChar+0x170>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d114      	bne.n	800108c <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	b218      	sxth	r0, r3
 8001070:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001074:	b29a      	uxth	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21b      	sxth	r3, r3
 8001080:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	f000 f99b 	bl	80013c0 <SSD1306_DrawPixel>
 800108a:	e01a      	b.n	80010c2 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <GFX_DrawChar+0x170>)
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	fb03 f202 	mul.w	r2, r3, r2
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	18d0      	adds	r0, r2, r3
 800109a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800109e:	4a1a      	ldr	r2, [pc, #104]	@ (8001108 <GFX_DrawChar+0x170>)
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	fb03 f202 	mul.w	r2, r3, r2
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	18d1      	adds	r1, r2, r3
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <GFX_DrawChar+0x170>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <GFX_DrawChar+0x170>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461c      	mov	r4, r3
 80010b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	f000 f927 	bl	8001310 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	757b      	strb	r3, [r7, #21]
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	75bb      	strb	r3, [r7, #22]
 80010d4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <GFX_DrawChar+0x16c>)
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	4293      	cmp	r3, r2
 80010e0:	f6ff af7f 	blt.w	8000fe2 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <GFX_DrawChar+0x16c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f4ff af61 	bcc.w	8000fbc <GFX_DrawChar+0x24>
 80010fa:	e000      	b.n	80010fe <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80010fc:	bf00      	nop
            }
        }
    }
}
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	200001f8 	.word	0x200001f8
 8001108:	20000000 	.word	0x20000000

0800110c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001124:	e03e      	b.n	80011a4 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001126:	78f9      	ldrb	r1, [r7, #3]
 8001128:	7cfa      	ldrb	r2, [r7, #19]
 800112a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ff2f 	bl	8000f98 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <GFX_DrawString+0xb0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <GFX_DrawString+0xb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	3301      	adds	r3, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d120      	bne.n	800119e <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800115c:	2300      	movs	r3, #0
 800115e:	74bb      	strb	r3, [r7, #18]
 8001160:	e012      	b.n	8001188 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	b218      	sxth	r0, r3
 800116c:	7cbb      	ldrb	r3, [r7, #18]
 800116e:	b29a      	uxth	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4413      	add	r3, r2
 8001176:	b29b      	uxth	r3, r3
 8001178:	b21b      	sxth	r3, r3
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	f000 f91f 	bl	80013c0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001182:	7cbb      	ldrb	r3, [r7, #18]
 8001184:	3301      	adds	r3, #1
 8001186:	74bb      	strb	r3, [r7, #18]
 8001188:	7cba      	ldrb	r2, [r7, #18]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <GFX_DrawString+0xb0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <GFX_DrawString+0xb4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	429a      	cmp	r2, r3
 800119c:	dbe1      	blt.n	8001162 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ba      	bne.n	8001126 <GFX_DrawString+0x1a>
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	20000000 	.word	0x20000000

080011c4 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	429a      	cmp	r2, r3
 80011ee:	bfcc      	ite	gt
 80011f0:	2301      	movgt	r3, #1
 80011f2:	2300      	movle	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 80011f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	dd0b      	ble.n	8001238 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b29b      	uxth	r3, r3
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29b      	uxth	r3, r3
 8001244:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfb8      	it	lt
 8001250:	425b      	neglt	r3, r3
 8001252:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001258:	0fda      	lsrs	r2, r3, #31
 800125a:	4413      	add	r3, r2
 800125c:	105b      	asrs	r3, r3, #1
 800125e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	da02      	bge.n	800126e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800126c:	e030      	b.n	80012d0 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800126e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001272:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001274:	e02c      	b.n	80012d0 <GFX_WriteLine+0x10c>
	        if (steep) {
 8001276:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	b21b      	sxth	r3, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	b211      	sxth	r1, r2
 8001286:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f898 	bl	80013c0 <SSD1306_DrawPixel>
 8001290:	e008      	b.n	80012a4 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	b21b      	sxth	r3, r3
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	b211      	sxth	r1, r2
 800129a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f88e 	bl	80013c0 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80012a6:	8abb      	ldrh	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 80012ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da09      	bge.n	80012ca <GFX_WriteLine+0x106>
	            y_start += ystep;
 80012b6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80012c2:	8afb      	ldrh	r3, [r7, #22]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	ddce      	ble.n	8001276 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	@ 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af02      	add	r7, sp, #8
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff5e 	bl	80011c4 <GFX_WriteLine>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	460b      	mov	r3, r1
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e009      	b.n	8001340 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f7ff ffd4 	bl	80012e2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbef      	blt.n	800132c <GFX_DrawFillRectangle+0x1c>
    }

}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af04      	add	r7, sp, #16
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <SSD1306_Command+0x30>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2200      	movs	r2, #0
 8001378:	2178      	movs	r1, #120	@ 0x78
 800137a:	f003 f9ab 	bl	80046d4 <HAL_I2C_Mem_Write>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc

0800138c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <SSD1306_Data+0x30>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2240      	movs	r2, #64	@ 0x40
 80013ae:	2178      	movs	r1, #120	@ 0x78
 80013b0:	f003 f990 	bl	80046d4 <HAL_I2C_Mem_Write>
#endif
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001fc 	.word	0x200001fc

080013c0 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db79      	blt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013de:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e0:	dc75      	bgt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db71      	blt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80013f0:	dc6d      	bgt.n	80014ce <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d049      	beq.n	800148c <SSD1306_DrawPixel+0xcc>
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	dc69      	bgt.n	80014d0 <SSD1306_DrawPixel+0x110>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d022      	beq.n	8001446 <SSD1306_DrawPixel+0x86>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d165      	bne.n	80014d0 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001404:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da00      	bge.n	8001412 <SSD1306_DrawPixel+0x52>
 8001410:	3307      	adds	r3, #7
 8001412:	10db      	asrs	r3, r3, #3
 8001414:	b218      	sxth	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	4413      	add	r3, r2
 800141c:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	b25a      	sxtb	r2, r3
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b259      	sxtb	r1, r3
 8001434:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	4413      	add	r3, r2
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001442:	54d1      	strb	r1, [r2, r3]
      break;
 8001444:	e044      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001446:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800144a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	da00      	bge.n	8001454 <SSD1306_DrawPixel+0x94>
 8001452:	3307      	adds	r3, #7
 8001454:	10db      	asrs	r3, r3, #3
 8001456:	b218      	sxth	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	b25b      	sxtb	r3, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4013      	ands	r3, r2
 8001478:	b259      	sxtb	r1, r3
 800147a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	01db      	lsls	r3, r3, #7
 8001482:	4413      	add	r3, r2
 8001484:	b2c9      	uxtb	r1, r1
 8001486:	4a15      	ldr	r2, [pc, #84]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001488:	54d1      	strb	r1, [r2, r3]
      break;
 800148a:	e021      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800148c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <SSD1306_DrawPixel+0xda>
 8001498:	3307      	adds	r3, #7
 800149a:	10db      	asrs	r3, r3, #3
 800149c:	b218      	sxth	r0, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	01db      	lsls	r3, r3, #7
 80014a2:	4413      	add	r3, r2
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4053      	eors	r3, r2
 80014ba:	b259      	sxtb	r1, r3
 80014bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c0:	4603      	mov	r3, r0
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4413      	add	r3, r2
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 80014ca:	54d1      	strb	r1, [r2, r3]
      break;
 80014cc:	e000      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
	  return;
 80014ce:	bf00      	nop
    }
}
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000200 	.word	0x20000200

080014e0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <SSD1306_Clear+0x22>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d10d      	bne.n	8001510 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80014f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f8:	21ff      	movs	r1, #255	@ 0xff
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <SSD1306_Clear+0x38>)
 80014fc:	f00a ff31 	bl	800c362 <memset>
		break;
 8001500:	e006      	b.n	8001510 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001506:	2100      	movs	r1, #0
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <SSD1306_Clear+0x38>)
 800150a:	f00a ff2a 	bl	800c362 <memset>
		break;
 800150e:	bf00      	nop
	}
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000200 	.word	0x20000200

0800151c <SSD1306_Display>:

void SSD1306_Display(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001520:	2022      	movs	r0, #34	@ 0x22
 8001522:	f7ff ff19 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff ff16 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 800152c:	20ff      	movs	r0, #255	@ 0xff
 800152e:	f7ff ff13 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001532:	2021      	movs	r0, #33	@ 0x21
 8001534:	f7ff ff10 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff ff0d 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800153e:	207f      	movs	r0, #127	@ 0x7f
 8001540:	f7ff ff0a 	bl	8001358 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <SSD1306_Display+0x38>)
 800154a:	f7ff ff1f 	bl	800138c <SSD1306_Data>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000200 	.word	0x20000200

08001558 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <SSD1306_Init+0xac>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001566:	20ae      	movs	r0, #174	@ 0xae
 8001568:	f7ff fef6 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800156c:	20d5      	movs	r0, #213	@ 0xd5
 800156e:	f7ff fef3 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001572:	2080      	movs	r0, #128	@ 0x80
 8001574:	f7ff fef0 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001578:	203f      	movs	r0, #63	@ 0x3f
 800157a:	f7ff feed 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800157e:	20d3      	movs	r0, #211	@ 0xd3
 8001580:	f7ff feea 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fee7 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800158a:	2040      	movs	r0, #64	@ 0x40
 800158c:	f7ff fee4 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001590:	208d      	movs	r0, #141	@ 0x8d
 8001592:	f7ff fee1 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001596:	2014      	movs	r0, #20
 8001598:	f7ff fede 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800159c:	2020      	movs	r0, #32
 800159e:	f7ff fedb 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fed8 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80015a8:	20a1      	movs	r0, #161	@ 0xa1
 80015aa:	f7ff fed5 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80015ae:	20c8      	movs	r0, #200	@ 0xc8
 80015b0:	f7ff fed2 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80015b4:	20da      	movs	r0, #218	@ 0xda
 80015b6:	f7ff fecf 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x12);
 80015ba:	2012      	movs	r0, #18
 80015bc:	f7ff fecc 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80015c0:	2081      	movs	r0, #129	@ 0x81
 80015c2:	f7ff fec9 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80015c6:	20ff      	movs	r0, #255	@ 0xff
 80015c8:	f7ff fec6 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80015cc:	20d9      	movs	r0, #217	@ 0xd9
 80015ce:	f7ff fec3 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80015d2:	20f1      	movs	r0, #241	@ 0xf1
 80015d4:	f7ff fec0 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80015d8:	20db      	movs	r0, #219	@ 0xdb
 80015da:	f7ff febd 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x40);
 80015de:	2040      	movs	r0, #64	@ 0x40
 80015e0:	f7ff feba 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80015e4:	20a4      	movs	r0, #164	@ 0xa4
 80015e6:	f7ff feb7 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80015ea:	20a6      	movs	r0, #166	@ 0xa6
 80015ec:	f7ff feb4 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80015f0:	202e      	movs	r0, #46	@ 0x2e
 80015f2:	f7ff feb1 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80015f6:	20af      	movs	r0, #175	@ 0xaf
 80015f8:	f7ff feae 	bl	8001358 <SSD1306_Command>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001fc 	.word	0x200001fc

08001608 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f107 030f 	add.w	r3, r7, #15
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	f003 f961 	bl	80048fc <HAL_I2C_Mem_Read>

	return Value;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af04      	add	r7, sp, #16
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
 8001650:	4613      	mov	r3, r2
 8001652:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b299      	uxth	r1, r3
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	b29a      	uxth	r2, r3
 8001664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	f003 f82e 	bl	80046d4 <HAL_I2C_Mem_Write>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	b299      	uxth	r1, r3
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2302      	movs	r3, #2
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	f003 f925 	bl	80048fc <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7b3b      	ldrb	r3, [r7, #12]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	b29b      	uxth	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b088      	sub	sp, #32
 80016ce:	af04      	add	r7, sp, #16
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	b299      	uxth	r1, r3
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2303      	movs	r3, #3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	f003 f900 	bl	80048fc <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	7b7b      	ldrb	r3, [r7, #13]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	7bba      	ldrb	r2, [r7, #14]
 8001708:	4313      	orrs	r3, r2
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d901      	bls.n	8001728 <BMP280_SetMode+0x16>
 8001724:	2303      	movs	r3, #3
 8001726:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001728:	21f4      	movs	r1, #244	@ 0xf4
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff6c 	bl	8001608 <Read8>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 800173c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	b25a      	sxtb	r2, r3
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4313      	orrs	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	461a      	mov	r2, r3
 8001754:	21f4      	movs	r1, #244	@ 0xf4
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff74 	bl	8001644 <Write8>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d901      	bls.n	800177a <BMP280_SetPressureOversampling+0x16>
 8001776:	2305      	movs	r3, #5
 8001778:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800177a:	21f4      	movs	r1, #244	@ 0xf4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff43 	bl	8001608 <Read8>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f003 031c 	and.w	r3, r3, #28
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	461a      	mov	r2, r3
 80017a8:	21f4      	movs	r1, #244	@ 0xf4
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff4a 	bl	8001644 <Write8>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d901      	bls.n	80017ce <BMP280_SetTemperatureOversampling+0x16>
 80017ca:	2305      	movs	r3, #5
 80017cc:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017ce:	21f4      	movs	r1, #244	@ 0xf4
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff19 	bl	8001608 <Read8>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	b25a      	sxtb	r2, r3
 80017e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	461a      	mov	r2, r3
 80017f6:	21f4      	movs	r1, #244	@ 0xf4
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff23 	bl	8001644 <Write8>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 800180e:	21fa      	movs	r1, #250	@ 0xfa
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff5a 	bl	80016ca <Read24>
 8001816:	4603      	mov	r3, r0
 8001818:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	111b      	asrs	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001832:	21f7      	movs	r1, #247	@ 0xf7
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff48 	bl	80016ca <Read24>
 800183a:	4603      	mov	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	111b      	asrs	r3, r3, #4
 8001842:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffd4 	bl	8001806 <BMP280_ReadTemperatureRaw>
 800185e:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	10da      	asrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8b5b      	ldrh	r3, [r3, #26]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	12db      	asrs	r3, r3, #11
 8001878:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	111b      	asrs	r3, r3, #4
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	8b52      	ldrh	r2, [r2, #26]
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	1112      	asrs	r2, r2, #4
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	8b49      	ldrh	r1, [r1, #26]
 800188c:	1a52      	subs	r2, r2, r1
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	139b      	asrs	r3, r3, #14
 80018a0:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3380      	adds	r3, #128	@ 0x80
 80018b8:	121b      	asrs	r3, r3, #8
 80018ba:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f7fe fe31 	bl	8000524 <__aeabi_i2d>
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <BMP280_ReadTemperature+0x98>)
 80018c8:	f7fe ffc0 	bl	800084c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f988 	bl	8000be8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	ee07 3a90 	vmov	s15, r3
}
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40590000 	.word	0x40590000

080018ec <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ffa9 	bl	8001850 <BMP280_ReadTemperature>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	105b      	asrs	r3, r3, #1
 800190e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001912:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	109b      	asrs	r3, r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	1092      	asrs	r2, r2, #2
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	12db      	asrs	r3, r3, #11
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	461a      	mov	r2, r3
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	109a      	asrs	r2, r3, #2
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800195a:	4619      	mov	r1, r3
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	109b      	asrs	r3, r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	1092      	asrs	r2, r2, #2
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	135b      	asrs	r3, r3, #13
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	10da      	asrs	r2, r3, #3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001976:	4619      	mov	r1, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	105b      	asrs	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	149b      	asrs	r3, r3, #18
 8001984:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	8b92      	ldrh	r2, [r2, #28]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	13db      	asrs	r3, r3, #15
 8001996:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 800199e:	2301      	movs	r3, #1
 80019a0:	e054      	b.n	8001a4c <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff ff41 	bl	800182a <BMP280_ReadPressureRaw>
 80019a8:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	131b      	asrs	r3, r3, #12
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f640 4235 	movw	r2, #3125	@ 0xc35
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db06      	blt.n	80019d4 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005a      	lsls	r2, r3, #1
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e005      	b.n	80019e0 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019e6:	4619      	mov	r1, r3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08db      	lsrs	r3, r3, #3
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	08d2      	lsrs	r2, r2, #3
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	131b      	asrs	r3, r3, #12
 80019fc:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	135b      	asrs	r3, r3, #13
 8001a10:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a1e:	4413      	add	r3, r2
 8001a20:	111a      	asrs	r2, r3, #4
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f7fe fd6b 	bl	8000504 <__aeabi_ui2d>
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <BMP280_ReadPressureAndTemperature+0x168>)
 8001a34:	f7fe ff0a 	bl	800084c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8d2 	bl	8000be8 <__aeabi_d2f>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	601a      	str	r2, [r3, #0]

	return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40590000 	.word	0x40590000

08001a58 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001a72:	21d0      	movs	r1, #208	@ 0xd0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fdc7 	bl	8001608 <Read8>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b58      	cmp	r3, #88	@ 0x58
 8001a82:	d001      	beq.n	8001a88 <BMP280_Init+0x30>
	{
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e06c      	b.n	8001b62 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001a88:	2188      	movs	r1, #136	@ 0x88
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fdf8 	bl	8001680 <Read16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001a98:	218a      	movs	r1, #138	@ 0x8a
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fdf0 	bl	8001680 <Read16>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001aa8:	218c      	movs	r1, #140	@ 0x8c
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fde8 	bl	8001680 <Read16>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001ab8:	218e      	movs	r1, #142	@ 0x8e
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fde0 	bl	8001680 <Read16>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001ac8:	2190      	movs	r1, #144	@ 0x90
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fdd8 	bl	8001680 <Read16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001ad8:	2192      	movs	r1, #146	@ 0x92
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fdd0 	bl	8001680 <Read16>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001ae8:	2194      	movs	r1, #148	@ 0x94
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fdc8 	bl	8001680 <Read16>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001af8:	2196      	movs	r1, #150	@ 0x96
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fdc0 	bl	8001680 <Read16>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001b08:	2198      	movs	r1, #152	@ 0x98
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fdb8 	bl	8001680 <Read16>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001b18:	219a      	movs	r1, #154	@ 0x9a
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fdb0 	bl	8001680 <Read16>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001b28:	219c      	movs	r1, #156	@ 0x9c
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fda8 	bl	8001680 <Read16>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001b38:	219e      	movs	r1, #158	@ 0x9e
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fda0 	bl	8001680 <Read16>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001b48:	2105      	movs	r1, #5
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe34 	bl	80017b8 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001b50:	2105      	movs	r1, #5
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fe06 	bl	8001764 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001b58:	2103      	movs	r1, #3
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fdd9 	bl	8001712 <BMP280_SetMode>

	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <_putchar>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void _putchar(char character)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <_putchar+0x38>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f006 f974 	bl	8007e6c <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001b84:	1df9      	adds	r1, r7, #7
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <_putchar+0x3c>)
 8001b8e:	f005 f98f 	bl	8006eb0 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001b92:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <_putchar+0x38>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 f9b3 	bl	8007f02 <osMutexRelease>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000614 	.word	0x20000614
 8001ba8:	200006c8 	.word	0x200006c8

08001bac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001bb0:	4822      	ldr	r0, [pc, #136]	@ (8001c3c <MX_FREERTOS_Init+0x90>)
 8001bb2:	f006 f8d5 	bl	8007d60 <osMutexNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a21      	ldr	r2, [pc, #132]	@ (8001c40 <MX_FREERTOS_Init+0x94>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1 */
  MutexI2C1Handle = osMutexNew(&MutexI2C1_attributes);
 8001bbc:	4821      	ldr	r0, [pc, #132]	@ (8001c44 <MX_FREERTOS_Init+0x98>)
 8001bbe:	f006 f8cf 	bl	8007d60 <osMutexNew>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <MX_FREERTOS_Init+0x9c>)
 8001bc6:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpData */
  MutexBmpDataHandle = osMutexNew(&MutexBmpData_attributes);
 8001bc8:	4820      	ldr	r0, [pc, #128]	@ (8001c4c <MX_FREERTOS_Init+0xa0>)
 8001bca:	f006 f8c9 	bl	8007d60 <osMutexNew>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <MX_FREERTOS_Init+0xa4>)
 8001bd2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreBmpQueue */
  SemaphoreBmpQueueHandle = osSemaphoreNew(1, 0, &SemaphoreBmpQueue_attributes);
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <MX_FREERTOS_Init+0xa8>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f006 f9cf 	bl	8007f7c <osSemaphoreNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <MX_FREERTOS_Init+0xac>)
 8001be2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmpData */
  TimerBmpDataHandle = osTimerNew(TimerBmpDataCallback, osTimerPeriodic, NULL, &TimerBmpData_attributes);
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <MX_FREERTOS_Init+0xb0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	2101      	movs	r1, #1
 8001bea:	481d      	ldr	r0, [pc, #116]	@ (8001c60 <MX_FREERTOS_Init+0xb4>)
 8001bec:	f006 f80e 	bl	8007c0c <osTimerNew>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <MX_FREERTOS_Init+0xb8>)
 8001bf4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBmpData */
  QueueBmpDataHandle = osMessageQueueNew (8, sizeof(BmpData_t), &QueueBmpData_attributes);
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <MX_FREERTOS_Init+0xbc>)
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	2008      	movs	r0, #8
 8001bfc:	f006 fade 	bl	80081bc <osMessageQueueNew>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <MX_FREERTOS_Init+0xc0>)
 8001c04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartbeatTask */
  HeartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &HeartbeatTask_attributes);
 8001c06:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <MX_FREERTOS_Init+0xc4>)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	481a      	ldr	r0, [pc, #104]	@ (8001c74 <MX_FREERTOS_Init+0xc8>)
 8001c0c:	f005 ff3c 	bl	8007a88 <osThreadNew>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <MX_FREERTOS_Init+0xcc>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* creation of Bmp280Task */
  Bmp280TaskHandle = osThreadNew(StartBmp280Task, NULL, &Bmp280Task_attributes);
 8001c16:	4a19      	ldr	r2, [pc, #100]	@ (8001c7c <MX_FREERTOS_Init+0xd0>)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <MX_FREERTOS_Init+0xd4>)
 8001c1c:	f005 ff34 	bl	8007a88 <osThreadNew>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <MX_FREERTOS_Init+0xd8>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8001c26:	4a18      	ldr	r2, [pc, #96]	@ (8001c88 <MX_FREERTOS_Init+0xdc>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <MX_FREERTOS_Init+0xe0>)
 8001c2c:	f005 ff2c 	bl	8007a88 <osThreadNew>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <MX_FREERTOS_Init+0xe4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800e530 	.word	0x0800e530
 8001c40:	20000614 	.word	0x20000614
 8001c44:	0800e540 	.word	0x0800e540
 8001c48:	20000618 	.word	0x20000618
 8001c4c:	0800e550 	.word	0x0800e550
 8001c50:	2000061c 	.word	0x2000061c
 8001c54:	0800e560 	.word	0x0800e560
 8001c58:	20000620 	.word	0x20000620
 8001c5c:	0800e520 	.word	0x0800e520
 8001c60:	08001ea9 	.word	0x08001ea9
 8001c64:	20000610 	.word	0x20000610
 8001c68:	0800e508 	.word	0x0800e508
 8001c6c:	2000060c 	.word	0x2000060c
 8001c70:	0800e49c 	.word	0x0800e49c
 8001c74:	08001c95 	.word	0x08001c95
 8001c78:	20000600 	.word	0x20000600
 8001c7c:	0800e4c0 	.word	0x0800e4c0
 8001c80:	08001cb5 	.word	0x08001cb5
 8001c84:	20000604 	.word	0x20000604
 8001c88:	0800e4e4 	.word	0x0800e4e4
 8001c8c:	08001d85 	.word	0x08001d85
 8001c90:	20000608 	.word	0x20000608

08001c94 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f002 fc61 	bl	8004568 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001ca6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001caa:	f005 ff7f 	bl	8007bac <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001cae:	bf00      	nop
 8001cb0:	e7f4      	b.n	8001c9c <StartHeartbeatTask+0x8>
	...

08001cb4 <StartBmp280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp280Task */
void StartBmp280Task(void *argument)
{
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b090      	sub	sp, #64	@ 0x40
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp280Task */
	BMP280_t Bmp280;
	BmpData_t _BmpData;

	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <StartBmp280Task+0xb8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 f8d1 	bl	8007e6c <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2276      	movs	r2, #118	@ 0x76
 8001cd0:	4927      	ldr	r1, [pc, #156]	@ (8001d70 <StartBmp280Task+0xbc>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fec0 	bl	8001a58 <BMP280_Init>
	osMutexRelease(MutexI2C1Handle);
 8001cd8:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <StartBmp280Task+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 f910 	bl	8007f02 <osMutexRelease>

	osTimerStart(TimerBmpDataHandle, 100);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <StartBmp280Task+0xc0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2164      	movs	r1, #100	@ 0x64
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f006 f80b 	bl	8007d04 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <StartBmp280Task+0xb8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 f8b8 	bl	8007e6c <osMutexAcquire>
	  	  BMP280_ReadPressureAndTemperature(&Bmp280, &_BmpData.Pressure, &_BmpData.Temperature);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	1d1a      	adds	r2, r3, #4
 8001d02:	f107 010c 	add.w	r1, r7, #12
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fdee 	bl	80018ec <BMP280_ReadPressureAndTemperature>
	  	  osMutexRelease(MutexI2C1Handle);
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <StartBmp280Task+0xb8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 f8f4 	bl	8007f02 <osMutexRelease>

	  	  if(osOK == osSemaphoreAcquire(SemaphoreBmpQueueHandle, 0))
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <StartBmp280Task+0xc4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f006 f9b5 	bl	8008090 <osSemaphoreAcquire>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <StartBmp280Task+0x8a>
	  	  {
	  		  osMessageQueuePut(QueueBmpDataHandle, &_BmpData, 0, osWaitForever);
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <StartBmp280Task+0xc8>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	f107 010c 	add.w	r1, r7, #12
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f006 fab3 	bl	80082a4 <osMessageQueuePut>
	  //	  osMutexAcquire(MutexBmpDataHandle, osWaitForever);
	  //	  Pressure = _Pressure;
	  //	  Temperature = _Temperature;
	  //	  osMutexRelease(MutexBmpDataHandle);

	  	  printf("Temperature: %.2f, Pressure: %.2f\n\r", _BmpData.Temperature, _BmpData.Pressure);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc01 	bl	8000548 <__aeabi_f2d>
 8001d46:	4604      	mov	r4, r0
 8001d48:	460d      	mov	r5, r1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbfb 	bl	8000548 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	e9cd 2300 	strd	r2, r3, [sp]
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <StartBmp280Task+0xcc>)
 8001d60:	f001 fe9c 	bl	8003a9c <printf_>

	  	  osDelay(10);
 8001d64:	200a      	movs	r0, #10
 8001d66:	f005 ff21 	bl	8007bac <osDelay>
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001d6a:	e7c0      	b.n	8001cee <StartBmp280Task+0x3a>
 8001d6c:	20000618 	.word	0x20000618
 8001d70:	20000624 	.word	0x20000624
 8001d74:	20000610 	.word	0x20000610
 8001d78:	20000620 	.word	0x20000620
 8001d7c:	2000060c 	.word	0x2000060c
 8001d80:	0800e244 	.word	0x0800e244

08001d84 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b090      	sub	sp, #64	@ 0x40
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char Message[32];
	uint8_t i = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	BmpData_t _BmpData;
//	float _Pressure, _Temperature;

	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001d92:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <StartOledTask+0x108>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f006 f866 	bl	8007e6c <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 8001da0:	483b      	ldr	r0, [pc, #236]	@ (8001e90 <StartOledTask+0x10c>)
 8001da2:	f7ff fbd9 	bl	8001558 <SSD1306_Init>
	osMutexRelease(MutexI2C1Handle);
 8001da6:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <StartOledTask+0x108>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f006 f8a9 	bl	8007f02 <osMutexRelease>

	GFX_SetFont(font_8x5);
 8001db0:	4838      	ldr	r0, [pc, #224]	@ (8001e94 <StartOledTask+0x110>)
 8001db2:	f7ff f8e1 	bl	8000f78 <GFX_SetFont>

	SSD1306_Clear(BLACK);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fb92 	bl	80014e0 <SSD1306_Clear>

	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <StartOledTask+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f006 f851 	bl	8007e6c <osMutexAcquire>
	SSD1306_Display();
 8001dca:	f7ff fba7 	bl	800151c <SSD1306_Display>
	osMutexRelease(MutexI2C1Handle);
 8001dce:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <StartOledTask+0x108>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f006 f895 	bl	8007f02 <osMutexRelease>


  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear(BLACK);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fb81 	bl	80014e0 <SSD1306_Clear>

	  	sprintf(Message, "Hello %d", i++);
 8001dde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8001de8:	461a      	mov	r2, r3
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	492a      	ldr	r1, [pc, #168]	@ (8001e98 <StartOledTask+0x114>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fe6f 	bl	8003ad4 <sprintf_>

	  	GFX_DrawString(0, 0, Message, WHITE, 0);
 8001df6:	f107 0214 	add.w	r2, r7, #20
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f982 	bl	800110c <GFX_DrawString>
	  //	osMutexAcquire(MutexBmpDataHandle, osWaitForever);
	  //	_Pressure = Pressure;
	  //	_Temperature = Temperature;
	  //	osMutexRelease(MutexBmpDataHandle);

	  	osMessageQueueGet(QueueBmpDataHandle, &_BmpData, NULL, osWaitForever);
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <StartOledTask+0x118>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f107 010c 	add.w	r1, r7, #12
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e14:	2200      	movs	r2, #0
 8001e16:	f006 faa5 	bl	8008364 <osMessageQueueGet>

	  	sprintf(Message, "Press: %.2f", _BmpData.Pressure);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb93 	bl	8000548 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	f107 0014 	add.w	r0, r7, #20
 8001e2a:	491d      	ldr	r1, [pc, #116]	@ (8001ea0 <StartOledTask+0x11c>)
 8001e2c:	f001 fe52 	bl	8003ad4 <sprintf_>
	  	GFX_DrawString(0, 10, Message, WHITE, 0);
 8001e30:	f107 0214 	add.w	r2, r7, #20
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	210a      	movs	r1, #10
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff f965 	bl	800110c <GFX_DrawString>

	  	sprintf(Message, "Temp: %.2f", _BmpData.Temperature);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb7f 	bl	8000548 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	f107 0014 	add.w	r0, r7, #20
 8001e52:	4914      	ldr	r1, [pc, #80]	@ (8001ea4 <StartOledTask+0x120>)
 8001e54:	f001 fe3e 	bl	8003ad4 <sprintf_>
	  	GFX_DrawString(0, 20, Message, WHITE, 0);
 8001e58:	f107 0214 	add.w	r2, r7, #20
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	2114      	movs	r1, #20
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff f951 	bl	800110c <GFX_DrawString>

	  	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <StartOledTask+0x108>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 fffa 	bl	8007e6c <osMutexAcquire>
	  	SSD1306_Display();
 8001e78:	f7ff fb50 	bl	800151c <SSD1306_Display>
	  	osMutexRelease(MutexI2C1Handle);
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <StartOledTask+0x108>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f006 f83e 	bl	8007f02 <osMutexRelease>
	  SSD1306_Clear(BLACK);
 8001e86:	bf00      	nop
 8001e88:	e7a6      	b.n	8001dd8 <StartOledTask+0x54>
 8001e8a:	bf00      	nop
 8001e8c:	20000618 	.word	0x20000618
 8001e90:	20000624 	.word	0x20000624
 8001e94:	0800e2bc 	.word	0x0800e2bc
 8001e98:	0800e268 	.word	0x0800e268
 8001e9c:	2000060c 	.word	0x2000060c
 8001ea0:	0800e274 	.word	0x0800e274
 8001ea4:	0800e280 	.word	0x0800e280

08001ea8 <TimerBmpDataCallback>:
  /* USER CODE END StartOledTask */
}

/* TimerBmpDataCallback function */
void TimerBmpDataCallback(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerBmpDataCallback */
	osSemaphoreRelease(SemaphoreBmpQueueHandle);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <TimerBmpDataCallback+0x1c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 f93d 	bl	8008134 <osSemaphoreRelease>
  /* USER CODE END TimerBmpDataCallback */
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000620 	.word	0x20000620

08001ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eea:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	4a24      	ldr	r2, [pc, #144]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_GPIO_Init+0xc4>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2120      	movs	r1, #32
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f46:	f002 faf7 	bl	8004538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480b      	ldr	r0, [pc, #44]	@ (8001f90 <MX_GPIO_Init+0xc8>)
 8001f62:	f002 f93f 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f66:	2320      	movs	r3, #32
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f80:	f002 f930 	bl	80041e4 <HAL_GPIO_Init>

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000800 	.word	0x48000800

08001f94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <MX_I2C1_Init+0x78>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <MX_I2C1_Init+0x7c>)
 8001fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fce:	480e      	ldr	r0, [pc, #56]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fd0:	f002 fae4 	bl	800459c <HAL_I2C_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fda:	f000 f8f1 	bl	80021c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4809      	ldr	r0, [pc, #36]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001fe2:	f003 f867 	bl	80050b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fec:	f000 f8e8 	bl	80021c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_I2C1_Init+0x74>)
 8001ff4:	f003 f8a9 	bl	800514a <HAL_I2CEx_ConfigDigitalFilter>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ffe:	f000 f8df 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000624 	.word	0x20000624
 800200c:	40005400 	.word	0x40005400
 8002010:	00702991 	.word	0x00702991

08002014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0ac      	sub	sp, #176	@ 0xb0
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2288      	movs	r2, #136	@ 0x88
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f00a f994 	bl	800c362 <memset>
  if(i2cHandle->Instance==I2C1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	@ (80020c4 <HAL_I2C_MspInit+0xb0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d13b      	bne.n	80020bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002044:	2340      	movs	r3, #64	@ 0x40
 8002046:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002048:	2300      	movs	r3, #0
 800204a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4618      	mov	r0, r3
 8002052:	f003 ff5d 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800205c:	f000 f8b0 	bl	80021c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 8002066:	f043 0302 	orr.w	r3, r3, #2
 800206a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206c:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002078:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800207c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002092:	2304      	movs	r3, #4
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800209c:	4619      	mov	r1, r3
 800209e:	480b      	ldr	r0, [pc, #44]	@ (80020cc <HAL_I2C_MspInit+0xb8>)
 80020a0:	f002 f8a0 	bl	80041e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_I2C_MspInit+0xb4>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020bc:	bf00      	nop
 80020be:	37b0      	adds	r7, #176	@ 0xb0
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d4:	f001 ff64 	bl	8003fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d8:	f000 f80e 	bl	80020f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020dc:	f7ff fef4 	bl	8001ec8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020e0:	f001 fea8 	bl	8003e34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020e4:	f7ff ff56 	bl	8001f94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020e8:	f005 fc84 	bl	80079f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020ec:	f7ff fd5e 	bl	8001bac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020f0:	f005 fca4 	bl	8007a3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <main+0x24>

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b096      	sub	sp, #88	@ 0x58
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	2244      	movs	r2, #68	@ 0x44
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f00a f92b 	bl	800c362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800211a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800211e:	f003 f86f 	bl	8005200 <HAL_PWREx_ControlVoltageScaling>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002128:	f000 f84a 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800212c:	2302      	movs	r3, #2
 800212e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002136:	2310      	movs	r3, #16
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213a:	2302      	movs	r3, #2
 800213c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800213e:	2302      	movs	r3, #2
 8002140:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002146:	230a      	movs	r3, #10
 8002148:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800214a:	2307      	movs	r3, #7
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800214e:	2302      	movs	r3, #2
 8002150:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002152:	2302      	movs	r3, #2
 8002154:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4618      	mov	r0, r3
 800215c:	f003 f8a6 	bl	80052ac <HAL_RCC_OscConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002166:	f000 f82b 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216a:	230f      	movs	r3, #15
 800216c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800216e:	2303      	movs	r3, #3
 8002170:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	2104      	movs	r1, #4
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fc6e 	bl	8005a64 <HAL_RCC_ClockConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800218e:	f000 f817 	bl	80021c0 <Error_Handler>
  }
}
 8002192:	bf00      	nop
 8002194:	3758      	adds	r7, #88	@ 0x58
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ae:	f001 ff17 	bl	8003fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40014800 	.word	0x40014800

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <Error_Handler+0x8>

080021cc <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d204      	bcs.n	80021ee <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	701a      	strb	r2, [r3, #0]
  }
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <_out_char+0x1e>
    _putchar(character);
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fc9c 	bl	8001b6c <_putchar>
  }
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e002      	b.n	8002252 <_strnlen_s+0x16>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <_strnlen_s+0x28>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	603a      	str	r2, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f3      	bne.n	800224c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1ad3      	subs	r3, r2, r3
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b2f      	cmp	r3, #47	@ 0x2f
 8002284:	d904      	bls.n	8002290 <_is_digit+0x1a>
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b39      	cmp	r3, #57	@ 0x39
 800228a:	d801      	bhi.n	8002290 <_is_digit+0x1a>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <_is_digit+0x1c>
 8002290:	2300      	movs	r3, #0
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80022b0:	e00e      	b.n	80022d0 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6011      	str	r1, [r2, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4403      	add	r3, r0
 80022cc:	3b30      	subs	r3, #48	@ 0x30
 80022ce:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ffcd 	bl	8002276 <_is_digit>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e7      	bne.n	80022b2 <_atoi+0xe>
  }
  return i;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d125      	bne.n	8002354 <_out_rev+0x68>
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d120      	bne.n	8002354 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e00a      	b.n	800232e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	1c53      	adds	r3, r2, #1
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	68fc      	ldr	r4, [r7, #12]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	2020      	movs	r0, #32
 8002326:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	429a      	cmp	r2, r3
 8002334:	d3f0      	bcc.n	8002318 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002336:	e00d      	b.n	8002354 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233a:	3b01      	subs	r3, #1
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002342:	4413      	add	r3, r2
 8002344:	7818      	ldrb	r0, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	1c53      	adds	r3, r2, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	68fc      	ldr	r4, [r7, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	47a0      	blx	r4
  while (len) {
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ee      	bne.n	8002338 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002364:	e007      	b.n	8002376 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	1c53      	adds	r3, r2, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	68fc      	ldr	r4, [r7, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	2020      	movs	r0, #32
 8002374:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800237e:	429a      	cmp	r2, r3
 8002380:	d8f1      	bhi.n	8002366 <_out_rev+0x7a>
    }
  }

  return idx;
 8002382:	687b      	ldr	r3, [r7, #4]
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}

0800238c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d136      	bne.n	8002412 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <_ntoa_format+0x50>
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <_ntoa_format+0x50>
 80023b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <_ntoa_format+0x3a>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <_ntoa_format+0x50>
      width--;
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c8:	3b01      	subs	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023cc:	e006      	b.n	80023dc <_ntoa_format+0x50>
      buf[len++] = '0';
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	2230      	movs	r2, #48	@ 0x30
 80023da:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d20a      	bcs.n	80023fa <_ntoa_format+0x6e>
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b1f      	cmp	r3, #31
 80023e8:	d9f1      	bls.n	80023ce <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023ea:	e006      	b.n	80023fa <_ntoa_format+0x6e>
      buf[len++] = '0';
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	61fa      	str	r2, [r7, #28]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	2230      	movs	r2, #48	@ 0x30
 80023f8:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <_ntoa_format+0x86>
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	429a      	cmp	r2, r3
 800240a:	d202      	bcs.n	8002412 <_ntoa_format+0x86>
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b1f      	cmp	r3, #31
 8002410:	d9ec      	bls.n	80023ec <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d058      	beq.n	80024ce <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <_ntoa_format+0xc8>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <_ntoa_format+0xc8>
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	429a      	cmp	r2, r3
 8002432:	d003      	beq.n	800243c <_ntoa_format+0xb0>
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002438:	429a      	cmp	r2, r3
 800243a:	d10b      	bne.n	8002454 <_ntoa_format+0xc8>
      len--;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3b01      	subs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <_ntoa_format+0xc8>
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	2b10      	cmp	r3, #16
 800244c:	d102      	bne.n	8002454 <_ntoa_format+0xc8>
        len--;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b01      	subs	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2b10      	cmp	r3, #16
 8002458:	d10f      	bne.n	800247a <_ntoa_format+0xee>
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <_ntoa_format+0xee>
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b1f      	cmp	r3, #31
 8002468:	d807      	bhi.n	800247a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	61fa      	str	r2, [r7, #28]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	2278      	movs	r2, #120	@ 0x78
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e01f      	b.n	80024ba <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	2b10      	cmp	r3, #16
 800247e:	d10f      	bne.n	80024a0 <_ntoa_format+0x114>
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <_ntoa_format+0x114>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2b1f      	cmp	r3, #31
 800248e:	d807      	bhi.n	80024a0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	61fa      	str	r2, [r7, #28]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4413      	add	r3, r2
 800249a:	2258      	movs	r2, #88	@ 0x58
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e00c      	b.n	80024ba <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d109      	bne.n	80024ba <_ntoa_format+0x12e>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b1f      	cmp	r3, #31
 80024aa:	d806      	bhi.n	80024ba <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	2262      	movs	r2, #98	@ 0x62
 80024b8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b1f      	cmp	r3, #31
 80024be:	d806      	bhi.n	80024ce <_ntoa_format+0x142>
      buf[len++] = '0';
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	61fa      	str	r2, [r7, #28]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	2230      	movs	r2, #48	@ 0x30
 80024cc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b1f      	cmp	r3, #31
 80024d2:	d824      	bhi.n	800251e <_ntoa_format+0x192>
    if (negative) {
 80024d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <_ntoa_format+0x160>
      buf[len++] = '-';
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	61fa      	str	r2, [r7, #28]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	222d      	movs	r2, #45	@ 0x2d
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e018      	b.n	800251e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	61fa      	str	r2, [r7, #28]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	222b      	movs	r2, #43	@ 0x2b
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e00b      	b.n	800251e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	61fa      	str	r2, [r7, #28]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	2220      	movs	r2, #32
 800251c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	9303      	str	r3, [sp, #12]
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fed9 	bl	80022ec <_out_rev>
 800253a:	4603      	mov	r3, r0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b096      	sub	sp, #88	@ 0x58
 8002548:	af08      	add	r7, sp, #32
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800255c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255e:	f023 0310 	bic.w	r3, r3, #16
 8002562:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <_ntoa_long+0x30>
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d032      	beq.n	80025da <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002578:	fbb3 f2f2 	udiv	r2, r3, r2
 800257c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800257e:	fb01 f202 	mul.w	r2, r1, r2
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002588:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800258c:	2b09      	cmp	r3, #9
 800258e:	d804      	bhi.n	800259a <_ntoa_long+0x56>
 8002590:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002594:	3330      	adds	r3, #48	@ 0x30
 8002596:	b2da      	uxtb	r2, r3
 8002598:	e00d      	b.n	80025b6 <_ntoa_long+0x72>
 800259a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_ntoa_long+0x64>
 80025a4:	2241      	movs	r2, #65	@ 0x41
 80025a6:	e000      	b.n	80025aa <_ntoa_long+0x66>
 80025a8:	2261      	movs	r2, #97	@ 0x61
 80025aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3b0a      	subs	r3, #10
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	6379      	str	r1, [r7, #52]	@ 0x34
 80025bc:	3338      	adds	r3, #56	@ 0x38
 80025be:	443b      	add	r3, r7
 80025c0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80025c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80025ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <_ntoa_long+0x96>
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	2b1f      	cmp	r3, #31
 80025d8:	d9cc      	bls.n	8002574 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80025da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025dc:	9306      	str	r3, [sp, #24]
 80025de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e0:	9305      	str	r3, [sp, #20]
 80025e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e4:	9304      	str	r3, [sp, #16]
 80025e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e8:	9303      	str	r3, [sp, #12]
 80025ea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fec3 	bl	800238c <_ntoa_format>
 8002606:	4603      	mov	r3, r0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b096      	sub	sp, #88	@ 0x58
 8002614:	af08      	add	r7, sp, #32
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002626:	4313      	orrs	r3, r2
 8002628:	d103      	bne.n	8002632 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800262a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800262c:	f023 0310 	bic.w	r3, r3, #16
 8002630:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <_ntoa_long_long+0x34>
 800263c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002640:	4313      	orrs	r3, r2
 8002642:	d037      	beq.n	80026b4 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002644:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800264c:	f7fe fb1c 	bl	8000c88 <__aeabi_uldivmod>
 8002650:	4613      	mov	r3, r2
 8002652:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002656:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800265a:	2b09      	cmp	r3, #9
 800265c:	d804      	bhi.n	8002668 <_ntoa_long_long+0x58>
 800265e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002662:	3330      	adds	r3, #48	@ 0x30
 8002664:	b2da      	uxtb	r2, r3
 8002666:	e00d      	b.n	8002684 <_ntoa_long_long+0x74>
 8002668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <_ntoa_long_long+0x66>
 8002672:	2241      	movs	r2, #65	@ 0x41
 8002674:	e000      	b.n	8002678 <_ntoa_long_long+0x68>
 8002676:	2261      	movs	r2, #97	@ 0x61
 8002678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800267c:	4413      	add	r3, r2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3b0a      	subs	r3, #10
 8002682:	b2da      	uxtb	r2, r3
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	6379      	str	r1, [r7, #52]	@ 0x34
 800268a:	3338      	adds	r3, #56	@ 0x38
 800268c:	443b      	add	r3, r7
 800268e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002692:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002696:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800269a:	f7fe faf5 	bl	8000c88 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80026a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026aa:	4313      	orrs	r3, r2
 80026ac:	d002      	beq.n	80026b4 <_ntoa_long_long+0xa4>
 80026ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b0:	2b1f      	cmp	r3, #31
 80026b2:	d9c7      	bls.n	8002644 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80026b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026b8:	9206      	str	r2, [sp, #24]
 80026ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026bc:	9205      	str	r2, [sp, #20]
 80026be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026c0:	9204      	str	r2, [sp, #16]
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fe56 	bl	800238c <_ntoa_format>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3738      	adds	r7, #56	@ 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	0000      	movs	r0, r0
 80026ec:	0000      	movs	r0, r0
	...

080026f0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b09d      	sub	sp, #116	@ 0x74
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	6178      	str	r0, [r7, #20]
 80026f8:	6139      	str	r1, [r7, #16]
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800271a:	f7fe f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10f      	bne.n	8002744 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002726:	9303      	str	r3, [sp, #12]
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	2303      	movs	r3, #3
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	4ba7      	ldr	r3, [pc, #668]	@ (80029d0 <_ftoa+0x2e0>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff fdd6 	bl	80022ec <_out_rev>
 8002740:	4603      	mov	r3, r0
 8002742:	e222      	b.n	8002b8a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002744:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002748:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 800274c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002750:	f7fe f9c4 	bl	8000adc <__aeabi_dcmplt>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00f      	beq.n	800277a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800275a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275c:	9303      	str	r3, [sp, #12]
 800275e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2304      	movs	r3, #4
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	4b9b      	ldr	r3, [pc, #620]	@ (80029d4 <_ftoa+0x2e4>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f7ff fdbb 	bl	80022ec <_out_rev>
 8002776:	4603      	mov	r3, r0
 8002778:	e207      	b.n	8002b8a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800277a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800277e:	4b96      	ldr	r3, [pc, #600]	@ (80029d8 <_ftoa+0x2e8>)
 8002780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002784:	f7fe f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800278e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <_ftoa+0xac>
 8002798:	4b90      	ldr	r3, [pc, #576]	@ (80029dc <_ftoa+0x2ec>)
 800279a:	e000      	b.n	800279e <_ftoa+0xae>
 800279c:	4b90      	ldr	r3, [pc, #576]	@ (80029e0 <_ftoa+0x2f0>)
 800279e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80027a0:	f002 0204 	and.w	r2, r2, #4
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	d001      	beq.n	80027ac <_ftoa+0xbc>
 80027a8:	2204      	movs	r2, #4
 80027aa:	e000      	b.n	80027ae <_ftoa+0xbe>
 80027ac:	2203      	movs	r2, #3
 80027ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80027b0:	9103      	str	r1, [sp, #12]
 80027b2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80027b4:	9102      	str	r1, [sp, #8]
 80027b6:	9201      	str	r2, [sp, #4]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	6939      	ldr	r1, [r7, #16]
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f7ff fd93 	bl	80022ec <_out_rev>
 80027c6:	4603      	mov	r3, r0
 80027c8:	e1df      	b.n	8002b8a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80027ca:	a37d      	add	r3, pc, #500	@ (adr r3, 80029c0 <_ftoa+0x2d0>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027d4:	f7fe f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <_ftoa+0x102>
 80027de:	a37a      	add	r3, pc, #488	@ (adr r3, 80029c8 <_ftoa+0x2d8>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e8:	f7fe f978 	bl	8000adc <__aeabi_dcmplt>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00f      	beq.n	8002812 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80027f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	ed97 0b00 	vldr	d0, [r7]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f000 f9c9 	bl	8002ba0 <_etoa>
 800280e:	4603      	mov	r3, r0
 8002810:	e1bb      	b.n	8002b8a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002824:	f7fe f95a 	bl	8000adc <__aeabi_dcmplt>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <_ftoa+0x15c>
    negative = true;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 8002834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f7fd fd22 	bl	8000288 <__aeabi_dsub>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800284c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800284e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002856:	2306      	movs	r3, #6
 8002858:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800285a:	e00a      	b.n	8002872 <_ftoa+0x182>
    buf[len++] = '0';
 800285c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002862:	3360      	adds	r3, #96	@ 0x60
 8002864:	443b      	add	r3, r7
 8002866:	2230      	movs	r2, #48	@ 0x30
 8002868:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800286c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800286e:	3b01      	subs	r3, #1
 8002870:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002874:	2b1f      	cmp	r3, #31
 8002876:	d802      	bhi.n	800287e <_ftoa+0x18e>
 8002878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800287a:	2b09      	cmp	r3, #9
 800287c:	d8ee      	bhi.n	800285c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800287e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002882:	f7fe f969 	bl	8000b58 <__aeabi_d2iz>
 8002886:	4603      	mov	r3, r0
 8002888:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 800288a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800288c:	f7fd fe4a 	bl	8000524 <__aeabi_i2d>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002898:	f7fd fcf6 	bl	8000288 <__aeabi_dsub>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	4a4f      	ldr	r2, [pc, #316]	@ (80029e4 <_ftoa+0x2f4>)
 80028a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd fea2 	bl	80005f8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 80028bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80028c0:	f7fe f972 	bl	8000ba8 <__aeabi_d2uiz>
 80028c4:	4603      	mov	r3, r0
 80028c6:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 80028c8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80028ca:	f7fd fe1b 	bl	8000504 <__aeabi_ui2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80028d6:	f7fd fcd7 	bl	8000288 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <_ftoa+0x2f8>)
 80028e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028ec:	f7fe f914 	bl	8000b18 <__aeabi_dcmpgt>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <_ftoa+0x234>
    ++frac;
 80028f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f8:	3301      	adds	r3, #1
 80028fa:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80028fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80028fe:	f7fd fe01 	bl	8000504 <__aeabi_ui2d>
 8002902:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <_ftoa+0x2f4>)
 8002904:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fe f8f9 	bl	8000b04 <__aeabi_dcmpge>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01a      	beq.n	800294e <_ftoa+0x25e>
      frac = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 800291c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291e:	3301      	adds	r3, #1
 8002920:	657b      	str	r3, [r7, #84]	@ 0x54
 8002922:	e014      	b.n	800294e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b2f      	ldr	r3, [pc, #188]	@ (80029e8 <_ftoa+0x2f8>)
 800292a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800292e:	f7fe f8d5 	bl	8000adc <__aeabi_dcmplt>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <_ftoa+0x258>
 800293e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800294a:	3301      	adds	r3, #1
 800294c:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 800294e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002950:	2b00      	cmp	r3, #0
 8002952:	d14b      	bne.n	80029ec <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002954:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002956:	f7fd fde5 	bl	8000524 <__aeabi_i2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002962:	f7fd fc91 	bl	8000288 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800296e:	2301      	movs	r3, #1
 8002970:	461c      	mov	r4, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <_ftoa+0x2f8>)
 8002978:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800297c:	f7fe f8ae 	bl	8000adc <__aeabi_dcmplt>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <_ftoa+0x29a>
 8002986:	2300      	movs	r3, #0
 8002988:	461c      	mov	r4, r3
 800298a:	b2e3      	uxtb	r3, r4
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <_ftoa+0x2ba>
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <_ftoa+0x2f8>)
 800299c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029a0:	f7fe f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d064      	beq.n	8002a74 <_ftoa+0x384>
 80029aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8081 	beq.w	8002ab8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80029b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b8:	3301      	adds	r3, #1
 80029ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80029bc:	e07c      	b.n	8002ab8 <_ftoa+0x3c8>
 80029be:	bf00      	nop
 80029c0:	00000000 	.word	0x00000000
 80029c4:	41cdcd65 	.word	0x41cdcd65
 80029c8:	00000000 	.word	0x00000000
 80029cc:	c1cdcd65 	.word	0xc1cdcd65
 80029d0:	0800e28c 	.word	0x0800e28c
 80029d4:	0800e290 	.word	0x0800e290
 80029d8:	7fefffff 	.word	0x7fefffff
 80029dc:	0800e298 	.word	0x0800e298
 80029e0:	0800e2a0 	.word	0x0800e2a0
 80029e4:	0800e570 	.word	0x0800e570
 80029e8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80029ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029f0:	e01f      	b.n	8002a32 <_ftoa+0x342>
      --count;
 80029f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f4:	3b01      	subs	r3, #1
 80029f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80029f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80029fa:	4b66      	ldr	r3, [pc, #408]	@ (8002b94 <_ftoa+0x4a4>)
 80029fc:	fba3 2301 	umull	r2, r3, r3, r1
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	1aca      	subs	r2, r1, r3
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002a14:	3230      	adds	r2, #48	@ 0x30
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	3360      	adds	r3, #96	@ 0x60
 8002a1a:	443b      	add	r3, r7
 8002a1c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a22:	4a5c      	ldr	r2, [pc, #368]	@ (8002b94 <_ftoa+0x4a4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a34:	2b1f      	cmp	r3, #31
 8002a36:	d9dc      	bls.n	80029f2 <_ftoa+0x302>
 8002a38:	e009      	b.n	8002a4e <_ftoa+0x35e>
        break;
 8002a3a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a3c:	e007      	b.n	8002a4e <_ftoa+0x35e>
      buf[len++] = '0';
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a44:	3360      	adds	r3, #96	@ 0x60
 8002a46:	443b      	add	r3, r7
 8002a48:	2230      	movs	r2, #48	@ 0x30
 8002a4a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a50:	2b1f      	cmp	r3, #31
 8002a52:	d804      	bhi.n	8002a5e <_ftoa+0x36e>
 8002a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ef      	bne.n	8002a3e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a60:	2b1f      	cmp	r3, #31
 8002a62:	d829      	bhi.n	8002ab8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a6a:	3360      	adds	r3, #96	@ 0x60
 8002a6c:	443b      	add	r3, r7
 8002a6e:	222e      	movs	r2, #46	@ 0x2e
 8002a70:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a74:	e020      	b.n	8002ab8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002a76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a78:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <_ftoa+0x4a8>)
 8002a7a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a7e:	1099      	asrs	r1, r3, #2
 8002a80:	17d3      	asrs	r3, r2, #31
 8002a82:	1ac9      	subs	r1, r1, r3
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	1ad1      	subs	r1, r2, r3
 8002a8e:	b2ca      	uxtb	r2, r1
 8002a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002a96:	3230      	adds	r2, #48	@ 0x30
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	443b      	add	r3, r7
 8002a9e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002b98 <_ftoa+0x4a8>)
 8002aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aaa:	1092      	asrs	r2, r2, #2
 8002aac:	17db      	asrs	r3, r3, #31
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aba:	2b1f      	cmp	r3, #31
 8002abc:	d9db      	bls.n	8002a76 <_ftoa+0x386>
 8002abe:	e000      	b.n	8002ac2 <_ftoa+0x3d2>
      break;
 8002ac0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d123      	bne.n	8002b14 <_ftoa+0x424>
 8002acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01e      	beq.n	8002b14 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <_ftoa+0x416>
 8002adc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <_ftoa+0x3fe>
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <_ftoa+0x416>
      width--;
 8002aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002af0:	3b01      	subs	r3, #1
 8002af2:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002af4:	e007      	b.n	8002b06 <_ftoa+0x416>
      buf[len++] = '0';
 8002af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002afc:	3360      	adds	r3, #96	@ 0x60
 8002afe:	443b      	add	r3, r7
 8002b00:	2230      	movs	r2, #48	@ 0x30
 8002b02:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d202      	bcs.n	8002b14 <_ftoa+0x424>
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b10:	2b1f      	cmp	r3, #31
 8002b12:	d9f0      	bls.n	8002af6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b16:	2b1f      	cmp	r3, #31
 8002b18:	d827      	bhi.n	8002b6a <_ftoa+0x47a>
    if (negative) {
 8002b1a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <_ftoa+0x444>
      buf[len++] = '-';
 8002b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b28:	3360      	adds	r3, #96	@ 0x60
 8002b2a:	443b      	add	r3, r7
 8002b2c:	222d      	movs	r2, #45	@ 0x2d
 8002b2e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b32:	e01a      	b.n	8002b6a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b44:	3360      	adds	r3, #96	@ 0x60
 8002b46:	443b      	add	r3, r7
 8002b48:	222b      	movs	r2, #43	@ 0x2b
 8002b4a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b4e:	e00c      	b.n	8002b6a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <_ftoa+0x47a>
      buf[len++] = ' ';
 8002b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b60:	3360      	adds	r3, #96	@ 0x60
 8002b62:	443b      	add	r3, r7
 8002b64:	2220      	movs	r2, #32
 8002b66:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b6c:	9303      	str	r3, [sp, #12]
 8002b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	6939      	ldr	r1, [r7, #16]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff fbb2 	bl	80022ec <_out_rev>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3764      	adds	r7, #100	@ 0x64
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}
 8002b92:	bf00      	nop
 8002b94:	cccccccd 	.word	0xcccccccd
 8002b98:	66666667 	.word	0x66666667
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	b09f      	sub	sp, #124	@ 0x7c
 8002ba6:	af06      	add	r7, sp, #24
 8002ba8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002baa:	6239      	str	r1, [r7, #32]
 8002bac:	61fa      	str	r2, [r7, #28]
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bbc:	f7fd ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d014      	beq.n	8002bf0 <_etoa+0x50>
 8002bc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bca:	4bc1      	ldr	r3, [pc, #772]	@ (8002ed0 <_etoa+0x330>)
 8002bcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bd0:	f7fd ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <_etoa+0x50>
 8002bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bde:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002be2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be6:	f7fd ff79 	bl	8000adc <__aeabi_dcmplt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d012      	beq.n	8002c16 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bf4:	9302      	str	r3, [sp, #8]
 8002bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	6a39      	ldr	r1, [r7, #32]
 8002c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c0e:	f7ff fd6f 	bl	80026f0 <_ftoa>
 8002c12:	4603      	mov	r3, r0
 8002c14:	e23f      	b.n	8003096 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002c16:	2301      	movs	r3, #1
 8002c18:	461e      	mov	r6, r3
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c26:	f7fd ff59 	bl	8000adc <__aeabi_dcmplt>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <_etoa+0x94>
 8002c30:	2300      	movs	r3, #0
 8002c32:	461e      	mov	r6, r3
 8002c34:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002c38:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <_etoa+0xb4>
    value = -value;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	ed97 7b00 	vldr	d7, [r7]
 8002c50:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c60:	2306      	movs	r3, #6
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002c66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	0d0a      	lsrs	r2, r1, #20
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4613      	mov	r3, r2
 8002c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c84:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c8e:	4690      	mov	r8, r2
 8002c90:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002c94:	4644      	mov	r4, r8
 8002c96:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 8002c9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002c9e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002ca2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002ca4:	f7fd fc3e 	bl	8000524 <__aeabi_i2d>
 8002ca8:	a37d      	add	r3, pc, #500	@ (adr r3, 8002ea0 <_etoa+0x300>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fca3 	bl	80005f8 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	a37b      	add	r3, pc, #492	@ (adr r3, 8002ea8 <_etoa+0x308>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fae4 	bl	800028c <__adddf3>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed4 <_etoa+0x334>)
 8002cd6:	f7fd fad7 	bl	8000288 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	a373      	add	r3, pc, #460	@ (adr r3, 8002eb0 <_etoa+0x310>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fc86 	bl	80005f8 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd faca 	bl	800028c <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f7fd ff2a 	bl	8000b58 <__aeabi_d2iz>
 8002d04:	4603      	mov	r3, r0
 8002d06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002d08:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d0a:	f7fd fc0b 	bl	8000524 <__aeabi_i2d>
 8002d0e:	a36a      	add	r3, pc, #424	@ (adr r3, 8002eb8 <_etoa+0x318>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fc70 	bl	80005f8 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <_etoa+0x338>)
 8002d26:	f7fd fab1 	bl	800028c <__adddf3>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7fd ff11 	bl	8000b58 <__aeabi_d2iz>
 8002d36:	4603      	mov	r3, r0
 8002d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002d3a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d3c:	f7fd fbf2 	bl	8000524 <__aeabi_i2d>
 8002d40:	a35f      	add	r3, pc, #380	@ (adr r3, 8002ec0 <_etoa+0x320>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc57 	bl	80005f8 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4614      	mov	r4, r2
 8002d50:	461d      	mov	r5, r3
 8002d52:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d54:	f7fd fbe6 	bl	8000524 <__aeabi_i2d>
 8002d58:	a35b      	add	r3, pc, #364	@ (adr r3, 8002ec8 <_etoa+0x328>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc4b 	bl	80005f8 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f7fd fa8d 	bl	8000288 <__aeabi_dsub>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 8002d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002d7e:	f7fd fc3b 	bl	80005f8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d8c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002d90:	17da      	asrs	r2, r3, #31
 8002d92:	469a      	mov	sl, r3
 8002d94:	4693      	mov	fp, r2
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002da2:	2200      	movs	r2, #0
 8002da4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002da8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002dac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	f7fd fa6a 	bl	800028c <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4690      	mov	r8, r2
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002dcc:	f7fd fa5c 	bl	8000288 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4692      	mov	sl, r2
 8002dd6:	469b      	mov	fp, r3
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <_etoa+0x33c>)
 8002dde:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002de2:	f7fd fd33 	bl	800084c <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <_etoa+0x340>)
 8002df4:	f7fd fa4a 	bl	800028c <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e00:	f7fd fd24 	bl	800084c <__aeabi_ddiv>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	4b34      	ldr	r3, [pc, #208]	@ (8002ee4 <_etoa+0x344>)
 8002e12:	f7fd fa3b 	bl	800028c <__adddf3>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002e1e:	f7fd fd15 	bl	800084c <__aeabi_ddiv>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4650      	mov	r0, sl
 8002e28:	4659      	mov	r1, fp
 8002e2a:	f7fd fa2f 	bl	800028c <__adddf3>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	f7fd fd09 	bl	800084c <__aeabi_ddiv>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <_etoa+0x348>)
 8002e48:	f7fd fa20 	bl	800028c <__adddf3>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7fd fbd0 	bl	80005f8 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e68:	f7fd fe38 	bl	8000adc <__aeabi_dcmplt>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <_etoa+0x2ee>
    expval--;
 8002e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e74:	3b01      	subs	r3, #1
 8002e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002e78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <_etoa+0x340>)
 8002e82:	f7fd fce3 	bl	800084c <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e90:	2b63      	cmp	r3, #99	@ 0x63
 8002e92:	dc2b      	bgt.n	8002eec <_etoa+0x34c>
 8002e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e96:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002e9a:	db27      	blt.n	8002eec <_etoa+0x34c>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e026      	b.n	8002eee <_etoa+0x34e>
 8002ea0:	509f79fb 	.word	0x509f79fb
 8002ea4:	3fd34413 	.word	0x3fd34413
 8002ea8:	8b60c8b3 	.word	0x8b60c8b3
 8002eac:	3fc68a28 	.word	0x3fc68a28
 8002eb0:	636f4361 	.word	0x636f4361
 8002eb4:	3fd287a7 	.word	0x3fd287a7
 8002eb8:	0979a371 	.word	0x0979a371
 8002ebc:	400a934f 	.word	0x400a934f
 8002ec0:	bbb55516 	.word	0xbbb55516
 8002ec4:	40026bb1 	.word	0x40026bb1
 8002ec8:	fefa39ef 	.word	0xfefa39ef
 8002ecc:	3fe62e42 	.word	0x3fe62e42
 8002ed0:	7fefffff 	.word	0x7fefffff
 8002ed4:	3ff80000 	.word	0x3ff80000
 8002ed8:	3fe00000 	.word	0x3fe00000
 8002edc:	402c0000 	.word	0x402c0000
 8002ee0:	40240000 	.word	0x40240000
 8002ee4:	40180000 	.word	0x40180000
 8002ee8:	3ff00000 	.word	0x3ff00000
 8002eec:	2305      	movs	r3, #5
 8002eee:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d03d      	beq.n	8002f78 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002efc:	a368      	add	r3, pc, #416	@ (adr r3, 80030a0 <_etoa+0x500>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f06:	f7fd fdfd 	bl	8000b04 <__aeabi_dcmpge>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d024      	beq.n	8002f5a <_etoa+0x3ba>
 8002f10:	a365      	add	r3, pc, #404	@ (adr r3, 80030a8 <_etoa+0x508>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f1a:	f7fd fddf 	bl	8000adc <__aeabi_dcmplt>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01a      	beq.n	8002f5a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	da07      	bge.n	8002f3e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002f2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f3c:	e002      	b.n	8002f44 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f58:	e00e      	b.n	8002f78 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <_etoa+0x3d8>
 8002f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <_etoa+0x3d8>
        --prec;
 8002f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002f7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d904      	bls.n	8002f92 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002f88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f90:	e001      	b.n	8002f96 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <_etoa+0x40c>
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 8002fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <_etoa+0x426>
    value /= conv.F;
 8002fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fba:	f7fd fc47 	bl	800084c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002fca:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <_etoa+0x440>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e003      	b.n	8002fe8 <_etoa+0x448>
 8002fe0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002fe4:	ed87 7b02 	vstr	d7, [r7, #8]
 8002fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ff0:	9302      	str	r3, [sp, #8]
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	ed97 0b02 	vldr	d0, [r7, #8]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	6a39      	ldr	r1, [r7, #32]
 8003006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003008:	f7ff fb72 	bl	80026f0 <_ftoa>
 800300c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800300e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003010:	2b00      	cmp	r3, #0
 8003012:	d03f      	beq.n	8003094 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003014:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <_etoa+0x484>
 8003020:	2045      	movs	r0, #69	@ 0x45
 8003022:	e000      	b.n	8003026 <_etoa+0x486>
 8003024:	2065      	movs	r0, #101	@ 0x65
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	1c53      	adds	r3, r2, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6a39      	ldr	r1, [r7, #32]
 8003032:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	425b      	neglt	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003040:	0fdb      	lsrs	r3, r3, #31
 8003042:	b2db      	uxtb	r3, r3
 8003044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003046:	3a01      	subs	r2, #1
 8003048:	2105      	movs	r1, #5
 800304a:	9105      	str	r1, [sp, #20]
 800304c:	9204      	str	r2, [sp, #16]
 800304e:	2200      	movs	r2, #0
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	220a      	movs	r2, #10
 8003054:	9202      	str	r2, [sp, #8]
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	9000      	str	r0, [sp, #0]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003062:	f7ff fa6f 	bl	8002544 <_ntoa_long>
 8003066:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003068:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00f      	beq.n	8003094 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003074:	e007      	b.n	8003086 <_etoa+0x4e6>
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	1c53      	adds	r3, r2, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6a39      	ldr	r1, [r7, #32]
 8003082:	2020      	movs	r0, #32
 8003084:	47a0      	blx	r4
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003090:	429a      	cmp	r2, r3
 8003092:	d8f0      	bhi.n	8003076 <_etoa+0x4d6>
    }
  }
  return idx;
 8003094:	69fb      	ldr	r3, [r7, #28]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3764      	adds	r7, #100	@ 0x64
 800309a:	46bd      	mov	sp, r7
 800309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a0:	eb1c432d 	.word	0xeb1c432d
 80030a4:	3f1a36e2 	.word	0x3f1a36e2
 80030a8:	00000000 	.word	0x00000000
 80030ac:	412e8480 	.word	0x412e8480

080030b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	b0a3      	sub	sp, #140	@ 0x8c
 80030b6:	af0a      	add	r7, sp, #40	@ 0x28
 80030b8:	6178      	str	r0, [r7, #20]
 80030ba:	6139      	str	r1, [r7, #16]
 80030bc:	60fa      	str	r2, [r7, #12]
 80030be:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 84cf 	bne.w	8003a6a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80030cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003370 <_vsnprintf+0x2c0>)
 80030ce:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80030d0:	f000 bccb 	b.w	8003a6a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b25      	cmp	r3, #37	@ 0x25
 80030da:	d00d      	beq.n	80030f8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	7818      	ldrb	r0, [r3, #0]
 80030e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e2:	1c53      	adds	r3, r2, #1
 80030e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030e6:	697c      	ldr	r4, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6939      	ldr	r1, [r7, #16]
 80030ec:	47a0      	blx	r4
      format++;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
      continue;
 80030f4:	f000 bcb9 	b.w	8003a6a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3b20      	subs	r3, #32
 8003108:	2b10      	cmp	r3, #16
 800310a:	d857      	bhi.n	80031bc <_vsnprintf+0x10c>
 800310c:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <_vsnprintf+0x64>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003195 	.word	0x08003195
 8003118:	080031bd 	.word	0x080031bd
 800311c:	080031bd 	.word	0x080031bd
 8003120:	080031a9 	.word	0x080031a9
 8003124:	080031bd 	.word	0x080031bd
 8003128:	080031bd 	.word	0x080031bd
 800312c:	080031bd 	.word	0x080031bd
 8003130:	080031bd 	.word	0x080031bd
 8003134:	080031bd 	.word	0x080031bd
 8003138:	080031bd 	.word	0x080031bd
 800313c:	080031bd 	.word	0x080031bd
 8003140:	08003181 	.word	0x08003181
 8003144:	080031bd 	.word	0x080031bd
 8003148:	0800316d 	.word	0x0800316d
 800314c:	080031bd 	.word	0x080031bd
 8003150:	080031bd 	.word	0x080031bd
 8003154:	08003159 	.word	0x08003159
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3301      	adds	r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	2301      	movs	r3, #1
 8003168:	653b      	str	r3, [r7, #80]	@ 0x50
 800316a:	e02a      	b.n	80031c2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800316c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3301      	adds	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	2301      	movs	r3, #1
 800317c:	653b      	str	r3, [r7, #80]	@ 0x50
 800317e:	e020      	b.n	80031c2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	2301      	movs	r3, #1
 8003190:	653b      	str	r3, [r7, #80]	@ 0x50
 8003192:	e016      	b.n	80031c2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003196:	f043 0308 	orr.w	r3, r3, #8
 800319a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3301      	adds	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	2301      	movs	r3, #1
 80031a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a6:	e00c      	b.n	80031c2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80031a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031aa:	f043 0310 	orr.w	r3, r3, #16
 80031ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	2301      	movs	r3, #1
 80031b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ba:	e002      	b.n	80031c2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80031bc:	2300      	movs	r3, #0
 80031be:	653b      	str	r3, [r7, #80]	@ 0x50
 80031c0:	bf00      	nop
      }
    } while (n);
 80031c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d19c      	bne.n	8003102 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f850 	bl	8002276 <_is_digit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <_vsnprintf+0x13a>
      width = _atoi(&format);
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f85f 	bl	80022a4 <_atoi>
 80031e6:	65b8      	str	r0, [r7, #88]	@ 0x58
 80031e8:	e01a      	b.n	8003220 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f0:	d116      	bne.n	8003220 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80031f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031f6:	1d1a      	adds	r2, r3, #4
 80031f8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8003200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003202:	2b00      	cmp	r3, #0
 8003204:	da07      	bge.n	8003216 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	425b      	negs	r3, r3
 8003212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003214:	e001      	b.n	800321a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3301      	adds	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b2e      	cmp	r3, #46	@ 0x2e
 800322a:	d127      	bne.n	800327c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800322c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800322e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003232:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f819 	bl	8002276 <_is_digit>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f828 	bl	80022a4 <_atoi>
 8003254:	6578      	str	r0, [r7, #84]	@ 0x54
 8003256:	e011      	b.n	800327c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b2a      	cmp	r3, #42	@ 0x2a
 800325e:	d10d      	bne.n	800327c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003264:	1d1a      	adds	r2, r3, #4
 8003266:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003270:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003274:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3301      	adds	r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	3b68      	subs	r3, #104	@ 0x68
 8003282:	2b12      	cmp	r3, #18
 8003284:	d866      	bhi.n	8003354 <_vsnprintf+0x2a4>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <_vsnprintf+0x1dc>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032ff 	.word	0x080032ff
 8003290:	08003355 	.word	0x08003355
 8003294:	08003335 	.word	0x08003335
 8003298:	08003355 	.word	0x08003355
 800329c:	080032d9 	.word	0x080032d9
 80032a0:	08003355 	.word	0x08003355
 80032a4:	08003355 	.word	0x08003355
 80032a8:	08003355 	.word	0x08003355
 80032ac:	08003355 	.word	0x08003355
 80032b0:	08003355 	.word	0x08003355
 80032b4:	08003355 	.word	0x08003355
 80032b8:	08003355 	.word	0x08003355
 80032bc:	08003325 	.word	0x08003325
 80032c0:	08003355 	.word	0x08003355
 80032c4:	08003355 	.word	0x08003355
 80032c8:	08003355 	.word	0x08003355
 80032cc:	08003355 	.word	0x08003355
 80032d0:	08003355 	.word	0x08003355
 80032d4:	08003345 	.word	0x08003345
      case 'l' :
        flags |= FLAGS_LONG;
 80032d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032de:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80032ec:	d134      	bne.n	8003358 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80032ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
        }
        break;
 80032fc:	e02c      	b.n	8003358 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80032fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3301      	adds	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b68      	cmp	r3, #104	@ 0x68
 8003312:	d123      	bne.n	800335c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8003314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3301      	adds	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003322:	e01b      	b.n	800335c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
        break;
 8003332:	e014      	b.n	800335e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800333a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
        break;
 8003342:	e00c      	b.n	800335e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	3301      	adds	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
        break;
 8003352:	e004      	b.n	800335e <_vsnprintf+0x2ae>
      default :
        break;
 8003354:	bf00      	nop
 8003356:	e002      	b.n	800335e <_vsnprintf+0x2ae>
        break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <_vsnprintf+0x2ae>
        break;
 800335c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b67      	cmp	r3, #103	@ 0x67
 8003364:	f300 80b8 	bgt.w	80034d8 <_vsnprintf+0x428>
 8003368:	2b25      	cmp	r3, #37	@ 0x25
 800336a:	da27      	bge.n	80033bc <_vsnprintf+0x30c>
 800336c:	e370      	b.n	8003a50 <_vsnprintf+0x9a0>
 800336e:	bf00      	nop
 8003370:	080021fb 	.word	0x080021fb
 8003374:	3b69      	subs	r3, #105	@ 0x69
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	f249 0241 	movw	r2, #36929	@ 0x9041
 8003380:	401a      	ands	r2, r3
 8003382:	2a00      	cmp	r2, #0
 8003384:	bf14      	ite	ne
 8003386:	2201      	movne	r2, #1
 8003388:	2200      	moveq	r2, #0
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	2a00      	cmp	r2, #0
 800338e:	f040 80aa 	bne.w	80034e6 <_vsnprintf+0x436>
 8003392:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8003396:	2a00      	cmp	r2, #0
 8003398:	bf14      	ite	ne
 800339a:	2201      	movne	r2, #1
 800339c:	2200      	moveq	r2, #0
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	f040 82fb 	bne.w	800399c <_vsnprintf+0x8ec>
 80033a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 828d 	bne.w	80038d4 <_vsnprintf+0x824>
 80033ba:	e349      	b.n	8003a50 <_vsnprintf+0x9a0>
 80033bc:	3b25      	subs	r3, #37	@ 0x25
 80033be:	2b42      	cmp	r3, #66	@ 0x42
 80033c0:	f200 8346 	bhi.w	8003a50 <_vsnprintf+0x9a0>
 80033c4:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <_vsnprintf+0x31c>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003a39 	.word	0x08003a39
 80033d0:	08003a51 	.word	0x08003a51
 80033d4:	08003a51 	.word	0x08003a51
 80033d8:	08003a51 	.word	0x08003a51
 80033dc:	08003a51 	.word	0x08003a51
 80033e0:	08003a51 	.word	0x08003a51
 80033e4:	08003a51 	.word	0x08003a51
 80033e8:	08003a51 	.word	0x08003a51
 80033ec:	08003a51 	.word	0x08003a51
 80033f0:	08003a51 	.word	0x08003a51
 80033f4:	08003a51 	.word	0x08003a51
 80033f8:	08003a51 	.word	0x08003a51
 80033fc:	08003a51 	.word	0x08003a51
 8003400:	08003a51 	.word	0x08003a51
 8003404:	08003a51 	.word	0x08003a51
 8003408:	08003a51 	.word	0x08003a51
 800340c:	08003a51 	.word	0x08003a51
 8003410:	08003a51 	.word	0x08003a51
 8003414:	08003a51 	.word	0x08003a51
 8003418:	08003a51 	.word	0x08003a51
 800341c:	08003a51 	.word	0x08003a51
 8003420:	08003a51 	.word	0x08003a51
 8003424:	08003a51 	.word	0x08003a51
 8003428:	08003a51 	.word	0x08003a51
 800342c:	08003a51 	.word	0x08003a51
 8003430:	08003a51 	.word	0x08003a51
 8003434:	08003a51 	.word	0x08003a51
 8003438:	08003a51 	.word	0x08003a51
 800343c:	08003a51 	.word	0x08003a51
 8003440:	08003a51 	.word	0x08003a51
 8003444:	08003a51 	.word	0x08003a51
 8003448:	08003a51 	.word	0x08003a51
 800344c:	080037ed 	.word	0x080037ed
 8003450:	0800379d 	.word	0x0800379d
 8003454:	080037ed 	.word	0x080037ed
 8003458:	08003a51 	.word	0x08003a51
 800345c:	08003a51 	.word	0x08003a51
 8003460:	08003a51 	.word	0x08003a51
 8003464:	08003a51 	.word	0x08003a51
 8003468:	08003a51 	.word	0x08003a51
 800346c:	08003a51 	.word	0x08003a51
 8003470:	08003a51 	.word	0x08003a51
 8003474:	08003a51 	.word	0x08003a51
 8003478:	08003a51 	.word	0x08003a51
 800347c:	08003a51 	.word	0x08003a51
 8003480:	08003a51 	.word	0x08003a51
 8003484:	08003a51 	.word	0x08003a51
 8003488:	08003a51 	.word	0x08003a51
 800348c:	08003a51 	.word	0x08003a51
 8003490:	08003a51 	.word	0x08003a51
 8003494:	08003a51 	.word	0x08003a51
 8003498:	080034e7 	.word	0x080034e7
 800349c:	08003a51 	.word	0x08003a51
 80034a0:	08003a51 	.word	0x08003a51
 80034a4:	08003a51 	.word	0x08003a51
 80034a8:	08003a51 	.word	0x08003a51
 80034ac:	08003a51 	.word	0x08003a51
 80034b0:	08003a51 	.word	0x08003a51
 80034b4:	08003a51 	.word	0x08003a51
 80034b8:	08003a51 	.word	0x08003a51
 80034bc:	08003a51 	.word	0x08003a51
 80034c0:	080034e7 	.word	0x080034e7
 80034c4:	0800385d 	.word	0x0800385d
 80034c8:	080034e7 	.word	0x080034e7
 80034cc:	080037ed 	.word	0x080037ed
 80034d0:	0800379d 	.word	0x0800379d
 80034d4:	080037ed 	.word	0x080037ed
 80034d8:	2b78      	cmp	r3, #120	@ 0x78
 80034da:	f300 82b9 	bgt.w	8003a50 <_vsnprintf+0x9a0>
 80034de:	2b69      	cmp	r3, #105	@ 0x69
 80034e0:	f6bf af48 	bge.w	8003374 <_vsnprintf+0x2c4>
 80034e4:	e2b4      	b.n	8003a50 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b78      	cmp	r3, #120	@ 0x78
 80034ec:	d003      	beq.n	80034f6 <_vsnprintf+0x446>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b58      	cmp	r3, #88	@ 0x58
 80034f4:	d102      	bne.n	80034fc <_vsnprintf+0x44c>
          base = 16U;
 80034f6:	2310      	movs	r3, #16
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	e013      	b.n	8003524 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b6f      	cmp	r3, #111	@ 0x6f
 8003502:	d102      	bne.n	800350a <_vsnprintf+0x45a>
          base =  8U;
 8003504:	2308      	movs	r3, #8
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003508:	e00c      	b.n	8003524 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b62      	cmp	r3, #98	@ 0x62
 8003510:	d102      	bne.n	8003518 <_vsnprintf+0x468>
          base =  2U;
 8003512:	2302      	movs	r3, #2
 8003514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003516:	e005      	b.n	8003524 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8003518:	230a      	movs	r3, #10
 800351a:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800351c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b58      	cmp	r3, #88	@ 0x58
 800352a:	d103      	bne.n	8003534 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800352c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b69      	cmp	r3, #105	@ 0x69
 800353a:	d007      	beq.n	800354c <_vsnprintf+0x49c>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b64      	cmp	r3, #100	@ 0x64
 8003542:	d003      	beq.n	800354c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003546:	f023 030c 	bic.w	r3, r3, #12
 800354a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800354c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8003556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b69      	cmp	r3, #105	@ 0x69
 8003564:	d004      	beq.n	8003570 <_vsnprintf+0x4c0>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b64      	cmp	r3, #100	@ 0x64
 800356c:	f040 8098 	bne.w	80036a0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	2b00      	cmp	r3, #0
 8003578:	d031      	beq.n	80035de <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800357a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800357e:	3307      	adds	r3, #7
 8003580:	f023 0307 	bic.w	r3, r3, #7
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	da06      	bge.n	80035aa <_vsnprintf+0x4fa>
 800359c:	2100      	movs	r1, #0
 800359e:	f1d2 0800 	rsbs	r8, r2, #0
 80035a2:	eb61 0903 	sbc.w	r9, r1, r3
 80035a6:	4642      	mov	r2, r8
 80035a8:	464b      	mov	r3, r9
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	0fc9      	lsrs	r1, r1, #31
 80035ae:	b2c9      	uxtb	r1, r1
 80035b0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80035b2:	2400      	movs	r4, #0
 80035b4:	4682      	mov	sl, r0
 80035b6:	46a3      	mov	fp, r4
 80035b8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80035ba:	9008      	str	r0, [sp, #32]
 80035bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80035be:	9007      	str	r0, [sp, #28]
 80035c0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80035c2:	9006      	str	r0, [sp, #24]
 80035c4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80035c8:	9102      	str	r1, [sp, #8]
 80035ca:	e9cd 2300 	strd	r2, r3, [sp]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d2:	6939      	ldr	r1, [r7, #16]
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff f81b 	bl	8002610 <_ntoa_long_long>
 80035da:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80035dc:	e0da      	b.n	8003794 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80035de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80035e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035ec:	1d1a      	adds	r2, r3, #4
 80035ee:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bfb8      	it	lt
 80035fc:	425b      	neglt	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	0fdb      	lsrs	r3, r3, #31
 8003604:	b2db      	uxtb	r3, r3
 8003606:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003608:	9205      	str	r2, [sp, #20]
 800360a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800360c:	9204      	str	r2, [sp, #16]
 800360e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003610:	9203      	str	r2, [sp, #12]
 8003612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003614:	9202      	str	r2, [sp, #8]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	9100      	str	r1, [sp, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800361e:	6939      	ldr	r1, [r7, #16]
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fe ff8f 	bl	8002544 <_ntoa_long>
 8003626:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003628:	e0b4      	b.n	8003794 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800362a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <_vsnprintf+0x594>
 8003634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e012      	b.n	800366a <_vsnprintf+0x5ba>
 8003644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <_vsnprintf+0x5ae>
 800364e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003652:	1d1a      	adds	r2, r3, #4
 8003654:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b21b      	sxth	r3, r3
 800365c:	e005      	b.n	800366a <_vsnprintf+0x5ba>
 800365e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	bfb8      	it	lt
 8003672:	425b      	neglt	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	0fdb      	lsrs	r3, r3, #31
 800367a:	b2db      	uxtb	r3, r3
 800367c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800367e:	9205      	str	r2, [sp, #20]
 8003680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003682:	9204      	str	r2, [sp, #16]
 8003684:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003686:	9203      	str	r2, [sp, #12]
 8003688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800368a:	9202      	str	r2, [sp, #8]
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	9100      	str	r1, [sp, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003694:	6939      	ldr	r1, [r7, #16]
 8003696:	6978      	ldr	r0, [r7, #20]
 8003698:	f7fe ff54 	bl	8002544 <_ntoa_long>
 800369c:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800369e:	e079      	b.n	8003794 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80036a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d022      	beq.n	80036f0 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80036aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ae:	3307      	adds	r3, #7
 80036b0:	f023 0307 	bic.w	r3, r3, #7
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036c2:	2000      	movs	r0, #0
 80036c4:	460d      	mov	r5, r1
 80036c6:	4606      	mov	r6, r0
 80036c8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80036ca:	9108      	str	r1, [sp, #32]
 80036cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80036ce:	9107      	str	r1, [sp, #28]
 80036d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036d2:	9106      	str	r1, [sp, #24]
 80036d4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80036d8:	2100      	movs	r1, #0
 80036da:	9102      	str	r1, [sp, #8]
 80036dc:	e9cd 2300 	strd	r2, r3, [sp]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7fe ff92 	bl	8002610 <_ntoa_long_long>
 80036ec:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80036ee:	e051      	b.n	8003794 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80036f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d018      	beq.n	800372c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80036fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003708:	9205      	str	r2, [sp, #20]
 800370a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800370c:	9204      	str	r2, [sp, #16]
 800370e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003710:	9203      	str	r2, [sp, #12]
 8003712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003714:	9202      	str	r2, [sp, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	9201      	str	r2, [sp, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003720:	6939      	ldr	r1, [r7, #16]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7fe ff0e 	bl	8002544 <_ntoa_long>
 8003728:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800372a:	e033      	b.n	8003794 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800372c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <_vsnprintf+0x696>
 8003736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e012      	b.n	800376c <_vsnprintf+0x6bc>
 8003746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <_vsnprintf+0x6b0>
 8003750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	e005      	b.n	800376c <_vsnprintf+0x6bc>
 8003760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800376e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003770:	9305      	str	r3, [sp, #20]
 8003772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	9303      	str	r3, [sp, #12]
 800377a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	2300      	movs	r3, #0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800378a:	6939      	ldr	r1, [r7, #16]
 800378c:	6978      	ldr	r0, [r7, #20]
 800378e:	f7fe fed9 	bl	8002544 <_ntoa_long>
 8003792:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3301      	adds	r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
        break;
 800379a:	e166      	b.n	8003a6a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b46      	cmp	r3, #70	@ 0x46
 80037a2:	d103      	bne.n	80037ac <_vsnprintf+0x6fc>
 80037a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80037ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b0:	3307      	adds	r3, #7
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	f103 0208 	add.w	r2, r3, #8
 80037ba:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037be:	ed93 7b00 	vldr	d7, [r3]
 80037c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	eeb0 0a47 	vmov.f32	s0, s14
 80037d2:	eef0 0a67 	vmov.f32	s1, s15
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037da:	6939      	ldr	r1, [r7, #16]
 80037dc:	6978      	ldr	r0, [r7, #20]
 80037de:	f7fe ff87 	bl	80026f0 <_ftoa>
 80037e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
        break;
 80037ea:	e13e      	b.n	8003a6a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b67      	cmp	r3, #103	@ 0x67
 80037f2:	d003      	beq.n	80037fc <_vsnprintf+0x74c>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b47      	cmp	r3, #71	@ 0x47
 80037fa:	d103      	bne.n	8003804 <_vsnprintf+0x754>
 80037fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003802:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b45      	cmp	r3, #69	@ 0x45
 800380a:	d003      	beq.n	8003814 <_vsnprintf+0x764>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b47      	cmp	r3, #71	@ 0x47
 8003812:	d103      	bne.n	800381c <_vsnprintf+0x76c>
 8003814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800381c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003820:	3307      	adds	r3, #7
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	f103 0208 	add.w	r2, r3, #8
 800382a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800382e:	ed93 7b00 	vldr	d7, [r3]
 8003832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003834:	9302      	str	r3, [sp, #8]
 8003836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	eeb0 0a47 	vmov.f32	s0, s14
 8003842:	eef0 0a67 	vmov.f32	s1, s15
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff f9a7 	bl	8002ba0 <_etoa>
 8003852:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3301      	adds	r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
        break;
 800385a:	e106      	b.n	8003a6a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800385c:	2301      	movs	r3, #1
 800385e:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <_vsnprintf+0x7d8>
          while (l++ < width) {
 800386a:	e007      	b.n	800387c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 800386c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800386e:	1c53      	adds	r3, r2, #1
 8003870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003872:	697c      	ldr	r4, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6939      	ldr	r1, [r7, #16]
 8003878:	2020      	movs	r0, #32
 800387a:	47a0      	blx	r4
          while (l++ < width) {
 800387c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	647a      	str	r2, [r7, #68]	@ 0x44
 8003882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003884:	429a      	cmp	r2, r3
 8003886:	d8f1      	bhi.n	800386c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388c:	1d1a      	adds	r2, r3, #4
 800388e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	b2d8      	uxtb	r0, r3
 8003896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003898:	1c53      	adds	r3, r2, #1
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	697c      	ldr	r4, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6939      	ldr	r1, [r7, #16]
 80038a2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80038a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00e      	beq.n	80038cc <_vsnprintf+0x81c>
          while (l++ < width) {
 80038ae:	e007      	b.n	80038c0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80038b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038b2:	1c53      	adds	r3, r2, #1
 80038b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b6:	697c      	ldr	r4, [r7, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6939      	ldr	r1, [r7, #16]
 80038bc:	2020      	movs	r0, #32
 80038be:	47a0      	blx	r4
          while (l++ < width) {
 80038c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80038c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d8f1      	bhi.n	80038b0 <_vsnprintf+0x800>
          }
        }
        format++;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
        break;
 80038d2:	e0ca      	b.n	8003a6a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80038d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d8:	1d1a      	adds	r2, r3, #4
 80038da:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <_vsnprintf+0x83c>
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	e001      	b.n	80038f0 <_vsnprintf+0x840>
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038f0:	4619      	mov	r1, r3
 80038f2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80038f4:	f7fe fca2 	bl	800223c <_strnlen_s>
 80038f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80038fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8003904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	4293      	cmp	r3, r2
 800390a:	bf28      	it	cs
 800390c:	4613      	movcs	r3, r2
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <_vsnprintf+0x8a0>
          while (l++ < width) {
 800391a:	e007      	b.n	800392c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 800391c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391e:	1c53      	adds	r3, r2, #1
 8003920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003922:	697c      	ldr	r4, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	2020      	movs	r0, #32
 800392a:	47a0      	blx	r4
          while (l++ < width) {
 800392c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003934:	429a      	cmp	r2, r3
 8003936:	d8f1      	bhi.n	800391c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003938:	e00a      	b.n	8003950 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 800393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003940:	7818      	ldrb	r0, [r3, #0]
 8003942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003944:	1c53      	adds	r3, r2, #1
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003948:	697c      	ldr	r4, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6939      	ldr	r1, [r7, #16]
 800394e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <_vsnprintf+0x8bc>
 8003958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0eb      	beq.n	800393a <_vsnprintf+0x88a>
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	657a      	str	r2, [r7, #84]	@ 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003976:	e007      	b.n	8003988 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800397a:	1c53      	adds	r3, r2, #1
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397e:	697c      	ldr	r4, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6939      	ldr	r1, [r7, #16]
 8003984:	2020      	movs	r0, #32
 8003986:	47a0      	blx	r4
          while (l++ < width) {
 8003988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800398e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003990:	429a      	cmp	r2, r3
 8003992:	d8f1      	bhi.n	8003978 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3301      	adds	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
        break;
 800399a:	e066      	b.n	8003a6a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800399c:	2308      	movs	r3, #8
 800399e:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80039a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a2:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80039a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 80039ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d023      	beq.n	80039fe <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80039b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	603a      	str	r2, [r7, #0]
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039cc:	9308      	str	r3, [sp, #32]
 80039ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d0:	9307      	str	r3, [sp, #28]
 80039d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d4:	9306      	str	r3, [sp, #24]
 80039d6:	f04f 0210 	mov.w	r2, #16
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039ea:	e9cd 3400 	strd	r3, r4, [sp]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f7fe fe0b 	bl	8002610 <_ntoa_long_long>
 80039fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80039fc:	e018      	b.n	8003a30 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80039fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0e:	9305      	str	r3, [sp, #20]
 8003a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	2310      	movs	r3, #16
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	9200      	str	r2, [sp, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a26:	6939      	ldr	r1, [r7, #16]
 8003a28:	6978      	ldr	r0, [r7, #20]
 8003a2a:	f7fe fd8b 	bl	8002544 <_ntoa_long>
 8003a2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
        break;
 8003a36:	e018      	b.n	8003a6a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a3a:	1c53      	adds	r3, r2, #1
 8003a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3e:	697c      	ldr	r4, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	2025      	movs	r0, #37	@ 0x25
 8003a46:	47a0      	blx	r4
        format++;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
        break;
 8003a4e:	e00c      	b.n	8003a6a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	7818      	ldrb	r0, [r3, #0]
 8003a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a56:	1c53      	adds	r3, r2, #1
 8003a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a5a:	697c      	ldr	r4, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6939      	ldr	r1, [r7, #16]
 8003a60:	47a0      	blx	r4
        format++;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
        break;
 8003a68:	bf00      	nop
  while (*format)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f47f ab30 	bne.w	80030d4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003a74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <_vsnprintf+0x9d2>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	e000      	b.n	8003a84 <_vsnprintf+0x9d4>
 8003a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a84:	697c      	ldr	r4, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3764      	adds	r7, #100	@ 0x64
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop

08003a9c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003a9c:	b40f      	push	{r0, r1, r2, r3}
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003aaa:	1d39      	adds	r1, r7, #4
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ab6:	4806      	ldr	r0, [pc, #24]	@ (8003ad0 <printf_+0x34>)
 8003ab8:	f7ff fafa 	bl	80030b0 <_vsnprintf>
 8003abc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aca:	b004      	add	sp, #16
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	08002217 	.word	0x08002217

08003ad4 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8003ad4:	b40e      	push	{r1, r2, r3}
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af02      	add	r7, sp, #8
 8003adc:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003ade:	f107 0320 	add.w	r3, r7, #32
 8003ae2:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <sprintf_+0x34>)
 8003af2:	f7ff fadd 	bl	80030b0 <_vsnprintf>
 8003af6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003af8:	68fb      	ldr	r3, [r7, #12]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b04:	b003      	add	sp, #12
 8003b06:	4770      	bx	lr
 8003b08:	080021cd 	.word	0x080021cd

08003b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b16:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <HAL_MspInit+0x4c>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b42:	2200      	movs	r2, #0
 8003b44:	210f      	movs	r1, #15
 8003b46:	f06f 0001 	mvn.w	r0, #1
 8003b4a:	f000 fb21 	bl	8004190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	@ 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c24 <HAL_InitTick+0xc8>)
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <HAL_InitTick+0xc8>)
 8003b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b76:	4b2b      	ldr	r3, [pc, #172]	@ (8003c24 <HAL_InitTick+0xc8>)
 8003b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b82:	f107 020c 	add.w	r2, r7, #12
 8003b86:	f107 0310 	add.w	r3, r7, #16
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f002 f92d 	bl	8005dec <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b92:	f002 f915 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8003b96:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	4a23      	ldr	r2, [pc, #140]	@ (8003c28 <HAL_InitTick+0xcc>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003ba6:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003ba8:	4a21      	ldr	r2, [pc, #132]	@ (8003c30 <HAL_InitTick+0xd4>)
 8003baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003bac:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bb2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003bba:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc6:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8003bcc:	4817      	ldr	r0, [pc, #92]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003bce:	f002 fe5b 	bl	8006888 <HAL_TIM_Base_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11b      	bne.n	8003c18 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003be0:	4812      	ldr	r0, [pc, #72]	@ (8003c2c <HAL_InitTick+0xd0>)
 8003be2:	f002 feb3 	bl	800694c <HAL_TIM_Base_Start_IT>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003bec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d111      	bne.n	8003c18 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003bf4:	201a      	movs	r0, #26
 8003bf6:	f000 fae7 	bl	80041c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d808      	bhi.n	8003c12 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	201a      	movs	r0, #26
 8003c06:	f000 fac3 	bl	8004190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <HAL_InitTick+0xd8>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e002      	b.n	8003c18 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3730      	adds	r7, #48	@ 0x30
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	431bde83 	.word	0x431bde83
 8003c2c:	20000678 	.word	0x20000678
 8003c30:	40014800 	.word	0x40014800
 8003c34:	20000008 	.word	0x20000008

08003c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <NMI_Handler+0x4>

08003c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <HardFault_Handler+0x4>

08003c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <MemManage_Handler+0x4>

08003c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <BusFault_Handler+0x4>

08003c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <UsageFault_Handler+0x4>

08003c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c74:	4802      	ldr	r0, [pc, #8]	@ (8003c80 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003c76:	f002 fed9 	bl	8006a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000678 	.word	0x20000678

08003c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return 1;
 8003c88:	2301      	movs	r3, #1
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_kill>:

int _kill(int pid, int sig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c9e:	f008 fbb3 	bl	800c408 <__errno>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2216      	movs	r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_exit>:

void _exit (int status)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffe7 	bl	8003c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <_exit+0x12>

08003cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e00a      	b.n	8003cf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	60ba      	str	r2, [r7, #8]
 8003ce8:	b2ca      	uxtb	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	dbf0      	blt.n	8003cdc <_read+0x12>
  }

  return len;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e009      	b.n	8003d2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	60ba      	str	r2, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3301      	adds	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	dbf1      	blt.n	8003d16 <_write+0x12>
  }
  return len;
 8003d32:	687b      	ldr	r3, [r7, #4]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_close>:

int _close(int file)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d64:	605a      	str	r2, [r3, #4]
  return 0;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_isatty>:

int _isatty(int file)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d7c:	2301      	movs	r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dac:	4a14      	ldr	r2, [pc, #80]	@ (8003e00 <_sbrk+0x5c>)
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <_sbrk+0x60>)
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db8:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <_sbrk+0x64>)
 8003dc2:	4a12      	ldr	r2, [pc, #72]	@ (8003e0c <_sbrk+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d207      	bcs.n	8003de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd4:	f008 fb18 	bl	800c408 <__errno>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	220c      	movs	r2, #12
 8003ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003de2:	e009      	b.n	8003df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de4:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	4a05      	ldr	r2, [pc, #20]	@ (8003e08 <_sbrk+0x64>)
 8003df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20018000 	.word	0x20018000
 8003e04:	00000400 	.word	0x00000400
 8003e08:	200006c4 	.word	0x200006c4
 8003e0c:	200021a8 	.word	0x200021a8

08003e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <SystemInit+0x20>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	4a05      	ldr	r2, [pc, #20]	@ (8003e30 <SystemInit+0x20>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e38:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e3a:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <MX_USART2_UART_Init+0x5c>)
 8003e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e46:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e52:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e64:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e6a:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e76:	4805      	ldr	r0, [pc, #20]	@ (8003e8c <MX_USART2_UART_Init+0x58>)
 8003e78:	f002 ffcc 	bl	8006e14 <HAL_UART_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e82:	f7fe f99d 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200006c8 	.word	0x200006c8
 8003e90:	40004400 	.word	0x40004400

08003e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0ac      	sub	sp, #176	@ 0xb0
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2288      	movs	r2, #136	@ 0x88
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f008 fa54 	bl	800c362 <memset>
  if(uartHandle->Instance==USART2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <HAL_UART_MspInit+0xb0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d13b      	bne.n	8003f3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f002 f81d 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003edc:	f7fe f970 	bl	80021c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eec:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef8:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efc:	4a12      	ldr	r2, [pc, #72]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f04:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <HAL_UART_MspInit+0xb4>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f10:	230c      	movs	r3, #12
 8003f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f28:	2307      	movs	r3, #7
 8003f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f32:	4619      	mov	r1, r3
 8003f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f38:	f000 f954 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	37b0      	adds	r7, #176	@ 0xb0
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40004400 	.word	0x40004400
 8003f48:	40021000 	.word	0x40021000

08003f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f50:	f7ff ff5e 	bl	8003e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f54:	480c      	ldr	r0, [pc, #48]	@ (8003f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f56:	490d      	ldr	r1, [pc, #52]	@ (8003f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <LoopForever+0xe>)
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f5c:	e002      	b.n	8003f64 <LoopCopyDataInit>

08003f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f62:	3304      	adds	r3, #4

08003f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f68:	d3f9      	bcc.n	8003f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f98 <LoopForever+0x16>)
  movs r3, #0
 8003f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f70:	e001      	b.n	8003f76 <LoopFillZerobss>

08003f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f74:	3204      	adds	r2, #4

08003f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f78:	d3fb      	bcc.n	8003f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7a:	f008 fa4b 	bl	800c414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f7e:	f7fe f8a7 	bl	80020d0 <main>

08003f82 <LoopForever>:

LoopForever:
    b LoopForever
 8003f82:	e7fe      	b.n	8003f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003f90:	0800e988 	.word	0x0800e988
  ldr r2, =_sbss
 8003f94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003f98:	200021a8 	.word	0x200021a8

08003f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f9c:	e7fe      	b.n	8003f9c <ADC1_2_IRQHandler>
	...

08003fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <HAL_Init+0x3c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a0b      	ldr	r2, [pc, #44]	@ (8003fdc <HAL_Init+0x3c>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb6:	2003      	movs	r0, #3
 8003fb8:	f000 f8df 	bl	800417a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fbc:	200f      	movs	r0, #15
 8003fbe:	f7ff fdcd 	bl	8003b5c <HAL_InitTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	71fb      	strb	r3, [r7, #7]
 8003fcc:	e001      	b.n	8003fd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fce:	f7ff fd9d 	bl	8003b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_IncTick+0x20>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_IncTick+0x24>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a04      	ldr	r2, [pc, #16]	@ (8004004 <HAL_IncTick+0x24>)
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000000c 	.word	0x2000000c
 8004004:	20000750 	.word	0x20000750

08004008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return uwTick;
 800400c:	4b03      	ldr	r3, [pc, #12]	@ (800401c <HAL_GetTick+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000750 	.word	0x20000750

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db0b      	blt.n	80040ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	4907      	ldr	r1, [pc, #28]	@ (80040bc <__NVIC_EnableIRQ+0x38>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2001      	movs	r0, #1
 80040a6:	fa00 f202 	lsl.w	r2, r0, r2
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0a      	blt.n	80040ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	490c      	ldr	r1, [pc, #48]	@ (800410c <__NVIC_SetPriority+0x4c>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e8:	e00a      	b.n	8004100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4908      	ldr	r1, [pc, #32]	@ (8004110 <__NVIC_SetPriority+0x50>)
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	3b04      	subs	r3, #4
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	761a      	strb	r2, [r3, #24]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000e100 	.word	0xe000e100
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	@ 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f1c3 0307 	rsb	r3, r3, #7
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf28      	it	cs
 8004132:	2304      	movcs	r3, #4
 8004134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3304      	adds	r3, #4
 800413a:	2b06      	cmp	r3, #6
 800413c:	d902      	bls.n	8004144 <NVIC_EncodePriority+0x30>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3b03      	subs	r3, #3
 8004142:	e000      	b.n	8004146 <NVIC_EncodePriority+0x32>
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	401a      	ands	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800415c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	43d9      	mvns	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	4313      	orrs	r3, r2
         );
}
 800416e:	4618      	mov	r0, r3
 8004170:	3724      	adds	r7, #36	@ 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ff4c 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041a2:	f7ff ff61 	bl	8004068 <__NVIC_GetPriorityGrouping>
 80041a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	6978      	ldr	r0, [r7, #20]
 80041ae:	f7ff ffb1 	bl	8004114 <NVIC_EncodePriority>
 80041b2:	4602      	mov	r2, r0
 80041b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ff80 	bl	80040c0 <__NVIC_SetPriority>
}
 80041c0:	bf00      	nop
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff54 	bl	8004084 <__NVIC_EnableIRQ>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041f2:	e17f      	b.n	80044f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8171 	beq.w	80044ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d005      	beq.n	8004224 <HAL_GPIO_Init+0x40>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d130      	bne.n	8004286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800425a:	2201      	movs	r2, #1
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0201 	and.w	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d118      	bne.n	80042c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004298:	2201      	movs	r2, #1
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0201 	and.w	r2, r3, #1
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d017      	beq.n	8004300 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2203      	movs	r2, #3
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d123      	bne.n	8004354 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	08da      	lsrs	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3208      	adds	r2, #8
 8004314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	220f      	movs	r2, #15
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	08da      	lsrs	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3208      	adds	r2, #8
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0203 	and.w	r2, r3, #3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80ac 	beq.w	80044ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	4b5f      	ldr	r3, [pc, #380]	@ (8004514 <HAL_GPIO_Init+0x330>)
 8004398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439a:	4a5e      	ldr	r2, [pc, #376]	@ (8004514 <HAL_GPIO_Init+0x330>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80043a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004514 <HAL_GPIO_Init+0x330>)
 80043a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004518 <HAL_GPIO_Init+0x334>)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043d8:	d025      	beq.n	8004426 <HAL_GPIO_Init+0x242>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4f      	ldr	r2, [pc, #316]	@ (800451c <HAL_GPIO_Init+0x338>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01f      	beq.n	8004422 <HAL_GPIO_Init+0x23e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004520 <HAL_GPIO_Init+0x33c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d019      	beq.n	800441e <HAL_GPIO_Init+0x23a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004524 <HAL_GPIO_Init+0x340>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_GPIO_Init+0x236>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004528 <HAL_GPIO_Init+0x344>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00d      	beq.n	8004416 <HAL_GPIO_Init+0x232>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4b      	ldr	r2, [pc, #300]	@ (800452c <HAL_GPIO_Init+0x348>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0x22e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4a      	ldr	r2, [pc, #296]	@ (8004530 <HAL_GPIO_Init+0x34c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_GPIO_Init+0x22a>
 800440a:	2306      	movs	r3, #6
 800440c:	e00c      	b.n	8004428 <HAL_GPIO_Init+0x244>
 800440e:	2307      	movs	r3, #7
 8004410:	e00a      	b.n	8004428 <HAL_GPIO_Init+0x244>
 8004412:	2305      	movs	r3, #5
 8004414:	e008      	b.n	8004428 <HAL_GPIO_Init+0x244>
 8004416:	2304      	movs	r3, #4
 8004418:	e006      	b.n	8004428 <HAL_GPIO_Init+0x244>
 800441a:	2303      	movs	r3, #3
 800441c:	e004      	b.n	8004428 <HAL_GPIO_Init+0x244>
 800441e:	2302      	movs	r3, #2
 8004420:	e002      	b.n	8004428 <HAL_GPIO_Init+0x244>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_GPIO_Init+0x244>
 8004426:	2300      	movs	r3, #0
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	f002 0203 	and.w	r2, r2, #3
 800442e:	0092      	lsls	r2, r2, #2
 8004430:	4093      	lsls	r3, r2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004438:	4937      	ldr	r1, [pc, #220]	@ (8004518 <HAL_GPIO_Init+0x334>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004446:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <HAL_GPIO_Init+0x350>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800446a:	4a32      	ldr	r2, [pc, #200]	@ (8004534 <HAL_GPIO_Init+0x350>)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004470:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <HAL_GPIO_Init+0x350>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004494:	4a27      	ldr	r2, [pc, #156]	@ (8004534 <HAL_GPIO_Init+0x350>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800449a:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <HAL_GPIO_Init+0x350>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044be:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <HAL_GPIO_Init+0x350>)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <HAL_GPIO_Init+0x350>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044e8:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <HAL_GPIO_Init+0x350>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3301      	adds	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f47f ae78 	bne.w	80041f4 <HAL_GPIO_Init+0x10>
  }
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	40010000 	.word	0x40010000
 800451c:	48000400 	.word	0x48000400
 8004520:	48000800 	.word	0x48000800
 8004524:	48000c00 	.word	0x48000c00
 8004528:	48001000 	.word	0x48001000
 800452c:	48001400 	.word	0x48001400
 8004530:	48001800 	.word	0x48001800
 8004534:	40010400 	.word	0x40010400

08004538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
 8004544:	4613      	mov	r3, r2
 8004546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004548:	787b      	ldrb	r3, [r7, #1]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004554:	e002      	b.n	800455c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4013      	ands	r3, r2
 8004580:	041a      	lsls	r2, r3, #16
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	43d9      	mvns	r1, r3
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	400b      	ands	r3, r1
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e08d      	b.n	80046ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fd26 	bl	8002014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	@ 0x24
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	e006      	b.n	8004624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d108      	bne.n	800463e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	e007      	b.n	800464e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800464c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800465c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	817b      	strh	r3, [r7, #10]
 80046e6:	460b      	mov	r3, r1
 80046e8:	813b      	strh	r3, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f040 80f9 	bne.w	80048ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_I2C_Mem_Write+0x34>
 8004702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0ed      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_I2C_Mem_Write+0x4e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0e6      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800472a:	f7ff fc6d 	bl	8004008 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2319      	movs	r3, #25
 8004736:	2201      	movs	r2, #1
 8004738:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fac3 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0d1      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2221      	movs	r2, #33	@ 0x21
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	@ 0x40
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004774:	88f8      	ldrh	r0, [r7, #6]
 8004776:	893a      	ldrh	r2, [r7, #8]
 8004778:	8979      	ldrh	r1, [r7, #10]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4603      	mov	r3, r0
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f9d3 	bl	8004b30 <I2C_RequestMemoryWrite>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0a9      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2bff      	cmp	r3, #255	@ 0xff
 80047a4:	d90e      	bls.n	80047c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	2300      	movs	r3, #0
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fc47 	bl	8005050 <I2C_TransferConfig>
 80047c2:	e00f      	b.n	80047e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	8979      	ldrh	r1, [r7, #10]
 80047d6:	2300      	movs	r3, #0
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fc36 	bl	8005050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fac6 	bl	8004d7a <I2C_WaitOnTXISFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e07b      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d034      	beq.n	800489c <HAL_I2C_Mem_Write+0x1c8>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d130      	bne.n	800489c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	2200      	movs	r2, #0
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fa3f 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e04d      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2bff      	cmp	r3, #255	@ 0xff
 800485c:	d90e      	bls.n	800487c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	22ff      	movs	r2, #255	@ 0xff
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	b2da      	uxtb	r2, r3
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	2300      	movs	r3, #0
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fbeb 	bl	8005050 <I2C_TransferConfig>
 800487a:	e00f      	b.n	800489c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fbda 	bl	8005050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d19e      	bne.n	80047e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 faac 	bl	8004e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e01a      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2220      	movs	r2, #32
 80048c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <HAL_I2C_Mem_Write+0x224>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	817b      	strh	r3, [r7, #10]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b20      	cmp	r3, #32
 8004920:	f040 80fd 	bne.w	8004b1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_I2C_Mem_Read+0x34>
 800492a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0f1      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_I2C_Mem_Read+0x4e>
 8004946:	2302      	movs	r3, #2
 8004948:	e0ea      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004952:	f7ff fb59 	bl	8004008 <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2319      	movs	r3, #25
 800495e:	2201      	movs	r2, #1
 8004960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f9af 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0d5      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2222      	movs	r2, #34	@ 0x22
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2240      	movs	r2, #64	@ 0x40
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499c:	88f8      	ldrh	r0, [r7, #6]
 800499e:	893a      	ldrh	r2, [r7, #8]
 80049a0:	8979      	ldrh	r1, [r7, #10]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4603      	mov	r3, r0
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f913 	bl	8004bd8 <I2C_RequestMemoryRead>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0ad      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2bff      	cmp	r3, #255	@ 0xff
 80049cc:	d90e      	bls.n	80049ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	8979      	ldrh	r1, [r7, #10]
 80049dc:	4b52      	ldr	r3, [pc, #328]	@ (8004b28 <HAL_I2C_Mem_Read+0x22c>)
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fb33 	bl	8005050 <I2C_TransferConfig>
 80049ea:	e00f      	b.n	8004a0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	8979      	ldrh	r1, [r7, #10]
 80049fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004b28 <HAL_I2C_Mem_Read+0x22c>)
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fb22 	bl	8005050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	2200      	movs	r2, #0
 8004a14:	2104      	movs	r1, #4
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f956 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07c      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d034      	beq.n	8004acc <HAL_I2C_Mem_Read+0x1d0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d130      	bne.n	8004acc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	@ 0x80
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f927 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e04d      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2bff      	cmp	r3, #255	@ 0xff
 8004a8c:	d90e      	bls.n	8004aac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	8979      	ldrh	r1, [r7, #10]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fad3 	bl	8005050 <I2C_TransferConfig>
 8004aaa:	e00f      	b.n	8004acc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	8979      	ldrh	r1, [r7, #10]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fac2 	bl	8005050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d19a      	bne.n	8004a0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f994 	bl	8004e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e01a      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2220      	movs	r2, #32
 8004af0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_I2C_Mem_Read+0x230>)
 8004afe:	400b      	ands	r3, r1
 8004b00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e000      	b.n	8004b20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b1e:	2302      	movs	r3, #2
  }
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	80002400 	.word	0x80002400
 8004b2c:	fe00e800 	.word	0xfe00e800

08004b30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	817b      	strh	r3, [r7, #10]
 8004b42:	460b      	mov	r3, r1
 8004b44:	813b      	strh	r3, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <I2C_RequestMemoryWrite+0xa4>)
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa79 	bl	8005050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	69b9      	ldr	r1, [r7, #24]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f909 	bl	8004d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e02c      	b.n	8004bcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b82:	e015      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	69b9      	ldr	r1, [r7, #24]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f8ef 	bl	8004d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e012      	b.n	8004bcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2180      	movs	r1, #128	@ 0x80
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f884 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	80002000 	.word	0x80002000

08004bd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	817b      	strh	r3, [r7, #10]
 8004bea:	460b      	mov	r3, r1
 8004bec:	813b      	strh	r3, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	8979      	ldrh	r1, [r7, #10]
 8004bf8:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <I2C_RequestMemoryRead+0xa4>)
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa26 	bl	8005050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	69b9      	ldr	r1, [r7, #24]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8b6 	bl	8004d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e02c      	b.n	8004c72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1e:	893b      	ldrh	r3, [r7, #8]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c28:	e015      	b.n	8004c56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c2a:	893b      	ldrh	r3, [r7, #8]
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	69b9      	ldr	r1, [r7, #24]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f89c 	bl	8004d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e012      	b.n	8004c72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2140      	movs	r1, #64	@ 0x40
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f831 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	80002000 	.word	0x80002000

08004c80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d007      	beq.n	8004cbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	619a      	str	r2, [r3, #24]
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e03b      	b.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f8d6 	bl	8004e90 <I2C_IsErrorOccurred>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cf4:	d02d      	beq.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7ff f987 	bl	8004008 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d122      	bne.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d113      	bne.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00f      	b.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d0b4      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d86:	e033      	b.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f87f 	bl	8004e90 <I2C_IsErrorOccurred>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e031      	b.n	8004e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da2:	d025      	beq.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da4:	f7ff f930 	bl	8004008 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11a      	bne.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d013      	beq.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d1c4      	bne.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e14:	e02f      	b.n	8004e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f838 	bl	8004e90 <I2C_IsErrorOccurred>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e02d      	b.n	8004e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7ff f8ed 	bl	8004008 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11a      	bne.n	8004e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d013      	beq.n	8004e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e007      	b.n	8004e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d1c8      	bne.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d068      	beq.n	8004f8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ec4:	e049      	b.n	8004f5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ecc:	d045      	beq.n	8004f5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7ff f89b 	bl	8004008 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_IsErrorOccurred+0x54>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d13a      	bne.n	8004f5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ef6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f06:	d121      	bne.n	8004f4c <I2C_IsErrorOccurred+0xbc>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f0e:	d01d      	beq.n	8004f4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d01a      	beq.n	8004f4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f26:	f7ff f86f 	bl	8004008 <HAL_GetTick>
 8004f2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f2c:	e00e      	b.n	8004f4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f2e:	f7ff f86b 	bl	8004008 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b19      	cmp	r3, #25
 8004f3a:	d907      	bls.n	8004f4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f043 0320 	orr.w	r3, r3, #32
 8004f42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f4a:	e006      	b.n	8004f5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d1e9      	bne.n	8004f2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d003      	beq.n	8004f70 <I2C_IsErrorOccurred+0xe0>
 8004f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0aa      	beq.n	8004ec6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f043 0308 	orr.w	r3, r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	f043 0302 	orr.w	r3, r3, #2
 8004fea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01c      	beq.n	800503e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff fe3b 	bl	8004c80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <I2C_IsErrorOccurred+0x1bc>)
 8005016:	400b      	ands	r3, r1
 8005018:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800503e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005042:	4618      	mov	r0, r3
 8005044:	3728      	adds	r7, #40	@ 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	fe00e800 	.word	0xfe00e800

08005050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	817b      	strh	r3, [r7, #10]
 800505e:	4613      	mov	r3, r2
 8005060:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005062:	897b      	ldrh	r3, [r7, #10]
 8005064:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005068:	7a7b      	ldrb	r3, [r7, #9]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005070:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	4313      	orrs	r3, r2
 800507a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800507e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	0d5b      	lsrs	r3, r3, #21
 800508a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <I2C_TransferConfig+0x60>)
 8005090:	430b      	orrs	r3, r1
 8005092:	43db      	mvns	r3, r3
 8005094:	ea02 0103 	and.w	r1, r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	03ff63ff 	.word	0x03ff63ff

080050b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d138      	bne.n	800513c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e032      	b.n	800513e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	@ 0x24
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b20      	cmp	r3, #32
 800515e:	d139      	bne.n	80051d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800516a:	2302      	movs	r3, #2
 800516c:	e033      	b.n	80051d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	@ 0x24
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800519c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <HAL_PWREx_GetVoltageRange+0x18>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40007000 	.word	0x40007000

08005200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520e:	d130      	bne.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005210:	4b23      	ldr	r3, [pc, #140]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800521c:	d038      	beq.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800521e:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005226:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2232      	movs	r2, #50	@ 0x32
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	0c9b      	lsrs	r3, r3, #18
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005244:	e002      	b.n	800524c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b01      	subs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800524c:	4b14      	ldr	r3, [pc, #80]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005258:	d102      	bne.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f2      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005260:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526c:	d110      	bne.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e00f      	b.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d007      	beq.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005288:	4a05      	ldr	r2, [pc, #20]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800528e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40007000 	.word	0x40007000
 80052a4:	20000004 	.word	0x20000004
 80052a8:	431bde83 	.word	0x431bde83

080052ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e3ca      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052be:	4b97      	ldr	r3, [pc, #604]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c8:	4b94      	ldr	r3, [pc, #592]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80e4 	beq.w	80054a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4a>
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	f040 808b 	bne.w	8005404 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 8087 	bne.w	8005404 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052f6:	4b89      	ldr	r3, [pc, #548]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x62>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e3a2      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	4b82      	ldr	r3, [pc, #520]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_RCC_OscConfig+0x7c>
 800531e:	4b7f      	ldr	r3, [pc, #508]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005326:	e005      	b.n	8005334 <HAL_RCC_OscConfig+0x88>
 8005328:	4b7c      	ldr	r3, [pc, #496]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005334:	4293      	cmp	r3, r2
 8005336:	d223      	bcs.n	8005380 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fd87 	bl	8005e50 <RCC_SetFlashLatencyFromMSIRange>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e383      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800534c:	4b73      	ldr	r3, [pc, #460]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a72      	ldr	r2, [pc, #456]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005352:	f043 0308 	orr.w	r3, r3, #8
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b70      	ldr	r3, [pc, #448]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	496d      	ldr	r1, [pc, #436]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536a:	4b6c      	ldr	r3, [pc, #432]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4968      	ldr	r1, [pc, #416]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
 800537e:	e025      	b.n	80053cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005380:	4b66      	ldr	r3, [pc, #408]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a65      	ldr	r2, [pc, #404]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b63      	ldr	r3, [pc, #396]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4960      	ldr	r1, [pc, #384]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800539e:	4b5f      	ldr	r3, [pc, #380]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	495b      	ldr	r1, [pc, #364]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fd47 	bl	8005e50 <RCC_SetFlashLatencyFromMSIRange>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e343      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053cc:	f000 fc4a 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b52      	ldr	r3, [pc, #328]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	4950      	ldr	r1, [pc, #320]	@ (8005520 <HAL_RCC_OscConfig+0x274>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005524 <HAL_RCC_OscConfig+0x278>)
 80053ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053ec:	4b4e      	ldr	r3, [pc, #312]	@ (8005528 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fbb3 	bl	8003b5c <HAL_InitTick>
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d052      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	e327      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d032      	beq.n	8005472 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800540c:	4b43      	ldr	r3, [pc, #268]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a42      	ldr	r2, [pc, #264]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005418:	f7fe fdf6 	bl	8004008 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005420:	f7fe fdf2 	bl	8004008 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e310      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005432:	4b3a      	ldr	r3, [pc, #232]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800543e:	4b37      	ldr	r3, [pc, #220]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a36      	ldr	r2, [pc, #216]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b34      	ldr	r3, [pc, #208]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	4931      	ldr	r1, [pc, #196]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800545c:	4b2f      	ldr	r3, [pc, #188]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	492c      	ldr	r1, [pc, #176]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	e01a      	b.n	80054a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005472:	4b2a      	ldr	r3, [pc, #168]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a29      	ldr	r2, [pc, #164]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800547e:	f7fe fdc3 	bl	8004008 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005486:	f7fe fdbf 	bl	8004008 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e2dd      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005498:	4b20      	ldr	r3, [pc, #128]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <HAL_RCC_OscConfig+0x1da>
 80054a4:	e000      	b.n	80054a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d074      	beq.n	800559e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d005      	beq.n	80054c6 <HAL_RCC_OscConfig+0x21a>
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d10e      	bne.n	80054de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d10b      	bne.n	80054de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d064      	beq.n	800559c <HAL_RCC_OscConfig+0x2f0>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d160      	bne.n	800559c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e2ba      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x24a>
 80054e8:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	e026      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054fe:	d115      	bne.n	800552c <HAL_RCC_OscConfig+0x280>
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a05      	ldr	r2, [pc, #20]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005506:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b03      	ldr	r3, [pc, #12]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a02      	ldr	r2, [pc, #8]	@ (800551c <HAL_RCC_OscConfig+0x270>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e014      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000
 8005520:	0800e5c0 	.word	0x0800e5c0
 8005524:	20000004 	.word	0x20000004
 8005528:	20000008 	.word	0x20000008
 800552c:	4ba0      	ldr	r3, [pc, #640]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a9f      	ldr	r2, [pc, #636]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b9d      	ldr	r3, [pc, #628]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a9c      	ldr	r2, [pc, #624]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800553e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d013      	beq.n	8005574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fe fd5c 	bl	8004008 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005554:	f7fe fd58 	bl	8004008 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	@ 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e276      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005566:	4b92      	ldr	r3, [pc, #584]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x2a8>
 8005572:	e014      	b.n	800559e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fe fd48 	bl	8004008 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800557c:	f7fe fd44 	bl	8004008 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	@ 0x64
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e262      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800558e:	4b88      	ldr	r3, [pc, #544]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x2d0>
 800559a:	e000      	b.n	800559e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d060      	beq.n	800566c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_OscConfig+0x310>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d119      	bne.n	80055ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d116      	bne.n	80055ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055bc:	4b7c      	ldr	r3, [pc, #496]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_OscConfig+0x328>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e23f      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d4:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	4973      	ldr	r1, [pc, #460]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e8:	e040      	b.n	800566c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d023      	beq.n	800563a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f2:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a6e      	ldr	r2, [pc, #440]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fe fd03 	bl	8004008 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005606:	f7fe fcff 	bl	8004008 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e21d      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005618:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005624:	4b62      	ldr	r3, [pc, #392]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	495f      	ldr	r1, [pc, #380]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005634:	4313      	orrs	r3, r2
 8005636:	604b      	str	r3, [r1, #4]
 8005638:	e018      	b.n	800566c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563a:	4b5d      	ldr	r3, [pc, #372]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a5c      	ldr	r2, [pc, #368]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe fcdf 	bl	8004008 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564e:	f7fe fcdb 	bl	8004008 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1f9      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005660:	4b53      	ldr	r3, [pc, #332]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03c      	beq.n	80056f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01c      	beq.n	80056ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005680:	4b4b      	ldr	r3, [pc, #300]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005686:	4a4a      	ldr	r2, [pc, #296]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fe fcba 	bl	8004008 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005698:	f7fe fcb6 	bl	8004008 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e1d4      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056aa:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80056ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ef      	beq.n	8005698 <HAL_RCC_OscConfig+0x3ec>
 80056b8:	e01b      	b.n	80056f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ba:	4b3d      	ldr	r3, [pc, #244]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80056bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c0:	4a3b      	ldr	r2, [pc, #236]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7fe fc9d 	bl	8004008 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d2:	f7fe fc99 	bl	8004008 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1b7      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056e4:	4b32      	ldr	r3, [pc, #200]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80056e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ef      	bne.n	80056d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a6 	beq.w	800584c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005700:	2300      	movs	r3, #0
 8005702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005704:	4b2a      	ldr	r3, [pc, #168]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10d      	bne.n	800572c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005710:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005714:	4a26      	ldr	r2, [pc, #152]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800571a:	6593      	str	r3, [r2, #88]	@ 0x58
 800571c:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005728:	2301      	movs	r3, #1
 800572a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <HAL_RCC_OscConfig+0x508>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d118      	bne.n	800576a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005738:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <HAL_RCC_OscConfig+0x508>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1d      	ldr	r2, [pc, #116]	@ (80057b4 <HAL_RCC_OscConfig+0x508>)
 800573e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005744:	f7fe fc60 	bl	8004008 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800574c:	f7fe fc5c 	bl	8004008 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e17a      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <HAL_RCC_OscConfig+0x508>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d108      	bne.n	8005784 <HAL_RCC_OscConfig+0x4d8>
 8005772:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005778:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005782:	e029      	b.n	80057d8 <HAL_RCC_OscConfig+0x52c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b05      	cmp	r3, #5
 800578a:	d115      	bne.n	80057b8 <HAL_RCC_OscConfig+0x50c>
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	4a07      	ldr	r2, [pc, #28]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 8005794:	f043 0304 	orr.w	r3, r3, #4
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	4a03      	ldr	r2, [pc, #12]	@ (80057b0 <HAL_RCC_OscConfig+0x504>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057ac:	e014      	b.n	80057d8 <HAL_RCC_OscConfig+0x52c>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40007000 	.word	0x40007000
 80057b8:	4b9c      	ldr	r3, [pc, #624]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	4a9b      	ldr	r2, [pc, #620]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057c8:	4b98      	ldr	r3, [pc, #608]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	4a97      	ldr	r2, [pc, #604]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d016      	beq.n	800580e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fe fc12 	bl	8004008 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e8:	f7fe fc0e 	bl	8004008 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e12a      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fe:	4b8b      	ldr	r3, [pc, #556]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ed      	beq.n	80057e8 <HAL_RCC_OscConfig+0x53c>
 800580c:	e015      	b.n	800583a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fe fbfb 	bl	8004008 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fe fbf7 	bl	8004008 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e113      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800582c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ed      	bne.n	8005816 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583a:	7ffb      	ldrb	r3, [r7, #31]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005840:	4b7a      	ldr	r3, [pc, #488]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	4a79      	ldr	r2, [pc, #484]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800584a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80fe 	beq.w	8005a52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	2b02      	cmp	r3, #2
 800585c:	f040 80d0 	bne.w	8005a00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005860:	4b72      	ldr	r3, [pc, #456]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0203 	and.w	r2, r3, #3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d130      	bne.n	80058d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	3b01      	subs	r3, #1
 8005880:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d127      	bne.n	80058d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d11f      	bne.n	80058d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058a0:	2a07      	cmp	r2, #7
 80058a2:	bf14      	ite	ne
 80058a4:	2201      	movne	r2, #1
 80058a6:	2200      	moveq	r2, #0
 80058a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d113      	bne.n	80058d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d109      	bne.n	80058d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	3b01      	subs	r3, #1
 80058d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d06e      	beq.n	80059b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b0c      	cmp	r3, #12
 80058da:	d069      	beq.n	80059b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058dc:	4b53      	ldr	r3, [pc, #332]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058e8:	4b50      	ldr	r3, [pc, #320]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0ad      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058f8:	4b4c      	ldr	r3, [pc, #304]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a4b      	ldr	r2, [pc, #300]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80058fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005902:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005904:	f7fe fb80 	bl	8004008 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fe fb7c 	bl	8004008 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e09a      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800591e:	4b43      	ldr	r3, [pc, #268]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800592a:	4b40      	ldr	r3, [pc, #256]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	4b40      	ldr	r3, [pc, #256]	@ (8005a30 <HAL_RCC_OscConfig+0x784>)
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800593a:	3a01      	subs	r2, #1
 800593c:	0112      	lsls	r2, r2, #4
 800593e:	4311      	orrs	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005944:	0212      	lsls	r2, r2, #8
 8005946:	4311      	orrs	r1, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800594c:	0852      	lsrs	r2, r2, #1
 800594e:	3a01      	subs	r2, #1
 8005950:	0552      	lsls	r2, r2, #21
 8005952:	4311      	orrs	r1, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005958:	0852      	lsrs	r2, r2, #1
 800595a:	3a01      	subs	r2, #1
 800595c:	0652      	lsls	r2, r2, #25
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005964:	0912      	lsrs	r2, r2, #4
 8005966:	0452      	lsls	r2, r2, #17
 8005968:	430a      	orrs	r2, r1
 800596a:	4930      	ldr	r1, [pc, #192]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 800596c:	4313      	orrs	r3, r2
 800596e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005970:	4b2e      	ldr	r3, [pc, #184]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2d      	ldr	r2, [pc, #180]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800597c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a2a      	ldr	r2, [pc, #168]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005988:	f7fe fb3e 	bl	8004008 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005990:	f7fe fb3a 	bl	8004008 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e058      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a2:	4b22      	ldr	r3, [pc, #136]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ae:	e050      	b.n	8005a52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e04f      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d148      	bne.n	8005a52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059c0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a19      	ldr	r2, [pc, #100]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059cc:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059d8:	f7fe fb16 	bl	8004008 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fe fb12 	bl	8004008 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e030      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x734>
 80059fe:	e028      	b.n	8005a52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b0c      	cmp	r3, #12
 8005a04:	d023      	beq.n	8005a4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <HAL_RCC_OscConfig+0x780>)
 8005a0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fe faf9 	bl	8004008 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a18:	e00c      	b.n	8005a34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1a:	f7fe faf5 	bl	8004008 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d905      	bls.n	8005a34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e013      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a34:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <HAL_RCC_OscConfig+0x7b0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ec      	bne.n	8005a1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <HAL_RCC_OscConfig+0x7b0>)
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	4905      	ldr	r1, [pc, #20]	@ (8005a5c <HAL_RCC_OscConfig+0x7b0>)
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_OscConfig+0x7b4>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60cb      	str	r3, [r1, #12]
 8005a4c:	e001      	b.n	8005a52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	feeefffc 	.word	0xfeeefffc

08005a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0e7      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a78:	4b75      	ldr	r3, [pc, #468]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d910      	bls.n	8005aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a86:	4b72      	ldr	r3, [pc, #456]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 0207 	bic.w	r2, r3, #7
 8005a8e:	4970      	ldr	r1, [pc, #448]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	4b6e      	ldr	r3, [pc, #440]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0cf      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	4b66      	ldr	r3, [pc, #408]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d908      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac4:	4b63      	ldr	r3, [pc, #396]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4960      	ldr	r1, [pc, #384]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04c      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aea:	4b5a      	ldr	r3, [pc, #360]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d121      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e0a6      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d107      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b02:	4b54      	ldr	r3, [pc, #336]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d115      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e09a      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e08e      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e086      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b3a:	4b46      	ldr	r3, [pc, #280]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4943      	ldr	r1, [pc, #268]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4c:	f7fe fa5c 	bl	8004008 <HAL_GetTick>
 8005b50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b52:	e00a      	b.n	8005b6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b54:	f7fe fa58 	bl	8004008 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e06e      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 020c 	and.w	r2, r3, #12
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d1eb      	bne.n	8005b54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	4b31      	ldr	r3, [pc, #196]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d208      	bcs.n	8005baa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b2e      	ldr	r3, [pc, #184]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	492b      	ldr	r1, [pc, #172]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d210      	bcs.n	8005bda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb8:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 0207 	bic.w	r2, r3, #7
 8005bc0:	4923      	ldr	r1, [pc, #140]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc8:	4b21      	ldr	r3, [pc, #132]	@ (8005c50 <HAL_RCC_ClockConfig+0x1ec>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d001      	beq.n	8005bda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e036      	b.n	8005c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4918      	ldr	r1, [pc, #96]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c04:	4b13      	ldr	r3, [pc, #76]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4910      	ldr	r1, [pc, #64]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c18:	f000 f824 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	490b      	ldr	r1, [pc, #44]	@ (8005c58 <HAL_RCC_ClockConfig+0x1f4>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <HAL_RCC_ClockConfig+0x1f8>)
 8005c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c38:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <HAL_RCC_ClockConfig+0x1fc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fd ff8d 	bl	8003b5c <HAL_InitTick>
 8005c42:	4603      	mov	r3, r0
 8005c44:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c46:	7afb      	ldrb	r3, [r7, #11]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40022000 	.word	0x40022000
 8005c54:	40021000 	.word	0x40021000
 8005c58:	0800e5c0 	.word	0x0800e5c0
 8005c5c:	20000004 	.word	0x20000004
 8005c60:	20000008 	.word	0x20000008

08005c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	@ 0x24
 8005c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c72:	4b3e      	ldr	r3, [pc, #248]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x34>
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d121      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d11e      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c98:	4b34      	ldr	r3, [pc, #208]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ca4:	4b31      	ldr	r3, [pc, #196]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cdc:	4b25      	ldr	r3, [pc, #148]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e004      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ce8:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d134      	bne.n	8005d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d003      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d003      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0xac>
 8005d08:	e005      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d0c:	617b      	str	r3, [r7, #20]
      break;
 8005d0e:	e005      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d10:	4b19      	ldr	r3, [pc, #100]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d12:	617b      	str	r3, [r7, #20]
      break;
 8005d14:	e002      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	617b      	str	r3, [r7, #20]
      break;
 8005d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d1c:	4b13      	ldr	r3, [pc, #76]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	3301      	adds	r3, #1
 8005d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	fb03 f202 	mul.w	r2, r3, r2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d42:	4b0a      	ldr	r3, [pc, #40]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	0e5b      	lsrs	r3, r3, #25
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3724      	adds	r7, #36	@ 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	0800e5d8 	.word	0x0800e5d8
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	007a1200 	.word	0x007a1200

08005d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d80:	4b03      	ldr	r3, [pc, #12]	@ (8005d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d82:	681b      	ldr	r3, [r3, #0]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000004 	.word	0x20000004

08005d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d98:	f7ff fff0 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b06      	ldr	r3, [pc, #24]	@ (8005db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4904      	ldr	r1, [pc, #16]	@ (8005dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	0800e5d0 	.word	0x0800e5d0

08005dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dc4:	f7ff ffda 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0adb      	lsrs	r3, r3, #11
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4904      	ldr	r1, [pc, #16]	@ (8005de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40021000 	.word	0x40021000
 8005de8:	0800e5d0 	.word	0x0800e5d0

08005dec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	220f      	movs	r2, #15
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005dfc:	4b12      	ldr	r3, [pc, #72]	@ (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e08:	4b0f      	ldr	r3, [pc, #60]	@ (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e14:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e20:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e2e:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HAL_RCC_GetClockConfig+0x60>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0207 	and.w	r2, r3, #7
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40022000 	.word	0x40022000

08005e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e68:	f7ff f9bc 	bl	80051e4 <HAL_PWREx_GetVoltageRange>
 8005e6c:	6178      	str	r0, [r7, #20]
 8005e6e:	e014      	b.n	8005e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	4a24      	ldr	r2, [pc, #144]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e7c:	4b22      	ldr	r3, [pc, #136]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e88:	f7ff f9ac 	bl	80051e4 <HAL_PWREx_GetVoltageRange>
 8005e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	4a1d      	ldr	r2, [pc, #116]	@ (8005f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea0:	d10b      	bne.n	8005eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b80      	cmp	r3, #128	@ 0x80
 8005ea6:	d919      	bls.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2ba0      	cmp	r3, #160	@ 0xa0
 8005eac:	d902      	bls.n	8005eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005eae:	2302      	movs	r3, #2
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e013      	b.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	e010      	b.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b80      	cmp	r3, #128	@ 0x80
 8005ebe:	d902      	bls.n	8005ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	e00a      	b.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b80      	cmp	r3, #128	@ 0x80
 8005eca:	d102      	bne.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ecc:	2302      	movs	r3, #2
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	e004      	b.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b70      	cmp	r3, #112	@ 0x70
 8005ed6:	d101      	bne.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ed8:	2301      	movs	r3, #1
 8005eda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005edc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 0207 	bic.w	r2, r3, #7
 8005ee4:	4909      	ldr	r1, [pc, #36]	@ (8005f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005eec:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d001      	beq.n	8005efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40022000 	.word	0x40022000

08005f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f18:	2300      	movs	r3, #0
 8005f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d041      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f34:	d02a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f3a:	d824      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f40:	d008      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f46:	d81e      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f50:	d010      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f52:	e018      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f54:	4b86      	ldr	r3, [pc, #536]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a85      	ldr	r2, [pc, #532]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f60:	e015      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fabb 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f72:	e00c      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3320      	adds	r3, #32
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fba6 	bl	80066cc <RCCEx_PLLSAI2_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	74fb      	strb	r3, [r7, #19]
      break;
 8005f8a:	e000      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f8e:	7cfb      	ldrb	r3, [r7, #19]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f94:	4b76      	ldr	r3, [pc, #472]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa2:	4973      	ldr	r1, [pc, #460]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d041      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fc4:	d02a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005fc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fca:	d824      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd0:	d008      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd6:	d81e      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fe0:	d010      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fe2:	e018      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fe4:	4b62      	ldr	r3, [pc, #392]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a61      	ldr	r2, [pc, #388]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ff0:	e015      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fa73 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006002:	e00c      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3320      	adds	r3, #32
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fb5e 	bl	80066cc <RCCEx_PLLSAI2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	74fb      	strb	r3, [r7, #19]
      break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800601c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006024:	4b52      	ldr	r3, [pc, #328]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006032:	494f      	ldr	r1, [pc, #316]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800603a:	e001      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80a0 	beq.w	800618e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006052:	4b47      	ldr	r3, [pc, #284]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006068:	4b41      	ldr	r3, [pc, #260]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	4a40      	ldr	r2, [pc, #256]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6593      	str	r3, [r2, #88]	@ 0x58
 8006074:	4b3e      	ldr	r3, [pc, #248]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006080:	2301      	movs	r3, #1
 8006082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006084:	4b3b      	ldr	r3, [pc, #236]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a3a      	ldr	r2, [pc, #232]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800608a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006090:	f7fd ffba 	bl	8004008 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006096:	e009      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006098:	f7fd ffb6 	bl	8004008 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d902      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	74fb      	strb	r3, [r7, #19]
        break;
 80060aa:	e005      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ac:	4b31      	ldr	r3, [pc, #196]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ef      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d15c      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060be:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01f      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d019      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060dc:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060e8:	4b21      	ldr	r3, [pc, #132]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ee:	4a20      	ldr	r2, [pc, #128]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fd ff75 	bl	8004008 <HAL_GetTick>
 800611e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006120:	e00b      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fd ff71 	bl	8004008 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006130:	4293      	cmp	r3, r2
 8006132:	d902      	bls.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	74fb      	strb	r3, [r7, #19]
            break;
 8006138:	e006      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800613a:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0ec      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10c      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614e:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615e:	4904      	ldr	r1, [pc, #16]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006166:	e009      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
 800616c:	e006      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800617c:	7c7b      	ldrb	r3, [r7, #17]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d105      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006182:	4b9e      	ldr	r3, [pc, #632]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006186:	4a9d      	ldr	r2, [pc, #628]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800619a:	4b98      	ldr	r3, [pc, #608]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a0:	f023 0203 	bic.w	r2, r3, #3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	4994      	ldr	r1, [pc, #592]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061bc:	4b8f      	ldr	r3, [pc, #572]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f023 020c 	bic.w	r2, r3, #12
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ca:	498c      	ldr	r1, [pc, #560]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061de:	4b87      	ldr	r3, [pc, #540]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	4983      	ldr	r1, [pc, #524]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006200:	4b7e      	ldr	r3, [pc, #504]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	497b      	ldr	r1, [pc, #492]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006222:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006230:	4972      	ldr	r1, [pc, #456]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006244:	4b6d      	ldr	r3, [pc, #436]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006252:	496a      	ldr	r1, [pc, #424]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006266:	4b65      	ldr	r3, [pc, #404]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006274:	4961      	ldr	r1, [pc, #388]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006288:	4b5c      	ldr	r3, [pc, #368]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006296:	4959      	ldr	r1, [pc, #356]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062aa:	4b54      	ldr	r3, [pc, #336]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b8:	4950      	ldr	r1, [pc, #320]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062cc:	4b4b      	ldr	r3, [pc, #300]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062da:	4948      	ldr	r1, [pc, #288]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062ee:	4b43      	ldr	r3, [pc, #268]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	493f      	ldr	r1, [pc, #252]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d028      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006310:	4b3a      	ldr	r3, [pc, #232]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800631e:	4937      	ldr	r1, [pc, #220]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800632a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800632e:	d106      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006330:	4b32      	ldr	r3, [pc, #200]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a31      	ldr	r2, [pc, #196]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633a:	60d3      	str	r3, [r2, #12]
 800633c:	e011      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2101      	movs	r1, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f8c8 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d028      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800636e:	4b23      	ldr	r3, [pc, #140]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637c:	491f      	ldr	r1, [pc, #124]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800638c:	d106      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006398:	60d3      	str	r3, [r2, #12]
 800639a:	e011      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	2101      	movs	r1, #1
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f899 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80063bc:	7cfb      	ldrb	r3, [r7, #19]
 80063be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02b      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063da:	4908      	ldr	r1, [pc, #32]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ea:	d109      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ec:	4b03      	ldr	r3, [pc, #12]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a02      	ldr	r2, [pc, #8]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f6:	60d3      	str	r3, [r2, #12]
 80063f8:	e014      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006408:	d10c      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3304      	adds	r3, #4
 800640e:	2101      	movs	r1, #1
 8006410:	4618      	mov	r0, r3
 8006412:	f000 f867 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800641a:	7cfb      	ldrb	r3, [r7, #19]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006420:	7cfb      	ldrb	r3, [r7, #19]
 8006422:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02f      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006430:	4b2b      	ldr	r3, [pc, #172]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006436:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643e:	4928      	ldr	r1, [pc, #160]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800644a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800644e:	d10d      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2102      	movs	r1, #2
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f844 	bl	80064e4 <RCCEx_PLLSAI1_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006460:	7cfb      	ldrb	r3, [r7, #19]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d014      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	74bb      	strb	r3, [r7, #18]
 800646a:	e011      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006474:	d10c      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3320      	adds	r3, #32
 800647a:	2102      	movs	r1, #2
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f925 	bl	80066cc <RCCEx_PLLSAI2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006486:	7cfb      	ldrb	r3, [r7, #19]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800649c:	4b10      	ldr	r3, [pc, #64]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064aa:	490d      	ldr	r1, [pc, #52]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ce:	4904      	ldr	r1, [pc, #16]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40021000 	.word	0x40021000

080064e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064f2:	4b75      	ldr	r3, [pc, #468]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064fe:	4b72      	ldr	r3, [pc, #456]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0203 	and.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
       ||
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006516:	4b6c      	ldr	r3, [pc, #432]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
       ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d047      	beq.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	e044      	b.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b03      	cmp	r3, #3
 8006536:	d018      	beq.n	800656a <RCCEx_PLLSAI1_Config+0x86>
 8006538:	2b03      	cmp	r3, #3
 800653a:	d825      	bhi.n	8006588 <RCCEx_PLLSAI1_Config+0xa4>
 800653c:	2b01      	cmp	r3, #1
 800653e:	d002      	beq.n	8006546 <RCCEx_PLLSAI1_Config+0x62>
 8006540:	2b02      	cmp	r3, #2
 8006542:	d009      	beq.n	8006558 <RCCEx_PLLSAI1_Config+0x74>
 8006544:	e020      	b.n	8006588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006546:	4b60      	ldr	r3, [pc, #384]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11d      	bne.n	800658e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006556:	e01a      	b.n	800658e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006558:	4b5b      	ldr	r3, [pc, #364]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006568:	e013      	b.n	8006592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800656a:	4b57      	ldr	r3, [pc, #348]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10f      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006576:	4b54      	ldr	r3, [pc, #336]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006586:	e006      	b.n	8006596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e004      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006596:	bf00      	nop
    }

    if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800659e:	4b4a      	ldr	r3, [pc, #296]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	430b      	orrs	r3, r1
 80065b4:	4944      	ldr	r1, [pc, #272]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d17d      	bne.n	80066bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065c0:	4b41      	ldr	r3, [pc, #260]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a40      	ldr	r2, [pc, #256]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065cc:	f7fd fd1c 	bl	8004008 <HAL_GetTick>
 80065d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065d2:	e009      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065d4:	f7fd fd18 	bl	8004008 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d902      	bls.n	80065e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	73fb      	strb	r3, [r7, #15]
        break;
 80065e6:	e005      	b.n	80065f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065e8:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ef      	bne.n	80065d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d160      	bne.n	80066bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d111      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006600:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6892      	ldr	r2, [r2, #8]
 8006610:	0211      	lsls	r1, r2, #8
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68d2      	ldr	r2, [r2, #12]
 8006616:	0912      	lsrs	r2, r2, #4
 8006618:	0452      	lsls	r2, r2, #17
 800661a:	430a      	orrs	r2, r1
 800661c:	492a      	ldr	r1, [pc, #168]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661e:	4313      	orrs	r3, r2
 8006620:	610b      	str	r3, [r1, #16]
 8006622:	e027      	b.n	8006674 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d112      	bne.n	8006650 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800662a:	4b27      	ldr	r3, [pc, #156]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006632:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6892      	ldr	r2, [r2, #8]
 800663a:	0211      	lsls	r1, r2, #8
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6912      	ldr	r2, [r2, #16]
 8006640:	0852      	lsrs	r2, r2, #1
 8006642:	3a01      	subs	r2, #1
 8006644:	0552      	lsls	r2, r2, #21
 8006646:	430a      	orrs	r2, r1
 8006648:	491f      	ldr	r1, [pc, #124]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800664a:	4313      	orrs	r3, r2
 800664c:	610b      	str	r3, [r1, #16]
 800664e:	e011      	b.n	8006674 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006650:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6952      	ldr	r2, [r2, #20]
 8006666:	0852      	lsrs	r2, r2, #1
 8006668:	3a01      	subs	r2, #1
 800666a:	0652      	lsls	r2, r2, #25
 800666c:	430a      	orrs	r2, r1
 800666e:	4916      	ldr	r1, [pc, #88]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006670:	4313      	orrs	r3, r2
 8006672:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006674:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800667a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800667e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fd fcc2 	bl	8004008 <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006686:	e009      	b.n	800669c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006688:	f7fd fcbe 	bl	8004008 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d902      	bls.n	800669c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	73fb      	strb	r3, [r7, #15]
          break;
 800669a:	e005      	b.n	80066a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ef      	beq.n	8006688 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	4904      	ldr	r1, [pc, #16]	@ (80066c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000

080066cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066da:	4b6a      	ldr	r3, [pc, #424]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066e6:	4b67      	ldr	r3, [pc, #412]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f003 0203 	and.w	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d10d      	bne.n	8006712 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
       ||
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066fe:	4b61      	ldr	r3, [pc, #388]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
       ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d047      	beq.n	80067a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	e044      	b.n	80067a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d018      	beq.n	8006752 <RCCEx_PLLSAI2_Config+0x86>
 8006720:	2b03      	cmp	r3, #3
 8006722:	d825      	bhi.n	8006770 <RCCEx_PLLSAI2_Config+0xa4>
 8006724:	2b01      	cmp	r3, #1
 8006726:	d002      	beq.n	800672e <RCCEx_PLLSAI2_Config+0x62>
 8006728:	2b02      	cmp	r3, #2
 800672a:	d009      	beq.n	8006740 <RCCEx_PLLSAI2_Config+0x74>
 800672c:	e020      	b.n	8006770 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800672e:	4b55      	ldr	r3, [pc, #340]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11d      	bne.n	8006776 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800673e:	e01a      	b.n	8006776 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006740:	4b50      	ldr	r3, [pc, #320]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006748:	2b00      	cmp	r3, #0
 800674a:	d116      	bne.n	800677a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006750:	e013      	b.n	800677a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006752:	4b4c      	ldr	r3, [pc, #304]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800675e:	4b49      	ldr	r3, [pc, #292]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800676e:	e006      	b.n	800677e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
      break;
 8006774:	e004      	b.n	8006780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800677e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10d      	bne.n	80067a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006786:	4b3f      	ldr	r3, [pc, #252]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	430b      	orrs	r3, r1
 800679c:	4939      	ldr	r1, [pc, #228]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d167      	bne.n	8006878 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067a8:	4b36      	ldr	r3, [pc, #216]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a35      	ldr	r2, [pc, #212]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b4:	f7fd fc28 	bl	8004008 <HAL_GetTick>
 80067b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067ba:	e009      	b.n	80067d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067bc:	f7fd fc24 	bl	8004008 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d902      	bls.n	80067d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	73fb      	strb	r3, [r7, #15]
        break;
 80067ce:	e005      	b.n	80067dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ef      	bne.n	80067bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d14a      	bne.n	8006878 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d111      	bne.n	800680c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067e8:	4b26      	ldr	r3, [pc, #152]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80067f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6892      	ldr	r2, [r2, #8]
 80067f8:	0211      	lsls	r1, r2, #8
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68d2      	ldr	r2, [r2, #12]
 80067fe:	0912      	lsrs	r2, r2, #4
 8006800:	0452      	lsls	r2, r2, #17
 8006802:	430a      	orrs	r2, r1
 8006804:	491f      	ldr	r1, [pc, #124]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006806:	4313      	orrs	r3, r2
 8006808:	614b      	str	r3, [r1, #20]
 800680a:	e011      	b.n	8006830 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006814:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6892      	ldr	r2, [r2, #8]
 800681c:	0211      	lsls	r1, r2, #8
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6912      	ldr	r2, [r2, #16]
 8006822:	0852      	lsrs	r2, r2, #1
 8006824:	3a01      	subs	r2, #1
 8006826:	0652      	lsls	r2, r2, #25
 8006828:	430a      	orrs	r2, r1
 800682a:	4916      	ldr	r1, [pc, #88]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800682c:	4313      	orrs	r3, r2
 800682e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006830:	4b14      	ldr	r3, [pc, #80]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800683a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fd fbe4 	bl	8004008 <HAL_GetTick>
 8006840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006842:	e009      	b.n	8006858 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006844:	f7fd fbe0 	bl	8004008 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d902      	bls.n	8006858 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	73fb      	strb	r3, [r7, #15]
          break;
 8006856:	e005      	b.n	8006864 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0ef      	beq.n	8006844 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4904      	ldr	r1, [pc, #16]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006874:	4313      	orrs	r3, r2
 8006876:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40021000 	.word	0x40021000

08006888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e049      	b.n	800692e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f841 	bl	8006936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 f9e0 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	d001      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e04f      	b.n	8006a04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a23      	ldr	r2, [pc, #140]	@ (8006a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d01d      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698e:	d018      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0x76>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a19      	ldr	r2, [pc, #100]	@ (8006a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d115      	bne.n	80069ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	4b17      	ldr	r3, [pc, #92]	@ (8006a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b06      	cmp	r3, #6
 80069d2:	d015      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0xb4>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069da:	d011      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ec:	e008      	b.n	8006a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e000      	b.n	8006a02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	00010007 	.word	0x00010007

08006a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d020      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0202 	mvn.w	r2, #2
 8006a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8e9 	bl	8006c4e <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8db 	bl	8006c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8ec 	bl	8006c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d020      	beq.n	8006adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0204 	mvn.w	r2, #4
 8006aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8c3 	bl	8006c4e <HAL_TIM_IC_CaptureCallback>
 8006ac8:	e005      	b.n	8006ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f8b5 	bl	8006c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8c6 	bl	8006c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d020      	beq.n	8006b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01b      	beq.n	8006b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0208 	mvn.w	r2, #8
 8006af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2204      	movs	r2, #4
 8006afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f89d 	bl	8006c4e <HAL_TIM_IC_CaptureCallback>
 8006b14:	e005      	b.n	8006b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f88f 	bl	8006c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f8a0 	bl	8006c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d020      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01b      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0210 	mvn.w	r2, #16
 8006b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f877 	bl	8006c4e <HAL_TIM_IC_CaptureCallback>
 8006b60:	e005      	b.n	8006b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f869 	bl	8006c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f87a 	bl	8006c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0201 	mvn.w	r2, #1
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fb fb02 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00c      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f913 	bl	8006dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f90b 	bl	8006e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00c      	beq.n	8006c0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f834 	bl	8006c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0220 	mvn.w	r2, #32
 8006c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8d3 	bl	8006dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a46      	ldr	r2, [pc, #280]	@ (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	d00f      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a43      	ldr	r2, [pc, #268]	@ (8006dbc <TIM_Base_SetConfig+0x130>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a42      	ldr	r2, [pc, #264]	@ (8006dc0 <TIM_Base_SetConfig+0x134>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d007      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a41      	ldr	r2, [pc, #260]	@ (8006dc4 <TIM_Base_SetConfig+0x138>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a40      	ldr	r2, [pc, #256]	@ (8006dc8 <TIM_Base_SetConfig+0x13c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d108      	bne.n	8006cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a35      	ldr	r2, [pc, #212]	@ (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01f      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cec:	d01b      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a32      	ldr	r2, [pc, #200]	@ (8006dbc <TIM_Base_SetConfig+0x130>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d017      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a31      	ldr	r2, [pc, #196]	@ (8006dc0 <TIM_Base_SetConfig+0x134>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a30      	ldr	r2, [pc, #192]	@ (8006dc4 <TIM_Base_SetConfig+0x138>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00f      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc8 <TIM_Base_SetConfig+0x13c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	@ (8006dcc <TIM_Base_SetConfig+0x140>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <TIM_Base_SetConfig+0x144>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_Base_SetConfig+0x9a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd4 <TIM_Base_SetConfig+0x148>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d108      	bne.n	8006d38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_Base_SetConfig+0xf8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a18      	ldr	r2, [pc, #96]	@ (8006dc8 <TIM_Base_SetConfig+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_Base_SetConfig+0xf8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a17      	ldr	r2, [pc, #92]	@ (8006dcc <TIM_Base_SetConfig+0x140>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_Base_SetConfig+0xf8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <TIM_Base_SetConfig+0x144>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_Base_SetConfig+0xf8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a15      	ldr	r2, [pc, #84]	@ (8006dd4 <TIM_Base_SetConfig+0x148>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d103      	bne.n	8006d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d105      	bne.n	8006daa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f023 0201 	bic.w	r2, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	611a      	str	r2, [r3, #16]
  }
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e040      	b.n	8006ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fd f82c 	bl	8003e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	@ 0x24
 8006e40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb6a 	bl	8007534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8af 	bl	8006fc4 <UART_SetConfig>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e01b      	b.n	8006ea8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fbe9 	bl	8007678 <UART_CheckIdleState>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	@ 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d177      	bne.n	8006fb8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_UART_Transmit+0x24>
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e070      	b.n	8006fba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2221      	movs	r2, #33	@ 0x21
 8006ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee6:	f7fd f88f 	bl	8004008 <HAL_GetTick>
 8006eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	d108      	bne.n	8006f18 <HAL_UART_Transmit+0x68>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e003      	b.n	8006f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f20:	e02f      	b.n	8006f82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	@ 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fc4b 	bl	80077c8 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e03b      	b.n	8006fba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f54:	b292      	uxth	r2, r2
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e007      	b.n	8006f70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1c9      	bne.n	8006f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2140      	movs	r1, #64	@ 0x40
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fc15 	bl	80077c8 <UART_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e005      	b.n	8006fba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc8:	b08a      	sub	sp, #40	@ 0x28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4ba4      	ldr	r3, [pc, #656]	@ (8007284 <UART_SetConfig+0x2c0>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a99      	ldr	r2, [pc, #612]	@ (8007288 <UART_SetConfig+0x2c4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702c:	4313      	orrs	r3, r2
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a90      	ldr	r2, [pc, #576]	@ (800728c <UART_SetConfig+0x2c8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d126      	bne.n	800709c <UART_SetConfig+0xd8>
 800704e:	4b90      	ldr	r3, [pc, #576]	@ (8007290 <UART_SetConfig+0x2cc>)
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d81b      	bhi.n	8007094 <UART_SetConfig+0xd0>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <UART_SetConfig+0xa0>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	08007085 	.word	0x08007085
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800708d 	.word	0x0800708d
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e116      	b.n	80072aa <UART_SetConfig+0x2e6>
 800707c:	2302      	movs	r3, #2
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007082:	e112      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708a:	e10e      	b.n	80072aa <UART_SetConfig+0x2e6>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007092:	e10a      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709a:	e106      	b.n	80072aa <UART_SetConfig+0x2e6>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a7c      	ldr	r2, [pc, #496]	@ (8007294 <UART_SetConfig+0x2d0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d138      	bne.n	8007118 <UART_SetConfig+0x154>
 80070a6:	4b7a      	ldr	r3, [pc, #488]	@ (8007290 <UART_SetConfig+0x2cc>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ac:	f003 030c 	and.w	r3, r3, #12
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d82d      	bhi.n	8007110 <UART_SetConfig+0x14c>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <UART_SetConfig+0xf8>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	08007111 	.word	0x08007111
 80070c4:	08007111 	.word	0x08007111
 80070c8:	08007111 	.word	0x08007111
 80070cc:	08007101 	.word	0x08007101
 80070d0:	08007111 	.word	0x08007111
 80070d4:	08007111 	.word	0x08007111
 80070d8:	08007111 	.word	0x08007111
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	08007111 	.word	0x08007111
 80070e4:	08007111 	.word	0x08007111
 80070e8:	08007111 	.word	0x08007111
 80070ec:	08007109 	.word	0x08007109
 80070f0:	2300      	movs	r3, #0
 80070f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f6:	e0d8      	b.n	80072aa <UART_SetConfig+0x2e6>
 80070f8:	2302      	movs	r3, #2
 80070fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fe:	e0d4      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007100:	2304      	movs	r3, #4
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007106:	e0d0      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007108:	2308      	movs	r3, #8
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710e:	e0cc      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007110:	2310      	movs	r3, #16
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007116:	e0c8      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5e      	ldr	r2, [pc, #376]	@ (8007298 <UART_SetConfig+0x2d4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d125      	bne.n	800716e <UART_SetConfig+0x1aa>
 8007122:	4b5b      	ldr	r3, [pc, #364]	@ (8007290 <UART_SetConfig+0x2cc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007128:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800712c:	2b30      	cmp	r3, #48	@ 0x30
 800712e:	d016      	beq.n	800715e <UART_SetConfig+0x19a>
 8007130:	2b30      	cmp	r3, #48	@ 0x30
 8007132:	d818      	bhi.n	8007166 <UART_SetConfig+0x1a2>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d00a      	beq.n	800714e <UART_SetConfig+0x18a>
 8007138:	2b20      	cmp	r3, #32
 800713a:	d814      	bhi.n	8007166 <UART_SetConfig+0x1a2>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <UART_SetConfig+0x182>
 8007140:	2b10      	cmp	r3, #16
 8007142:	d008      	beq.n	8007156 <UART_SetConfig+0x192>
 8007144:	e00f      	b.n	8007166 <UART_SetConfig+0x1a2>
 8007146:	2300      	movs	r3, #0
 8007148:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714c:	e0ad      	b.n	80072aa <UART_SetConfig+0x2e6>
 800714e:	2302      	movs	r3, #2
 8007150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007154:	e0a9      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007156:	2304      	movs	r3, #4
 8007158:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715c:	e0a5      	b.n	80072aa <UART_SetConfig+0x2e6>
 800715e:	2308      	movs	r3, #8
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007164:	e0a1      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007166:	2310      	movs	r3, #16
 8007168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716c:	e09d      	b.n	80072aa <UART_SetConfig+0x2e6>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a4a      	ldr	r2, [pc, #296]	@ (800729c <UART_SetConfig+0x2d8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d125      	bne.n	80071c4 <UART_SetConfig+0x200>
 8007178:	4b45      	ldr	r3, [pc, #276]	@ (8007290 <UART_SetConfig+0x2cc>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007182:	2bc0      	cmp	r3, #192	@ 0xc0
 8007184:	d016      	beq.n	80071b4 <UART_SetConfig+0x1f0>
 8007186:	2bc0      	cmp	r3, #192	@ 0xc0
 8007188:	d818      	bhi.n	80071bc <UART_SetConfig+0x1f8>
 800718a:	2b80      	cmp	r3, #128	@ 0x80
 800718c:	d00a      	beq.n	80071a4 <UART_SetConfig+0x1e0>
 800718e:	2b80      	cmp	r3, #128	@ 0x80
 8007190:	d814      	bhi.n	80071bc <UART_SetConfig+0x1f8>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <UART_SetConfig+0x1d8>
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d008      	beq.n	80071ac <UART_SetConfig+0x1e8>
 800719a:	e00f      	b.n	80071bc <UART_SetConfig+0x1f8>
 800719c:	2300      	movs	r3, #0
 800719e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a2:	e082      	b.n	80072aa <UART_SetConfig+0x2e6>
 80071a4:	2302      	movs	r3, #2
 80071a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071aa:	e07e      	b.n	80072aa <UART_SetConfig+0x2e6>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b2:	e07a      	b.n	80072aa <UART_SetConfig+0x2e6>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ba:	e076      	b.n	80072aa <UART_SetConfig+0x2e6>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c2:	e072      	b.n	80072aa <UART_SetConfig+0x2e6>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a35      	ldr	r2, [pc, #212]	@ (80072a0 <UART_SetConfig+0x2dc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d12a      	bne.n	8007224 <UART_SetConfig+0x260>
 80071ce:	4b30      	ldr	r3, [pc, #192]	@ (8007290 <UART_SetConfig+0x2cc>)
 80071d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071dc:	d01a      	beq.n	8007214 <UART_SetConfig+0x250>
 80071de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071e2:	d81b      	bhi.n	800721c <UART_SetConfig+0x258>
 80071e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071e8:	d00c      	beq.n	8007204 <UART_SetConfig+0x240>
 80071ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ee:	d815      	bhi.n	800721c <UART_SetConfig+0x258>
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <UART_SetConfig+0x238>
 80071f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f8:	d008      	beq.n	800720c <UART_SetConfig+0x248>
 80071fa:	e00f      	b.n	800721c <UART_SetConfig+0x258>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e052      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007204:	2302      	movs	r3, #2
 8007206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720a:	e04e      	b.n	80072aa <UART_SetConfig+0x2e6>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007212:	e04a      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721a:	e046      	b.n	80072aa <UART_SetConfig+0x2e6>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007222:	e042      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a17      	ldr	r2, [pc, #92]	@ (8007288 <UART_SetConfig+0x2c4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d13a      	bne.n	80072a4 <UART_SetConfig+0x2e0>
 800722e:	4b18      	ldr	r3, [pc, #96]	@ (8007290 <UART_SetConfig+0x2cc>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007234:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007238:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800723c:	d01a      	beq.n	8007274 <UART_SetConfig+0x2b0>
 800723e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007242:	d81b      	bhi.n	800727c <UART_SetConfig+0x2b8>
 8007244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007248:	d00c      	beq.n	8007264 <UART_SetConfig+0x2a0>
 800724a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800724e:	d815      	bhi.n	800727c <UART_SetConfig+0x2b8>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <UART_SetConfig+0x298>
 8007254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007258:	d008      	beq.n	800726c <UART_SetConfig+0x2a8>
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x2b8>
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e022      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726a:	e01e      	b.n	80072aa <UART_SetConfig+0x2e6>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007272:	e01a      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e016      	b.n	80072aa <UART_SetConfig+0x2e6>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e012      	b.n	80072aa <UART_SetConfig+0x2e6>
 8007284:	efff69f3 	.word	0xefff69f3
 8007288:	40008000 	.word	0x40008000
 800728c:	40013800 	.word	0x40013800
 8007290:	40021000 	.word	0x40021000
 8007294:	40004400 	.word	0x40004400
 8007298:	40004800 	.word	0x40004800
 800729c:	40004c00 	.word	0x40004c00
 80072a0:	40005000 	.word	0x40005000
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a9f      	ldr	r2, [pc, #636]	@ (800752c <UART_SetConfig+0x568>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d17a      	bne.n	80073aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d824      	bhi.n	8007306 <UART_SetConfig+0x342>
 80072bc:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <UART_SetConfig+0x300>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	08007307 	.word	0x08007307
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	08007307 	.word	0x08007307
 80072d4:	080072f7 	.word	0x080072f7
 80072d8:	08007307 	.word	0x08007307
 80072dc:	08007307 	.word	0x08007307
 80072e0:	08007307 	.word	0x08007307
 80072e4:	080072ff 	.word	0x080072ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7fe fd54 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 80072ec:	61f8      	str	r0, [r7, #28]
        break;
 80072ee:	e010      	b.n	8007312 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007530 <UART_SetConfig+0x56c>)
 80072f2:	61fb      	str	r3, [r7, #28]
        break;
 80072f4:	e00d      	b.n	8007312 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f6:	f7fe fcb5 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 80072fa:	61f8      	str	r0, [r7, #28]
        break;
 80072fc:	e009      	b.n	8007312 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007302:	61fb      	str	r3, [r7, #28]
        break;
 8007304:	e005      	b.n	8007312 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80fb 	beq.w	8007510 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4413      	add	r3, r2
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	429a      	cmp	r2, r3
 8007328:	d305      	bcc.n	8007336 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	429a      	cmp	r2, r3
 8007334:	d903      	bls.n	800733e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800733c:	e0e8      	b.n	8007510 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	2200      	movs	r2, #0
 8007342:	461c      	mov	r4, r3
 8007344:	4615      	mov	r5, r2
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	022b      	lsls	r3, r5, #8
 8007350:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007354:	0222      	lsls	r2, r4, #8
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	6849      	ldr	r1, [r1, #4]
 800735a:	0849      	lsrs	r1, r1, #1
 800735c:	2000      	movs	r0, #0
 800735e:	4688      	mov	r8, r1
 8007360:	4681      	mov	r9, r0
 8007362:	eb12 0a08 	adds.w	sl, r2, r8
 8007366:	eb43 0b09 	adc.w	fp, r3, r9
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007378:	4650      	mov	r0, sl
 800737a:	4659      	mov	r1, fp
 800737c:	f7f9 fc84 	bl	8000c88 <__aeabi_uldivmod>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4613      	mov	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800738e:	d308      	bcc.n	80073a2 <UART_SetConfig+0x3de>
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007396:	d204      	bcs.n	80073a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e0b6      	b.n	8007510 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073a8:	e0b2      	b.n	8007510 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b2:	d15e      	bne.n	8007472 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80073b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d828      	bhi.n	800740e <UART_SetConfig+0x44a>
 80073bc:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <UART_SetConfig+0x400>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	0800740f 	.word	0x0800740f
 80073d4:	080073ff 	.word	0x080073ff
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	0800740f 	.word	0x0800740f
 80073e0:	0800740f 	.word	0x0800740f
 80073e4:	08007407 	.word	0x08007407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e8:	f7fe fcd4 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 80073ec:	61f8      	str	r0, [r7, #28]
        break;
 80073ee:	e014      	b.n	800741a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f0:	f7fe fce6 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 80073f4:	61f8      	str	r0, [r7, #28]
        break;
 80073f6:	e010      	b.n	800741a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007530 <UART_SetConfig+0x56c>)
 80073fa:	61fb      	str	r3, [r7, #28]
        break;
 80073fc:	e00d      	b.n	800741a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fe fc31 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8007402:	61f8      	str	r0, [r7, #28]
        break;
 8007404:	e009      	b.n	800741a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800740a:	61fb      	str	r3, [r7, #28]
        break;
 800740c:	e005      	b.n	800741a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d077      	beq.n	8007510 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	005a      	lsls	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	441a      	add	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	fbb2 f3f3 	udiv	r3, r2, r3
 8007434:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d916      	bls.n	800746a <UART_SetConfig+0x4a6>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007442:	d212      	bcs.n	800746a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f023 030f 	bic.w	r3, r3, #15
 800744c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	b29b      	uxth	r3, r3
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	b29a      	uxth	r2, r3
 800745a:	8afb      	ldrh	r3, [r7, #22]
 800745c:	4313      	orrs	r3, r2
 800745e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	8afa      	ldrh	r2, [r7, #22]
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	e052      	b.n	8007510 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007470:	e04e      	b.n	8007510 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007472:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007476:	2b08      	cmp	r3, #8
 8007478:	d827      	bhi.n	80074ca <UART_SetConfig+0x506>
 800747a:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <UART_SetConfig+0x4bc>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074b5 	.word	0x080074b5
 800748c:	080074cb 	.word	0x080074cb
 8007490:	080074bb 	.word	0x080074bb
 8007494:	080074cb 	.word	0x080074cb
 8007498:	080074cb 	.word	0x080074cb
 800749c:	080074cb 	.word	0x080074cb
 80074a0:	080074c3 	.word	0x080074c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a4:	f7fe fc76 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 80074a8:	61f8      	str	r0, [r7, #28]
        break;
 80074aa:	e014      	b.n	80074d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ac:	f7fe fc88 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 80074b0:	61f8      	str	r0, [r7, #28]
        break;
 80074b2:	e010      	b.n	80074d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007530 <UART_SetConfig+0x56c>)
 80074b6:	61fb      	str	r3, [r7, #28]
        break;
 80074b8:	e00d      	b.n	80074d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ba:	f7fe fbd3 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 80074be:	61f8      	str	r0, [r7, #28]
        break;
 80074c0:	e009      	b.n	80074d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c6:	61fb      	str	r3, [r7, #28]
        break;
 80074c8:	e005      	b.n	80074d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074d4:	bf00      	nop
    }

    if (pclk != 0U)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d019      	beq.n	8007510 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	085a      	lsrs	r2, r3, #1
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b0f      	cmp	r3, #15
 80074f4:	d909      	bls.n	800750a <UART_SetConfig+0x546>
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074fc:	d205      	bcs.n	800750a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60da      	str	r2, [r3, #12]
 8007508:	e002      	b.n	8007510 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800751c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007520:	4618      	mov	r0, r3
 8007522:	3728      	adds	r7, #40	@ 0x28
 8007524:	46bd      	mov	sp, r7
 8007526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800752a:	bf00      	nop
 800752c:	40008000 	.word	0x40008000
 8007530:	00f42400 	.word	0x00f42400

08007534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01a      	beq.n	800764a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007632:	d10a      	bne.n	800764a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
  }
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b098      	sub	sp, #96	@ 0x60
 800767c:	af02      	add	r7, sp, #8
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007688:	f7fc fcbe 	bl	8004008 <HAL_GetTick>
 800768c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b08      	cmp	r3, #8
 800769a:	d12e      	bne.n	80076fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a4:	2200      	movs	r2, #0
 80076a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f88c 	bl	80077c8 <UART_WaitOnFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d021      	beq.n	80076fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e062      	b.n	80077c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d149      	bne.n	800779c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007710:	2200      	movs	r2, #0
 8007712:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f856 	bl	80077c8 <UART_WaitOnFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d03c      	beq.n	800779c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	623b      	str	r3, [r7, #32]
   return(result);
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30
 8007742:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800774e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60fb      	str	r3, [r7, #12]
   return(result);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007774:	61fa      	str	r2, [r7, #28]
 8007776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	617b      	str	r3, [r7, #20]
   return(result);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e5      	bne.n	8007754 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e011      	b.n	80077c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3758      	adds	r7, #88	@ 0x58
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	4613      	mov	r3, r2
 80077d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d8:	e04f      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077e0:	d04b      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e2:	f7fc fc11 	bl	8004008 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e04e      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d037      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b80      	cmp	r3, #128	@ 0x80
 800780e:	d034      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b40      	cmp	r3, #64	@ 0x40
 8007814:	d031      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d110      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2208      	movs	r2, #8
 800782a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f838 	bl	80078a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2208      	movs	r2, #8
 8007836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e029      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007854:	d111      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800785e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f81e 	bl	80078a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e00f      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4013      	ands	r3, r2
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	429a      	cmp	r2, r3
 8007896:	d0a0      	beq.n	80077da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b095      	sub	sp, #84	@ 0x54
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e5      	bne.n	80078dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007914:	2b01      	cmp	r3, #1
 8007916:	d118      	bne.n	800794a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	60bb      	str	r3, [r7, #8]
   return(result);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	647b      	str	r3, [r7, #68]	@ 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6979      	ldr	r1, [r7, #20]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	613b      	str	r3, [r7, #16]
   return(result);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800795e:	bf00      	nop
 8007960:	3754      	adds	r7, #84	@ 0x54
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <__NVIC_SetPriority>:
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797c:	2b00      	cmp	r3, #0
 800797e:	db0a      	blt.n	8007996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	490c      	ldr	r1, [pc, #48]	@ (80079b8 <__NVIC_SetPriority+0x4c>)
 8007986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798a:	0112      	lsls	r2, r2, #4
 800798c:	b2d2      	uxtb	r2, r2
 800798e:	440b      	add	r3, r1
 8007990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007994:	e00a      	b.n	80079ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4908      	ldr	r1, [pc, #32]	@ (80079bc <__NVIC_SetPriority+0x50>)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	3b04      	subs	r3, #4
 80079a4:	0112      	lsls	r2, r2, #4
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	440b      	add	r3, r1
 80079aa:	761a      	strb	r2, [r3, #24]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	e000e100 	.word	0xe000e100
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079c4:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <SysTick_Handler+0x1c>)
 80079c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079c8:	f002 fd30 	bl	800a42c <xTaskGetSchedulerState>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d001      	beq.n	80079d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079d2:	f003 fce9 	bl	800b3a8 <xPortSysTickHandler>
  }
}
 80079d6:	bf00      	nop
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	e000e010 	.word	0xe000e010

080079e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079e4:	2100      	movs	r1, #0
 80079e6:	f06f 0004 	mvn.w	r0, #4
 80079ea:	f7ff ffbf 	bl	800796c <__NVIC_SetPriority>
#endif
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079fa:	f3ef 8305 	mrs	r3, IPSR
 80079fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007a00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a06:	f06f 0305 	mvn.w	r3, #5
 8007a0a:	607b      	str	r3, [r7, #4]
 8007a0c:	e00c      	b.n	8007a28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <osKernelInitialize+0x44>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a16:	4b08      	ldr	r3, [pc, #32]	@ (8007a38 <osKernelInitialize+0x44>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	e002      	b.n	8007a28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a28:	687b      	ldr	r3, [r7, #4]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000754 	.word	0x20000754

08007a3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a42:	f3ef 8305 	mrs	r3, IPSR
 8007a46:	603b      	str	r3, [r7, #0]
  return(result);
 8007a48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a4e:	f06f 0305 	mvn.w	r3, #5
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	e010      	b.n	8007a78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a56:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <osKernelStart+0x48>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d109      	bne.n	8007a72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a5e:	f7ff ffbf 	bl	80079e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a62:	4b08      	ldr	r3, [pc, #32]	@ (8007a84 <osKernelStart+0x48>)
 8007a64:	2202      	movs	r2, #2
 8007a66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a68:	f002 f882 	bl	8009b70 <vTaskStartScheduler>
      stat = osOK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	607b      	str	r3, [r7, #4]
 8007a70:	e002      	b.n	8007a78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a78:	687b      	ldr	r3, [r7, #4]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000754 	.word	0x20000754

08007a88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08e      	sub	sp, #56	@ 0x38
 8007a8c:	af04      	add	r7, sp, #16
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a98:	f3ef 8305 	mrs	r3, IPSR
 8007a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d17e      	bne.n	8007ba2 <osThreadNew+0x11a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d07b      	beq.n	8007ba2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007aaa:	2380      	movs	r3, #128	@ 0x80
 8007aac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007aae:	2318      	movs	r3, #24
 8007ab0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d045      	beq.n	8007b4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <osThreadNew+0x48>
        name = attr->name;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <osThreadNew+0x6e>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b38      	cmp	r3, #56	@ 0x38
 8007ae8:	d805      	bhi.n	8007af6 <osThreadNew+0x6e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <osThreadNew+0x72>
        return (NULL);
 8007af6:	2300      	movs	r3, #0
 8007af8:	e054      	b.n	8007ba4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	089b      	lsrs	r3, r3, #2
 8007b08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00e      	beq.n	8007b30 <osThreadNew+0xa8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b18:	d90a      	bls.n	8007b30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d006      	beq.n	8007b30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <osThreadNew+0xa8>
        mem = 1;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	e010      	b.n	8007b52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10c      	bne.n	8007b52 <osThreadNew+0xca>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <osThreadNew+0xca>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <osThreadNew+0xca>
          mem = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e001      	b.n	8007b52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d110      	bne.n	8007b7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6a3a      	ldr	r2, [r7, #32]
 8007b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 fe22 	bl	80097b8 <xTaskCreateStatic>
 8007b74:	4603      	mov	r3, r0
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	e013      	b.n	8007ba2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d110      	bne.n	8007ba2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fe70 	bl	8009878 <xTaskCreate>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d001      	beq.n	8007ba2 <osThreadNew+0x11a>
            hTask = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ba2:	693b      	ldr	r3, [r7, #16]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3728      	adds	r7, #40	@ 0x28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb4:	f3ef 8305 	mrs	r3, IPSR
 8007bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <osDelay+0x1c>
    stat = osErrorISR;
 8007bc0:	f06f 0305 	mvn.w	r3, #5
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e007      	b.n	8007bd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 ff96 	bl	8009b04 <vTaskDelay>
    }
  }

  return (stat);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f003 f9f8 	bl	800afe0 <pvTimerGetTimerID>
 8007bf0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	6852      	ldr	r2, [r2, #4]
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
  }
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	@ 0x30
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	613b      	str	r3, [r7, #16]
  return(result);
 8007c26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d163      	bne.n	8007cf4 <osTimerNew+0xe8>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d060      	beq.n	8007cf4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007c32:	2008      	movs	r0, #8
 8007c34:	f003 fc4a 	bl	800b4cc <pvPortMalloc>
 8007c38:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d059      	beq.n	8007cf4 <osTimerNew+0xe8>
      callb->func = func;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e001      	b.n	8007c5c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c60:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01c      	beq.n	8007ca6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <osTimerNew+0x6e>
          name = attr->name;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d006      	beq.n	8007c90 <osTimerNew+0x84>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c88:	d902      	bls.n	8007c90 <osTimerNew+0x84>
          mem = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	e00c      	b.n	8007caa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <osTimerNew+0x9e>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <osTimerNew+0x9e>
            mem = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	e001      	b.n	8007caa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10c      	bne.n	8007cca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	4b12      	ldr	r3, [pc, #72]	@ (8007d00 <osTimerNew+0xf4>)
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cc2:	f002 fe00 	bl	800a8c6 <xTimerCreateStatic>
 8007cc6:	6238      	str	r0, [r7, #32]
 8007cc8:	e00b      	b.n	8007ce2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d108      	bne.n	8007ce2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <osTimerNew+0xf4>)
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cdc:	f002 fdd2 	bl	800a884 <xTimerCreate>
 8007ce0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d105      	bne.n	8007cf4 <osTimerNew+0xe8>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <osTimerNew+0xe8>
        vPortFree (callb);
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f003 fcba 	bl	800b668 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3728      	adds	r7, #40	@ 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	08007be3 	.word	0x08007be3

08007d04 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d12:	f3ef 8305 	mrs	r3, IPSR
 8007d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d18:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <osTimerStart+0x22>
    stat = osErrorISR;
 8007d1e:	f06f 0305 	mvn.w	r3, #5
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e017      	b.n	8007d56 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007d2c:	f06f 0303 	mvn.w	r3, #3
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e010      	b.n	8007d56 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007d34:	2300      	movs	r3, #0
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	2104      	movs	r1, #4
 8007d3e:	6938      	ldr	r0, [r7, #16]
 8007d40:	f002 fe3e 	bl	800a9c0 <xTimerGenericCommand>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d102      	bne.n	8007d50 <osTimerStart+0x4c>
      stat = osOK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e002      	b.n	8007d56 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007d50:	f06f 0302 	mvn.w	r3, #2
 8007d54:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007d56:	697b      	ldr	r3, [r7, #20]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d6c:	f3ef 8305 	mrs	r3, IPSR
 8007d70:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d72:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d174      	bne.n	8007e62 <osMutexNew+0x102>
    if (attr != NULL) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e001      	b.n	8007d8a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <osMutexNew+0x3a>
      rmtx = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d15c      	bne.n	8007e62 <osMutexNew+0x102>
      mem = -1;
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <osMutexNew+0x6a>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b4f      	cmp	r3, #79	@ 0x4f
 8007dc2:	d902      	bls.n	8007dca <osMutexNew+0x6a>
          mem = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	e00c      	b.n	8007de4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d108      	bne.n	8007de4 <osMutexNew+0x84>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <osMutexNew+0x84>
            mem = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	e001      	b.n	8007de4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d112      	bne.n	8007e10 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4619      	mov	r1, r3
 8007df6:	2004      	movs	r0, #4
 8007df8:	f000 fd71 	bl	80088de <xQueueCreateMutexStatic>
 8007dfc:	61f8      	str	r0, [r7, #28]
 8007dfe:	e016      	b.n	8007e2e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4619      	mov	r1, r3
 8007e06:	2001      	movs	r0, #1
 8007e08:	f000 fd69 	bl	80088de <xQueueCreateMutexStatic>
 8007e0c:	61f8      	str	r0, [r7, #28]
 8007e0e:	e00e      	b.n	8007e2e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e1c:	2004      	movs	r0, #4
 8007e1e:	f000 fd46 	bl	80088ae <xQueueCreateMutex>
 8007e22:	61f8      	str	r0, [r7, #28]
 8007e24:	e003      	b.n	8007e2e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e26:	2001      	movs	r0, #1
 8007e28:	f000 fd41 	bl	80088ae <xQueueCreateMutex>
 8007e2c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <osMutexNew+0xee>
        if (attr != NULL) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <osMutexNew+0xe2>
          name = attr->name;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e001      	b.n	8007e46 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	69f8      	ldr	r0, [r7, #28]
 8007e4a:	f001 fc2d 	bl	80096a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d006      	beq.n	8007e62 <osMutexNew+0x102>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007e62:	69fb      	ldr	r3, [r7, #28]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3720      	adds	r7, #32
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e8a:	f3ef 8305 	mrs	r3, IPSR
 8007e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e90:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007e96:	f06f 0305 	mvn.w	r3, #5
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	e02c      	b.n	8007ef8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007ea4:	f06f 0303 	mvn.w	r3, #3
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e025      	b.n	8007ef8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d011      	beq.n	8007ed6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6938      	ldr	r0, [r7, #16]
 8007eb6:	f000 fd62 	bl	800897e <xQueueTakeMutexRecursive>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d01b      	beq.n	8007ef8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007ec6:	f06f 0301 	mvn.w	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e014      	b.n	8007ef8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007ece:	f06f 0302 	mvn.w	r3, #2
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e010      	b.n	8007ef8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6938      	ldr	r0, [r7, #16]
 8007eda:	f001 f907 	bl	80090ec <xQueueSemaphoreTake>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d009      	beq.n	8007ef8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007eea:	f06f 0301 	mvn.w	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e002      	b.n	8007ef8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007ef2:	f06f 0302 	mvn.w	r3, #2
 8007ef6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007ef8:	697b      	ldr	r3, [r7, #20]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1e:	f3ef 8305 	mrs	r3, IPSR
 8007f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f2a:	f06f 0305 	mvn.w	r3, #5
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e01f      	b.n	8007f72 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007f38:	f06f 0303 	mvn.w	r3, #3
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e018      	b.n	8007f72 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f000 fce4 	bl	8008914 <xQueueGiveMutexRecursive>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d00f      	beq.n	8007f72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f52:	f06f 0302 	mvn.w	r3, #2
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e00b      	b.n	8007f72 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6938      	ldr	r0, [r7, #16]
 8007f62:	f000 fdb1 	bl	8008ac8 <xQueueGenericSend>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d002      	beq.n	8007f72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f6c:	f06f 0302 	mvn.w	r3, #2
 8007f70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007f72:	697b      	ldr	r3, [r7, #20]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	@ 0x28
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8c:	f3ef 8305 	mrs	r3, IPSR
 8007f90:	613b      	str	r3, [r7, #16]
  return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d175      	bne.n	8008084 <osSemaphoreNew+0x108>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d072      	beq.n	8008084 <osSemaphoreNew+0x108>
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d86e      	bhi.n	8008084 <osSemaphoreNew+0x108>
    mem = -1;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007faa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d015      	beq.n	8007fde <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <osSemaphoreNew+0x4c>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fc0:	d902      	bls.n	8007fc8 <osSemaphoreNew+0x4c>
        mem = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e00c      	b.n	8007fe2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d108      	bne.n	8007fe2 <osSemaphoreNew+0x66>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <osSemaphoreNew+0x66>
          mem = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	e001      	b.n	8007fe2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fe8:	d04c      	beq.n	8008084 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d128      	bne.n	8008042 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d10a      	bne.n	800800c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	9200      	str	r2, [sp, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2100      	movs	r1, #0
 8008002:	2001      	movs	r0, #1
 8008004:	f000 fb5e 	bl	80086c4 <xQueueGenericCreateStatic>
 8008008:	61f8      	str	r0, [r7, #28]
 800800a:	e005      	b.n	8008018 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800800c:	2203      	movs	r2, #3
 800800e:	2100      	movs	r1, #0
 8008010:	2001      	movs	r0, #1
 8008012:	f000 fbd4 	bl	80087be <xQueueGenericCreate>
 8008016:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d022      	beq.n	8008064 <osSemaphoreNew+0xe8>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01f      	beq.n	8008064 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008024:	2300      	movs	r3, #0
 8008026:	2200      	movs	r2, #0
 8008028:	2100      	movs	r1, #0
 800802a:	69f8      	ldr	r0, [r7, #28]
 800802c:	f000 fd4c 	bl	8008ac8 <xQueueGenericSend>
 8008030:	4603      	mov	r3, r0
 8008032:	2b01      	cmp	r3, #1
 8008034:	d016      	beq.n	8008064 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008036:	69f8      	ldr	r0, [r7, #28]
 8008038:	f001 f9ea 	bl	8009410 <vQueueDelete>
            hSemaphore = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e010      	b.n	8008064 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d108      	bne.n	800805a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	461a      	mov	r2, r3
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fccb 	bl	80089ec <xQueueCreateCountingSemaphoreStatic>
 8008056:	61f8      	str	r0, [r7, #28]
 8008058:	e004      	b.n	8008064 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fcfe 	bl	8008a5e <xQueueCreateCountingSemaphore>
 8008062:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00c      	beq.n	8008084 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e001      	b.n	800807c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800807c:	6979      	ldr	r1, [r7, #20]
 800807e:	69f8      	ldr	r0, [r7, #28]
 8008080:	f001 fb12 	bl	80096a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008084:	69fb      	ldr	r3, [r7, #28]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080a8:	f06f 0303 	mvn.w	r3, #3
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e039      	b.n	8008124 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b0:	f3ef 8305 	mrs	r3, IPSR
 80080b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80080b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d022      	beq.n	8008102 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80080c2:	f06f 0303 	mvn.w	r3, #3
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	e02c      	b.n	8008124 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080ce:	f107 0308 	add.w	r3, r7, #8
 80080d2:	461a      	mov	r2, r3
 80080d4:	2100      	movs	r1, #0
 80080d6:	6938      	ldr	r0, [r7, #16]
 80080d8:	f001 f918 	bl	800930c <xQueueReceiveFromISR>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d003      	beq.n	80080ea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80080e2:	f06f 0302 	mvn.w	r3, #2
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e01c      	b.n	8008124 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d019      	beq.n	8008124 <osSemaphoreAcquire+0x94>
 80080f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008130 <osSemaphoreAcquire+0xa0>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	e010      	b.n	8008124 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6938      	ldr	r0, [r7, #16]
 8008106:	f000 fff1 	bl	80090ec <xQueueSemaphoreTake>
 800810a:	4603      	mov	r3, r0
 800810c:	2b01      	cmp	r3, #1
 800810e:	d009      	beq.n	8008124 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008116:	f06f 0301 	mvn.w	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e002      	b.n	8008124 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800811e:	f06f 0302 	mvn.w	r3, #2
 8008122:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008124:	697b      	ldr	r3, [r7, #20]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800814a:	f06f 0303 	mvn.w	r3, #3
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e02c      	b.n	80081ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008152:	f3ef 8305 	mrs	r3, IPSR
 8008156:	60fb      	str	r3, [r7, #12]
  return(result);
 8008158:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008162:	f107 0308 	add.w	r3, r7, #8
 8008166:	4619      	mov	r1, r3
 8008168:	6938      	ldr	r0, [r7, #16]
 800816a:	f000 fe4d 	bl	8008e08 <xQueueGiveFromISR>
 800816e:	4603      	mov	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d003      	beq.n	800817c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008174:	f06f 0302 	mvn.w	r3, #2
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e017      	b.n	80081ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d014      	beq.n	80081ac <osSemaphoreRelease+0x78>
 8008182:	4b0d      	ldr	r3, [pc, #52]	@ (80081b8 <osSemaphoreRelease+0x84>)
 8008184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	e00b      	b.n	80081ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008194:	2300      	movs	r3, #0
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	6938      	ldr	r0, [r7, #16]
 800819c:	f000 fc94 	bl	8008ac8 <xQueueGenericSend>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d002      	beq.n	80081ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081a6:	f06f 0302 	mvn.w	r3, #2
 80081aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80081ac:	697b      	ldr	r3, [r7, #20]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	@ 0x28
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081cc:	f3ef 8305 	mrs	r3, IPSR
 80081d0:	613b      	str	r3, [r7, #16]
  return(result);
 80081d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d15f      	bne.n	8008298 <osMessageQueueNew+0xdc>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d05c      	beq.n	8008298 <osMessageQueueNew+0xdc>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d059      	beq.n	8008298 <osMessageQueueNew+0xdc>
    mem = -1;
 80081e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d029      	beq.n	8008244 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d012      	beq.n	800821e <osMessageQueueNew+0x62>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80081fe:	d90e      	bls.n	800821e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695a      	ldr	r2, [r3, #20]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	429a      	cmp	r2, r3
 8008216:	d302      	bcc.n	800821e <osMessageQueueNew+0x62>
        mem = 1;
 8008218:	2301      	movs	r3, #1
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	e014      	b.n	8008248 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d110      	bne.n	8008248 <osMessageQueueNew+0x8c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10c      	bne.n	8008248 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008232:	2b00      	cmp	r3, #0
 8008234:	d108      	bne.n	8008248 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <osMessageQueueNew+0x8c>
          mem = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	e001      	b.n	8008248 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10b      	bne.n	8008266 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2100      	movs	r1, #0
 8008258:	9100      	str	r1, [sp, #0]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fa31 	bl	80086c4 <xQueueGenericCreateStatic>
 8008262:	61f8      	str	r0, [r7, #28]
 8008264:	e008      	b.n	8008278 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800826c:	2200      	movs	r2, #0
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 faa4 	bl	80087be <xQueueGenericCreate>
 8008276:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e001      	b.n	8008290 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008290:	6979      	ldr	r1, [r7, #20]
 8008292:	69f8      	ldr	r0, [r7, #28]
 8008294:	f001 fa08 	bl	80096a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008298:	69fb      	ldr	r3, [r7, #28]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082bc:	f3ef 8305 	mrs	r3, IPSR
 80082c0:	617b      	str	r3, [r7, #20]
  return(result);
 80082c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d028      	beq.n	800831a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <osMessageQueuePut+0x36>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <osMessageQueuePut+0x36>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80082da:	f06f 0303 	mvn.w	r3, #3
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e038      	b.n	8008354 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80082e6:	f107 0210 	add.w	r2, r7, #16
 80082ea:	2300      	movs	r3, #0
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	69b8      	ldr	r0, [r7, #24]
 80082f0:	f000 fcec 	bl	8008ccc <xQueueGenericSendFromISR>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d003      	beq.n	8008302 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80082fa:	f06f 0302 	mvn.w	r3, #2
 80082fe:	61fb      	str	r3, [r7, #28]
 8008300:	e028      	b.n	8008354 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d025      	beq.n	8008354 <osMessageQueuePut+0xb0>
 8008308:	4b15      	ldr	r3, [pc, #84]	@ (8008360 <osMessageQueuePut+0xbc>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	e01c      	b.n	8008354 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <osMessageQueuePut+0x82>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008326:	f06f 0303 	mvn.w	r3, #3
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e012      	b.n	8008354 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800832e:	2300      	movs	r3, #0
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	69b8      	ldr	r0, [r7, #24]
 8008336:	f000 fbc7 	bl	8008ac8 <xQueueGenericSend>
 800833a:	4603      	mov	r3, r0
 800833c:	2b01      	cmp	r3, #1
 800833e:	d009      	beq.n	8008354 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008346:	f06f 0301 	mvn.w	r3, #1
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	e002      	b.n	8008354 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800834e:	f06f 0302 	mvn.w	r3, #2
 8008352:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008354:	69fb      	ldr	r3, [r7, #28]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008376:	2300      	movs	r3, #0
 8008378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800837a:	f3ef 8305 	mrs	r3, IPSR
 800837e:	617b      	str	r3, [r7, #20]
  return(result);
 8008380:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008382:	2b00      	cmp	r3, #0
 8008384:	d028      	beq.n	80083d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <osMessageQueueGet+0x34>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <osMessageQueueGet+0x34>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008398:	f06f 0303 	mvn.w	r3, #3
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e037      	b.n	8008410 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	461a      	mov	r2, r3
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	69b8      	ldr	r0, [r7, #24]
 80083ae:	f000 ffad 	bl	800930c <xQueueReceiveFromISR>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d003      	beq.n	80083c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80083b8:	f06f 0302 	mvn.w	r3, #2
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e027      	b.n	8008410 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d024      	beq.n	8008410 <osMessageQueueGet+0xac>
 80083c6:	4b15      	ldr	r3, [pc, #84]	@ (800841c <osMessageQueueGet+0xb8>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	e01b      	b.n	8008410 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <osMessageQueueGet+0x80>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80083e4:	f06f 0303 	mvn.w	r3, #3
 80083e8:	61fb      	str	r3, [r7, #28]
 80083ea:	e011      	b.n	8008410 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	69b8      	ldr	r0, [r7, #24]
 80083f2:	f000 fd99 	bl	8008f28 <xQueueReceive>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d009      	beq.n	8008410 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008402:	f06f 0301 	mvn.w	r3, #1
 8008406:	61fb      	str	r3, [r7, #28]
 8008408:	e002      	b.n	8008410 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800840a:	f06f 0302 	mvn.w	r3, #2
 800840e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008410:	69fb      	ldr	r3, [r7, #28]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a07      	ldr	r2, [pc, #28]	@ (800844c <vApplicationGetIdleTaskMemory+0x2c>)
 8008430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4a06      	ldr	r2, [pc, #24]	@ (8008450 <vApplicationGetIdleTaskMemory+0x30>)
 8008436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2280      	movs	r2, #128	@ 0x80
 800843c:	601a      	str	r2, [r3, #0]
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000758 	.word	0x20000758
 8008450:	200007b4 	.word	0x200007b4

08008454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a07      	ldr	r2, [pc, #28]	@ (8008480 <vApplicationGetTimerTaskMemory+0x2c>)
 8008464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4a06      	ldr	r2, [pc, #24]	@ (8008484 <vApplicationGetTimerTaskMemory+0x30>)
 800846a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	200009b4 	.word	0x200009b4
 8008484:	20000a10 	.word	0x20000a10

08008488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f103 0208 	add.w	r2, r3, #8
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f103 0208 	add.w	r2, r3, #8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f103 0208 	add.w	r2, r3, #8
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008540:	d103      	bne.n	800854a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e00c      	b.n	8008564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3308      	adds	r3, #8
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e002      	b.n	8008558 <vListInsert+0x2e>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	d2f6      	bcs.n	8008552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6892      	ldr	r2, [r2, #8]
 80085b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d103      	bne.n	80085d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	1e5a      	subs	r2, r3, #1
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800861c:	f002 fe34 	bl	800b288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	68f9      	ldr	r1, [r7, #12]
 800862a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	3b01      	subs	r3, #1
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	441a      	add	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	22ff      	movs	r2, #255	@ 0xff
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	22ff      	movs	r2, #255	@ 0xff
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d114      	bne.n	800869c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01a      	beq.n	80086b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3310      	adds	r3, #16
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fd04 	bl	800a08c <xTaskRemoveFromEventList>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d012      	beq.n	80086b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800868a:	4b0d      	ldr	r3, [pc, #52]	@ (80086c0 <xQueueGenericReset+0xd0>)
 800868c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	e009      	b.n	80086b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3310      	adds	r3, #16
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fef1 	bl	8008488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3324      	adds	r3, #36	@ 0x24
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff feec 	bl	8008488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086b0:	f002 fe1c 	bl	800b2ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086b4:	2301      	movs	r3, #1
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	@ 0x38
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10b      	bne.n	80086f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <xQueueGenericCreateStatic+0x56>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <xQueueGenericCreateStatic+0x5a>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <xQueueGenericCreateStatic+0x5c>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d102      	bne.n	8008748 <xQueueGenericCreateStatic+0x84>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <xQueueGenericCreateStatic+0x88>
 8008748:	2301      	movs	r3, #1
 800874a:	e000      	b.n	800874e <xQueueGenericCreateStatic+0x8a>
 800874c:	2300      	movs	r3, #0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	61fb      	str	r3, [r7, #28]
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	e7fd      	b.n	8008766 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800876a:	2350      	movs	r3, #80	@ 0x50
 800876c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b50      	cmp	r3, #80	@ 0x50
 8008772:	d00b      	beq.n	800878c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	61bb      	str	r3, [r7, #24]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800878c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f840 	bl	8008834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	@ 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b08a      	sub	sp, #40	@ 0x28
 80087c2:	af02      	add	r7, sp, #8
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	4613      	mov	r3, r2
 80087ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	613b      	str	r3, [r7, #16]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	3350      	adds	r3, #80	@ 0x50
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 fe67 	bl	800b4cc <pvPortMalloc>
 80087fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d011      	beq.n	800882a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3350      	adds	r3, #80	@ 0x50
 800880e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008818:	79fa      	ldrb	r2, [r7, #7]
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f805 	bl	8008834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800882a:	69bb      	ldr	r3, [r7, #24]
	}
 800882c:	4618      	mov	r0, r3
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e002      	b.n	8008856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008862:	2101      	movs	r1, #1
 8008864:	69b8      	ldr	r0, [r7, #24]
 8008866:	f7ff fec3 	bl	80085f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800889a:	2300      	movs	r3, #0
 800889c:	2200      	movs	r2, #0
 800889e:	2100      	movs	r1, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f911 	bl	8008ac8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	4603      	mov	r3, r0
 80088b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088b8:	2301      	movs	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6939      	ldr	r1, [r7, #16]
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f7ff ff79 	bl	80087be <xQueueGenericCreate>
 80088cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff ffd3 	bl	800887a <prvInitialiseMutex>

		return xNewQueue;
 80088d4:	68fb      	ldr	r3, [r7, #12]
	}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af02      	add	r7, sp, #8
 80088e4:	4603      	mov	r3, r0
 80088e6:	6039      	str	r1, [r7, #0]
 80088e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088ea:	2301      	movs	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2200      	movs	r2, #0
 80088fa:	6939      	ldr	r1, [r7, #16]
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	f7ff fee1 	bl	80086c4 <xQueueGenericCreateStatic>
 8008902:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff ffb8 	bl	800887a <prvInitialiseMutex>

		return xNewQueue;
 800890a:	68fb      	ldr	r3, [r7, #12]
	}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10b      	bne.n	800893e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	689c      	ldr	r4, [r3, #8]
 8008942:	f001 fd63 	bl	800a40c <xTaskGetCurrentTaskHandle>
 8008946:	4603      	mov	r3, r0
 8008948:	429c      	cmp	r4, r3
 800894a:	d111      	bne.n	8008970 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	1e5a      	subs	r2, r3, #1
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d105      	bne.n	800896a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6938      	ldr	r0, [r7, #16]
 8008966:	f000 f8af 	bl	8008ac8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800896a:	2301      	movs	r3, #1
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	e001      	b.n	8008974 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008974:	697b      	ldr	r3, [r7, #20]
	}
 8008976:	4618      	mov	r0, r3
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	bd90      	pop	{r4, r7, pc}

0800897e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800897e:	b590      	push	{r4, r7, lr}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60fb      	str	r3, [r7, #12]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	689c      	ldr	r4, [r3, #8]
 80089ae:	f001 fd2d 	bl	800a40c <xTaskGetCurrentTaskHandle>
 80089b2:	4603      	mov	r3, r0
 80089b4:	429c      	cmp	r4, r3
 80089b6:	d107      	bne.n	80089c8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80089c2:	2301      	movs	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e00c      	b.n	80089e2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6938      	ldr	r0, [r7, #16]
 80089cc:	f000 fb8e 	bl	80090ec <xQueueSemaphoreTake>
 80089d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80089e2:	697b      	ldr	r3, [r7, #20]
	}
 80089e4:	4618      	mov	r0, r3
 80089e6:	371c      	adds	r7, #28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08a      	sub	sp, #40	@ 0x28
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	61bb      	str	r3, [r7, #24]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d90b      	bls.n	8008a36 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	617b      	str	r3, [r7, #20]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a36:	2302      	movs	r3, #2
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff fe3f 	bl	80086c4 <xQueueGenericCreateStatic>
 8008a46:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a54:	69fb      	ldr	r3, [r7, #28]
	}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b086      	sub	sp, #24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	613b      	str	r3, [r7, #16]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d90b      	bls.n	8008aa6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fe87 	bl	80087be <xQueueGenericCreate>
 8008ab0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008abe:	697b      	ldr	r3, [r7, #20]
	}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08e      	sub	sp, #56	@ 0x38
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xQueueGenericSend+0x34>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x42>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGenericSend+0x46>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGenericSend+0x48>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <xQueueGenericSend+0x64>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSend+0x72>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <xQueueGenericSend+0x76>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <xQueueGenericSend+0x78>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <xQueueGenericSend+0x94>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	623b      	str	r3, [r7, #32]
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5c:	f001 fc66 	bl	800a42c <xTaskGetSchedulerState>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <xQueueGenericSend+0xa4>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <xQueueGenericSend+0xa8>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <xQueueGenericSend+0xaa>
 8008b70:	2300      	movs	r3, #0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <xQueueGenericSend+0xc6>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	61fb      	str	r3, [r7, #28]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b8e:	f002 fb7b 	bl	800b288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d302      	bcc.n	8008ba4 <xQueueGenericSend+0xdc>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d129      	bne.n	8008bf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008baa:	f000 fc6d 	bl	8009488 <prvCopyDataToQueue>
 8008bae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	3324      	adds	r3, #36	@ 0x24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fa65 	bl	800a08c <xTaskRemoveFromEventList>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	e00a      	b.n	8008bf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008be0:	4b39      	ldr	r3, [pc, #228]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bf0:	f002 fb7c 	bl	800b2ec <vPortExitCritical>
				return pdPASS;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e063      	b.n	8008cc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bfe:	f002 fb75 	bl	800b2ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e05c      	b.n	8008cc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c0c:	f107 0314 	add.w	r3, r7, #20
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 fa9f 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c1a:	f002 fb67 	bl	800b2ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c1e:	f001 f80f 	bl	8009c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c22:	f002 fb31 	bl	800b288 <vPortEnterCritical>
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c2c:	b25b      	sxtb	r3, r3
 8008c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c32:	d103      	bne.n	8008c3c <xQueueGenericSend+0x174>
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c48:	d103      	bne.n	8008c52 <xQueueGenericSend+0x18a>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c52:	f002 fb4b 	bl	800b2ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c56:	1d3a      	adds	r2, r7, #4
 8008c58:	f107 0314 	add.w	r3, r7, #20
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 fa8e 	bl	800a180 <xTaskCheckForTimeOut>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d124      	bne.n	8008cb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c6c:	f000 fd04 	bl	8009678 <prvIsQueueFull>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	3310      	adds	r3, #16
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 f9b2 	bl	8009fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c86:	f000 fc8f 	bl	80095a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c8a:	f000 ffe7 	bl	8009c5c <xTaskResumeAll>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f af7c 	bne.w	8008b8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c96:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	e772      	b.n	8008b8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008caa:	f000 fc7d 	bl	80095a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cae:	f000 ffd5 	bl	8009c5c <xTaskResumeAll>
 8008cb2:	e76c      	b.n	8008b8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cb6:	f000 fc77 	bl	80095a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cba:	f000 ffcf 	bl	8009c5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3738      	adds	r7, #56	@ 0x38
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b090      	sub	sp, #64	@ 0x40
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	e7fd      	b.n	8008cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueGenericSendFromISR+0x3e>
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <xQueueGenericSendFromISR+0x42>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueGenericSendFromISR+0x44>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10b      	bne.n	8008d2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d103      	bne.n	8008d3a <xQueueGenericSendFromISR+0x6e>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <xQueueGenericSendFromISR+0x72>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueGenericSendFromISR+0x74>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	623b      	str	r3, [r7, #32]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d5c:	f002 fb74 	bl	800b448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d60:	f3ef 8211 	mrs	r2, BASEPRI
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61fa      	str	r2, [r7, #28]
 8008d76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d302      	bcc.n	8008d8e <xQueueGenericSendFromISR+0xc2>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d12f      	bne.n	8008dee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008da4:	f000 fb70 	bl	8009488 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008da8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008db0:	d112      	bne.n	8008dd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	3324      	adds	r3, #36	@ 0x24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 f964 	bl	800a08c <xTaskRemoveFromEventList>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00e      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	e007      	b.n	8008de8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ddc:	3301      	adds	r3, #1
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	b25a      	sxtb	r2, r3
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008de8:	2301      	movs	r3, #1
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008dec:	e001      	b.n	8008df2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3740      	adds	r7, #64	@ 0x40
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	@ 0x38
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	623b      	str	r3, [r7, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	61fb      	str	r3, [r7, #28]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <xQueueGiveFromISR+0x5c>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <xQueueGiveFromISR+0x60>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <xQueueGiveFromISR+0x62>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	61bb      	str	r3, [r7, #24]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e86:	f002 fadf 	bl	800b448 <vPortValidateInterruptPriority>
	__asm volatile
 8008e8a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	617a      	str	r2, [r7, #20]
 8008ea0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ea2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d22b      	bcs.n	8008f0e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ed0:	d112      	bne.n	8008ef8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d016      	beq.n	8008f08 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	3324      	adds	r3, #36	@ 0x24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 f8d4 	bl	800a08c <xTaskRemoveFromEventList>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00e      	beq.n	8008f08 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	e007      	b.n	8008f08 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008efc:	3301      	adds	r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	b25a      	sxtb	r2, r3
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f0c:	e001      	b.n	8008f12 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f383 8811 	msr	BASEPRI, r3
}
 8008f1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3738      	adds	r7, #56	@ 0x38
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08c      	sub	sp, #48	@ 0x30
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <xQueueReceive+0x32>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	623b      	str	r3, [r7, #32]
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	e7fd      	b.n	8008f56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <xQueueReceive+0x40>
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <xQueueReceive+0x44>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <xQueueReceive+0x46>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <xQueueReceive+0x62>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61fb      	str	r3, [r7, #28]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8a:	f001 fa4f 	bl	800a42c <xTaskGetSchedulerState>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <xQueueReceive+0x72>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <xQueueReceive+0x76>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <xQueueReceive+0x78>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <xQueueReceive+0x94>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	61bb      	str	r3, [r7, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fbc:	f002 f964 	bl	800b288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01f      	beq.n	800900c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd0:	f000 fac4 	bl	800955c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	1e5a      	subs	r2, r3, #1
 8008fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00f      	beq.n	8009004 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	3310      	adds	r3, #16
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f84f 	bl	800a08c <xTaskRemoveFromEventList>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80090e8 <xQueueReceive+0x1c0>)
 8008ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009004:	f002 f972 	bl	800b2ec <vPortExitCritical>
				return pdPASS;
 8009008:	2301      	movs	r3, #1
 800900a:	e069      	b.n	80090e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009012:	f002 f96b 	bl	800b2ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009016:	2300      	movs	r3, #0
 8009018:	e062      	b.n	80090e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800901a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f895 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800902a:	2301      	movs	r3, #1
 800902c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800902e:	f002 f95d 	bl	800b2ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009032:	f000 fe05 	bl	8009c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009036:	f002 f927 	bl	800b288 <vPortEnterCritical>
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009040:	b25b      	sxtb	r3, r3
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009046:	d103      	bne.n	8009050 <xQueueReceive+0x128>
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009056:	b25b      	sxtb	r3, r3
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800905c:	d103      	bne.n	8009066 <xQueueReceive+0x13e>
 800905e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009066:	f002 f941 	bl	800b2ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800906a:	1d3a      	adds	r2, r7, #4
 800906c:	f107 0310 	add.w	r3, r7, #16
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f884 	bl	800a180 <xTaskCheckForTimeOut>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d123      	bne.n	80090c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	f000 fae4 	bl	800964c <prvIsQueueEmpty>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d017      	beq.n	80090ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	3324      	adds	r3, #36	@ 0x24
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f000 ffa8 	bl	8009fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800909a:	f000 fa85 	bl	80095a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800909e:	f000 fddd 	bl	8009c5c <xTaskResumeAll>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d189      	bne.n	8008fbc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80090a8:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <xQueueReceive+0x1c0>)
 80090aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	e780      	b.n	8008fbc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090bc:	f000 fa74 	bl	80095a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090c0:	f000 fdcc 	bl	8009c5c <xTaskResumeAll>
 80090c4:	e77a      	b.n	8008fbc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090c8:	f000 fa6e 	bl	80095a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090cc:	f000 fdc6 	bl	8009c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090d2:	f000 fabb 	bl	800964c <prvIsQueueEmpty>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f43f af6f 	beq.w	8008fbc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3730      	adds	r7, #48	@ 0x30
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	@ 0x38
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80090fe:	2300      	movs	r3, #0
 8009100:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	623b      	str	r3, [r7, #32]
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	e7fd      	b.n	800911c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	61fb      	str	r3, [r7, #28]
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009140:	f001 f974 	bl	800a42c <xTaskGetSchedulerState>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <xQueueSemaphoreTake+0x64>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <xQueueSemaphoreTake+0x68>
 8009150:	2301      	movs	r3, #1
 8009152:	e000      	b.n	8009156 <xQueueSemaphoreTake+0x6a>
 8009154:	2300      	movs	r3, #0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	61bb      	str	r3, [r7, #24]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009172:	f002 f889 	bl	800b288 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d024      	beq.n	80091cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	1e5a      	subs	r2, r3, #1
 8009186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800918a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009192:	f001 fac5 	bl	800a720 <pvTaskIncrementMutexHeldCount>
 8009196:	4602      	mov	r2, r0
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00f      	beq.n	80091c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	3310      	adds	r3, #16
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 ff6f 	bl	800a08c <xTaskRemoveFromEventList>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d007      	beq.n	80091c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091b4:	4b54      	ldr	r3, [pc, #336]	@ (8009308 <xQueueSemaphoreTake+0x21c>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091c4:	f002 f892 	bl	800b2ec <vPortExitCritical>
				return pdPASS;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e098      	b.n	80092fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d112      	bne.n	80091f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	617b      	str	r3, [r7, #20]
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	e7fd      	b.n	80091ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80091f0:	f002 f87c 	bl	800b2ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e082      	b.n	80092fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091fe:	f107 030c 	add.w	r3, r7, #12
 8009202:	4618      	mov	r0, r3
 8009204:	f000 ffa6 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800920c:	f002 f86e 	bl	800b2ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009210:	f000 fd16 	bl	8009c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009214:	f002 f838 	bl	800b288 <vPortEnterCritical>
 8009218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800921e:	b25b      	sxtb	r3, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009224:	d103      	bne.n	800922e <xQueueSemaphoreTake+0x142>
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800923a:	d103      	bne.n	8009244 <xQueueSemaphoreTake+0x158>
 800923c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009244:	f002 f852 	bl	800b2ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009248:	463a      	mov	r2, r7
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f000 ff95 	bl	800a180 <xTaskCheckForTimeOut>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d132      	bne.n	80092c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800925e:	f000 f9f5 	bl	800964c <prvIsQueueEmpty>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d026      	beq.n	80092b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009270:	f002 f80a 	bl	800b288 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f8f5 	bl	800a468 <xTaskPriorityInherit>
 800927e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009280:	f002 f834 	bl	800b2ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	3324      	adds	r3, #36	@ 0x24
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f000 feab 	bl	8009fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009294:	f000 f988 	bl	80095a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009298:	f000 fce0 	bl	8009c5c <xTaskResumeAll>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af67 	bne.w	8009172 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80092a4:	4b18      	ldr	r3, [pc, #96]	@ (8009308 <xQueueSemaphoreTake+0x21c>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	e75d      	b.n	8009172 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092b8:	f000 f976 	bl	80095a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092bc:	f000 fcce 	bl	8009c5c <xTaskResumeAll>
 80092c0:	e757      	b.n	8009172 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092c4:	f000 f970 	bl	80095a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092c8:	f000 fcc8 	bl	8009c5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092ce:	f000 f9bd 	bl	800964c <prvIsQueueEmpty>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f43f af4c 	beq.w	8009172 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00d      	beq.n	80092fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80092e0:	f001 ffd2 	bl	800b288 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80092e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80092e6:	f000 f8b7 	bl	8009458 <prvGetDisinheritPriorityAfterTimeout>
 80092ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80092ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f990 	bl	800a618 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80092f8:	f001 fff8 	bl	800b2ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3738      	adds	r7, #56	@ 0x38
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08e      	sub	sp, #56	@ 0x38
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	623b      	str	r3, [r7, #32]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <xQueueReceiveFromISR+0x3c>
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <xQueueReceiveFromISR+0x40>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <xQueueReceiveFromISR+0x42>
 800934c:	2300      	movs	r3, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	61fb      	str	r3, [r7, #28]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800936a:	f002 f86d 	bl	800b448 <vPortValidateInterruptPriority>
	__asm volatile
 800936e:	f3ef 8211 	mrs	r2, BASEPRI
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	61ba      	str	r2, [r7, #24]
 8009384:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009386:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009388:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	d02f      	beq.n	80093f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800939c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093a4:	f000 f8da 	bl	800955c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	1e5a      	subs	r2, r3, #1
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b8:	d112      	bne.n	80093e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d016      	beq.n	80093f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	3310      	adds	r3, #16
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fe60 	bl	800a08c <xTaskRemoveFromEventList>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00e      	beq.n	80093f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	e007      	b.n	80093f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80093e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093e4:	3301      	adds	r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	b25a      	sxtb	r2, r3
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80093f0:	2301      	movs	r3, #1
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f4:	e001      	b.n	80093fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f383 8811 	msr	BASEPRI, r3
}
 8009404:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009408:	4618      	mov	r0, r3
 800940a:	3738      	adds	r7, #56	@ 0x38
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10b      	bne.n	800943a <vQueueDelete+0x2a>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	60bb      	str	r3, [r7, #8]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f95e 	bl	80096fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f002 f90c 	bl	800b668 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e001      	b.n	800947a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800947a:	68fb      	ldr	r3, [r7, #12]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10d      	bne.n	80094c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d14d      	bne.n	800954a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f001 f840 	bl	800a538 <xTaskPriorityDisinherit>
 80094b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	e043      	b.n	800954a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d119      	bne.n	80094fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6858      	ldr	r0, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d0:	461a      	mov	r2, r3
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	f002 ffc5 	bl	800c462 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e0:	441a      	add	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d32b      	bcc.n	800954a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	e026      	b.n	800954a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68d8      	ldr	r0, [r3, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009504:	461a      	mov	r2, r3
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	f002 ffab 	bl	800c462 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009514:	425b      	negs	r3, r3
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d207      	bcs.n	8009538 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009530:	425b      	negs	r3, r3
 8009532:	441a      	add	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d105      	bne.n	800954a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3b01      	subs	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d018      	beq.n	80095a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009576:	441a      	add	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	d303      	bcc.n	8009590 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68d9      	ldr	r1, [r3, #12]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009598:	461a      	mov	r2, r3
 800959a:	6838      	ldr	r0, [r7, #0]
 800959c:	f002 ff61 	bl	800c462 <memcpy>
	}
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095b0:	f001 fe6a 	bl	800b288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095bc:	e011      	b.n	80095e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d012      	beq.n	80095ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3324      	adds	r3, #36	@ 0x24
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fd5e 	bl	800a08c <xTaskRemoveFromEventList>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095d6:	f000 fe37 	bl	800a248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	3b01      	subs	r3, #1
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dce9      	bgt.n	80095be <prvUnlockQueue+0x16>
 80095ea:	e000      	b.n	80095ee <prvUnlockQueue+0x46>
					break;
 80095ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	22ff      	movs	r2, #255	@ 0xff
 80095f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80095f6:	f001 fe79 	bl	800b2ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095fa:	f001 fe45 	bl	800b288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009604:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009606:	e011      	b.n	800962c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d012      	beq.n	8009636 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3310      	adds	r3, #16
 8009614:	4618      	mov	r0, r3
 8009616:	f000 fd39 	bl	800a08c <xTaskRemoveFromEventList>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009620:	f000 fe12 	bl	800a248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	3b01      	subs	r3, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800962c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dce9      	bgt.n	8009608 <prvUnlockQueue+0x60>
 8009634:	e000      	b.n	8009638 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009636:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	22ff      	movs	r2, #255	@ 0xff
 800963c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009640:	f001 fe54 	bl	800b2ec <vPortExitCritical>
}
 8009644:	bf00      	nop
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009654:	f001 fe18 	bl	800b288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009660:	2301      	movs	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e001      	b.n	800966a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800966a:	f001 fe3f 	bl	800b2ec <vPortExitCritical>

	return xReturn;
 800966e:	68fb      	ldr	r3, [r7, #12]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009680:	f001 fe02 	bl	800b288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800968c:	429a      	cmp	r2, r3
 800968e:	d102      	bne.n	8009696 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	e001      	b.n	800969a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800969a:	f001 fe27 	bl	800b2ec <vPortExitCritical>

	return xReturn;
 800969e:	68fb      	ldr	r3, [r7, #12]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	e014      	b.n	80096e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096b8:	4a0f      	ldr	r2, [pc, #60]	@ (80096f8 <vQueueAddToRegistry+0x50>)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10b      	bne.n	80096dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096c4:	490c      	ldr	r1, [pc, #48]	@ (80096f8 <vQueueAddToRegistry+0x50>)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096ce:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <vQueueAddToRegistry+0x50>)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4413      	add	r3, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096da:	e006      	b.n	80096ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	d9e7      	bls.n	80096b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000e10 	.word	0x20000e10

080096fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	e016      	b.n	8009738 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800970a:	4a10      	ldr	r2, [pc, #64]	@ (800974c <vQueueUnregisterQueue+0x50>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	d10b      	bne.n	8009732 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800971a:	4a0c      	ldr	r2, [pc, #48]	@ (800974c <vQueueUnregisterQueue+0x50>)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2100      	movs	r1, #0
 8009720:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009724:	4a09      	ldr	r2, [pc, #36]	@ (800974c <vQueueUnregisterQueue+0x50>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	4413      	add	r3, r2
 800972c:	2200      	movs	r2, #0
 800972e:	605a      	str	r2, [r3, #4]
				break;
 8009730:	e006      	b.n	8009740 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b07      	cmp	r3, #7
 800973c:	d9e5      	bls.n	800970a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20000e10 	.word	0x20000e10

08009750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009760:	f001 fd92 	bl	800b288 <vPortEnterCritical>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800976a:	b25b      	sxtb	r3, r3
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009770:	d103      	bne.n	800977a <vQueueWaitForMessageRestricted+0x2a>
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009780:	b25b      	sxtb	r3, r3
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009786:	d103      	bne.n	8009790 <vQueueWaitForMessageRestricted+0x40>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009790:	f001 fdac 	bl	800b2ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	3324      	adds	r3, #36	@ 0x24
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fc45 	bl	800a034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097aa:	6978      	ldr	r0, [r7, #20]
 80097ac:	f7ff fefc 	bl	80095a8 <prvUnlockQueue>
	}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	@ 0x38
 80097bc:	af04      	add	r7, sp, #16
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	623b      	str	r3, [r7, #32]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10b      	bne.n	8009802 <xTaskCreateStatic+0x4a>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	61fb      	str	r3, [r7, #28]
}
 80097fc:	bf00      	nop
 80097fe:	bf00      	nop
 8009800:	e7fd      	b.n	80097fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009802:	235c      	movs	r3, #92	@ 0x5c
 8009804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b5c      	cmp	r3, #92	@ 0x5c
 800980a:	d00b      	beq.n	8009824 <xTaskCreateStatic+0x6c>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61bb      	str	r3, [r7, #24]
}
 800981e:	bf00      	nop
 8009820:	bf00      	nop
 8009822:	e7fd      	b.n	8009820 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009824:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01e      	beq.n	800986a <xTaskCreateStatic+0xb2>
 800982c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982e:	2b00      	cmp	r3, #0
 8009830:	d01b      	beq.n	800986a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800983a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	2202      	movs	r2, #2
 8009840:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009844:	2300      	movs	r3, #0
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	9302      	str	r3, [sp, #8]
 800984c:	f107 0314 	add.w	r3, r7, #20
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f850 	bl	8009902 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009864:	f000 f8de 	bl	8009a24 <prvAddNewTaskToReadyList>
 8009868:	e001      	b.n	800986e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800986e:	697b      	ldr	r3, [r7, #20]
	}
 8009870:	4618      	mov	r0, r3
 8009872:	3728      	adds	r7, #40	@ 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08c      	sub	sp, #48	@ 0x30
 800987c:	af04      	add	r7, sp, #16
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4618      	mov	r0, r3
 800988e:	f001 fe1d 	bl	800b4cc <pvPortMalloc>
 8009892:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00e      	beq.n	80098b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800989a:	205c      	movs	r0, #92	@ 0x5c
 800989c:	f001 fe16 	bl	800b4cc <pvPortMalloc>
 80098a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80098ae:	e005      	b.n	80098bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098b0:	6978      	ldr	r0, [r7, #20]
 80098b2:	f001 fed9 	bl	800b668 <vPortFree>
 80098b6:	e001      	b.n	80098bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d017      	beq.n	80098f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	2300      	movs	r3, #0
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	9302      	str	r3, [sp, #8]
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f80e 	bl	8009902 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098e6:	69f8      	ldr	r0, [r7, #28]
 80098e8:	f000 f89c 	bl	8009a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098ec:	2301      	movs	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	e002      	b.n	80098f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098f8:	69bb      	ldr	r3, [r7, #24]
	}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b088      	sub	sp, #32
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	461a      	mov	r2, r3
 800991a:	21a5      	movs	r1, #165	@ 0xa5
 800991c:	f002 fd21 	bl	800c362 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800992a:	3b01      	subs	r3, #1
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f003 0307 	and.w	r3, r3, #7
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	617b      	str	r3, [r7, #20]
}
 8009956:	bf00      	nop
 8009958:	bf00      	nop
 800995a:	e7fd      	b.n	8009958 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01f      	beq.n	80099a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009962:	2300      	movs	r3, #0
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e012      	b.n	800998e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	7819      	ldrb	r1, [r3, #0]
 8009970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	3334      	adds	r3, #52	@ 0x34
 8009978:	460a      	mov	r2, r1
 800997a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d006      	beq.n	8009996 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	3301      	adds	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b0f      	cmp	r3, #15
 8009992:	d9e9      	bls.n	8009968 <prvInitialiseNewTask+0x66>
 8009994:	e000      	b.n	8009998 <prvInitialiseNewTask+0x96>
			{
				break;
 8009996:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099a0:	e003      	b.n	80099aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	2b37      	cmp	r3, #55	@ 0x37
 80099ae:	d901      	bls.n	80099b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099b0:	2337      	movs	r3, #55	@ 0x37
 80099b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c2:	2200      	movs	r2, #0
 80099c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	3304      	adds	r3, #4
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fd7c 	bl	80084c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	3318      	adds	r3, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fd77 	bl	80084c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	2200      	movs	r2, #0
 80099f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	68f9      	ldr	r1, [r7, #12]
 8009a02:	69b8      	ldr	r0, [r7, #24]
 8009a04:	f001 fb0e 	bl	800b024 <pxPortInitialiseStack>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a1a:	bf00      	nop
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a2c:	f001 fc2c 	bl	800b288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a30:	4b2d      	ldr	r3, [pc, #180]	@ (8009ae8 <prvAddNewTaskToReadyList+0xc4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3301      	adds	r3, #1
 8009a36:	4a2c      	ldr	r2, [pc, #176]	@ (8009ae8 <prvAddNewTaskToReadyList+0xc4>)
 8009a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8009aec <prvAddNewTaskToReadyList+0xc8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a42:	4a2a      	ldr	r2, [pc, #168]	@ (8009aec <prvAddNewTaskToReadyList+0xc8>)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a48:	4b27      	ldr	r3, [pc, #156]	@ (8009ae8 <prvAddNewTaskToReadyList+0xc4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d110      	bne.n	8009a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a50:	f000 fc1e 	bl	800a290 <prvInitialiseTaskLists>
 8009a54:	e00d      	b.n	8009a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a56:	4b26      	ldr	r3, [pc, #152]	@ (8009af0 <prvAddNewTaskToReadyList+0xcc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d109      	bne.n	8009a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a5e:	4b23      	ldr	r3, [pc, #140]	@ (8009aec <prvAddNewTaskToReadyList+0xc8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d802      	bhi.n	8009a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8009aec <prvAddNewTaskToReadyList+0xc8>)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a72:	4b20      	ldr	r3, [pc, #128]	@ (8009af4 <prvAddNewTaskToReadyList+0xd0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	4a1e      	ldr	r2, [pc, #120]	@ (8009af4 <prvAddNewTaskToReadyList+0xd0>)
 8009a7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009af4 <prvAddNewTaskToReadyList+0xd0>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a88:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <prvAddNewTaskToReadyList+0xd4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d903      	bls.n	8009a98 <prvAddNewTaskToReadyList+0x74>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	4a18      	ldr	r2, [pc, #96]	@ (8009af8 <prvAddNewTaskToReadyList+0xd4>)
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4a15      	ldr	r2, [pc, #84]	@ (8009afc <prvAddNewTaskToReadyList+0xd8>)
 8009aa6:	441a      	add	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	4619      	mov	r1, r3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	f7fe fd17 	bl	80084e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ab4:	f001 fc1a 	bl	800b2ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8009af0 <prvAddNewTaskToReadyList+0xcc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00e      	beq.n	8009ade <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8009aec <prvAddNewTaskToReadyList+0xc8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d207      	bcs.n	8009ade <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ace:	4b0c      	ldr	r3, [pc, #48]	@ (8009b00 <prvAddNewTaskToReadyList+0xdc>)
 8009ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ade:	bf00      	nop
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20001324 	.word	0x20001324
 8009aec:	20000e50 	.word	0x20000e50
 8009af0:	20001330 	.word	0x20001330
 8009af4:	20001340 	.word	0x20001340
 8009af8:	2000132c 	.word	0x2000132c
 8009afc:	20000e54 	.word	0x20000e54
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d018      	beq.n	8009b48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b16:	4b14      	ldr	r3, [pc, #80]	@ (8009b68 <vTaskDelay+0x64>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00b      	beq.n	8009b36 <vTaskDelay+0x32>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	60bb      	str	r3, [r7, #8]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b36:	f000 f883 	bl	8009c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fe03 	bl	800a748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b42:	f000 f88b 	bl	8009c5c <xTaskResumeAll>
 8009b46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d107      	bne.n	8009b5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b4e:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <vTaskDelay+0x68>)
 8009b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	2000134c 	.word	0x2000134c
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08a      	sub	sp, #40	@ 0x28
 8009b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b7e:	463a      	mov	r2, r7
 8009b80:	1d39      	adds	r1, r7, #4
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fc4a 	bl	8008420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	9202      	str	r2, [sp, #8]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	4922      	ldr	r1, [pc, #136]	@ (8009c28 <vTaskStartScheduler+0xb8>)
 8009ba0:	4822      	ldr	r0, [pc, #136]	@ (8009c2c <vTaskStartScheduler+0xbc>)
 8009ba2:	f7ff fe09 	bl	80097b8 <xTaskCreateStatic>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	4a21      	ldr	r2, [pc, #132]	@ (8009c30 <vTaskStartScheduler+0xc0>)
 8009baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bac:	4b20      	ldr	r3, [pc, #128]	@ (8009c30 <vTaskStartScheduler+0xc0>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e001      	b.n	8009bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d102      	bne.n	8009bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bc4:	f000 fe14 	bl	800a7f0 <xTimerCreateTimerTask>
 8009bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d116      	bne.n	8009bfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	613b      	str	r3, [r7, #16]
}
 8009be2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009be4:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <vTaskStartScheduler+0xc4>)
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bec:	4b12      	ldr	r3, [pc, #72]	@ (8009c38 <vTaskStartScheduler+0xc8>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bf2:	4b12      	ldr	r3, [pc, #72]	@ (8009c3c <vTaskStartScheduler+0xcc>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bf8:	f001 faa2 	bl	800b140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bfc:	e00f      	b.n	8009c1e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c04:	d10b      	bne.n	8009c1e <vTaskStartScheduler+0xae>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <vTaskStartScheduler+0xaa>
}
 8009c1e:	bf00      	nop
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	0800e2a4 	.word	0x0800e2a4
 8009c2c:	0800a261 	.word	0x0800a261
 8009c30:	20001348 	.word	0x20001348
 8009c34:	20001344 	.word	0x20001344
 8009c38:	20001330 	.word	0x20001330
 8009c3c:	20001328 	.word	0x20001328

08009c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c44:	4b04      	ldr	r3, [pc, #16]	@ (8009c58 <vTaskSuspendAll+0x18>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	4a03      	ldr	r2, [pc, #12]	@ (8009c58 <vTaskSuspendAll+0x18>)
 8009c4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c4e:	bf00      	nop
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	2000134c 	.word	0x2000134c

08009c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c6a:	4b42      	ldr	r3, [pc, #264]	@ (8009d74 <xTaskResumeAll+0x118>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10b      	bne.n	8009c8a <xTaskResumeAll+0x2e>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	603b      	str	r3, [r7, #0]
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	e7fd      	b.n	8009c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c8a:	f001 fafd 	bl	800b288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c8e:	4b39      	ldr	r3, [pc, #228]	@ (8009d74 <xTaskResumeAll+0x118>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	4a37      	ldr	r2, [pc, #220]	@ (8009d74 <xTaskResumeAll+0x118>)
 8009c96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c98:	4b36      	ldr	r3, [pc, #216]	@ (8009d74 <xTaskResumeAll+0x118>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d162      	bne.n	8009d66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ca0:	4b35      	ldr	r3, [pc, #212]	@ (8009d78 <xTaskResumeAll+0x11c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d05e      	beq.n	8009d66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca8:	e02f      	b.n	8009d0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009caa:	4b34      	ldr	r3, [pc, #208]	@ (8009d7c <xTaskResumeAll+0x120>)
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3318      	adds	r3, #24
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fc70 	bl	800859c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe fc6b 	bl	800859c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cca:	4b2d      	ldr	r3, [pc, #180]	@ (8009d80 <xTaskResumeAll+0x124>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d903      	bls.n	8009cda <xTaskResumeAll+0x7e>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8009d80 <xTaskResumeAll+0x124>)
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4a27      	ldr	r2, [pc, #156]	@ (8009d84 <xTaskResumeAll+0x128>)
 8009ce8:	441a      	add	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	f7fe fbf6 	bl	80084e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfa:	4b23      	ldr	r3, [pc, #140]	@ (8009d88 <xTaskResumeAll+0x12c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d302      	bcc.n	8009d0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d04:	4b21      	ldr	r3, [pc, #132]	@ (8009d8c <xTaskResumeAll+0x130>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8009d7c <xTaskResumeAll+0x120>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1cb      	bne.n	8009caa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d18:	f000 fb58 	bl	800a3cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8009d90 <xTaskResumeAll+0x134>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d010      	beq.n	8009d4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d28:	f000 f846 	bl	8009db8 <xTaskIncrementTick>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d32:	4b16      	ldr	r3, [pc, #88]	@ (8009d8c <xTaskResumeAll+0x130>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1f1      	bne.n	8009d28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009d44:	4b12      	ldr	r3, [pc, #72]	@ (8009d90 <xTaskResumeAll+0x134>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d4a:	4b10      	ldr	r3, [pc, #64]	@ (8009d8c <xTaskResumeAll+0x130>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d52:	2301      	movs	r3, #1
 8009d54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d56:	4b0f      	ldr	r3, [pc, #60]	@ (8009d94 <xTaskResumeAll+0x138>)
 8009d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d66:	f001 fac1 	bl	800b2ec <vPortExitCritical>

	return xAlreadyYielded;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	2000134c 	.word	0x2000134c
 8009d78:	20001324 	.word	0x20001324
 8009d7c:	200012e4 	.word	0x200012e4
 8009d80:	2000132c 	.word	0x2000132c
 8009d84:	20000e54 	.word	0x20000e54
 8009d88:	20000e50 	.word	0x20000e50
 8009d8c:	20001338 	.word	0x20001338
 8009d90:	20001334 	.word	0x20001334
 8009d94:	e000ed04 	.word	0xe000ed04

08009d98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d9e:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <xTaskGetTickCount+0x1c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009da4:	687b      	ldr	r3, [r7, #4]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20001328 	.word	0x20001328

08009db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8009f00 <xTaskIncrementTick+0x148>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 8090 	bne.w	8009eec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8009f04 <xTaskIncrementTick+0x14c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8009f04 <xTaskIncrementTick+0x14c>)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d121      	bne.n	8009e24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de0:	4b49      	ldr	r3, [pc, #292]	@ (8009f08 <xTaskIncrementTick+0x150>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	603b      	str	r3, [r7, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <xTaskIncrementTick+0x46>
 8009e02:	4b41      	ldr	r3, [pc, #260]	@ (8009f08 <xTaskIncrementTick+0x150>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	4b40      	ldr	r3, [pc, #256]	@ (8009f0c <xTaskIncrementTick+0x154>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8009f08 <xTaskIncrementTick+0x150>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	4a3e      	ldr	r2, [pc, #248]	@ (8009f0c <xTaskIncrementTick+0x154>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	4b3e      	ldr	r3, [pc, #248]	@ (8009f10 <xTaskIncrementTick+0x158>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f10 <xTaskIncrementTick+0x158>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	f000 fad4 	bl	800a3cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e24:	4b3b      	ldr	r3, [pc, #236]	@ (8009f14 <xTaskIncrementTick+0x15c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d349      	bcc.n	8009ec2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e2e:	4b36      	ldr	r3, [pc, #216]	@ (8009f08 <xTaskIncrementTick+0x150>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e38:	4b36      	ldr	r3, [pc, #216]	@ (8009f14 <xTaskIncrementTick+0x15c>)
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e3e:	601a      	str	r2, [r3, #0]
					break;
 8009e40:	e03f      	b.n	8009ec2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e42:	4b31      	ldr	r3, [pc, #196]	@ (8009f08 <xTaskIncrementTick+0x150>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d203      	bcs.n	8009e62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8009f14 <xTaskIncrementTick+0x15c>)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e60:	e02f      	b.n	8009ec2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fb98 	bl	800859c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	3318      	adds	r3, #24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe fb8f 	bl	800859c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e82:	4b25      	ldr	r3, [pc, #148]	@ (8009f18 <xTaskIncrementTick+0x160>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d903      	bls.n	8009e92 <xTaskIncrementTick+0xda>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8e:	4a22      	ldr	r2, [pc, #136]	@ (8009f18 <xTaskIncrementTick+0x160>)
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e96:	4613      	mov	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f1c <xTaskIncrementTick+0x164>)
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7fe fb1a 	bl	80084e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f20 <xTaskIncrementTick+0x168>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d3b8      	bcc.n	8009e2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec0:	e7b5      	b.n	8009e2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ec2:	4b17      	ldr	r3, [pc, #92]	@ (8009f20 <xTaskIncrementTick+0x168>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec8:	4914      	ldr	r1, [pc, #80]	@ (8009f1c <xTaskIncrementTick+0x164>)
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d901      	bls.n	8009ede <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009eda:	2301      	movs	r3, #1
 8009edc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ede:	4b11      	ldr	r3, [pc, #68]	@ (8009f24 <xTaskIncrementTick+0x16c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	e004      	b.n	8009ef6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009eec:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <xTaskIncrementTick+0x170>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8009f28 <xTaskIncrementTick+0x170>)
 8009ef4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	2000134c 	.word	0x2000134c
 8009f04:	20001328 	.word	0x20001328
 8009f08:	200012dc 	.word	0x200012dc
 8009f0c:	200012e0 	.word	0x200012e0
 8009f10:	2000133c 	.word	0x2000133c
 8009f14:	20001344 	.word	0x20001344
 8009f18:	2000132c 	.word	0x2000132c
 8009f1c:	20000e54 	.word	0x20000e54
 8009f20:	20000e50 	.word	0x20000e50
 8009f24:	20001338 	.word	0x20001338
 8009f28:	20001334 	.word	0x20001334

08009f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f32:	4b28      	ldr	r3, [pc, #160]	@ (8009fd4 <vTaskSwitchContext+0xa8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f3a:	4b27      	ldr	r3, [pc, #156]	@ (8009fd8 <vTaskSwitchContext+0xac>)
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f40:	e042      	b.n	8009fc8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009f42:	4b25      	ldr	r3, [pc, #148]	@ (8009fd8 <vTaskSwitchContext+0xac>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f48:	4b24      	ldr	r3, [pc, #144]	@ (8009fdc <vTaskSwitchContext+0xb0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e011      	b.n	8009f74 <vTaskSwitchContext+0x48>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <vTaskSwitchContext+0x42>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	607b      	str	r3, [r7, #4]
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	e7fd      	b.n	8009f6a <vTaskSwitchContext+0x3e>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	491a      	ldr	r1, [pc, #104]	@ (8009fe0 <vTaskSwitchContext+0xb4>)
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0e3      	beq.n	8009f50 <vTaskSwitchContext+0x24>
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4a13      	ldr	r2, [pc, #76]	@ (8009fe0 <vTaskSwitchContext+0xb4>)
 8009f94:	4413      	add	r3, r2
 8009f96:	60bb      	str	r3, [r7, #8]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d104      	bne.n	8009fb8 <vTaskSwitchContext+0x8c>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	605a      	str	r2, [r3, #4]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <vTaskSwitchContext+0xb8>)
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	4a06      	ldr	r2, [pc, #24]	@ (8009fdc <vTaskSwitchContext+0xb0>)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6013      	str	r3, [r2, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	2000134c 	.word	0x2000134c
 8009fd8:	20001338 	.word	0x20001338
 8009fdc:	2000132c 	.word	0x2000132c
 8009fe0:	20000e54 	.word	0x20000e54
 8009fe4:	20000e50 	.word	0x20000e50

08009fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10b      	bne.n	800a010 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60fb      	str	r3, [r7, #12]
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	e7fd      	b.n	800a00c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <vTaskPlaceOnEventList+0x48>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3318      	adds	r3, #24
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7fe fa86 	bl	800852a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a01e:	2101      	movs	r1, #1
 800a020:	6838      	ldr	r0, [r7, #0]
 800a022:	f000 fb91 	bl	800a748 <prvAddCurrentTaskToDelayedList>
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000e50 	.word	0x20000e50

0800a034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	617b      	str	r3, [r7, #20]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a05e:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <vTaskPlaceOnEventListRestricted+0x54>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3318      	adds	r3, #24
 800a064:	4619      	mov	r1, r3
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7fe fa3b 	bl	80084e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	68b8      	ldr	r0, [r7, #8]
 800a07c:	f000 fb64 	bl	800a748 <prvAddCurrentTaskToDelayedList>
	}
 800a080:	bf00      	nop
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000e50 	.word	0x20000e50

0800a08c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10b      	bne.n	800a0ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60fb      	str	r3, [r7, #12]
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	e7fd      	b.n	800a0b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fa6c 	bl	800859c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11d      	bne.n	800a108 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fa63 	bl	800859c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0da:	4b19      	ldr	r3, [pc, #100]	@ (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <xTaskRemoveFromEventList+0x5e>
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	4a16      	ldr	r2, [pc, #88]	@ (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a13      	ldr	r2, [pc, #76]	@ (800a144 <xTaskRemoveFromEventList+0xb8>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fe f9ee 	bl	80084e2 <vListInsertEnd>
 800a106:	e005      	b.n	800a114 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	3318      	adds	r3, #24
 800a10c:	4619      	mov	r1, r3
 800a10e:	480e      	ldr	r0, [pc, #56]	@ (800a148 <xTaskRemoveFromEventList+0xbc>)
 800a110:	f7fe f9e7 	bl	80084e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a118:	4b0c      	ldr	r3, [pc, #48]	@ (800a14c <xTaskRemoveFromEventList+0xc0>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	429a      	cmp	r2, r3
 800a120:	d905      	bls.n	800a12e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a122:	2301      	movs	r3, #1
 800a124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a126:	4b0a      	ldr	r3, [pc, #40]	@ (800a150 <xTaskRemoveFromEventList+0xc4>)
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e001      	b.n	800a132 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a132:	697b      	ldr	r3, [r7, #20]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	2000134c 	.word	0x2000134c
 800a140:	2000132c 	.word	0x2000132c
 800a144:	20000e54 	.word	0x20000e54
 800a148:	200012e4 	.word	0x200012e4
 800a14c:	20000e50 	.word	0x20000e50
 800a150:	20001338 	.word	0x20001338

0800a154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <vTaskInternalSetTimeOutState+0x24>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <vTaskInternalSetTimeOutState+0x28>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	2000133c 	.word	0x2000133c
 800a17c:	20001328 	.word	0x20001328

0800a180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	60fb      	str	r3, [r7, #12]
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a1c6:	f001 f85f 	bl	800b288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a240 <xTaskCheckForTimeOut+0xc0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1e2:	d102      	bne.n	800a1ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	e023      	b.n	800a232 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b15      	ldr	r3, [pc, #84]	@ (800a244 <xTaskCheckForTimeOut+0xc4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d007      	beq.n	800a206 <xTaskCheckForTimeOut+0x86>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d302      	bcc.n	800a206 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e015      	b.n	800a232 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d20b      	bcs.n	800a228 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff ff99 	bl	800a154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a222:	2300      	movs	r3, #0
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	e004      	b.n	800a232 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a232:	f001 f85b 	bl	800b2ec <vPortExitCritical>

	return xReturn;
 800a236:	69fb      	ldr	r3, [r7, #28]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20001328 	.word	0x20001328
 800a244:	2000133c 	.word	0x2000133c

0800a248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a24c:	4b03      	ldr	r3, [pc, #12]	@ (800a25c <vTaskMissedYield+0x14>)
 800a24e:	2201      	movs	r2, #1
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20001338 	.word	0x20001338

0800a260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a268:	f000 f852 	bl	800a310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a26c:	4b06      	ldr	r3, [pc, #24]	@ (800a288 <prvIdleTask+0x28>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d9f9      	bls.n	800a268 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a274:	4b05      	ldr	r3, [pc, #20]	@ (800a28c <prvIdleTask+0x2c>)
 800a276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a284:	e7f0      	b.n	800a268 <prvIdleTask+0x8>
 800a286:	bf00      	nop
 800a288:	20000e54 	.word	0x20000e54
 800a28c:	e000ed04 	.word	0xe000ed04

0800a290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
 800a29a:	e00c      	b.n	800a2b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4a12      	ldr	r2, [pc, #72]	@ (800a2f0 <prvInitialiseTaskLists+0x60>)
 800a2a8:	4413      	add	r3, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe f8ec 	bl	8008488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	607b      	str	r3, [r7, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b37      	cmp	r3, #55	@ 0x37
 800a2ba:	d9ef      	bls.n	800a29c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2bc:	480d      	ldr	r0, [pc, #52]	@ (800a2f4 <prvInitialiseTaskLists+0x64>)
 800a2be:	f7fe f8e3 	bl	8008488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2c2:	480d      	ldr	r0, [pc, #52]	@ (800a2f8 <prvInitialiseTaskLists+0x68>)
 800a2c4:	f7fe f8e0 	bl	8008488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c8:	480c      	ldr	r0, [pc, #48]	@ (800a2fc <prvInitialiseTaskLists+0x6c>)
 800a2ca:	f7fe f8dd 	bl	8008488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ce:	480c      	ldr	r0, [pc, #48]	@ (800a300 <prvInitialiseTaskLists+0x70>)
 800a2d0:	f7fe f8da 	bl	8008488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2d4:	480b      	ldr	r0, [pc, #44]	@ (800a304 <prvInitialiseTaskLists+0x74>)
 800a2d6:	f7fe f8d7 	bl	8008488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2da:	4b0b      	ldr	r3, [pc, #44]	@ (800a308 <prvInitialiseTaskLists+0x78>)
 800a2dc:	4a05      	ldr	r2, [pc, #20]	@ (800a2f4 <prvInitialiseTaskLists+0x64>)
 800a2de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a30c <prvInitialiseTaskLists+0x7c>)
 800a2e2:	4a05      	ldr	r2, [pc, #20]	@ (800a2f8 <prvInitialiseTaskLists+0x68>)
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000e54 	.word	0x20000e54
 800a2f4:	200012b4 	.word	0x200012b4
 800a2f8:	200012c8 	.word	0x200012c8
 800a2fc:	200012e4 	.word	0x200012e4
 800a300:	200012f8 	.word	0x200012f8
 800a304:	20001310 	.word	0x20001310
 800a308:	200012dc 	.word	0x200012dc
 800a30c:	200012e0 	.word	0x200012e0

0800a310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a316:	e019      	b.n	800a34c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a318:	f000 ffb6 	bl	800b288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b10      	ldr	r3, [pc, #64]	@ (800a360 <prvCheckTasksWaitingTermination+0x50>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe f937 	bl	800859c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <prvCheckTasksWaitingTermination+0x54>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3b01      	subs	r3, #1
 800a334:	4a0b      	ldr	r2, [pc, #44]	@ (800a364 <prvCheckTasksWaitingTermination+0x54>)
 800a336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a338:	4b0b      	ldr	r3, [pc, #44]	@ (800a368 <prvCheckTasksWaitingTermination+0x58>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	4a0a      	ldr	r2, [pc, #40]	@ (800a368 <prvCheckTasksWaitingTermination+0x58>)
 800a340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a342:	f000 ffd3 	bl	800b2ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f810 	bl	800a36c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a34c:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <prvCheckTasksWaitingTermination+0x58>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e1      	bne.n	800a318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200012f8 	.word	0x200012f8
 800a364:	20001324 	.word	0x20001324
 800a368:	2000130c 	.word	0x2000130c

0800a36c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d108      	bne.n	800a390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a382:	4618      	mov	r0, r3
 800a384:	f001 f970 	bl	800b668 <vPortFree>
				vPortFree( pxTCB );
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 f96d 	bl	800b668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a38e:	e019      	b.n	800a3c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a396:	2b01      	cmp	r3, #1
 800a398:	d103      	bne.n	800a3a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 f964 	bl	800b668 <vPortFree>
	}
 800a3a0:	e010      	b.n	800a3c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d00b      	beq.n	800a3c4 <prvDeleteTCB+0x58>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60fb      	str	r3, [r7, #12]
}
 800a3be:	bf00      	nop
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <prvDeleteTCB+0x54>
	}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e4:	e008      	b.n	800a3f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e6:	4b07      	ldr	r3, [pc, #28]	@ (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	@ (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3f6:	6013      	str	r3, [r2, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	200012dc 	.word	0x200012dc
 800a408:	20001344 	.word	0x20001344

0800a40c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a412:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <xTaskGetCurrentTaskHandle+0x1c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a418:	687b      	ldr	r3, [r7, #4]
	}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000e50 	.word	0x20000e50

0800a42c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a432:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <xTaskGetSchedulerState+0x34>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d102      	bne.n	800a440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a43a:	2301      	movs	r3, #1
 800a43c:	607b      	str	r3, [r7, #4]
 800a43e:	e008      	b.n	800a452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a440:	4b08      	ldr	r3, [pc, #32]	@ (800a464 <xTaskGetSchedulerState+0x38>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a448:	2302      	movs	r3, #2
 800a44a:	607b      	str	r3, [r7, #4]
 800a44c:	e001      	b.n	800a452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a452:	687b      	ldr	r3, [r7, #4]
	}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	20001330 	.word	0x20001330
 800a464:	2000134c 	.word	0x2000134c

0800a468 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d051      	beq.n	800a522 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a482:	4b2a      	ldr	r3, [pc, #168]	@ (800a52c <xTaskPriorityInherit+0xc4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a488:	429a      	cmp	r2, r3
 800a48a:	d241      	bcs.n	800a510 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db06      	blt.n	800a4a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a494:	4b25      	ldr	r3, [pc, #148]	@ (800a52c <xTaskPriorityInherit+0xc4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	6959      	ldr	r1, [r3, #20]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a530 <xTaskPriorityInherit+0xc8>)
 800a4b4:	4413      	add	r3, r2
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	d122      	bne.n	800a500 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe f86c 	bl	800859c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4c4:	4b19      	ldr	r3, [pc, #100]	@ (800a52c <xTaskPriorityInherit+0xc4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d2:	4b18      	ldr	r3, [pc, #96]	@ (800a534 <xTaskPriorityInherit+0xcc>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d903      	bls.n	800a4e2 <xTaskPriorityInherit+0x7a>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	4a15      	ldr	r2, [pc, #84]	@ (800a534 <xTaskPriorityInherit+0xcc>)
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4a10      	ldr	r2, [pc, #64]	@ (800a530 <xTaskPriorityInherit+0xc8>)
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fd fff2 	bl	80084e2 <vListInsertEnd>
 800a4fe:	e004      	b.n	800a50a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a500:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <xTaskPriorityInherit+0xc4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e008      	b.n	800a522 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a514:	4b05      	ldr	r3, [pc, #20]	@ (800a52c <xTaskPriorityInherit+0xc4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d201      	bcs.n	800a522 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a51e:	2301      	movs	r3, #1
 800a520:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a522:	68fb      	ldr	r3, [r7, #12]
	}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000e50 	.word	0x20000e50
 800a530:	20000e54 	.word	0x20000e54
 800a534:	2000132c 	.word	0x2000132c

0800a538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d058      	beq.n	800a600 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a54e:	4b2f      	ldr	r3, [pc, #188]	@ (800a60c <xTaskPriorityDisinherit+0xd4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	429a      	cmp	r2, r3
 800a556:	d00b      	beq.n	800a570 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	bf00      	nop
 800a56e:	e7fd      	b.n	800a56c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	60bb      	str	r3, [r7, #8]
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a594:	1e5a      	subs	r2, r3, #1
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d02c      	beq.n	800a600 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d128      	bne.n	800a600 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fd fff2 	bl	800859c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a610 <xTaskPriorityDisinherit+0xd8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d903      	bls.n	800a5e0 <xTaskPriorityDisinherit+0xa8>
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a610 <xTaskPriorityDisinherit+0xd8>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4a09      	ldr	r2, [pc, #36]	@ (800a614 <xTaskPriorityDisinherit+0xdc>)
 800a5ee:	441a      	add	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f7fd ff73 	bl	80084e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a600:	697b      	ldr	r3, [r7, #20]
	}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000e50 	.word	0x20000e50
 800a610:	2000132c 	.word	0x2000132c
 800a614:	20000e54 	.word	0x20000e54

0800a618 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d06c      	beq.n	800a70a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10b      	bne.n	800a650 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	e7fd      	b.n	800a64c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d902      	bls.n	800a660 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	e002      	b.n	800a666 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a664:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66a:	69fa      	ldr	r2, [r7, #28]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d04c      	beq.n	800a70a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	429a      	cmp	r2, r3
 800a678:	d147      	bne.n	800a70a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a67a:	4b26      	ldr	r3, [pc, #152]	@ (800a714 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	429a      	cmp	r2, r3
 800a682:	d10b      	bne.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	60bb      	str	r3, [r7, #8]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	69fa      	ldr	r2, [r7, #28]
 800a6a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	db04      	blt.n	800a6ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	6959      	ldr	r1, [r3, #20]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4a13      	ldr	r2, [pc, #76]	@ (800a718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6ca:	4413      	add	r3, r2
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d11c      	bne.n	800a70a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fd ff61 	bl	800859c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6de:	4b0f      	ldr	r3, [pc, #60]	@ (800a71c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d903      	bls.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a71c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4a07      	ldr	r2, [pc, #28]	@ (800a718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6fc:	441a      	add	r2, r3
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	3304      	adds	r3, #4
 800a702:	4619      	mov	r1, r3
 800a704:	4610      	mov	r0, r2
 800a706:	f7fd feec 	bl	80084e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a70a:	bf00      	nop
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20000e50 	.word	0x20000e50
 800a718:	20000e54 	.word	0x20000e54
 800a71c:	2000132c 	.word	0x2000132c

0800a720 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a724:	4b07      	ldr	r3, [pc, #28]	@ (800a744 <pvTaskIncrementMutexHeldCount+0x24>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <pvTaskIncrementMutexHeldCount+0x24>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a732:	3201      	adds	r2, #1
 800a734:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a736:	4b03      	ldr	r3, [pc, #12]	@ (800a744 <pvTaskIncrementMutexHeldCount+0x24>)
 800a738:	681b      	ldr	r3, [r3, #0]
	}
 800a73a:	4618      	mov	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	20000e50 	.word	0x20000e50

0800a748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a752:	4b21      	ldr	r3, [pc, #132]	@ (800a7d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a758:	4b20      	ldr	r3, [pc, #128]	@ (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fd ff1c 	bl	800859c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a76a:	d10a      	bne.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a772:	4b1a      	ldr	r3, [pc, #104]	@ (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4819      	ldr	r0, [pc, #100]	@ (800a7e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a77c:	f7fd feb1 	bl	80084e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a780:	e026      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4413      	add	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a78a:	4b14      	ldr	r3, [pc, #80]	@ (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	429a      	cmp	r2, r3
 800a798:	d209      	bcs.n	800a7ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a79a:	4b12      	ldr	r3, [pc, #72]	@ (800a7e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fd febf 	bl	800852a <vListInsert>
}
 800a7ac:	e010      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fd feb5 	bl	800852a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d202      	bcs.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7ca:	4a08      	ldr	r2, [pc, #32]	@ (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20001328 	.word	0x20001328
 800a7dc:	20000e50 	.word	0x20000e50
 800a7e0:	20001310 	.word	0x20001310
 800a7e4:	200012e0 	.word	0x200012e0
 800a7e8:	200012dc 	.word	0x200012dc
 800a7ec:	20001344 	.word	0x20001344

0800a7f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	@ 0x28
 800a7f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7fa:	f000 fbb1 	bl	800af60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a874 <xTimerCreateTimerTask+0x84>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d021      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fd fe1b 	bl	8008454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	2302      	movs	r3, #2
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	2300      	movs	r3, #0
 800a82e:	460a      	mov	r2, r1
 800a830:	4911      	ldr	r1, [pc, #68]	@ (800a878 <xTimerCreateTimerTask+0x88>)
 800a832:	4812      	ldr	r0, [pc, #72]	@ (800a87c <xTimerCreateTimerTask+0x8c>)
 800a834:	f7fe ffc0 	bl	80097b8 <xTaskCreateStatic>
 800a838:	4603      	mov	r3, r0
 800a83a:	4a11      	ldr	r2, [pc, #68]	@ (800a880 <xTimerCreateTimerTask+0x90>)
 800a83c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a83e:	4b10      	ldr	r3, [pc, #64]	@ (800a880 <xTimerCreateTimerTask+0x90>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10b      	bne.n	800a868 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	e7fd      	b.n	800a864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a868:	697b      	ldr	r3, [r7, #20]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20001380 	.word	0x20001380
 800a878:	0800e2ac 	.word	0x0800e2ac
 800a87c:	0800aaf9 	.word	0x0800aaf9
 800a880:	20001384 	.word	0x20001384

0800a884 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b088      	sub	sp, #32
 800a888:	af02      	add	r7, sp, #8
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a892:	202c      	movs	r0, #44	@ 0x2c
 800a894:	f000 fe1a 	bl	800b4cc <pvPortMalloc>
 800a898:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00d      	beq.n	800a8bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	68b9      	ldr	r1, [r7, #8]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f845 	bl	800a946 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a8bc:	697b      	ldr	r3, [r7, #20]
	}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b08a      	sub	sp, #40	@ 0x28
 800a8ca:	af02      	add	r7, sp, #8
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a8d4:	232c      	movs	r3, #44	@ 0x2c
 800a8d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b2c      	cmp	r3, #44	@ 0x2c
 800a8dc:	d00b      	beq.n	800a8f6 <xTimerCreateStatic+0x30>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	61bb      	str	r3, [r7, #24]
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <xTimerCreateStatic+0x50>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	617b      	str	r3, [r7, #20]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a918:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00d      	beq.n	800a93c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	68b9      	ldr	r1, [r7, #8]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f805 	bl	800a946 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a93c:	69fb      	ldr	r3, [r7, #28]
	}
 800a93e:	4618      	mov	r0, r3
 800a940:	3720      	adds	r7, #32
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b086      	sub	sp, #24
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10b      	bne.n	800a972 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	617b      	str	r3, [r7, #20]
}
 800a96c:	bf00      	nop
 800a96e:	bf00      	nop
 800a970:	e7fd      	b.n	800a96e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01e      	beq.n	800a9b6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a978:	f000 faf2 	bl	800af60 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	6a3a      	ldr	r2, [r7, #32]
 800a992:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a996:	3304      	adds	r3, #4
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fd fd95 	bl	80084c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9aa:	f043 0304 	orr.w	r3, r3, #4
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	@ 0x28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10b      	bne.n	800a9f0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	623b      	str	r3, [r7, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	bf00      	nop
 800a9ee:	e7fd      	b.n	800a9ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9f0:	4b19      	ldr	r3, [pc, #100]	@ (800aa58 <xTimerGenericCommand+0x98>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d02a      	beq.n	800aa4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	dc18      	bgt.n	800aa3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa0a:	f7ff fd0f 	bl	800a42c <xTaskGetSchedulerState>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d109      	bne.n	800aa28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa14:	4b10      	ldr	r3, [pc, #64]	@ (800aa58 <xTimerGenericCommand+0x98>)
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	f107 0110 	add.w	r1, r7, #16
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa20:	f7fe f852 	bl	8008ac8 <xQueueGenericSend>
 800aa24:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa26:	e012      	b.n	800aa4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa28:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <xTimerGenericCommand+0x98>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	f107 0110 	add.w	r1, r7, #16
 800aa30:	2300      	movs	r3, #0
 800aa32:	2200      	movs	r2, #0
 800aa34:	f7fe f848 	bl	8008ac8 <xQueueGenericSend>
 800aa38:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa3a:	e008      	b.n	800aa4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa3c:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <xTimerGenericCommand+0x98>)
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	f107 0110 	add.w	r1, r7, #16
 800aa44:	2300      	movs	r3, #0
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	f7fe f940 	bl	8008ccc <xQueueGenericSendFromISR>
 800aa4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	@ 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20001380 	.word	0x20001380

0800aa5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa66:	4b23      	ldr	r3, [pc, #140]	@ (800aaf4 <prvProcessExpiredTimer+0x98>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fd fd91 	bl	800859c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d023      	beq.n	800aad0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	18d1      	adds	r1, r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	6978      	ldr	r0, [r7, #20]
 800aa96:	f000 f8d5 	bl	800ac44 <prvInsertTimerInActiveList>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d020      	beq.n	800aae2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6978      	ldr	r0, [r7, #20]
 800aaac:	f7ff ff88 	bl	800a9c0 <xTimerGenericCommand>
 800aab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d114      	bne.n	800aae2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
 800aace:	e7fd      	b.n	800aacc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aad6:	f023 0301 	bic.w	r3, r3, #1
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	6978      	ldr	r0, [r7, #20]
 800aae8:	4798      	blx	r3
}
 800aaea:	bf00      	nop
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20001378 	.word	0x20001378

0800aaf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 f859 	bl	800abbc <prvGetNextExpireTime>
 800ab0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 f805 	bl	800ab20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab16:	f000 f8d7 	bl	800acc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab1a:	bf00      	nop
 800ab1c:	e7f0      	b.n	800ab00 <prvTimerTask+0x8>
	...

0800ab20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab2a:	f7ff f889 	bl	8009c40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 f866 	bl	800ac04 <prvSampleTimeNow>
 800ab38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d130      	bne.n	800aba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10a      	bne.n	800ab5c <prvProcessTimerOrBlockTask+0x3c>
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d806      	bhi.n	800ab5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab4e:	f7ff f885 	bl	8009c5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff ff81 	bl	800aa5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab5a:	e024      	b.n	800aba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d008      	beq.n	800ab74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab62:	4b13      	ldr	r3, [pc, #76]	@ (800abb0 <prvProcessTimerOrBlockTask+0x90>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <prvProcessTimerOrBlockTask+0x50>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <prvProcessTimerOrBlockTask+0x52>
 800ab70:	2300      	movs	r3, #0
 800ab72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab74:	4b0f      	ldr	r3, [pc, #60]	@ (800abb4 <prvProcessTimerOrBlockTask+0x94>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f7fe fde5 	bl	8009750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab86:	f7ff f869 	bl	8009c5c <xTaskResumeAll>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab90:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <prvProcessTimerOrBlockTask+0x98>)
 800ab92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
}
 800aba0:	e001      	b.n	800aba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aba2:	f7ff f85b 	bl	8009c5c <xTaskResumeAll>
}
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	2000137c 	.word	0x2000137c
 800abb4:	20001380 	.word	0x20001380
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac00 <prvGetNextExpireTime+0x44>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <prvGetNextExpireTime+0x16>
 800abce:	2201      	movs	r2, #1
 800abd0:	e000      	b.n	800abd4 <prvGetNextExpireTime+0x18>
 800abd2:	2200      	movs	r2, #0
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abe0:	4b07      	ldr	r3, [pc, #28]	@ (800ac00 <prvGetNextExpireTime+0x44>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e001      	b.n	800abf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abf0:	68fb      	ldr	r3, [r7, #12]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	20001378 	.word	0x20001378

0800ac04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac0c:	f7ff f8c4 	bl	8009d98 <xTaskGetTickCount>
 800ac10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac12:	4b0b      	ldr	r3, [pc, #44]	@ (800ac40 <prvSampleTimeNow+0x3c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d205      	bcs.n	800ac28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac1c:	f000 f93a 	bl	800ae94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	e002      	b.n	800ac2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac2e:	4a04      	ldr	r2, [pc, #16]	@ (800ac40 <prvSampleTimeNow+0x3c>)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac34:	68fb      	ldr	r3, [r7, #12]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20001388 	.word	0x20001388

0800ac44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d812      	bhi.n	800ac90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d302      	bcc.n	800ac7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	e01b      	b.n	800acb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac7e:	4b10      	ldr	r3, [pc, #64]	@ (800acc0 <prvInsertTimerInActiveList+0x7c>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3304      	adds	r3, #4
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fd fc4e 	bl	800852a <vListInsert>
 800ac8e:	e012      	b.n	800acb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d206      	bcs.n	800aca6 <prvInsertTimerInActiveList+0x62>
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d302      	bcc.n	800aca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aca0:	2301      	movs	r3, #1
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	e007      	b.n	800acb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aca6:	4b07      	ldr	r3, [pc, #28]	@ (800acc4 <prvInsertTimerInActiveList+0x80>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3304      	adds	r3, #4
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7fd fc3a 	bl	800852a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acb6:	697b      	ldr	r3, [r7, #20]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	2000137c 	.word	0x2000137c
 800acc4:	20001378 	.word	0x20001378

0800acc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08e      	sub	sp, #56	@ 0x38
 800accc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acce:	e0ce      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da19      	bge.n	800ad0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acd6:	1d3b      	adds	r3, r7, #4
 800acd8:	3304      	adds	r3, #4
 800acda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10b      	bne.n	800acfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	61fb      	str	r3, [r7, #28]
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	e7fd      	b.n	800acf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad00:	6850      	ldr	r0, [r2, #4]
 800ad02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad04:	6892      	ldr	r2, [r2, #8]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f2c0 80ae 	blt.w	800ae6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad20:	3304      	adds	r3, #4
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fd fc3a 	bl	800859c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad28:	463b      	mov	r3, r7
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff ff6a 	bl	800ac04 <prvSampleTimeNow>
 800ad30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b09      	cmp	r3, #9
 800ad36:	f200 8097 	bhi.w	800ae68 <prvProcessReceivedCommands+0x1a0>
 800ad3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <prvProcessReceivedCommands+0x78>)
 800ad3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad40:	0800ad69 	.word	0x0800ad69
 800ad44:	0800ad69 	.word	0x0800ad69
 800ad48:	0800ad69 	.word	0x0800ad69
 800ad4c:	0800addf 	.word	0x0800addf
 800ad50:	0800adf3 	.word	0x0800adf3
 800ad54:	0800ae3f 	.word	0x0800ae3f
 800ad58:	0800ad69 	.word	0x0800ad69
 800ad5c:	0800ad69 	.word	0x0800ad69
 800ad60:	0800addf 	.word	0x0800addf
 800ad64:	0800adf3 	.word	0x0800adf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	18d1      	adds	r1, r2, r3
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad88:	f7ff ff5c 	bl	800ac44 <prvInsertTimerInActiveList>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d06c      	beq.n	800ae6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d061      	beq.n	800ae6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	441a      	add	r2, r3
 800adb0:	2300      	movs	r3, #0
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	2300      	movs	r3, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adba:	f7ff fe01 	bl	800a9c0 <xTimerGenericCommand>
 800adbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d152      	bne.n	800ae6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	61bb      	str	r3, [r7, #24]
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	e7fd      	b.n	800adda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800adf0:	e03d      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf8:	f043 0301 	orr.w	r3, r3, #1
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	617b      	str	r3, [r7, #20]
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	e7fd      	b.n	800ae26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	18d1      	adds	r1, r2, r3
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae38:	f7ff ff04 	bl	800ac44 <prvInsertTimerInActiveList>
					break;
 800ae3c:	e017      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae4e:	f000 fc0b 	bl	800b668 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae52:	e00c      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae5a:	f023 0301 	bic.w	r3, r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae66:	e002      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae68:	bf00      	nop
 800ae6a:	e000      	b.n	800ae6e <prvProcessReceivedCommands+0x1a6>
					break;
 800ae6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae6e:	4b08      	ldr	r3, [pc, #32]	@ (800ae90 <prvProcessReceivedCommands+0x1c8>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1d39      	adds	r1, r7, #4
 800ae74:	2200      	movs	r2, #0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe f856 	bl	8008f28 <xQueueReceive>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f47f af26 	bne.w	800acd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	3730      	adds	r7, #48	@ 0x30
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20001380 	.word	0x20001380

0800ae94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae9a:	e049      	b.n	800af30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae9c:	4b2e      	ldr	r3, [pc, #184]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea6:	4b2c      	ldr	r3, [pc, #176]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd fb71 	bl	800859c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d02f      	beq.n	800af30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4413      	add	r3, r2
 800aed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d90e      	bls.n	800af00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeee:	4b1a      	ldr	r3, [pc, #104]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3304      	adds	r3, #4
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7fd fb16 	bl	800852a <vListInsert>
 800aefe:	e017      	b.n	800af30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af00:	2300      	movs	r3, #0
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	2300      	movs	r3, #0
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	2100      	movs	r1, #0
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7ff fd58 	bl	800a9c0 <xTimerGenericCommand>
 800af10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10b      	bne.n	800af30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	603b      	str	r3, [r7, #0]
}
 800af2a:	bf00      	nop
 800af2c:	bf00      	nop
 800af2e:	e7fd      	b.n	800af2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af30:	4b09      	ldr	r3, [pc, #36]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1b0      	bne.n	800ae9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af3a:	4b07      	ldr	r3, [pc, #28]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af40:	4b06      	ldr	r3, [pc, #24]	@ (800af5c <prvSwitchTimerLists+0xc8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a04      	ldr	r2, [pc, #16]	@ (800af58 <prvSwitchTimerLists+0xc4>)
 800af46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af48:	4a04      	ldr	r2, [pc, #16]	@ (800af5c <prvSwitchTimerLists+0xc8>)
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	6013      	str	r3, [r2, #0]
}
 800af4e:	bf00      	nop
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20001378 	.word	0x20001378
 800af5c:	2000137c 	.word	0x2000137c

0800af60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af66:	f000 f98f 	bl	800b288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af6a:	4b15      	ldr	r3, [pc, #84]	@ (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d120      	bne.n	800afb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af72:	4814      	ldr	r0, [pc, #80]	@ (800afc4 <prvCheckForValidListAndQueue+0x64>)
 800af74:	f7fd fa88 	bl	8008488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af78:	4813      	ldr	r0, [pc, #76]	@ (800afc8 <prvCheckForValidListAndQueue+0x68>)
 800af7a:	f7fd fa85 	bl	8008488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af7e:	4b13      	ldr	r3, [pc, #76]	@ (800afcc <prvCheckForValidListAndQueue+0x6c>)
 800af80:	4a10      	ldr	r2, [pc, #64]	@ (800afc4 <prvCheckForValidListAndQueue+0x64>)
 800af82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af84:	4b12      	ldr	r3, [pc, #72]	@ (800afd0 <prvCheckForValidListAndQueue+0x70>)
 800af86:	4a10      	ldr	r2, [pc, #64]	@ (800afc8 <prvCheckForValidListAndQueue+0x68>)
 800af88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af8a:	2300      	movs	r3, #0
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4b11      	ldr	r3, [pc, #68]	@ (800afd4 <prvCheckForValidListAndQueue+0x74>)
 800af90:	4a11      	ldr	r2, [pc, #68]	@ (800afd8 <prvCheckForValidListAndQueue+0x78>)
 800af92:	2110      	movs	r1, #16
 800af94:	200a      	movs	r0, #10
 800af96:	f7fd fb95 	bl	80086c4 <xQueueGenericCreateStatic>
 800af9a:	4603      	mov	r3, r0
 800af9c:	4a08      	ldr	r2, [pc, #32]	@ (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800af9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afa0:	4b07      	ldr	r3, [pc, #28]	@ (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afa8:	4b05      	ldr	r3, [pc, #20]	@ (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	490b      	ldr	r1, [pc, #44]	@ (800afdc <prvCheckForValidListAndQueue+0x7c>)
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fb7a 	bl	80096a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afb4:	f000 f99a 	bl	800b2ec <vPortExitCritical>
}
 800afb8:	bf00      	nop
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20001380 	.word	0x20001380
 800afc4:	20001350 	.word	0x20001350
 800afc8:	20001364 	.word	0x20001364
 800afcc:	20001378 	.word	0x20001378
 800afd0:	2000137c 	.word	0x2000137c
 800afd4:	2000142c 	.word	0x2000142c
 800afd8:	2000138c 	.word	0x2000138c
 800afdc:	0800e2b4 	.word	0x0800e2b4

0800afe0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <pvTimerGetTimerID+0x2a>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60fb      	str	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b00a:	f000 f93d 	bl	800b288 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b014:	f000 f96a 	bl	800b2ec <vPortExitCritical>

	return pvReturn;
 800b018:	693b      	ldr	r3, [r7, #16]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3b04      	subs	r3, #4
 800b034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b03c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3b04      	subs	r3, #4
 800b042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f023 0201 	bic.w	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3b04      	subs	r3, #4
 800b052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b054:	4a0c      	ldr	r2, [pc, #48]	@ (800b088 <pxPortInitialiseStack+0x64>)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3b14      	subs	r3, #20
 800b05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3b04      	subs	r3, #4
 800b06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f06f 0202 	mvn.w	r2, #2
 800b072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3b20      	subs	r3, #32
 800b078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b07a:	68fb      	ldr	r3, [r7, #12]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	0800b08d 	.word	0x0800b08d

0800b08c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b096:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <prvTaskExitError+0x58>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b09e:	d00b      	beq.n	800b0b8 <prvTaskExitError+0x2c>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60fb      	str	r3, [r7, #12]
}
 800b0b2:	bf00      	nop
 800b0b4:	bf00      	nop
 800b0b6:	e7fd      	b.n	800b0b4 <prvTaskExitError+0x28>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	60bb      	str	r3, [r7, #8]
}
 800b0ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0cc:	bf00      	nop
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0fc      	beq.n	800b0ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20000010 	.word	0x20000010
	...

0800b0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0f0:	4b07      	ldr	r3, [pc, #28]	@ (800b110 <pxCurrentTCBConst2>)
 800b0f2:	6819      	ldr	r1, [r3, #0]
 800b0f4:	6808      	ldr	r0, [r1, #0]
 800b0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	f380 8809 	msr	PSP, r0
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f04f 0000 	mov.w	r0, #0
 800b106:	f380 8811 	msr	BASEPRI, r0
 800b10a:	4770      	bx	lr
 800b10c:	f3af 8000 	nop.w

0800b110 <pxCurrentTCBConst2>:
 800b110:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop

0800b118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b118:	4808      	ldr	r0, [pc, #32]	@ (800b13c <prvPortStartFirstTask+0x24>)
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	6800      	ldr	r0, [r0, #0]
 800b11e:	f380 8808 	msr	MSP, r0
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8814 	msr	CONTROL, r0
 800b12a:	b662      	cpsie	i
 800b12c:	b661      	cpsie	f
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	df00      	svc	0
 800b138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b13a:	bf00      	nop
 800b13c:	e000ed08 	.word	0xe000ed08

0800b140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b146:	4b47      	ldr	r3, [pc, #284]	@ (800b264 <xPortStartScheduler+0x124>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a47      	ldr	r2, [pc, #284]	@ (800b268 <xPortStartScheduler+0x128>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d10b      	bne.n	800b168 <xPortStartScheduler+0x28>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
}
 800b162:	bf00      	nop
 800b164:	bf00      	nop
 800b166:	e7fd      	b.n	800b164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b168:	4b3e      	ldr	r3, [pc, #248]	@ (800b264 <xPortStartScheduler+0x124>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a3f      	ldr	r2, [pc, #252]	@ (800b26c <xPortStartScheduler+0x12c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10b      	bne.n	800b18a <xPortStartScheduler+0x4a>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	60fb      	str	r3, [r7, #12]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b18a:	4b39      	ldr	r3, [pc, #228]	@ (800b270 <xPortStartScheduler+0x130>)
 800b18c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	22ff      	movs	r2, #255	@ 0xff
 800b19a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	4b31      	ldr	r3, [pc, #196]	@ (800b274 <xPortStartScheduler+0x134>)
 800b1b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1b2:	4b31      	ldr	r3, [pc, #196]	@ (800b278 <xPortStartScheduler+0x138>)
 800b1b4:	2207      	movs	r2, #7
 800b1b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1b8:	e009      	b.n	800b1ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b1ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b278 <xPortStartScheduler+0x138>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b278 <xPortStartScheduler+0x138>)
 800b1c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1d6:	2b80      	cmp	r3, #128	@ 0x80
 800b1d8:	d0ef      	beq.n	800b1ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1da:	4b27      	ldr	r3, [pc, #156]	@ (800b278 <xPortStartScheduler+0x138>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f1c3 0307 	rsb	r3, r3, #7
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d00b      	beq.n	800b1fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	60bb      	str	r3, [r7, #8]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b278 <xPortStartScheduler+0x138>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	4a1c      	ldr	r2, [pc, #112]	@ (800b278 <xPortStartScheduler+0x138>)
 800b206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b208:	4b1b      	ldr	r3, [pc, #108]	@ (800b278 <xPortStartScheduler+0x138>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b210:	4a19      	ldr	r2, [pc, #100]	@ (800b278 <xPortStartScheduler+0x138>)
 800b212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	b2da      	uxtb	r2, r3
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b21c:	4b17      	ldr	r3, [pc, #92]	@ (800b27c <xPortStartScheduler+0x13c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a16      	ldr	r2, [pc, #88]	@ (800b27c <xPortStartScheduler+0x13c>)
 800b222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b228:	4b14      	ldr	r3, [pc, #80]	@ (800b27c <xPortStartScheduler+0x13c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a13      	ldr	r2, [pc, #76]	@ (800b27c <xPortStartScheduler+0x13c>)
 800b22e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b234:	f000 f8da 	bl	800b3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b238:	4b11      	ldr	r3, [pc, #68]	@ (800b280 <xPortStartScheduler+0x140>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b23e:	f000 f8f9 	bl	800b434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <xPortStartScheduler+0x144>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a0f      	ldr	r2, [pc, #60]	@ (800b284 <xPortStartScheduler+0x144>)
 800b248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b24c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b24e:	f7ff ff63 	bl	800b118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b252:	f7fe fe6b 	bl	8009f2c <vTaskSwitchContext>
	prvTaskExitError();
 800b256:	f7ff ff19 	bl	800b08c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	e000ed00 	.word	0xe000ed00
 800b268:	410fc271 	.word	0x410fc271
 800b26c:	410fc270 	.word	0x410fc270
 800b270:	e000e400 	.word	0xe000e400
 800b274:	2000147c 	.word	0x2000147c
 800b278:	20001480 	.word	0x20001480
 800b27c:	e000ed20 	.word	0xe000ed20
 800b280:	20000010 	.word	0x20000010
 800b284:	e000ef34 	.word	0xe000ef34

0800b288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	607b      	str	r3, [r7, #4]
}
 800b2a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2a2:	4b10      	ldr	r3, [pc, #64]	@ (800b2e4 <vPortEnterCritical+0x5c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b2e4 <vPortEnterCritical+0x5c>)
 800b2aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e4 <vPortEnterCritical+0x5c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d110      	bne.n	800b2d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <vPortEnterCritical+0x60>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00b      	beq.n	800b2d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	603b      	str	r3, [r7, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
 800b2d4:	e7fd      	b.n	800b2d2 <vPortEnterCritical+0x4a>
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000010 	.word	0x20000010
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2f2:	4b12      	ldr	r3, [pc, #72]	@ (800b33c <vPortExitCritical+0x50>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10b      	bne.n	800b312 <vPortExitCritical+0x26>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	607b      	str	r3, [r7, #4]
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b312:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <vPortExitCritical+0x50>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3b01      	subs	r3, #1
 800b318:	4a08      	ldr	r2, [pc, #32]	@ (800b33c <vPortExitCritical+0x50>)
 800b31a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b31c:	4b07      	ldr	r3, [pc, #28]	@ (800b33c <vPortExitCritical+0x50>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d105      	bne.n	800b330 <vPortExitCritical+0x44>
 800b324:	2300      	movs	r3, #0
 800b326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f383 8811 	msr	BASEPRI, r3
}
 800b32e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	20000010 	.word	0x20000010

0800b340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b340:	f3ef 8009 	mrs	r0, PSP
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	4b15      	ldr	r3, [pc, #84]	@ (800b3a0 <pxCurrentTCBConst>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	f01e 0f10 	tst.w	lr, #16
 800b350:	bf08      	it	eq
 800b352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	6010      	str	r0, [r2, #0]
 800b35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b364:	f380 8811 	msr	BASEPRI, r0
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f7fe fddc 	bl	8009f2c <vTaskSwitchContext>
 800b374:	f04f 0000 	mov.w	r0, #0
 800b378:	f380 8811 	msr	BASEPRI, r0
 800b37c:	bc09      	pop	{r0, r3}
 800b37e:	6819      	ldr	r1, [r3, #0]
 800b380:	6808      	ldr	r0, [r1, #0]
 800b382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b386:	f01e 0f10 	tst.w	lr, #16
 800b38a:	bf08      	it	eq
 800b38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b390:	f380 8809 	msr	PSP, r0
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	f3af 8000 	nop.w

0800b3a0 <pxCurrentTCBConst>:
 800b3a0:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop

0800b3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	607b      	str	r3, [r7, #4]
}
 800b3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3c2:	f7fe fcf9 	bl	8009db8 <xTaskIncrementTick>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3cc:	4b06      	ldr	r3, [pc, #24]	@ (800b3e8 <xPortSysTickHandler+0x40>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	f383 8811 	msr	BASEPRI, r3
}
 800b3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	e000ed04 	.word	0xe000ed04

0800b3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b424 <vPortSetupTimerInterrupt+0x38>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <vPortSetupTimerInterrupt+0x3c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0a      	ldr	r2, [pc, #40]	@ (800b42c <vPortSetupTimerInterrupt+0x40>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	099b      	lsrs	r3, r3, #6
 800b408:	4a09      	ldr	r2, [pc, #36]	@ (800b430 <vPortSetupTimerInterrupt+0x44>)
 800b40a:	3b01      	subs	r3, #1
 800b40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b40e:	4b04      	ldr	r3, [pc, #16]	@ (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b410:	2207      	movs	r2, #7
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	e000e010 	.word	0xe000e010
 800b424:	e000e018 	.word	0xe000e018
 800b428:	20000004 	.word	0x20000004
 800b42c:	10624dd3 	.word	0x10624dd3
 800b430:	e000e014 	.word	0xe000e014

0800b434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b444 <vPortEnableVFP+0x10>
 800b438:	6801      	ldr	r1, [r0, #0]
 800b43a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b43e:	6001      	str	r1, [r0, #0]
 800b440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b442:	bf00      	nop
 800b444:	e000ed88 	.word	0xe000ed88

0800b448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b44e:	f3ef 8305 	mrs	r3, IPSR
 800b452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b0f      	cmp	r3, #15
 800b458:	d915      	bls.n	800b486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b45a:	4a18      	ldr	r2, [pc, #96]	@ (800b4bc <vPortValidateInterruptPriority+0x74>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b464:	4b16      	ldr	r3, [pc, #88]	@ (800b4c0 <vPortValidateInterruptPriority+0x78>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	7afa      	ldrb	r2, [r7, #11]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d20b      	bcs.n	800b486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	607b      	str	r3, [r7, #4]
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	e7fd      	b.n	800b482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b486:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c4 <vPortValidateInterruptPriority+0x7c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b48e:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c8 <vPortValidateInterruptPriority+0x80>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	429a      	cmp	r2, r3
 800b494:	d90b      	bls.n	800b4ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	603b      	str	r3, [r7, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <vPortValidateInterruptPriority+0x62>
	}
 800b4ae:	bf00      	nop
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	e000e3f0 	.word	0xe000e3f0
 800b4c0:	2000147c 	.word	0x2000147c
 800b4c4:	e000ed0c 	.word	0xe000ed0c
 800b4c8:	20001480 	.word	0x20001480

0800b4cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	@ 0x28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4d8:	f7fe fbb2 	bl	8009c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b650 <pvPortMalloc+0x184>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4e4:	f000 f924 	bl	800b730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b654 <pvPortMalloc+0x188>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f040 8095 	bne.w	800b620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01e      	beq.n	800b53a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b4fc:	2208      	movs	r2, #8
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4413      	add	r3, r2
 800b502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d015      	beq.n	800b53a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f023 0307 	bic.w	r3, r3, #7
 800b514:	3308      	adds	r3, #8
 800b516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f003 0307 	and.w	r3, r3, #7
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00b      	beq.n	800b53a <pvPortMalloc+0x6e>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	617b      	str	r3, [r7, #20]
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	e7fd      	b.n	800b536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d06f      	beq.n	800b620 <pvPortMalloc+0x154>
 800b540:	4b45      	ldr	r3, [pc, #276]	@ (800b658 <pvPortMalloc+0x18c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	429a      	cmp	r2, r3
 800b548:	d86a      	bhi.n	800b620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b54a:	4b44      	ldr	r3, [pc, #272]	@ (800b65c <pvPortMalloc+0x190>)
 800b54c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b54e:	4b43      	ldr	r3, [pc, #268]	@ (800b65c <pvPortMalloc+0x190>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b554:	e004      	b.n	800b560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	429a      	cmp	r2, r3
 800b568:	d903      	bls.n	800b572 <pvPortMalloc+0xa6>
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1f1      	bne.n	800b556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b572:	4b37      	ldr	r3, [pc, #220]	@ (800b650 <pvPortMalloc+0x184>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b578:	429a      	cmp	r2, r3
 800b57a:	d051      	beq.n	800b620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2208      	movs	r2, #8
 800b582:	4413      	add	r3, r2
 800b584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	1ad2      	subs	r2, r2, r3
 800b596:	2308      	movs	r3, #8
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d920      	bls.n	800b5e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b59e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	f003 0307 	and.w	r3, r3, #7
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00b      	beq.n	800b5c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	bf00      	nop
 800b5c6:	e7fd      	b.n	800b5c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	1ad2      	subs	r2, r2, r3
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5da:	69b8      	ldr	r0, [r7, #24]
 800b5dc:	f000 f90a 	bl	800b7f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b658 <pvPortMalloc+0x18c>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b658 <pvPortMalloc+0x18c>)
 800b5ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b658 <pvPortMalloc+0x18c>)
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b660 <pvPortMalloc+0x194>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d203      	bcs.n	800b602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5fa:	4b17      	ldr	r3, [pc, #92]	@ (800b658 <pvPortMalloc+0x18c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a18      	ldr	r2, [pc, #96]	@ (800b660 <pvPortMalloc+0x194>)
 800b600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <pvPortMalloc+0x188>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b616:	4b13      	ldr	r3, [pc, #76]	@ (800b664 <pvPortMalloc+0x198>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3301      	adds	r3, #1
 800b61c:	4a11      	ldr	r2, [pc, #68]	@ (800b664 <pvPortMalloc+0x198>)
 800b61e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b620:	f7fe fb1c 	bl	8009c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00b      	beq.n	800b646 <pvPortMalloc+0x17a>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	60fb      	str	r3, [r7, #12]
}
 800b640:	bf00      	nop
 800b642:	bf00      	nop
 800b644:	e7fd      	b.n	800b642 <pvPortMalloc+0x176>
	return pvReturn;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3728      	adds	r7, #40	@ 0x28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20002044 	.word	0x20002044
 800b654:	20002058 	.word	0x20002058
 800b658:	20002048 	.word	0x20002048
 800b65c:	2000203c 	.word	0x2000203c
 800b660:	2000204c 	.word	0x2000204c
 800b664:	20002050 	.word	0x20002050

0800b668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d04f      	beq.n	800b71a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b67a:	2308      	movs	r3, #8
 800b67c:	425b      	negs	r3, r3
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4413      	add	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	4b25      	ldr	r3, [pc, #148]	@ (800b724 <vPortFree+0xbc>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4013      	ands	r3, r2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <vPortFree+0x46>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	60fb      	str	r3, [r7, #12]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00b      	beq.n	800b6ce <vPortFree+0x66>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60bb      	str	r3, [r7, #8]
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	e7fd      	b.n	800b6ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	4b14      	ldr	r3, [pc, #80]	@ (800b724 <vPortFree+0xbc>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01e      	beq.n	800b71a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d11a      	bne.n	800b71a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b724 <vPortFree+0xbc>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	401a      	ands	r2, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6f4:	f7fe faa4 	bl	8009c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <vPortFree+0xc0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4413      	add	r3, r2
 800b702:	4a09      	ldr	r2, [pc, #36]	@ (800b728 <vPortFree+0xc0>)
 800b704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b706:	6938      	ldr	r0, [r7, #16]
 800b708:	f000 f874 	bl	800b7f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b70c:	4b07      	ldr	r3, [pc, #28]	@ (800b72c <vPortFree+0xc4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	4a06      	ldr	r2, [pc, #24]	@ (800b72c <vPortFree+0xc4>)
 800b714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b716:	f7fe faa1 	bl	8009c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b71a:	bf00      	nop
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20002058 	.word	0x20002058
 800b728:	20002048 	.word	0x20002048
 800b72c:	20002054 	.word	0x20002054

0800b730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b736:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b73a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b73c:	4b27      	ldr	r3, [pc, #156]	@ (800b7dc <prvHeapInit+0xac>)
 800b73e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00c      	beq.n	800b764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3307      	adds	r3, #7
 800b74e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f023 0307 	bic.w	r3, r3, #7
 800b756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7dc <prvHeapInit+0xac>)
 800b760:	4413      	add	r3, r2
 800b762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b768:	4a1d      	ldr	r2, [pc, #116]	@ (800b7e0 <prvHeapInit+0xb0>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b76e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7e0 <prvHeapInit+0xb0>)
 800b770:	2200      	movs	r2, #0
 800b772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	4413      	add	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b77c:	2208      	movs	r2, #8
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	1a9b      	subs	r3, r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f023 0307 	bic.w	r3, r3, #7
 800b78a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4a15      	ldr	r2, [pc, #84]	@ (800b7e4 <prvHeapInit+0xb4>)
 800b790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b792:	4b14      	ldr	r3, [pc, #80]	@ (800b7e4 <prvHeapInit+0xb4>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2200      	movs	r2, #0
 800b798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b79a:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <prvHeapInit+0xb4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	1ad2      	subs	r2, r2, r3
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <prvHeapInit+0xb4>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e8 <prvHeapInit+0xb8>)
 800b7be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4a09      	ldr	r2, [pc, #36]	@ (800b7ec <prvHeapInit+0xbc>)
 800b7c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7c8:	4b09      	ldr	r3, [pc, #36]	@ (800b7f0 <prvHeapInit+0xc0>)
 800b7ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b7ce:	601a      	str	r2, [r3, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	20001484 	.word	0x20001484
 800b7e0:	2000203c 	.word	0x2000203c
 800b7e4:	20002044 	.word	0x20002044
 800b7e8:	2000204c 	.word	0x2000204c
 800b7ec:	20002048 	.word	0x20002048
 800b7f0:	20002058 	.word	0x20002058

0800b7f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7fc:	4b28      	ldr	r3, [pc, #160]	@ (800b8a0 <prvInsertBlockIntoFreeList+0xac>)
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e002      	b.n	800b808 <prvInsertBlockIntoFreeList+0x14>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d8f7      	bhi.n	800b802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	4413      	add	r3, r2
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d108      	bne.n	800b836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	441a      	add	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	441a      	add	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d118      	bne.n	800b87c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	4b15      	ldr	r3, [pc, #84]	@ (800b8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d00d      	beq.n	800b872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	441a      	add	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	601a      	str	r2, [r3, #0]
 800b870:	e008      	b.n	800b884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b872:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	e003      	b.n	800b884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d002      	beq.n	800b892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	2000203c 	.word	0x2000203c
 800b8a4:	20002044 	.word	0x20002044

0800b8a8 <__cvt>:
 800b8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	ec57 6b10 	vmov	r6, r7, d0
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	463b      	mov	r3, r7
 800b8b8:	bfbb      	ittet	lt
 800b8ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8be:	461f      	movlt	r7, r3
 800b8c0:	2300      	movge	r3, #0
 800b8c2:	232d      	movlt	r3, #45	@ 0x2d
 800b8c4:	700b      	strb	r3, [r1, #0]
 800b8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8cc:	4691      	mov	r9, r2
 800b8ce:	f023 0820 	bic.w	r8, r3, #32
 800b8d2:	bfbc      	itt	lt
 800b8d4:	4632      	movlt	r2, r6
 800b8d6:	4616      	movlt	r6, r2
 800b8d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8dc:	d005      	beq.n	800b8ea <__cvt+0x42>
 800b8de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8e2:	d100      	bne.n	800b8e6 <__cvt+0x3e>
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	2102      	movs	r1, #2
 800b8e8:	e000      	b.n	800b8ec <__cvt+0x44>
 800b8ea:	2103      	movs	r1, #3
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	ab02      	add	r3, sp, #8
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	ec47 6b10 	vmov	d0, r6, r7
 800b8f8:	4653      	mov	r3, sl
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	f000 fe48 	bl	800c590 <_dtoa_r>
 800b900:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b904:	4605      	mov	r5, r0
 800b906:	d119      	bne.n	800b93c <__cvt+0x94>
 800b908:	f019 0f01 	tst.w	r9, #1
 800b90c:	d00e      	beq.n	800b92c <__cvt+0x84>
 800b90e:	eb00 0904 	add.w	r9, r0, r4
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f5 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91e:	b108      	cbz	r0, 800b924 <__cvt+0x7c>
 800b920:	f8cd 900c 	str.w	r9, [sp, #12]
 800b924:	2230      	movs	r2, #48	@ 0x30
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	454b      	cmp	r3, r9
 800b92a:	d31e      	bcc.n	800b96a <__cvt+0xc2>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b930:	1b5b      	subs	r3, r3, r5
 800b932:	4628      	mov	r0, r5
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	b004      	add	sp, #16
 800b938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b940:	eb00 0904 	add.w	r9, r0, r4
 800b944:	d1e5      	bne.n	800b912 <__cvt+0x6a>
 800b946:	7803      	ldrb	r3, [r0, #0]
 800b948:	2b30      	cmp	r3, #48	@ 0x30
 800b94a:	d10a      	bne.n	800b962 <__cvt+0xba>
 800b94c:	2200      	movs	r2, #0
 800b94e:	2300      	movs	r3, #0
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b958:	b918      	cbnz	r0, 800b962 <__cvt+0xba>
 800b95a:	f1c4 0401 	rsb	r4, r4, #1
 800b95e:	f8ca 4000 	str.w	r4, [sl]
 800b962:	f8da 3000 	ldr.w	r3, [sl]
 800b966:	4499      	add	r9, r3
 800b968:	e7d3      	b.n	800b912 <__cvt+0x6a>
 800b96a:	1c59      	adds	r1, r3, #1
 800b96c:	9103      	str	r1, [sp, #12]
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	e7d9      	b.n	800b926 <__cvt+0x7e>

0800b972 <__exponent>:
 800b972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b974:	2900      	cmp	r1, #0
 800b976:	bfba      	itte	lt
 800b978:	4249      	neglt	r1, r1
 800b97a:	232d      	movlt	r3, #45	@ 0x2d
 800b97c:	232b      	movge	r3, #43	@ 0x2b
 800b97e:	2909      	cmp	r1, #9
 800b980:	7002      	strb	r2, [r0, #0]
 800b982:	7043      	strb	r3, [r0, #1]
 800b984:	dd29      	ble.n	800b9da <__exponent+0x68>
 800b986:	f10d 0307 	add.w	r3, sp, #7
 800b98a:	461d      	mov	r5, r3
 800b98c:	270a      	movs	r7, #10
 800b98e:	461a      	mov	r2, r3
 800b990:	fbb1 f6f7 	udiv	r6, r1, r7
 800b994:	fb07 1416 	mls	r4, r7, r6, r1
 800b998:	3430      	adds	r4, #48	@ 0x30
 800b99a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b99e:	460c      	mov	r4, r1
 800b9a0:	2c63      	cmp	r4, #99	@ 0x63
 800b9a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	dcf1      	bgt.n	800b98e <__exponent+0x1c>
 800b9aa:	3130      	adds	r1, #48	@ 0x30
 800b9ac:	1e94      	subs	r4, r2, #2
 800b9ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9b2:	1c41      	adds	r1, r0, #1
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	42ab      	cmp	r3, r5
 800b9b8:	d30a      	bcc.n	800b9d0 <__exponent+0x5e>
 800b9ba:	f10d 0309 	add.w	r3, sp, #9
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	42ac      	cmp	r4, r5
 800b9c2:	bf88      	it	hi
 800b9c4:	2300      	movhi	r3, #0
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	4403      	add	r3, r0
 800b9ca:	1a18      	subs	r0, r3, r0
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9d8:	e7ed      	b.n	800b9b6 <__exponent+0x44>
 800b9da:	2330      	movs	r3, #48	@ 0x30
 800b9dc:	3130      	adds	r1, #48	@ 0x30
 800b9de:	7083      	strb	r3, [r0, #2]
 800b9e0:	70c1      	strb	r1, [r0, #3]
 800b9e2:	1d03      	adds	r3, r0, #4
 800b9e4:	e7f1      	b.n	800b9ca <__exponent+0x58>
	...

0800b9e8 <_printf_float>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	b08d      	sub	sp, #52	@ 0x34
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b9f4:	4616      	mov	r6, r2
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	f000 fcbb 	bl	800c374 <_localeconv_r>
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f4 fc34 	bl	8000270 <strlen>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba10:	9005      	str	r0, [sp, #20]
 800ba12:	3307      	adds	r3, #7
 800ba14:	f023 0307 	bic.w	r3, r3, #7
 800ba18:	f103 0208 	add.w	r2, r3, #8
 800ba1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba20:	f8d4 b000 	ldr.w	fp, [r4]
 800ba24:	f8c8 2000 	str.w	r2, [r8]
 800ba28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba3e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcb0 <_printf_float+0x2c8>)
 800ba40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba44:	f7f5 f872 	bl	8000b2c <__aeabi_dcmpun>
 800ba48:	bb70      	cbnz	r0, 800baa8 <_printf_float+0xc0>
 800ba4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba4e:	4b98      	ldr	r3, [pc, #608]	@ (800bcb0 <_printf_float+0x2c8>)
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba54:	f7f5 f84c 	bl	8000af0 <__aeabi_dcmple>
 800ba58:	bb30      	cbnz	r0, 800baa8 <_printf_float+0xc0>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4640      	mov	r0, r8
 800ba60:	4649      	mov	r1, r9
 800ba62:	f7f5 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ba66:	b110      	cbz	r0, 800ba6e <_printf_float+0x86>
 800ba68:	232d      	movs	r3, #45	@ 0x2d
 800ba6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba6e:	4a91      	ldr	r2, [pc, #580]	@ (800bcb4 <_printf_float+0x2cc>)
 800ba70:	4b91      	ldr	r3, [pc, #580]	@ (800bcb8 <_printf_float+0x2d0>)
 800ba72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba76:	bf94      	ite	ls
 800ba78:	4690      	movls	r8, r2
 800ba7a:	4698      	movhi	r8, r3
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	6123      	str	r3, [r4, #16]
 800ba80:	f02b 0304 	bic.w	r3, fp, #4
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	f04f 0900 	mov.w	r9, #0
 800ba8a:	9700      	str	r7, [sp, #0]
 800ba8c:	4633      	mov	r3, r6
 800ba8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba90:	4621      	mov	r1, r4
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f9d2 	bl	800be3c <_printf_common>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	f040 808d 	bne.w	800bbb8 <_printf_float+0x1d0>
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baa2:	b00d      	add	sp, #52	@ 0x34
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	4640      	mov	r0, r8
 800baae:	4649      	mov	r1, r9
 800bab0:	f7f5 f83c 	bl	8000b2c <__aeabi_dcmpun>
 800bab4:	b140      	cbz	r0, 800bac8 <_printf_float+0xe0>
 800bab6:	464b      	mov	r3, r9
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfbc      	itt	lt
 800babc:	232d      	movlt	r3, #45	@ 0x2d
 800babe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bac2:	4a7e      	ldr	r2, [pc, #504]	@ (800bcbc <_printf_float+0x2d4>)
 800bac4:	4b7e      	ldr	r3, [pc, #504]	@ (800bcc0 <_printf_float+0x2d8>)
 800bac6:	e7d4      	b.n	800ba72 <_printf_float+0x8a>
 800bac8:	6863      	ldr	r3, [r4, #4]
 800baca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bace:	9206      	str	r2, [sp, #24]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	d13b      	bne.n	800bb4c <_printf_float+0x164>
 800bad4:	2306      	movs	r3, #6
 800bad6:	6063      	str	r3, [r4, #4]
 800bad8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800badc:	2300      	movs	r3, #0
 800bade:	6022      	str	r2, [r4, #0]
 800bae0:	9303      	str	r3, [sp, #12]
 800bae2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bae4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bae8:	ab09      	add	r3, sp, #36	@ 0x24
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	6861      	ldr	r1, [r4, #4]
 800baee:	ec49 8b10 	vmov	d0, r8, r9
 800baf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7ff fed6 	bl	800b8a8 <__cvt>
 800bafc:	9b06      	ldr	r3, [sp, #24]
 800bafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb00:	2b47      	cmp	r3, #71	@ 0x47
 800bb02:	4680      	mov	r8, r0
 800bb04:	d129      	bne.n	800bb5a <_printf_float+0x172>
 800bb06:	1cc8      	adds	r0, r1, #3
 800bb08:	db02      	blt.n	800bb10 <_printf_float+0x128>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	dd41      	ble.n	800bb94 <_printf_float+0x1ac>
 800bb10:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb14:	fa5f fa8a 	uxtb.w	sl, sl
 800bb18:	3901      	subs	r1, #1
 800bb1a:	4652      	mov	r2, sl
 800bb1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb20:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb22:	f7ff ff26 	bl	800b972 <__exponent>
 800bb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb28:	1813      	adds	r3, r2, r0
 800bb2a:	2a01      	cmp	r2, #1
 800bb2c:	4681      	mov	r9, r0
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	dc02      	bgt.n	800bb38 <_printf_float+0x150>
 800bb32:	6822      	ldr	r2, [r4, #0]
 800bb34:	07d2      	lsls	r2, r2, #31
 800bb36:	d501      	bpl.n	800bb3c <_printf_float+0x154>
 800bb38:	3301      	adds	r3, #1
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0a2      	beq.n	800ba8a <_printf_float+0xa2>
 800bb44:	232d      	movs	r3, #45	@ 0x2d
 800bb46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb4a:	e79e      	b.n	800ba8a <_printf_float+0xa2>
 800bb4c:	9a06      	ldr	r2, [sp, #24]
 800bb4e:	2a47      	cmp	r2, #71	@ 0x47
 800bb50:	d1c2      	bne.n	800bad8 <_printf_float+0xf0>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1c0      	bne.n	800bad8 <_printf_float+0xf0>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7bd      	b.n	800bad6 <_printf_float+0xee>
 800bb5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb5e:	d9db      	bls.n	800bb18 <_printf_float+0x130>
 800bb60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb64:	d118      	bne.n	800bb98 <_printf_float+0x1b0>
 800bb66:	2900      	cmp	r1, #0
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	dd0b      	ble.n	800bb84 <_printf_float+0x19c>
 800bb6c:	6121      	str	r1, [r4, #16]
 800bb6e:	b913      	cbnz	r3, 800bb76 <_printf_float+0x18e>
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	07d0      	lsls	r0, r2, #31
 800bb74:	d502      	bpl.n	800bb7c <_printf_float+0x194>
 800bb76:	3301      	adds	r3, #1
 800bb78:	440b      	add	r3, r1
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	e7db      	b.n	800bb3c <_printf_float+0x154>
 800bb84:	b913      	cbnz	r3, 800bb8c <_printf_float+0x1a4>
 800bb86:	6822      	ldr	r2, [r4, #0]
 800bb88:	07d2      	lsls	r2, r2, #31
 800bb8a:	d501      	bpl.n	800bb90 <_printf_float+0x1a8>
 800bb8c:	3302      	adds	r3, #2
 800bb8e:	e7f4      	b.n	800bb7a <_printf_float+0x192>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f2      	b.n	800bb7a <_printf_float+0x192>
 800bb94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	db05      	blt.n	800bbaa <_printf_float+0x1c2>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	6121      	str	r1, [r4, #16]
 800bba2:	07d8      	lsls	r0, r3, #31
 800bba4:	d5ea      	bpl.n	800bb7c <_printf_float+0x194>
 800bba6:	1c4b      	adds	r3, r1, #1
 800bba8:	e7e7      	b.n	800bb7a <_printf_float+0x192>
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	bfd4      	ite	le
 800bbae:	f1c1 0202 	rsble	r2, r1, #2
 800bbb2:	2201      	movgt	r2, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	e7e0      	b.n	800bb7a <_printf_float+0x192>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	055a      	lsls	r2, r3, #21
 800bbbc:	d407      	bmi.n	800bbce <_printf_float+0x1e6>
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d12b      	bne.n	800bc24 <_printf_float+0x23c>
 800bbcc:	e767      	b.n	800ba9e <_printf_float+0xb6>
 800bbce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbd2:	f240 80dd 	bls.w	800bd90 <_printf_float+0x3a8>
 800bbd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f7f4 ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d033      	beq.n	800bc4e <_printf_float+0x266>
 800bbe6:	4a37      	ldr	r2, [pc, #220]	@ (800bcc4 <_printf_float+0x2dc>)
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b8      	blx	r7
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f43f af54 	beq.w	800ba9e <_printf_float+0xb6>
 800bbf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bbfa:	4543      	cmp	r3, r8
 800bbfc:	db02      	blt.n	800bc04 <_printf_float+0x21c>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	07d8      	lsls	r0, r3, #31
 800bc02:	d50f      	bpl.n	800bc24 <_printf_float+0x23c>
 800bc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	47b8      	blx	r7
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f43f af45 	beq.w	800ba9e <_printf_float+0xb6>
 800bc14:	f04f 0900 	mov.w	r9, #0
 800bc18:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bc1c:	f104 0a1a 	add.w	sl, r4, #26
 800bc20:	45c8      	cmp	r8, r9
 800bc22:	dc09      	bgt.n	800bc38 <_printf_float+0x250>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	079b      	lsls	r3, r3, #30
 800bc28:	f100 8103 	bmi.w	800be32 <_printf_float+0x44a>
 800bc2c:	68e0      	ldr	r0, [r4, #12]
 800bc2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc30:	4298      	cmp	r0, r3
 800bc32:	bfb8      	it	lt
 800bc34:	4618      	movlt	r0, r3
 800bc36:	e734      	b.n	800baa2 <_printf_float+0xba>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f af2b 	beq.w	800ba9e <_printf_float+0xb6>
 800bc48:	f109 0901 	add.w	r9, r9, #1
 800bc4c:	e7e8      	b.n	800bc20 <_printf_float+0x238>
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dc39      	bgt.n	800bcc8 <_printf_float+0x2e0>
 800bc54:	4a1b      	ldr	r2, [pc, #108]	@ (800bcc4 <_printf_float+0x2dc>)
 800bc56:	2301      	movs	r3, #1
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b8      	blx	r7
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f43f af1d 	beq.w	800ba9e <_printf_float+0xb6>
 800bc64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc68:	ea59 0303 	orrs.w	r3, r9, r3
 800bc6c:	d102      	bne.n	800bc74 <_printf_float+0x28c>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	07d9      	lsls	r1, r3, #31
 800bc72:	d5d7      	bpl.n	800bc24 <_printf_float+0x23c>
 800bc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b8      	blx	r7
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f43f af0d 	beq.w	800ba9e <_printf_float+0xb6>
 800bc84:	f04f 0a00 	mov.w	sl, #0
 800bc88:	f104 0b1a 	add.w	fp, r4, #26
 800bc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8e:	425b      	negs	r3, r3
 800bc90:	4553      	cmp	r3, sl
 800bc92:	dc01      	bgt.n	800bc98 <_printf_float+0x2b0>
 800bc94:	464b      	mov	r3, r9
 800bc96:	e793      	b.n	800bbc0 <_printf_float+0x1d8>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	465a      	mov	r2, fp
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f aefb 	beq.w	800ba9e <_printf_float+0xb6>
 800bca8:	f10a 0a01 	add.w	sl, sl, #1
 800bcac:	e7ee      	b.n	800bc8c <_printf_float+0x2a4>
 800bcae:	bf00      	nop
 800bcb0:	7fefffff 	.word	0x7fefffff
 800bcb4:	0800e608 	.word	0x0800e608
 800bcb8:	0800e60c 	.word	0x0800e60c
 800bcbc:	0800e610 	.word	0x0800e610
 800bcc0:	0800e614 	.word	0x0800e614
 800bcc4:	0800e618 	.word	0x0800e618
 800bcc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcce:	4553      	cmp	r3, sl
 800bcd0:	bfa8      	it	ge
 800bcd2:	4653      	movge	r3, sl
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	4699      	mov	r9, r3
 800bcd8:	dc36      	bgt.n	800bd48 <_printf_float+0x360>
 800bcda:	f04f 0b00 	mov.w	fp, #0
 800bcde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bce2:	f104 021a 	add.w	r2, r4, #26
 800bce6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bce8:	9306      	str	r3, [sp, #24]
 800bcea:	eba3 0309 	sub.w	r3, r3, r9
 800bcee:	455b      	cmp	r3, fp
 800bcf0:	dc31      	bgt.n	800bd56 <_printf_float+0x36e>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	459a      	cmp	sl, r3
 800bcf6:	dc3a      	bgt.n	800bd6e <_printf_float+0x386>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	07da      	lsls	r2, r3, #31
 800bcfc:	d437      	bmi.n	800bd6e <_printf_float+0x386>
 800bcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd00:	ebaa 0903 	sub.w	r9, sl, r3
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	ebaa 0303 	sub.w	r3, sl, r3
 800bd0a:	4599      	cmp	r9, r3
 800bd0c:	bfa8      	it	ge
 800bd0e:	4699      	movge	r9, r3
 800bd10:	f1b9 0f00 	cmp.w	r9, #0
 800bd14:	dc33      	bgt.n	800bd7e <_printf_float+0x396>
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd1e:	f104 0b1a 	add.w	fp, r4, #26
 800bd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd24:	ebaa 0303 	sub.w	r3, sl, r3
 800bd28:	eba3 0309 	sub.w	r3, r3, r9
 800bd2c:	4543      	cmp	r3, r8
 800bd2e:	f77f af79 	ble.w	800bc24 <_printf_float+0x23c>
 800bd32:	2301      	movs	r3, #1
 800bd34:	465a      	mov	r2, fp
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f43f aeae 	beq.w	800ba9e <_printf_float+0xb6>
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	e7ec      	b.n	800bd22 <_printf_float+0x33a>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	47b8      	blx	r7
 800bd50:	3001      	adds	r0, #1
 800bd52:	d1c2      	bne.n	800bcda <_printf_float+0x2f2>
 800bd54:	e6a3      	b.n	800ba9e <_printf_float+0xb6>
 800bd56:	2301      	movs	r3, #1
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	9206      	str	r2, [sp, #24]
 800bd5e:	47b8      	blx	r7
 800bd60:	3001      	adds	r0, #1
 800bd62:	f43f ae9c 	beq.w	800ba9e <_printf_float+0xb6>
 800bd66:	9a06      	ldr	r2, [sp, #24]
 800bd68:	f10b 0b01 	add.w	fp, fp, #1
 800bd6c:	e7bb      	b.n	800bce6 <_printf_float+0x2fe>
 800bd6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd72:	4631      	mov	r1, r6
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d1c0      	bne.n	800bcfe <_printf_float+0x316>
 800bd7c:	e68f      	b.n	800ba9e <_printf_float+0xb6>
 800bd7e:	9a06      	ldr	r2, [sp, #24]
 800bd80:	464b      	mov	r3, r9
 800bd82:	4442      	add	r2, r8
 800bd84:	4631      	mov	r1, r6
 800bd86:	4628      	mov	r0, r5
 800bd88:	47b8      	blx	r7
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d1c3      	bne.n	800bd16 <_printf_float+0x32e>
 800bd8e:	e686      	b.n	800ba9e <_printf_float+0xb6>
 800bd90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd94:	f1ba 0f01 	cmp.w	sl, #1
 800bd98:	dc01      	bgt.n	800bd9e <_printf_float+0x3b6>
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d536      	bpl.n	800be0c <_printf_float+0x424>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4642      	mov	r2, r8
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f43f ae78 	beq.w	800ba9e <_printf_float+0xb6>
 800bdae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f43f ae70 	beq.w	800ba9e <_printf_float+0xb6>
 800bdbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bdca:	f7f4 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdce:	b9c0      	cbnz	r0, 800be02 <_printf_float+0x41a>
 800bdd0:	4653      	mov	r3, sl
 800bdd2:	f108 0201 	add.w	r2, r8, #1
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b8      	blx	r7
 800bddc:	3001      	adds	r0, #1
 800bdde:	d10c      	bne.n	800bdfa <_printf_float+0x412>
 800bde0:	e65d      	b.n	800ba9e <_printf_float+0xb6>
 800bde2:	2301      	movs	r3, #1
 800bde4:	465a      	mov	r2, fp
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	f43f ae56 	beq.w	800ba9e <_printf_float+0xb6>
 800bdf2:	f108 0801 	add.w	r8, r8, #1
 800bdf6:	45d0      	cmp	r8, sl
 800bdf8:	dbf3      	blt.n	800bde2 <_printf_float+0x3fa>
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be00:	e6df      	b.n	800bbc2 <_printf_float+0x1da>
 800be02:	f04f 0800 	mov.w	r8, #0
 800be06:	f104 0b1a 	add.w	fp, r4, #26
 800be0a:	e7f4      	b.n	800bdf6 <_printf_float+0x40e>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4642      	mov	r2, r8
 800be10:	e7e1      	b.n	800bdd6 <_printf_float+0x3ee>
 800be12:	2301      	movs	r3, #1
 800be14:	464a      	mov	r2, r9
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	f43f ae3e 	beq.w	800ba9e <_printf_float+0xb6>
 800be22:	f108 0801 	add.w	r8, r8, #1
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be2a:	1a5b      	subs	r3, r3, r1
 800be2c:	4543      	cmp	r3, r8
 800be2e:	dcf0      	bgt.n	800be12 <_printf_float+0x42a>
 800be30:	e6fc      	b.n	800bc2c <_printf_float+0x244>
 800be32:	f04f 0800 	mov.w	r8, #0
 800be36:	f104 0919 	add.w	r9, r4, #25
 800be3a:	e7f4      	b.n	800be26 <_printf_float+0x43e>

0800be3c <_printf_common>:
 800be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	4616      	mov	r6, r2
 800be42:	4698      	mov	r8, r3
 800be44:	688a      	ldr	r2, [r1, #8]
 800be46:	690b      	ldr	r3, [r1, #16]
 800be48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be4c:	4293      	cmp	r3, r2
 800be4e:	bfb8      	it	lt
 800be50:	4613      	movlt	r3, r2
 800be52:	6033      	str	r3, [r6, #0]
 800be54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be58:	4607      	mov	r7, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b10a      	cbz	r2, 800be62 <_printf_common+0x26>
 800be5e:	3301      	adds	r3, #1
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	0699      	lsls	r1, r3, #26
 800be66:	bf42      	ittt	mi
 800be68:	6833      	ldrmi	r3, [r6, #0]
 800be6a:	3302      	addmi	r3, #2
 800be6c:	6033      	strmi	r3, [r6, #0]
 800be6e:	6825      	ldr	r5, [r4, #0]
 800be70:	f015 0506 	ands.w	r5, r5, #6
 800be74:	d106      	bne.n	800be84 <_printf_common+0x48>
 800be76:	f104 0a19 	add.w	sl, r4, #25
 800be7a:	68e3      	ldr	r3, [r4, #12]
 800be7c:	6832      	ldr	r2, [r6, #0]
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	42ab      	cmp	r3, r5
 800be82:	dc26      	bgt.n	800bed2 <_printf_common+0x96>
 800be84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	3b00      	subs	r3, #0
 800be8c:	bf18      	it	ne
 800be8e:	2301      	movne	r3, #1
 800be90:	0692      	lsls	r2, r2, #26
 800be92:	d42b      	bmi.n	800beec <_printf_common+0xb0>
 800be94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be98:	4641      	mov	r1, r8
 800be9a:	4638      	mov	r0, r7
 800be9c:	47c8      	blx	r9
 800be9e:	3001      	adds	r0, #1
 800bea0:	d01e      	beq.n	800bee0 <_printf_common+0xa4>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	6922      	ldr	r2, [r4, #16]
 800bea6:	f003 0306 	and.w	r3, r3, #6
 800beaa:	2b04      	cmp	r3, #4
 800beac:	bf02      	ittt	eq
 800beae:	68e5      	ldreq	r5, [r4, #12]
 800beb0:	6833      	ldreq	r3, [r6, #0]
 800beb2:	1aed      	subeq	r5, r5, r3
 800beb4:	68a3      	ldr	r3, [r4, #8]
 800beb6:	bf0c      	ite	eq
 800beb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bebc:	2500      	movne	r5, #0
 800bebe:	4293      	cmp	r3, r2
 800bec0:	bfc4      	itt	gt
 800bec2:	1a9b      	subgt	r3, r3, r2
 800bec4:	18ed      	addgt	r5, r5, r3
 800bec6:	2600      	movs	r6, #0
 800bec8:	341a      	adds	r4, #26
 800beca:	42b5      	cmp	r5, r6
 800becc:	d11a      	bne.n	800bf04 <_printf_common+0xc8>
 800bece:	2000      	movs	r0, #0
 800bed0:	e008      	b.n	800bee4 <_printf_common+0xa8>
 800bed2:	2301      	movs	r3, #1
 800bed4:	4652      	mov	r2, sl
 800bed6:	4641      	mov	r1, r8
 800bed8:	4638      	mov	r0, r7
 800beda:	47c8      	blx	r9
 800bedc:	3001      	adds	r0, #1
 800bede:	d103      	bne.n	800bee8 <_printf_common+0xac>
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee8:	3501      	adds	r5, #1
 800beea:	e7c6      	b.n	800be7a <_printf_common+0x3e>
 800beec:	18e1      	adds	r1, r4, r3
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	2030      	movs	r0, #48	@ 0x30
 800bef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bef6:	4422      	add	r2, r4
 800bef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800befc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf00:	3302      	adds	r3, #2
 800bf02:	e7c7      	b.n	800be94 <_printf_common+0x58>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4622      	mov	r2, r4
 800bf08:	4641      	mov	r1, r8
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	47c8      	blx	r9
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d0e6      	beq.n	800bee0 <_printf_common+0xa4>
 800bf12:	3601      	adds	r6, #1
 800bf14:	e7d9      	b.n	800beca <_printf_common+0x8e>
	...

0800bf18 <_printf_i>:
 800bf18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	7e0f      	ldrb	r7, [r1, #24]
 800bf1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf20:	2f78      	cmp	r7, #120	@ 0x78
 800bf22:	4691      	mov	r9, r2
 800bf24:	4680      	mov	r8, r0
 800bf26:	460c      	mov	r4, r1
 800bf28:	469a      	mov	sl, r3
 800bf2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf2e:	d807      	bhi.n	800bf40 <_printf_i+0x28>
 800bf30:	2f62      	cmp	r7, #98	@ 0x62
 800bf32:	d80a      	bhi.n	800bf4a <_printf_i+0x32>
 800bf34:	2f00      	cmp	r7, #0
 800bf36:	f000 80d2 	beq.w	800c0de <_printf_i+0x1c6>
 800bf3a:	2f58      	cmp	r7, #88	@ 0x58
 800bf3c:	f000 80b9 	beq.w	800c0b2 <_printf_i+0x19a>
 800bf40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf48:	e03a      	b.n	800bfc0 <_printf_i+0xa8>
 800bf4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf4e:	2b15      	cmp	r3, #21
 800bf50:	d8f6      	bhi.n	800bf40 <_printf_i+0x28>
 800bf52:	a101      	add	r1, pc, #4	@ (adr r1, 800bf58 <_printf_i+0x40>)
 800bf54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf58:	0800bfb1 	.word	0x0800bfb1
 800bf5c:	0800bfc5 	.word	0x0800bfc5
 800bf60:	0800bf41 	.word	0x0800bf41
 800bf64:	0800bf41 	.word	0x0800bf41
 800bf68:	0800bf41 	.word	0x0800bf41
 800bf6c:	0800bf41 	.word	0x0800bf41
 800bf70:	0800bfc5 	.word	0x0800bfc5
 800bf74:	0800bf41 	.word	0x0800bf41
 800bf78:	0800bf41 	.word	0x0800bf41
 800bf7c:	0800bf41 	.word	0x0800bf41
 800bf80:	0800bf41 	.word	0x0800bf41
 800bf84:	0800c0c5 	.word	0x0800c0c5
 800bf88:	0800bfef 	.word	0x0800bfef
 800bf8c:	0800c07f 	.word	0x0800c07f
 800bf90:	0800bf41 	.word	0x0800bf41
 800bf94:	0800bf41 	.word	0x0800bf41
 800bf98:	0800c0e7 	.word	0x0800c0e7
 800bf9c:	0800bf41 	.word	0x0800bf41
 800bfa0:	0800bfef 	.word	0x0800bfef
 800bfa4:	0800bf41 	.word	0x0800bf41
 800bfa8:	0800bf41 	.word	0x0800bf41
 800bfac:	0800c087 	.word	0x0800c087
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6032      	str	r2, [r6, #0]
 800bfb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e09d      	b.n	800c100 <_printf_i+0x1e8>
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	6820      	ldr	r0, [r4, #0]
 800bfc8:	1d19      	adds	r1, r3, #4
 800bfca:	6031      	str	r1, [r6, #0]
 800bfcc:	0606      	lsls	r6, r0, #24
 800bfce:	d501      	bpl.n	800bfd4 <_printf_i+0xbc>
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	e003      	b.n	800bfdc <_printf_i+0xc4>
 800bfd4:	0645      	lsls	r5, r0, #25
 800bfd6:	d5fb      	bpl.n	800bfd0 <_printf_i+0xb8>
 800bfd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	da03      	bge.n	800bfe8 <_printf_i+0xd0>
 800bfe0:	232d      	movs	r3, #45	@ 0x2d
 800bfe2:	426d      	negs	r5, r5
 800bfe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe8:	4859      	ldr	r0, [pc, #356]	@ (800c150 <_printf_i+0x238>)
 800bfea:	230a      	movs	r3, #10
 800bfec:	e011      	b.n	800c012 <_printf_i+0xfa>
 800bfee:	6821      	ldr	r1, [r4, #0]
 800bff0:	6833      	ldr	r3, [r6, #0]
 800bff2:	0608      	lsls	r0, r1, #24
 800bff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bff8:	d402      	bmi.n	800c000 <_printf_i+0xe8>
 800bffa:	0649      	lsls	r1, r1, #25
 800bffc:	bf48      	it	mi
 800bffe:	b2ad      	uxthmi	r5, r5
 800c000:	2f6f      	cmp	r7, #111	@ 0x6f
 800c002:	4853      	ldr	r0, [pc, #332]	@ (800c150 <_printf_i+0x238>)
 800c004:	6033      	str	r3, [r6, #0]
 800c006:	bf14      	ite	ne
 800c008:	230a      	movne	r3, #10
 800c00a:	2308      	moveq	r3, #8
 800c00c:	2100      	movs	r1, #0
 800c00e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c012:	6866      	ldr	r6, [r4, #4]
 800c014:	60a6      	str	r6, [r4, #8]
 800c016:	2e00      	cmp	r6, #0
 800c018:	bfa2      	ittt	ge
 800c01a:	6821      	ldrge	r1, [r4, #0]
 800c01c:	f021 0104 	bicge.w	r1, r1, #4
 800c020:	6021      	strge	r1, [r4, #0]
 800c022:	b90d      	cbnz	r5, 800c028 <_printf_i+0x110>
 800c024:	2e00      	cmp	r6, #0
 800c026:	d04b      	beq.n	800c0c0 <_printf_i+0x1a8>
 800c028:	4616      	mov	r6, r2
 800c02a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c02e:	fb03 5711 	mls	r7, r3, r1, r5
 800c032:	5dc7      	ldrb	r7, [r0, r7]
 800c034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c038:	462f      	mov	r7, r5
 800c03a:	42bb      	cmp	r3, r7
 800c03c:	460d      	mov	r5, r1
 800c03e:	d9f4      	bls.n	800c02a <_printf_i+0x112>
 800c040:	2b08      	cmp	r3, #8
 800c042:	d10b      	bne.n	800c05c <_printf_i+0x144>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	07df      	lsls	r7, r3, #31
 800c048:	d508      	bpl.n	800c05c <_printf_i+0x144>
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	6861      	ldr	r1, [r4, #4]
 800c04e:	4299      	cmp	r1, r3
 800c050:	bfde      	ittt	le
 800c052:	2330      	movle	r3, #48	@ 0x30
 800c054:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c058:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c05c:	1b92      	subs	r2, r2, r6
 800c05e:	6122      	str	r2, [r4, #16]
 800c060:	f8cd a000 	str.w	sl, [sp]
 800c064:	464b      	mov	r3, r9
 800c066:	aa03      	add	r2, sp, #12
 800c068:	4621      	mov	r1, r4
 800c06a:	4640      	mov	r0, r8
 800c06c:	f7ff fee6 	bl	800be3c <_printf_common>
 800c070:	3001      	adds	r0, #1
 800c072:	d14a      	bne.n	800c10a <_printf_i+0x1f2>
 800c074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c078:	b004      	add	sp, #16
 800c07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	f043 0320 	orr.w	r3, r3, #32
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	4833      	ldr	r0, [pc, #204]	@ (800c154 <_printf_i+0x23c>)
 800c088:	2778      	movs	r7, #120	@ 0x78
 800c08a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	6831      	ldr	r1, [r6, #0]
 800c092:	061f      	lsls	r7, r3, #24
 800c094:	f851 5b04 	ldr.w	r5, [r1], #4
 800c098:	d402      	bmi.n	800c0a0 <_printf_i+0x188>
 800c09a:	065f      	lsls	r7, r3, #25
 800c09c:	bf48      	it	mi
 800c09e:	b2ad      	uxthmi	r5, r5
 800c0a0:	6031      	str	r1, [r6, #0]
 800c0a2:	07d9      	lsls	r1, r3, #31
 800c0a4:	bf44      	itt	mi
 800c0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0aa:	6023      	strmi	r3, [r4, #0]
 800c0ac:	b11d      	cbz	r5, 800c0b6 <_printf_i+0x19e>
 800c0ae:	2310      	movs	r3, #16
 800c0b0:	e7ac      	b.n	800c00c <_printf_i+0xf4>
 800c0b2:	4827      	ldr	r0, [pc, #156]	@ (800c150 <_printf_i+0x238>)
 800c0b4:	e7e9      	b.n	800c08a <_printf_i+0x172>
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	f023 0320 	bic.w	r3, r3, #32
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	e7f6      	b.n	800c0ae <_printf_i+0x196>
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	e7bd      	b.n	800c040 <_printf_i+0x128>
 800c0c4:	6833      	ldr	r3, [r6, #0]
 800c0c6:	6825      	ldr	r5, [r4, #0]
 800c0c8:	6961      	ldr	r1, [r4, #20]
 800c0ca:	1d18      	adds	r0, r3, #4
 800c0cc:	6030      	str	r0, [r6, #0]
 800c0ce:	062e      	lsls	r6, r5, #24
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	d501      	bpl.n	800c0d8 <_printf_i+0x1c0>
 800c0d4:	6019      	str	r1, [r3, #0]
 800c0d6:	e002      	b.n	800c0de <_printf_i+0x1c6>
 800c0d8:	0668      	lsls	r0, r5, #25
 800c0da:	d5fb      	bpl.n	800c0d4 <_printf_i+0x1bc>
 800c0dc:	8019      	strh	r1, [r3, #0]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	4616      	mov	r6, r2
 800c0e4:	e7bc      	b.n	800c060 <_printf_i+0x148>
 800c0e6:	6833      	ldr	r3, [r6, #0]
 800c0e8:	1d1a      	adds	r2, r3, #4
 800c0ea:	6032      	str	r2, [r6, #0]
 800c0ec:	681e      	ldr	r6, [r3, #0]
 800c0ee:	6862      	ldr	r2, [r4, #4]
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7f4 f86c 	bl	80001d0 <memchr>
 800c0f8:	b108      	cbz	r0, 800c0fe <_printf_i+0x1e6>
 800c0fa:	1b80      	subs	r0, r0, r6
 800c0fc:	6060      	str	r0, [r4, #4]
 800c0fe:	6863      	ldr	r3, [r4, #4]
 800c100:	6123      	str	r3, [r4, #16]
 800c102:	2300      	movs	r3, #0
 800c104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c108:	e7aa      	b.n	800c060 <_printf_i+0x148>
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	4632      	mov	r2, r6
 800c10e:	4649      	mov	r1, r9
 800c110:	4640      	mov	r0, r8
 800c112:	47d0      	blx	sl
 800c114:	3001      	adds	r0, #1
 800c116:	d0ad      	beq.n	800c074 <_printf_i+0x15c>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	079b      	lsls	r3, r3, #30
 800c11c:	d413      	bmi.n	800c146 <_printf_i+0x22e>
 800c11e:	68e0      	ldr	r0, [r4, #12]
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	4298      	cmp	r0, r3
 800c124:	bfb8      	it	lt
 800c126:	4618      	movlt	r0, r3
 800c128:	e7a6      	b.n	800c078 <_printf_i+0x160>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4632      	mov	r2, r6
 800c12e:	4649      	mov	r1, r9
 800c130:	4640      	mov	r0, r8
 800c132:	47d0      	blx	sl
 800c134:	3001      	adds	r0, #1
 800c136:	d09d      	beq.n	800c074 <_printf_i+0x15c>
 800c138:	3501      	adds	r5, #1
 800c13a:	68e3      	ldr	r3, [r4, #12]
 800c13c:	9903      	ldr	r1, [sp, #12]
 800c13e:	1a5b      	subs	r3, r3, r1
 800c140:	42ab      	cmp	r3, r5
 800c142:	dcf2      	bgt.n	800c12a <_printf_i+0x212>
 800c144:	e7eb      	b.n	800c11e <_printf_i+0x206>
 800c146:	2500      	movs	r5, #0
 800c148:	f104 0619 	add.w	r6, r4, #25
 800c14c:	e7f5      	b.n	800c13a <_printf_i+0x222>
 800c14e:	bf00      	nop
 800c150:	0800e61a 	.word	0x0800e61a
 800c154:	0800e62b 	.word	0x0800e62b

0800c158 <std>:
 800c158:	2300      	movs	r3, #0
 800c15a:	b510      	push	{r4, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	e9c0 3300 	strd	r3, r3, [r0]
 800c162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c166:	6083      	str	r3, [r0, #8]
 800c168:	8181      	strh	r1, [r0, #12]
 800c16a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c16c:	81c2      	strh	r2, [r0, #14]
 800c16e:	6183      	str	r3, [r0, #24]
 800c170:	4619      	mov	r1, r3
 800c172:	2208      	movs	r2, #8
 800c174:	305c      	adds	r0, #92	@ 0x5c
 800c176:	f000 f8f4 	bl	800c362 <memset>
 800c17a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b0 <std+0x58>)
 800c17c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c17e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b4 <std+0x5c>)
 800c180:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c182:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b8 <std+0x60>)
 800c184:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c186:	4b0d      	ldr	r3, [pc, #52]	@ (800c1bc <std+0x64>)
 800c188:	6323      	str	r3, [r4, #48]	@ 0x30
 800c18a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <std+0x68>)
 800c18c:	6224      	str	r4, [r4, #32]
 800c18e:	429c      	cmp	r4, r3
 800c190:	d006      	beq.n	800c1a0 <std+0x48>
 800c192:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c196:	4294      	cmp	r4, r2
 800c198:	d002      	beq.n	800c1a0 <std+0x48>
 800c19a:	33d0      	adds	r3, #208	@ 0xd0
 800c19c:	429c      	cmp	r4, r3
 800c19e:	d105      	bne.n	800c1ac <std+0x54>
 800c1a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a8:	f000 b958 	b.w	800c45c <__retarget_lock_init_recursive>
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	bf00      	nop
 800c1b0:	0800c2dd 	.word	0x0800c2dd
 800c1b4:	0800c2ff 	.word	0x0800c2ff
 800c1b8:	0800c337 	.word	0x0800c337
 800c1bc:	0800c35b 	.word	0x0800c35b
 800c1c0:	2000205c 	.word	0x2000205c

0800c1c4 <stdio_exit_handler>:
 800c1c4:	4a02      	ldr	r2, [pc, #8]	@ (800c1d0 <stdio_exit_handler+0xc>)
 800c1c6:	4903      	ldr	r1, [pc, #12]	@ (800c1d4 <stdio_exit_handler+0x10>)
 800c1c8:	4803      	ldr	r0, [pc, #12]	@ (800c1d8 <stdio_exit_handler+0x14>)
 800c1ca:	f000 b869 	b.w	800c2a0 <_fwalk_sglue>
 800c1ce:	bf00      	nop
 800c1d0:	20000014 	.word	0x20000014
 800c1d4:	0800db25 	.word	0x0800db25
 800c1d8:	20000024 	.word	0x20000024

0800c1dc <cleanup_stdio>:
 800c1dc:	6841      	ldr	r1, [r0, #4]
 800c1de:	4b0c      	ldr	r3, [pc, #48]	@ (800c210 <cleanup_stdio+0x34>)
 800c1e0:	4299      	cmp	r1, r3
 800c1e2:	b510      	push	{r4, lr}
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	d001      	beq.n	800c1ec <cleanup_stdio+0x10>
 800c1e8:	f001 fc9c 	bl	800db24 <_fflush_r>
 800c1ec:	68a1      	ldr	r1, [r4, #8]
 800c1ee:	4b09      	ldr	r3, [pc, #36]	@ (800c214 <cleanup_stdio+0x38>)
 800c1f0:	4299      	cmp	r1, r3
 800c1f2:	d002      	beq.n	800c1fa <cleanup_stdio+0x1e>
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f001 fc95 	bl	800db24 <_fflush_r>
 800c1fa:	68e1      	ldr	r1, [r4, #12]
 800c1fc:	4b06      	ldr	r3, [pc, #24]	@ (800c218 <cleanup_stdio+0x3c>)
 800c1fe:	4299      	cmp	r1, r3
 800c200:	d004      	beq.n	800c20c <cleanup_stdio+0x30>
 800c202:	4620      	mov	r0, r4
 800c204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c208:	f001 bc8c 	b.w	800db24 <_fflush_r>
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	bf00      	nop
 800c210:	2000205c 	.word	0x2000205c
 800c214:	200020c4 	.word	0x200020c4
 800c218:	2000212c 	.word	0x2000212c

0800c21c <global_stdio_init.part.0>:
 800c21c:	b510      	push	{r4, lr}
 800c21e:	4b0b      	ldr	r3, [pc, #44]	@ (800c24c <global_stdio_init.part.0+0x30>)
 800c220:	4c0b      	ldr	r4, [pc, #44]	@ (800c250 <global_stdio_init.part.0+0x34>)
 800c222:	4a0c      	ldr	r2, [pc, #48]	@ (800c254 <global_stdio_init.part.0+0x38>)
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	4620      	mov	r0, r4
 800c228:	2200      	movs	r2, #0
 800c22a:	2104      	movs	r1, #4
 800c22c:	f7ff ff94 	bl	800c158 <std>
 800c230:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c234:	2201      	movs	r2, #1
 800c236:	2109      	movs	r1, #9
 800c238:	f7ff ff8e 	bl	800c158 <std>
 800c23c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c240:	2202      	movs	r2, #2
 800c242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c246:	2112      	movs	r1, #18
 800c248:	f7ff bf86 	b.w	800c158 <std>
 800c24c:	20002194 	.word	0x20002194
 800c250:	2000205c 	.word	0x2000205c
 800c254:	0800c1c5 	.word	0x0800c1c5

0800c258 <__sfp_lock_acquire>:
 800c258:	4801      	ldr	r0, [pc, #4]	@ (800c260 <__sfp_lock_acquire+0x8>)
 800c25a:	f000 b900 	b.w	800c45e <__retarget_lock_acquire_recursive>
 800c25e:	bf00      	nop
 800c260:	2000219d 	.word	0x2000219d

0800c264 <__sfp_lock_release>:
 800c264:	4801      	ldr	r0, [pc, #4]	@ (800c26c <__sfp_lock_release+0x8>)
 800c266:	f000 b8fb 	b.w	800c460 <__retarget_lock_release_recursive>
 800c26a:	bf00      	nop
 800c26c:	2000219d 	.word	0x2000219d

0800c270 <__sinit>:
 800c270:	b510      	push	{r4, lr}
 800c272:	4604      	mov	r4, r0
 800c274:	f7ff fff0 	bl	800c258 <__sfp_lock_acquire>
 800c278:	6a23      	ldr	r3, [r4, #32]
 800c27a:	b11b      	cbz	r3, 800c284 <__sinit+0x14>
 800c27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c280:	f7ff bff0 	b.w	800c264 <__sfp_lock_release>
 800c284:	4b04      	ldr	r3, [pc, #16]	@ (800c298 <__sinit+0x28>)
 800c286:	6223      	str	r3, [r4, #32]
 800c288:	4b04      	ldr	r3, [pc, #16]	@ (800c29c <__sinit+0x2c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1f5      	bne.n	800c27c <__sinit+0xc>
 800c290:	f7ff ffc4 	bl	800c21c <global_stdio_init.part.0>
 800c294:	e7f2      	b.n	800c27c <__sinit+0xc>
 800c296:	bf00      	nop
 800c298:	0800c1dd 	.word	0x0800c1dd
 800c29c:	20002194 	.word	0x20002194

0800c2a0 <_fwalk_sglue>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	4688      	mov	r8, r1
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c2b4:	d505      	bpl.n	800c2c2 <_fwalk_sglue+0x22>
 800c2b6:	6824      	ldr	r4, [r4, #0]
 800c2b8:	2c00      	cmp	r4, #0
 800c2ba:	d1f7      	bne.n	800c2ac <_fwalk_sglue+0xc>
 800c2bc:	4630      	mov	r0, r6
 800c2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	89ab      	ldrh	r3, [r5, #12]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d907      	bls.n	800c2d8 <_fwalk_sglue+0x38>
 800c2c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	d003      	beq.n	800c2d8 <_fwalk_sglue+0x38>
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	47c0      	blx	r8
 800c2d6:	4306      	orrs	r6, r0
 800c2d8:	3568      	adds	r5, #104	@ 0x68
 800c2da:	e7e9      	b.n	800c2b0 <_fwalk_sglue+0x10>

0800c2dc <__sread>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	460c      	mov	r4, r1
 800c2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e4:	f000 f86c 	bl	800c3c0 <_read_r>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	bfab      	itete	ge
 800c2ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c2f0:	181b      	addge	r3, r3, r0
 800c2f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2f6:	bfac      	ite	ge
 800c2f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2fa:	81a3      	strhlt	r3, [r4, #12]
 800c2fc:	bd10      	pop	{r4, pc}

0800c2fe <__swrite>:
 800c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	461f      	mov	r7, r3
 800c304:	898b      	ldrh	r3, [r1, #12]
 800c306:	05db      	lsls	r3, r3, #23
 800c308:	4605      	mov	r5, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	4616      	mov	r6, r2
 800c30e:	d505      	bpl.n	800c31c <__swrite+0x1e>
 800c310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c314:	2302      	movs	r3, #2
 800c316:	2200      	movs	r2, #0
 800c318:	f000 f840 	bl	800c39c <_lseek_r>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	4632      	mov	r2, r6
 800c32a:	463b      	mov	r3, r7
 800c32c:	4628      	mov	r0, r5
 800c32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c332:	f000 b857 	b.w	800c3e4 <_write_r>

0800c336 <__sseek>:
 800c336:	b510      	push	{r4, lr}
 800c338:	460c      	mov	r4, r1
 800c33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33e:	f000 f82d 	bl	800c39c <_lseek_r>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	bf15      	itete	ne
 800c348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c34a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c34e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c352:	81a3      	strheq	r3, [r4, #12]
 800c354:	bf18      	it	ne
 800c356:	81a3      	strhne	r3, [r4, #12]
 800c358:	bd10      	pop	{r4, pc}

0800c35a <__sclose>:
 800c35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35e:	f000 b80d 	b.w	800c37c <_close_r>

0800c362 <memset>:
 800c362:	4402      	add	r2, r0
 800c364:	4603      	mov	r3, r0
 800c366:	4293      	cmp	r3, r2
 800c368:	d100      	bne.n	800c36c <memset+0xa>
 800c36a:	4770      	bx	lr
 800c36c:	f803 1b01 	strb.w	r1, [r3], #1
 800c370:	e7f9      	b.n	800c366 <memset+0x4>
	...

0800c374 <_localeconv_r>:
 800c374:	4800      	ldr	r0, [pc, #0]	@ (800c378 <_localeconv_r+0x4>)
 800c376:	4770      	bx	lr
 800c378:	20000160 	.word	0x20000160

0800c37c <_close_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d06      	ldr	r5, [pc, #24]	@ (800c398 <_close_r+0x1c>)
 800c380:	2300      	movs	r3, #0
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	602b      	str	r3, [r5, #0]
 800c388:	f7f7 fcd8 	bl	8003d3c <_close>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_close_r+0x1a>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_close_r+0x1a>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	20002198 	.word	0x20002198

0800c39c <_lseek_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	@ (800c3bc <_lseek_r+0x20>)
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	602a      	str	r2, [r5, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f7f7 fced 	bl	8003d8a <_lseek>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_lseek_r+0x1e>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_lseek_r+0x1e>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20002198 	.word	0x20002198

0800c3c0 <_read_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	@ (800c3e0 <_read_r+0x20>)
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f7f7 fc7b 	bl	8003cca <_read>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_read_r+0x1e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_read_r+0x1e>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20002198 	.word	0x20002198

0800c3e4 <_write_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	@ (800c404 <_write_r+0x20>)
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f7 fc86 	bl	8003d04 <_write>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_write_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_write_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20002198 	.word	0x20002198

0800c408 <__errno>:
 800c408:	4b01      	ldr	r3, [pc, #4]	@ (800c410 <__errno+0x8>)
 800c40a:	6818      	ldr	r0, [r3, #0]
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	20000020 	.word	0x20000020

0800c414 <__libc_init_array>:
 800c414:	b570      	push	{r4, r5, r6, lr}
 800c416:	4d0d      	ldr	r5, [pc, #52]	@ (800c44c <__libc_init_array+0x38>)
 800c418:	4c0d      	ldr	r4, [pc, #52]	@ (800c450 <__libc_init_array+0x3c>)
 800c41a:	1b64      	subs	r4, r4, r5
 800c41c:	10a4      	asrs	r4, r4, #2
 800c41e:	2600      	movs	r6, #0
 800c420:	42a6      	cmp	r6, r4
 800c422:	d109      	bne.n	800c438 <__libc_init_array+0x24>
 800c424:	4d0b      	ldr	r5, [pc, #44]	@ (800c454 <__libc_init_array+0x40>)
 800c426:	4c0c      	ldr	r4, [pc, #48]	@ (800c458 <__libc_init_array+0x44>)
 800c428:	f001 febc 	bl	800e1a4 <_init>
 800c42c:	1b64      	subs	r4, r4, r5
 800c42e:	10a4      	asrs	r4, r4, #2
 800c430:	2600      	movs	r6, #0
 800c432:	42a6      	cmp	r6, r4
 800c434:	d105      	bne.n	800c442 <__libc_init_array+0x2e>
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43c:	4798      	blx	r3
 800c43e:	3601      	adds	r6, #1
 800c440:	e7ee      	b.n	800c420 <__libc_init_array+0xc>
 800c442:	f855 3b04 	ldr.w	r3, [r5], #4
 800c446:	4798      	blx	r3
 800c448:	3601      	adds	r6, #1
 800c44a:	e7f2      	b.n	800c432 <__libc_init_array+0x1e>
 800c44c:	0800e980 	.word	0x0800e980
 800c450:	0800e980 	.word	0x0800e980
 800c454:	0800e980 	.word	0x0800e980
 800c458:	0800e984 	.word	0x0800e984

0800c45c <__retarget_lock_init_recursive>:
 800c45c:	4770      	bx	lr

0800c45e <__retarget_lock_acquire_recursive>:
 800c45e:	4770      	bx	lr

0800c460 <__retarget_lock_release_recursive>:
 800c460:	4770      	bx	lr

0800c462 <memcpy>:
 800c462:	440a      	add	r2, r1
 800c464:	4291      	cmp	r1, r2
 800c466:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c46a:	d100      	bne.n	800c46e <memcpy+0xc>
 800c46c:	4770      	bx	lr
 800c46e:	b510      	push	{r4, lr}
 800c470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c474:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c478:	4291      	cmp	r1, r2
 800c47a:	d1f9      	bne.n	800c470 <memcpy+0xe>
 800c47c:	bd10      	pop	{r4, pc}

0800c47e <quorem>:
 800c47e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c482:	6903      	ldr	r3, [r0, #16]
 800c484:	690c      	ldr	r4, [r1, #16]
 800c486:	42a3      	cmp	r3, r4
 800c488:	4607      	mov	r7, r0
 800c48a:	db7e      	blt.n	800c58a <quorem+0x10c>
 800c48c:	3c01      	subs	r4, #1
 800c48e:	f101 0814 	add.w	r8, r1, #20
 800c492:	00a3      	lsls	r3, r4, #2
 800c494:	f100 0514 	add.w	r5, r0, #20
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4b4:	d32e      	bcc.n	800c514 <quorem+0x96>
 800c4b6:	f04f 0a00 	mov.w	sl, #0
 800c4ba:	46c4      	mov	ip, r8
 800c4bc:	46ae      	mov	lr, r5
 800c4be:	46d3      	mov	fp, sl
 800c4c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4c4:	b298      	uxth	r0, r3
 800c4c6:	fb06 a000 	mla	r0, r6, r0, sl
 800c4ca:	0c02      	lsrs	r2, r0, #16
 800c4cc:	0c1b      	lsrs	r3, r3, #16
 800c4ce:	fb06 2303 	mla	r3, r6, r3, r2
 800c4d2:	f8de 2000 	ldr.w	r2, [lr]
 800c4d6:	b280      	uxth	r0, r0
 800c4d8:	b292      	uxth	r2, r2
 800c4da:	1a12      	subs	r2, r2, r0
 800c4dc:	445a      	add	r2, fp
 800c4de:	f8de 0000 	ldr.w	r0, [lr]
 800c4e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c4ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c4f6:	45e1      	cmp	r9, ip
 800c4f8:	f84e 2b04 	str.w	r2, [lr], #4
 800c4fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c500:	d2de      	bcs.n	800c4c0 <quorem+0x42>
 800c502:	9b00      	ldr	r3, [sp, #0]
 800c504:	58eb      	ldr	r3, [r5, r3]
 800c506:	b92b      	cbnz	r3, 800c514 <quorem+0x96>
 800c508:	9b01      	ldr	r3, [sp, #4]
 800c50a:	3b04      	subs	r3, #4
 800c50c:	429d      	cmp	r5, r3
 800c50e:	461a      	mov	r2, r3
 800c510:	d32f      	bcc.n	800c572 <quorem+0xf4>
 800c512:	613c      	str	r4, [r7, #16]
 800c514:	4638      	mov	r0, r7
 800c516:	f001 f979 	bl	800d80c <__mcmp>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	db25      	blt.n	800c56a <quorem+0xec>
 800c51e:	4629      	mov	r1, r5
 800c520:	2000      	movs	r0, #0
 800c522:	f858 2b04 	ldr.w	r2, [r8], #4
 800c526:	f8d1 c000 	ldr.w	ip, [r1]
 800c52a:	fa1f fe82 	uxth.w	lr, r2
 800c52e:	fa1f f38c 	uxth.w	r3, ip
 800c532:	eba3 030e 	sub.w	r3, r3, lr
 800c536:	4403      	add	r3, r0
 800c538:	0c12      	lsrs	r2, r2, #16
 800c53a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c53e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c542:	b29b      	uxth	r3, r3
 800c544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c548:	45c1      	cmp	r9, r8
 800c54a:	f841 3b04 	str.w	r3, [r1], #4
 800c54e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c552:	d2e6      	bcs.n	800c522 <quorem+0xa4>
 800c554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c558:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c55c:	b922      	cbnz	r2, 800c568 <quorem+0xea>
 800c55e:	3b04      	subs	r3, #4
 800c560:	429d      	cmp	r5, r3
 800c562:	461a      	mov	r2, r3
 800c564:	d30b      	bcc.n	800c57e <quorem+0x100>
 800c566:	613c      	str	r4, [r7, #16]
 800c568:	3601      	adds	r6, #1
 800c56a:	4630      	mov	r0, r6
 800c56c:	b003      	add	sp, #12
 800c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c572:	6812      	ldr	r2, [r2, #0]
 800c574:	3b04      	subs	r3, #4
 800c576:	2a00      	cmp	r2, #0
 800c578:	d1cb      	bne.n	800c512 <quorem+0x94>
 800c57a:	3c01      	subs	r4, #1
 800c57c:	e7c6      	b.n	800c50c <quorem+0x8e>
 800c57e:	6812      	ldr	r2, [r2, #0]
 800c580:	3b04      	subs	r3, #4
 800c582:	2a00      	cmp	r2, #0
 800c584:	d1ef      	bne.n	800c566 <quorem+0xe8>
 800c586:	3c01      	subs	r4, #1
 800c588:	e7ea      	b.n	800c560 <quorem+0xe2>
 800c58a:	2000      	movs	r0, #0
 800c58c:	e7ee      	b.n	800c56c <quorem+0xee>
	...

0800c590 <_dtoa_r>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	69c7      	ldr	r7, [r0, #28]
 800c596:	b099      	sub	sp, #100	@ 0x64
 800c598:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c59c:	ec55 4b10 	vmov	r4, r5, d0
 800c5a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c5a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5a4:	4683      	mov	fp, r0
 800c5a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5aa:	b97f      	cbnz	r7, 800c5cc <_dtoa_r+0x3c>
 800c5ac:	2010      	movs	r0, #16
 800c5ae:	f000 fdfd 	bl	800d1ac <malloc>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c5b8:	b920      	cbnz	r0, 800c5c4 <_dtoa_r+0x34>
 800c5ba:	4ba7      	ldr	r3, [pc, #668]	@ (800c858 <_dtoa_r+0x2c8>)
 800c5bc:	21ef      	movs	r1, #239	@ 0xef
 800c5be:	48a7      	ldr	r0, [pc, #668]	@ (800c85c <_dtoa_r+0x2cc>)
 800c5c0:	f001 fae8 	bl	800db94 <__assert_func>
 800c5c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c5c8:	6007      	str	r7, [r0, #0]
 800c5ca:	60c7      	str	r7, [r0, #12]
 800c5cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5d0:	6819      	ldr	r1, [r3, #0]
 800c5d2:	b159      	cbz	r1, 800c5ec <_dtoa_r+0x5c>
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	604a      	str	r2, [r1, #4]
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4093      	lsls	r3, r2
 800c5dc:	608b      	str	r3, [r1, #8]
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f000 feda 	bl	800d398 <_Bfree>
 800c5e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	1e2b      	subs	r3, r5, #0
 800c5ee:	bfb9      	ittee	lt
 800c5f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c5f4:	9303      	strlt	r3, [sp, #12]
 800c5f6:	2300      	movge	r3, #0
 800c5f8:	6033      	strge	r3, [r6, #0]
 800c5fa:	9f03      	ldr	r7, [sp, #12]
 800c5fc:	4b98      	ldr	r3, [pc, #608]	@ (800c860 <_dtoa_r+0x2d0>)
 800c5fe:	bfbc      	itt	lt
 800c600:	2201      	movlt	r2, #1
 800c602:	6032      	strlt	r2, [r6, #0]
 800c604:	43bb      	bics	r3, r7
 800c606:	d112      	bne.n	800c62e <_dtoa_r+0x9e>
 800c608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c60a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c614:	4323      	orrs	r3, r4
 800c616:	f000 854d 	beq.w	800d0b4 <_dtoa_r+0xb24>
 800c61a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c61c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c874 <_dtoa_r+0x2e4>
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 854f 	beq.w	800d0c4 <_dtoa_r+0xb34>
 800c626:	f10a 0303 	add.w	r3, sl, #3
 800c62a:	f000 bd49 	b.w	800d0c0 <_dtoa_r+0xb30>
 800c62e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c632:	2200      	movs	r2, #0
 800c634:	ec51 0b17 	vmov	r0, r1, d7
 800c638:	2300      	movs	r3, #0
 800c63a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c63e:	f7f4 fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c642:	4680      	mov	r8, r0
 800c644:	b158      	cbz	r0, 800c65e <_dtoa_r+0xce>
 800c646:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c648:	2301      	movs	r3, #1
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c64e:	b113      	cbz	r3, 800c656 <_dtoa_r+0xc6>
 800c650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c652:	4b84      	ldr	r3, [pc, #528]	@ (800c864 <_dtoa_r+0x2d4>)
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c878 <_dtoa_r+0x2e8>
 800c65a:	f000 bd33 	b.w	800d0c4 <_dtoa_r+0xb34>
 800c65e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c662:	aa16      	add	r2, sp, #88	@ 0x58
 800c664:	a917      	add	r1, sp, #92	@ 0x5c
 800c666:	4658      	mov	r0, fp
 800c668:	f001 f980 	bl	800d96c <__d2b>
 800c66c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c670:	4681      	mov	r9, r0
 800c672:	2e00      	cmp	r6, #0
 800c674:	d077      	beq.n	800c766 <_dtoa_r+0x1d6>
 800c676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c678:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c684:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c688:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c68c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c690:	4619      	mov	r1, r3
 800c692:	2200      	movs	r2, #0
 800c694:	4b74      	ldr	r3, [pc, #464]	@ (800c868 <_dtoa_r+0x2d8>)
 800c696:	f7f3 fdf7 	bl	8000288 <__aeabi_dsub>
 800c69a:	a369      	add	r3, pc, #420	@ (adr r3, 800c840 <_dtoa_r+0x2b0>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ffaa 	bl	80005f8 <__aeabi_dmul>
 800c6a4:	a368      	add	r3, pc, #416	@ (adr r3, 800c848 <_dtoa_r+0x2b8>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fdef 	bl	800028c <__adddf3>
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	460d      	mov	r5, r1
 800c6b4:	f7f3 ff36 	bl	8000524 <__aeabi_i2d>
 800c6b8:	a365      	add	r3, pc, #404	@ (adr r3, 800c850 <_dtoa_r+0x2c0>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 ff9b 	bl	80005f8 <__aeabi_dmul>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7f3 fddf 	bl	800028c <__adddf3>
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	f7f4 fa41 	bl	8000b58 <__aeabi_d2iz>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	4607      	mov	r7, r0
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f4 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800c6e4:	b140      	cbz	r0, 800c6f8 <_dtoa_r+0x168>
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	f7f3 ff1c 	bl	8000524 <__aeabi_i2d>
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	f7f4 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6f4:	b900      	cbnz	r0, 800c6f8 <_dtoa_r+0x168>
 800c6f6:	3f01      	subs	r7, #1
 800c6f8:	2f16      	cmp	r7, #22
 800c6fa:	d851      	bhi.n	800c7a0 <_dtoa_r+0x210>
 800c6fc:	4b5b      	ldr	r3, [pc, #364]	@ (800c86c <_dtoa_r+0x2dc>)
 800c6fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c70a:	f7f4 f9e7 	bl	8000adc <__aeabi_dcmplt>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d048      	beq.n	800c7a4 <_dtoa_r+0x214>
 800c712:	3f01      	subs	r7, #1
 800c714:	2300      	movs	r3, #0
 800c716:	9312      	str	r3, [sp, #72]	@ 0x48
 800c718:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c71a:	1b9b      	subs	r3, r3, r6
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	bf44      	itt	mi
 800c720:	f1c3 0801 	rsbmi	r8, r3, #1
 800c724:	2300      	movmi	r3, #0
 800c726:	9208      	str	r2, [sp, #32]
 800c728:	bf54      	ite	pl
 800c72a:	f04f 0800 	movpl.w	r8, #0
 800c72e:	9308      	strmi	r3, [sp, #32]
 800c730:	2f00      	cmp	r7, #0
 800c732:	db39      	blt.n	800c7a8 <_dtoa_r+0x218>
 800c734:	9b08      	ldr	r3, [sp, #32]
 800c736:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c738:	443b      	add	r3, r7
 800c73a:	9308      	str	r3, [sp, #32]
 800c73c:	2300      	movs	r3, #0
 800c73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c742:	2b09      	cmp	r3, #9
 800c744:	d864      	bhi.n	800c810 <_dtoa_r+0x280>
 800c746:	2b05      	cmp	r3, #5
 800c748:	bfc4      	itt	gt
 800c74a:	3b04      	subgt	r3, #4
 800c74c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c750:	f1a3 0302 	sub.w	r3, r3, #2
 800c754:	bfcc      	ite	gt
 800c756:	2400      	movgt	r4, #0
 800c758:	2401      	movle	r4, #1
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d863      	bhi.n	800c826 <_dtoa_r+0x296>
 800c75e:	e8df f003 	tbb	[pc, r3]
 800c762:	372a      	.short	0x372a
 800c764:	5535      	.short	0x5535
 800c766:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c76a:	441e      	add	r6, r3
 800c76c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c770:	2b20      	cmp	r3, #32
 800c772:	bfc1      	itttt	gt
 800c774:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c778:	409f      	lslgt	r7, r3
 800c77a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c77e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c782:	bfd6      	itet	le
 800c784:	f1c3 0320 	rsble	r3, r3, #32
 800c788:	ea47 0003 	orrgt.w	r0, r7, r3
 800c78c:	fa04 f003 	lslle.w	r0, r4, r3
 800c790:	f7f3 feb8 	bl	8000504 <__aeabi_ui2d>
 800c794:	2201      	movs	r2, #1
 800c796:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c79a:	3e01      	subs	r6, #1
 800c79c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c79e:	e777      	b.n	800c690 <_dtoa_r+0x100>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e7b8      	b.n	800c716 <_dtoa_r+0x186>
 800c7a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7a6:	e7b7      	b.n	800c718 <_dtoa_r+0x188>
 800c7a8:	427b      	negs	r3, r7
 800c7aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	eba8 0807 	sub.w	r8, r8, r7
 800c7b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7b4:	e7c4      	b.n	800c740 <_dtoa_r+0x1b0>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dc35      	bgt.n	800c82c <_dtoa_r+0x29c>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	9307      	str	r3, [sp, #28]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7ca:	e00b      	b.n	800c7e4 <_dtoa_r+0x254>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e7f3      	b.n	800c7b8 <_dtoa_r+0x228>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7d6:	18fb      	adds	r3, r7, r3
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	9307      	str	r3, [sp, #28]
 800c7e0:	bfb8      	it	lt
 800c7e2:	2301      	movlt	r3, #1
 800c7e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	f102 0514 	add.w	r5, r2, #20
 800c7f0:	429d      	cmp	r5, r3
 800c7f2:	d91f      	bls.n	800c834 <_dtoa_r+0x2a4>
 800c7f4:	6041      	str	r1, [r0, #4]
 800c7f6:	4658      	mov	r0, fp
 800c7f8:	f000 fd8e 	bl	800d318 <_Balloc>
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d13c      	bne.n	800c87c <_dtoa_r+0x2ec>
 800c802:	4b1b      	ldr	r3, [pc, #108]	@ (800c870 <_dtoa_r+0x2e0>)
 800c804:	4602      	mov	r2, r0
 800c806:	f240 11af 	movw	r1, #431	@ 0x1af
 800c80a:	e6d8      	b.n	800c5be <_dtoa_r+0x2e>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e7e0      	b.n	800c7d2 <_dtoa_r+0x242>
 800c810:	2401      	movs	r4, #1
 800c812:	2300      	movs	r3, #0
 800c814:	9309      	str	r3, [sp, #36]	@ 0x24
 800c816:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	2200      	movs	r2, #0
 800c822:	2312      	movs	r3, #18
 800c824:	e7d0      	b.n	800c7c8 <_dtoa_r+0x238>
 800c826:	2301      	movs	r3, #1
 800c828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82a:	e7f5      	b.n	800c818 <_dtoa_r+0x288>
 800c82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	e7d7      	b.n	800c7e4 <_dtoa_r+0x254>
 800c834:	3101      	adds	r1, #1
 800c836:	0052      	lsls	r2, r2, #1
 800c838:	e7d8      	b.n	800c7ec <_dtoa_r+0x25c>
 800c83a:	bf00      	nop
 800c83c:	f3af 8000 	nop.w
 800c840:	636f4361 	.word	0x636f4361
 800c844:	3fd287a7 	.word	0x3fd287a7
 800c848:	8b60c8b3 	.word	0x8b60c8b3
 800c84c:	3fc68a28 	.word	0x3fc68a28
 800c850:	509f79fb 	.word	0x509f79fb
 800c854:	3fd34413 	.word	0x3fd34413
 800c858:	0800e649 	.word	0x0800e649
 800c85c:	0800e660 	.word	0x0800e660
 800c860:	7ff00000 	.word	0x7ff00000
 800c864:	0800e619 	.word	0x0800e619
 800c868:	3ff80000 	.word	0x3ff80000
 800c86c:	0800e758 	.word	0x0800e758
 800c870:	0800e6b8 	.word	0x0800e6b8
 800c874:	0800e645 	.word	0x0800e645
 800c878:	0800e618 	.word	0x0800e618
 800c87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c880:	6018      	str	r0, [r3, #0]
 800c882:	9b07      	ldr	r3, [sp, #28]
 800c884:	2b0e      	cmp	r3, #14
 800c886:	f200 80a4 	bhi.w	800c9d2 <_dtoa_r+0x442>
 800c88a:	2c00      	cmp	r4, #0
 800c88c:	f000 80a1 	beq.w	800c9d2 <_dtoa_r+0x442>
 800c890:	2f00      	cmp	r7, #0
 800c892:	dd33      	ble.n	800c8fc <_dtoa_r+0x36c>
 800c894:	4bad      	ldr	r3, [pc, #692]	@ (800cb4c <_dtoa_r+0x5bc>)
 800c896:	f007 020f 	and.w	r2, r7, #15
 800c89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c89e:	ed93 7b00 	vldr	d7, [r3]
 800c8a2:	05f8      	lsls	r0, r7, #23
 800c8a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c8a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c8ac:	d516      	bpl.n	800c8dc <_dtoa_r+0x34c>
 800c8ae:	4ba8      	ldr	r3, [pc, #672]	@ (800cb50 <_dtoa_r+0x5c0>)
 800c8b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8b8:	f7f3 ffc8 	bl	800084c <__aeabi_ddiv>
 800c8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c0:	f004 040f 	and.w	r4, r4, #15
 800c8c4:	2603      	movs	r6, #3
 800c8c6:	4da2      	ldr	r5, [pc, #648]	@ (800cb50 <_dtoa_r+0x5c0>)
 800c8c8:	b954      	cbnz	r4, 800c8e0 <_dtoa_r+0x350>
 800c8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d2:	f7f3 ffbb 	bl	800084c <__aeabi_ddiv>
 800c8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8da:	e028      	b.n	800c92e <_dtoa_r+0x39e>
 800c8dc:	2602      	movs	r6, #2
 800c8de:	e7f2      	b.n	800c8c6 <_dtoa_r+0x336>
 800c8e0:	07e1      	lsls	r1, r4, #31
 800c8e2:	d508      	bpl.n	800c8f6 <_dtoa_r+0x366>
 800c8e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8ec:	f7f3 fe84 	bl	80005f8 <__aeabi_dmul>
 800c8f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	1064      	asrs	r4, r4, #1
 800c8f8:	3508      	adds	r5, #8
 800c8fa:	e7e5      	b.n	800c8c8 <_dtoa_r+0x338>
 800c8fc:	f000 80d2 	beq.w	800caa4 <_dtoa_r+0x514>
 800c900:	427c      	negs	r4, r7
 800c902:	4b92      	ldr	r3, [pc, #584]	@ (800cb4c <_dtoa_r+0x5bc>)
 800c904:	4d92      	ldr	r5, [pc, #584]	@ (800cb50 <_dtoa_r+0x5c0>)
 800c906:	f004 020f 	and.w	r2, r4, #15
 800c90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c916:	f7f3 fe6f 	bl	80005f8 <__aeabi_dmul>
 800c91a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c91e:	1124      	asrs	r4, r4, #4
 800c920:	2300      	movs	r3, #0
 800c922:	2602      	movs	r6, #2
 800c924:	2c00      	cmp	r4, #0
 800c926:	f040 80b2 	bne.w	800ca8e <_dtoa_r+0x4fe>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1d3      	bne.n	800c8d6 <_dtoa_r+0x346>
 800c92e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c930:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 80b7 	beq.w	800caa8 <_dtoa_r+0x518>
 800c93a:	4b86      	ldr	r3, [pc, #536]	@ (800cb54 <_dtoa_r+0x5c4>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	4620      	mov	r0, r4
 800c940:	4629      	mov	r1, r5
 800c942:	f7f4 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800c946:	2800      	cmp	r0, #0
 800c948:	f000 80ae 	beq.w	800caa8 <_dtoa_r+0x518>
 800c94c:	9b07      	ldr	r3, [sp, #28]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 80aa 	beq.w	800caa8 <_dtoa_r+0x518>
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd37      	ble.n	800c9ca <_dtoa_r+0x43a>
 800c95a:	1e7b      	subs	r3, r7, #1
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	4620      	mov	r0, r4
 800c960:	4b7d      	ldr	r3, [pc, #500]	@ (800cb58 <_dtoa_r+0x5c8>)
 800c962:	2200      	movs	r2, #0
 800c964:	4629      	mov	r1, r5
 800c966:	f7f3 fe47 	bl	80005f8 <__aeabi_dmul>
 800c96a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c96e:	9c00      	ldr	r4, [sp, #0]
 800c970:	3601      	adds	r6, #1
 800c972:	4630      	mov	r0, r6
 800c974:	f7f3 fdd6 	bl	8000524 <__aeabi_i2d>
 800c978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c97c:	f7f3 fe3c 	bl	80005f8 <__aeabi_dmul>
 800c980:	4b76      	ldr	r3, [pc, #472]	@ (800cb5c <_dtoa_r+0x5cc>)
 800c982:	2200      	movs	r2, #0
 800c984:	f7f3 fc82 	bl	800028c <__adddf3>
 800c988:	4605      	mov	r5, r0
 800c98a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c98e:	2c00      	cmp	r4, #0
 800c990:	f040 808d 	bne.w	800caae <_dtoa_r+0x51e>
 800c994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c998:	4b71      	ldr	r3, [pc, #452]	@ (800cb60 <_dtoa_r+0x5d0>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	f7f3 fc74 	bl	8000288 <__aeabi_dsub>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	4633      	mov	r3, r6
 800c9ac:	f7f4 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f040 828b 	bne.w	800cecc <_dtoa_r+0x93c>
 800c9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9c0:	f7f4 f88c 	bl	8000adc <__aeabi_dcmplt>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f040 8128 	bne.w	800cc1a <_dtoa_r+0x68a>
 800c9ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c9ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c9d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f2c0 815a 	blt.w	800cc8e <_dtoa_r+0x6fe>
 800c9da:	2f0e      	cmp	r7, #14
 800c9dc:	f300 8157 	bgt.w	800cc8e <_dtoa_r+0x6fe>
 800c9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800cb4c <_dtoa_r+0x5bc>)
 800c9e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9e6:	ed93 7b00 	vldr	d7, [r3]
 800c9ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	ed8d 7b00 	vstr	d7, [sp]
 800c9f2:	da03      	bge.n	800c9fc <_dtoa_r+0x46c>
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f340 8101 	ble.w	800cbfe <_dtoa_r+0x66e>
 800c9fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca00:	4656      	mov	r6, sl
 800ca02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca06:	4620      	mov	r0, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f7f3 ff1f 	bl	800084c <__aeabi_ddiv>
 800ca0e:	f7f4 f8a3 	bl	8000b58 <__aeabi_d2iz>
 800ca12:	4680      	mov	r8, r0
 800ca14:	f7f3 fd86 	bl	8000524 <__aeabi_i2d>
 800ca18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca1c:	f7f3 fdec 	bl	80005f8 <__aeabi_dmul>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca2c:	f7f3 fc2c 	bl	8000288 <__aeabi_dsub>
 800ca30:	f806 4b01 	strb.w	r4, [r6], #1
 800ca34:	9d07      	ldr	r5, [sp, #28]
 800ca36:	eba6 040a 	sub.w	r4, r6, sl
 800ca3a:	42a5      	cmp	r5, r4
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	f040 8117 	bne.w	800cc72 <_dtoa_r+0x6e2>
 800ca44:	f7f3 fc22 	bl	800028c <__adddf3>
 800ca48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	460d      	mov	r5, r1
 800ca50:	f7f4 f862 	bl	8000b18 <__aeabi_dcmpgt>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	f040 80f9 	bne.w	800cc4c <_dtoa_r+0x6bc>
 800ca5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f4 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca66:	b118      	cbz	r0, 800ca70 <_dtoa_r+0x4e0>
 800ca68:	f018 0f01 	tst.w	r8, #1
 800ca6c:	f040 80ee 	bne.w	800cc4c <_dtoa_r+0x6bc>
 800ca70:	4649      	mov	r1, r9
 800ca72:	4658      	mov	r0, fp
 800ca74:	f000 fc90 	bl	800d398 <_Bfree>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	7033      	strb	r3, [r6, #0]
 800ca7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca7e:	3701      	adds	r7, #1
 800ca80:	601f      	str	r7, [r3, #0]
 800ca82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 831d 	beq.w	800d0c4 <_dtoa_r+0xb34>
 800ca8a:	601e      	str	r6, [r3, #0]
 800ca8c:	e31a      	b.n	800d0c4 <_dtoa_r+0xb34>
 800ca8e:	07e2      	lsls	r2, r4, #31
 800ca90:	d505      	bpl.n	800ca9e <_dtoa_r+0x50e>
 800ca92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	3601      	adds	r6, #1
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	1064      	asrs	r4, r4, #1
 800caa0:	3508      	adds	r5, #8
 800caa2:	e73f      	b.n	800c924 <_dtoa_r+0x394>
 800caa4:	2602      	movs	r6, #2
 800caa6:	e742      	b.n	800c92e <_dtoa_r+0x39e>
 800caa8:	9c07      	ldr	r4, [sp, #28]
 800caaa:	9704      	str	r7, [sp, #16]
 800caac:	e761      	b.n	800c972 <_dtoa_r+0x3e2>
 800caae:	4b27      	ldr	r3, [pc, #156]	@ (800cb4c <_dtoa_r+0x5bc>)
 800cab0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cab6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800caba:	4454      	add	r4, sl
 800cabc:	2900      	cmp	r1, #0
 800cabe:	d053      	beq.n	800cb68 <_dtoa_r+0x5d8>
 800cac0:	4928      	ldr	r1, [pc, #160]	@ (800cb64 <_dtoa_r+0x5d4>)
 800cac2:	2000      	movs	r0, #0
 800cac4:	f7f3 fec2 	bl	800084c <__aeabi_ddiv>
 800cac8:	4633      	mov	r3, r6
 800caca:	462a      	mov	r2, r5
 800cacc:	f7f3 fbdc 	bl	8000288 <__aeabi_dsub>
 800cad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cad4:	4656      	mov	r6, sl
 800cad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cada:	f7f4 f83d 	bl	8000b58 <__aeabi_d2iz>
 800cade:	4605      	mov	r5, r0
 800cae0:	f7f3 fd20 	bl	8000524 <__aeabi_i2d>
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caec:	f7f3 fbcc 	bl	8000288 <__aeabi_dsub>
 800caf0:	3530      	adds	r5, #48	@ 0x30
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cafa:	f806 5b01 	strb.w	r5, [r6], #1
 800cafe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb02:	f7f3 ffeb 	bl	8000adc <__aeabi_dcmplt>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d171      	bne.n	800cbee <_dtoa_r+0x65e>
 800cb0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb0e:	4911      	ldr	r1, [pc, #68]	@ (800cb54 <_dtoa_r+0x5c4>)
 800cb10:	2000      	movs	r0, #0
 800cb12:	f7f3 fbb9 	bl	8000288 <__aeabi_dsub>
 800cb16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb1a:	f7f3 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f040 8095 	bne.w	800cc4e <_dtoa_r+0x6be>
 800cb24:	42a6      	cmp	r6, r4
 800cb26:	f43f af50 	beq.w	800c9ca <_dtoa_r+0x43a>
 800cb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb58 <_dtoa_r+0x5c8>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	f7f3 fd61 	bl	80005f8 <__aeabi_dmul>
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <_dtoa_r+0x5c8>)
 800cb38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb42:	f7f3 fd59 	bl	80005f8 <__aeabi_dmul>
 800cb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb4a:	e7c4      	b.n	800cad6 <_dtoa_r+0x546>
 800cb4c:	0800e758 	.word	0x0800e758
 800cb50:	0800e730 	.word	0x0800e730
 800cb54:	3ff00000 	.word	0x3ff00000
 800cb58:	40240000 	.word	0x40240000
 800cb5c:	401c0000 	.word	0x401c0000
 800cb60:	40140000 	.word	0x40140000
 800cb64:	3fe00000 	.word	0x3fe00000
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb74:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb76:	4656      	mov	r6, sl
 800cb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb7c:	f7f3 ffec 	bl	8000b58 <__aeabi_d2iz>
 800cb80:	4605      	mov	r5, r0
 800cb82:	f7f3 fccf 	bl	8000524 <__aeabi_i2d>
 800cb86:	4602      	mov	r2, r0
 800cb88:	460b      	mov	r3, r1
 800cb8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb8e:	f7f3 fb7b 	bl	8000288 <__aeabi_dsub>
 800cb92:	3530      	adds	r5, #48	@ 0x30
 800cb94:	f806 5b01 	strb.w	r5, [r6], #1
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	42a6      	cmp	r6, r4
 800cb9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cba2:	f04f 0200 	mov.w	r2, #0
 800cba6:	d124      	bne.n	800cbf2 <_dtoa_r+0x662>
 800cba8:	4bac      	ldr	r3, [pc, #688]	@ (800ce5c <_dtoa_r+0x8cc>)
 800cbaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbae:	f7f3 fb6d 	bl	800028c <__adddf3>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbba:	f7f3 ffad 	bl	8000b18 <__aeabi_dcmpgt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d145      	bne.n	800cc4e <_dtoa_r+0x6be>
 800cbc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbc6:	49a5      	ldr	r1, [pc, #660]	@ (800ce5c <_dtoa_r+0x8cc>)
 800cbc8:	2000      	movs	r0, #0
 800cbca:	f7f3 fb5d 	bl	8000288 <__aeabi_dsub>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbd6:	f7f3 ff81 	bl	8000adc <__aeabi_dcmplt>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	f43f aef5 	beq.w	800c9ca <_dtoa_r+0x43a>
 800cbe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cbe2:	1e73      	subs	r3, r6, #1
 800cbe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cbe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbea:	2b30      	cmp	r3, #48	@ 0x30
 800cbec:	d0f8      	beq.n	800cbe0 <_dtoa_r+0x650>
 800cbee:	9f04      	ldr	r7, [sp, #16]
 800cbf0:	e73e      	b.n	800ca70 <_dtoa_r+0x4e0>
 800cbf2:	4b9b      	ldr	r3, [pc, #620]	@ (800ce60 <_dtoa_r+0x8d0>)
 800cbf4:	f7f3 fd00 	bl	80005f8 <__aeabi_dmul>
 800cbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbfc:	e7bc      	b.n	800cb78 <_dtoa_r+0x5e8>
 800cbfe:	d10c      	bne.n	800cc1a <_dtoa_r+0x68a>
 800cc00:	4b98      	ldr	r3, [pc, #608]	@ (800ce64 <_dtoa_r+0x8d4>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc08:	f7f3 fcf6 	bl	80005f8 <__aeabi_dmul>
 800cc0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc10:	f7f3 ff78 	bl	8000b04 <__aeabi_dcmpge>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	f000 8157 	beq.w	800cec8 <_dtoa_r+0x938>
 800cc1a:	2400      	movs	r4, #0
 800cc1c:	4625      	mov	r5, r4
 800cc1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc20:	43db      	mvns	r3, r3
 800cc22:	9304      	str	r3, [sp, #16]
 800cc24:	4656      	mov	r6, sl
 800cc26:	2700      	movs	r7, #0
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4658      	mov	r0, fp
 800cc2c:	f000 fbb4 	bl	800d398 <_Bfree>
 800cc30:	2d00      	cmp	r5, #0
 800cc32:	d0dc      	beq.n	800cbee <_dtoa_r+0x65e>
 800cc34:	b12f      	cbz	r7, 800cc42 <_dtoa_r+0x6b2>
 800cc36:	42af      	cmp	r7, r5
 800cc38:	d003      	beq.n	800cc42 <_dtoa_r+0x6b2>
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 fbab 	bl	800d398 <_Bfree>
 800cc42:	4629      	mov	r1, r5
 800cc44:	4658      	mov	r0, fp
 800cc46:	f000 fba7 	bl	800d398 <_Bfree>
 800cc4a:	e7d0      	b.n	800cbee <_dtoa_r+0x65e>
 800cc4c:	9704      	str	r7, [sp, #16]
 800cc4e:	4633      	mov	r3, r6
 800cc50:	461e      	mov	r6, r3
 800cc52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc56:	2a39      	cmp	r2, #57	@ 0x39
 800cc58:	d107      	bne.n	800cc6a <_dtoa_r+0x6da>
 800cc5a:	459a      	cmp	sl, r3
 800cc5c:	d1f8      	bne.n	800cc50 <_dtoa_r+0x6c0>
 800cc5e:	9a04      	ldr	r2, [sp, #16]
 800cc60:	3201      	adds	r2, #1
 800cc62:	9204      	str	r2, [sp, #16]
 800cc64:	2230      	movs	r2, #48	@ 0x30
 800cc66:	f88a 2000 	strb.w	r2, [sl]
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	3201      	adds	r2, #1
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	e7bd      	b.n	800cbee <_dtoa_r+0x65e>
 800cc72:	4b7b      	ldr	r3, [pc, #492]	@ (800ce60 <_dtoa_r+0x8d0>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	f7f3 fcbf 	bl	80005f8 <__aeabi_dmul>
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	f7f3 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f aebb 	beq.w	800ca02 <_dtoa_r+0x472>
 800cc8c:	e6f0      	b.n	800ca70 <_dtoa_r+0x4e0>
 800cc8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc90:	2a00      	cmp	r2, #0
 800cc92:	f000 80db 	beq.w	800ce4c <_dtoa_r+0x8bc>
 800cc96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc98:	2a01      	cmp	r2, #1
 800cc9a:	f300 80bf 	bgt.w	800ce1c <_dtoa_r+0x88c>
 800cc9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	f000 80b7 	beq.w	800ce14 <_dtoa_r+0x884>
 800cca6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ccaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccac:	4646      	mov	r6, r8
 800ccae:	9a08      	ldr	r2, [sp, #32]
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	441a      	add	r2, r3
 800ccb4:	4658      	mov	r0, fp
 800ccb6:	4498      	add	r8, r3
 800ccb8:	9208      	str	r2, [sp, #32]
 800ccba:	f000 fc21 	bl	800d500 <__i2b>
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	b15e      	cbz	r6, 800ccda <_dtoa_r+0x74a>
 800ccc2:	9b08      	ldr	r3, [sp, #32]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dd08      	ble.n	800ccda <_dtoa_r+0x74a>
 800ccc8:	42b3      	cmp	r3, r6
 800ccca:	9a08      	ldr	r2, [sp, #32]
 800cccc:	bfa8      	it	ge
 800ccce:	4633      	movge	r3, r6
 800ccd0:	eba8 0803 	sub.w	r8, r8, r3
 800ccd4:	1af6      	subs	r6, r6, r3
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	9308      	str	r3, [sp, #32]
 800ccda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccdc:	b1f3      	cbz	r3, 800cd1c <_dtoa_r+0x78c>
 800ccde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 80b7 	beq.w	800ce54 <_dtoa_r+0x8c4>
 800cce6:	b18c      	cbz	r4, 800cd0c <_dtoa_r+0x77c>
 800cce8:	4629      	mov	r1, r5
 800ccea:	4622      	mov	r2, r4
 800ccec:	4658      	mov	r0, fp
 800ccee:	f000 fcc7 	bl	800d680 <__pow5mult>
 800ccf2:	464a      	mov	r2, r9
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	4658      	mov	r0, fp
 800ccfa:	f000 fc17 	bl	800d52c <__multiply>
 800ccfe:	4649      	mov	r1, r9
 800cd00:	9004      	str	r0, [sp, #16]
 800cd02:	4658      	mov	r0, fp
 800cd04:	f000 fb48 	bl	800d398 <_Bfree>
 800cd08:	9b04      	ldr	r3, [sp, #16]
 800cd0a:	4699      	mov	r9, r3
 800cd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd0e:	1b1a      	subs	r2, r3, r4
 800cd10:	d004      	beq.n	800cd1c <_dtoa_r+0x78c>
 800cd12:	4649      	mov	r1, r9
 800cd14:	4658      	mov	r0, fp
 800cd16:	f000 fcb3 	bl	800d680 <__pow5mult>
 800cd1a:	4681      	mov	r9, r0
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	4658      	mov	r0, fp
 800cd20:	f000 fbee 	bl	800d500 <__i2b>
 800cd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd26:	4604      	mov	r4, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 81cf 	beq.w	800d0cc <_dtoa_r+0xb3c>
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4601      	mov	r1, r0
 800cd32:	4658      	mov	r0, fp
 800cd34:	f000 fca4 	bl	800d680 <__pow5mult>
 800cd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	f300 8095 	bgt.w	800ce6c <_dtoa_r+0x8dc>
 800cd42:	9b02      	ldr	r3, [sp, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f040 8087 	bne.w	800ce58 <_dtoa_r+0x8c8>
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 8089 	bne.w	800ce68 <_dtoa_r+0x8d8>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd5c:	0d1b      	lsrs	r3, r3, #20
 800cd5e:	051b      	lsls	r3, r3, #20
 800cd60:	b12b      	cbz	r3, 800cd6e <_dtoa_r+0x7de>
 800cd62:	9b08      	ldr	r3, [sp, #32]
 800cd64:	3301      	adds	r3, #1
 800cd66:	9308      	str	r3, [sp, #32]
 800cd68:	f108 0801 	add.w	r8, r8, #1
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f000 81b0 	beq.w	800d0d8 <_dtoa_r+0xb48>
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd7e:	6918      	ldr	r0, [r3, #16]
 800cd80:	f000 fb72 	bl	800d468 <__hi0bits>
 800cd84:	f1c0 0020 	rsb	r0, r0, #32
 800cd88:	9b08      	ldr	r3, [sp, #32]
 800cd8a:	4418      	add	r0, r3
 800cd8c:	f010 001f 	ands.w	r0, r0, #31
 800cd90:	d077      	beq.n	800ce82 <_dtoa_r+0x8f2>
 800cd92:	f1c0 0320 	rsb	r3, r0, #32
 800cd96:	2b04      	cmp	r3, #4
 800cd98:	dd6b      	ble.n	800ce72 <_dtoa_r+0x8e2>
 800cd9a:	9b08      	ldr	r3, [sp, #32]
 800cd9c:	f1c0 001c 	rsb	r0, r0, #28
 800cda0:	4403      	add	r3, r0
 800cda2:	4480      	add	r8, r0
 800cda4:	4406      	add	r6, r0
 800cda6:	9308      	str	r3, [sp, #32]
 800cda8:	f1b8 0f00 	cmp.w	r8, #0
 800cdac:	dd05      	ble.n	800cdba <_dtoa_r+0x82a>
 800cdae:	4649      	mov	r1, r9
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	4658      	mov	r0, fp
 800cdb4:	f000 fcbe 	bl	800d734 <__lshift>
 800cdb8:	4681      	mov	r9, r0
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dd05      	ble.n	800cdcc <_dtoa_r+0x83c>
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4658      	mov	r0, fp
 800cdc6:	f000 fcb5 	bl	800d734 <__lshift>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d059      	beq.n	800ce86 <_dtoa_r+0x8f6>
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4648      	mov	r0, r9
 800cdd6:	f000 fd19 	bl	800d80c <__mcmp>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	da53      	bge.n	800ce86 <_dtoa_r+0x8f6>
 800cdde:	1e7b      	subs	r3, r7, #1
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	4649      	mov	r1, r9
 800cde4:	2300      	movs	r3, #0
 800cde6:	220a      	movs	r2, #10
 800cde8:	4658      	mov	r0, fp
 800cdea:	f000 faf7 	bl	800d3dc <__multadd>
 800cdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdf0:	4681      	mov	r9, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 8172 	beq.w	800d0dc <_dtoa_r+0xb4c>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	220a      	movs	r2, #10
 800cdfe:	4658      	mov	r0, fp
 800ce00:	f000 faec 	bl	800d3dc <__multadd>
 800ce04:	9b00      	ldr	r3, [sp, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	4605      	mov	r5, r0
 800ce0a:	dc67      	bgt.n	800cedc <_dtoa_r+0x94c>
 800ce0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	dc41      	bgt.n	800ce96 <_dtoa_r+0x906>
 800ce12:	e063      	b.n	800cedc <_dtoa_r+0x94c>
 800ce14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce1a:	e746      	b.n	800ccaa <_dtoa_r+0x71a>
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	1e5c      	subs	r4, r3, #1
 800ce20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	bfbf      	itttt	lt
 800ce26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ce2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ce2c:	1ae3      	sublt	r3, r4, r3
 800ce2e:	bfb4      	ite	lt
 800ce30:	18d2      	addlt	r2, r2, r3
 800ce32:	1b1c      	subge	r4, r3, r4
 800ce34:	9b07      	ldr	r3, [sp, #28]
 800ce36:	bfbc      	itt	lt
 800ce38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ce3a:	2400      	movlt	r4, #0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfb5      	itete	lt
 800ce40:	eba8 0603 	sublt.w	r6, r8, r3
 800ce44:	9b07      	ldrge	r3, [sp, #28]
 800ce46:	2300      	movlt	r3, #0
 800ce48:	4646      	movge	r6, r8
 800ce4a:	e730      	b.n	800ccae <_dtoa_r+0x71e>
 800ce4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce50:	4646      	mov	r6, r8
 800ce52:	e735      	b.n	800ccc0 <_dtoa_r+0x730>
 800ce54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce56:	e75c      	b.n	800cd12 <_dtoa_r+0x782>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	e788      	b.n	800cd6e <_dtoa_r+0x7de>
 800ce5c:	3fe00000 	.word	0x3fe00000
 800ce60:	40240000 	.word	0x40240000
 800ce64:	40140000 	.word	0x40140000
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	e780      	b.n	800cd6e <_dtoa_r+0x7de>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce70:	e782      	b.n	800cd78 <_dtoa_r+0x7e8>
 800ce72:	d099      	beq.n	800cda8 <_dtoa_r+0x818>
 800ce74:	9a08      	ldr	r2, [sp, #32]
 800ce76:	331c      	adds	r3, #28
 800ce78:	441a      	add	r2, r3
 800ce7a:	4498      	add	r8, r3
 800ce7c:	441e      	add	r6, r3
 800ce7e:	9208      	str	r2, [sp, #32]
 800ce80:	e792      	b.n	800cda8 <_dtoa_r+0x818>
 800ce82:	4603      	mov	r3, r0
 800ce84:	e7f6      	b.n	800ce74 <_dtoa_r+0x8e4>
 800ce86:	9b07      	ldr	r3, [sp, #28]
 800ce88:	9704      	str	r7, [sp, #16]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc20      	bgt.n	800ced0 <_dtoa_r+0x940>
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	dd1e      	ble.n	800ced4 <_dtoa_r+0x944>
 800ce96:	9b00      	ldr	r3, [sp, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f47f aec0 	bne.w	800cc1e <_dtoa_r+0x68e>
 800ce9e:	4621      	mov	r1, r4
 800cea0:	2205      	movs	r2, #5
 800cea2:	4658      	mov	r0, fp
 800cea4:	f000 fa9a 	bl	800d3dc <__multadd>
 800cea8:	4601      	mov	r1, r0
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4648      	mov	r0, r9
 800ceae:	f000 fcad 	bl	800d80c <__mcmp>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f77f aeb3 	ble.w	800cc1e <_dtoa_r+0x68e>
 800ceb8:	4656      	mov	r6, sl
 800ceba:	2331      	movs	r3, #49	@ 0x31
 800cebc:	f806 3b01 	strb.w	r3, [r6], #1
 800cec0:	9b04      	ldr	r3, [sp, #16]
 800cec2:	3301      	adds	r3, #1
 800cec4:	9304      	str	r3, [sp, #16]
 800cec6:	e6ae      	b.n	800cc26 <_dtoa_r+0x696>
 800cec8:	9c07      	ldr	r4, [sp, #28]
 800ceca:	9704      	str	r7, [sp, #16]
 800cecc:	4625      	mov	r5, r4
 800cece:	e7f3      	b.n	800ceb8 <_dtoa_r+0x928>
 800ced0:	9b07      	ldr	r3, [sp, #28]
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 8104 	beq.w	800d0e4 <_dtoa_r+0xb54>
 800cedc:	2e00      	cmp	r6, #0
 800cede:	dd05      	ble.n	800ceec <_dtoa_r+0x95c>
 800cee0:	4629      	mov	r1, r5
 800cee2:	4632      	mov	r2, r6
 800cee4:	4658      	mov	r0, fp
 800cee6:	f000 fc25 	bl	800d734 <__lshift>
 800ceea:	4605      	mov	r5, r0
 800ceec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d05a      	beq.n	800cfa8 <_dtoa_r+0xa18>
 800cef2:	6869      	ldr	r1, [r5, #4]
 800cef4:	4658      	mov	r0, fp
 800cef6:	f000 fa0f 	bl	800d318 <_Balloc>
 800cefa:	4606      	mov	r6, r0
 800cefc:	b928      	cbnz	r0, 800cf0a <_dtoa_r+0x97a>
 800cefe:	4b84      	ldr	r3, [pc, #528]	@ (800d110 <_dtoa_r+0xb80>)
 800cf00:	4602      	mov	r2, r0
 800cf02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf06:	f7ff bb5a 	b.w	800c5be <_dtoa_r+0x2e>
 800cf0a:	692a      	ldr	r2, [r5, #16]
 800cf0c:	3202      	adds	r2, #2
 800cf0e:	0092      	lsls	r2, r2, #2
 800cf10:	f105 010c 	add.w	r1, r5, #12
 800cf14:	300c      	adds	r0, #12
 800cf16:	f7ff faa4 	bl	800c462 <memcpy>
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4658      	mov	r0, fp
 800cf20:	f000 fc08 	bl	800d734 <__lshift>
 800cf24:	f10a 0301 	add.w	r3, sl, #1
 800cf28:	9307      	str	r3, [sp, #28]
 800cf2a:	9b00      	ldr	r3, [sp, #0]
 800cf2c:	4453      	add	r3, sl
 800cf2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf30:	9b02      	ldr	r3, [sp, #8]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	462f      	mov	r7, r5
 800cf38:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	9b07      	ldr	r3, [sp, #28]
 800cf3e:	4621      	mov	r1, r4
 800cf40:	3b01      	subs	r3, #1
 800cf42:	4648      	mov	r0, r9
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	f7ff fa9a 	bl	800c47e <quorem>
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	9002      	str	r0, [sp, #8]
 800cf4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf52:	4648      	mov	r0, r9
 800cf54:	f000 fc5a 	bl	800d80c <__mcmp>
 800cf58:	462a      	mov	r2, r5
 800cf5a:	9008      	str	r0, [sp, #32]
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4658      	mov	r0, fp
 800cf60:	f000 fc70 	bl	800d844 <__mdiff>
 800cf64:	68c2      	ldr	r2, [r0, #12]
 800cf66:	4606      	mov	r6, r0
 800cf68:	bb02      	cbnz	r2, 800cfac <_dtoa_r+0xa1c>
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	4648      	mov	r0, r9
 800cf6e:	f000 fc4d 	bl	800d80c <__mcmp>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4631      	mov	r1, r6
 800cf76:	4658      	mov	r0, fp
 800cf78:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf7a:	f000 fa0d 	bl	800d398 <_Bfree>
 800cf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf82:	9e07      	ldr	r6, [sp, #28]
 800cf84:	ea43 0102 	orr.w	r1, r3, r2
 800cf88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf8a:	4319      	orrs	r1, r3
 800cf8c:	d110      	bne.n	800cfb0 <_dtoa_r+0xa20>
 800cf8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf92:	d029      	beq.n	800cfe8 <_dtoa_r+0xa58>
 800cf94:	9b08      	ldr	r3, [sp, #32]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	dd02      	ble.n	800cfa0 <_dtoa_r+0xa10>
 800cf9a:	9b02      	ldr	r3, [sp, #8]
 800cf9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cfa0:	9b00      	ldr	r3, [sp, #0]
 800cfa2:	f883 8000 	strb.w	r8, [r3]
 800cfa6:	e63f      	b.n	800cc28 <_dtoa_r+0x698>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e7bb      	b.n	800cf24 <_dtoa_r+0x994>
 800cfac:	2201      	movs	r2, #1
 800cfae:	e7e1      	b.n	800cf74 <_dtoa_r+0x9e4>
 800cfb0:	9b08      	ldr	r3, [sp, #32]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	db04      	blt.n	800cfc0 <_dtoa_r+0xa30>
 800cfb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfb8:	430b      	orrs	r3, r1
 800cfba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cfbc:	430b      	orrs	r3, r1
 800cfbe:	d120      	bne.n	800d002 <_dtoa_r+0xa72>
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	dded      	ble.n	800cfa0 <_dtoa_r+0xa10>
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	4658      	mov	r0, fp
 800cfca:	f000 fbb3 	bl	800d734 <__lshift>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4681      	mov	r9, r0
 800cfd2:	f000 fc1b 	bl	800d80c <__mcmp>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	dc03      	bgt.n	800cfe2 <_dtoa_r+0xa52>
 800cfda:	d1e1      	bne.n	800cfa0 <_dtoa_r+0xa10>
 800cfdc:	f018 0f01 	tst.w	r8, #1
 800cfe0:	d0de      	beq.n	800cfa0 <_dtoa_r+0xa10>
 800cfe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfe6:	d1d8      	bne.n	800cf9a <_dtoa_r+0xa0a>
 800cfe8:	9a00      	ldr	r2, [sp, #0]
 800cfea:	2339      	movs	r3, #57	@ 0x39
 800cfec:	7013      	strb	r3, [r2, #0]
 800cfee:	4633      	mov	r3, r6
 800cff0:	461e      	mov	r6, r3
 800cff2:	3b01      	subs	r3, #1
 800cff4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cff8:	2a39      	cmp	r2, #57	@ 0x39
 800cffa:	d052      	beq.n	800d0a2 <_dtoa_r+0xb12>
 800cffc:	3201      	adds	r2, #1
 800cffe:	701a      	strb	r2, [r3, #0]
 800d000:	e612      	b.n	800cc28 <_dtoa_r+0x698>
 800d002:	2a00      	cmp	r2, #0
 800d004:	dd07      	ble.n	800d016 <_dtoa_r+0xa86>
 800d006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d00a:	d0ed      	beq.n	800cfe8 <_dtoa_r+0xa58>
 800d00c:	9a00      	ldr	r2, [sp, #0]
 800d00e:	f108 0301 	add.w	r3, r8, #1
 800d012:	7013      	strb	r3, [r2, #0]
 800d014:	e608      	b.n	800cc28 <_dtoa_r+0x698>
 800d016:	9b07      	ldr	r3, [sp, #28]
 800d018:	9a07      	ldr	r2, [sp, #28]
 800d01a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d020:	4293      	cmp	r3, r2
 800d022:	d028      	beq.n	800d076 <_dtoa_r+0xae6>
 800d024:	4649      	mov	r1, r9
 800d026:	2300      	movs	r3, #0
 800d028:	220a      	movs	r2, #10
 800d02a:	4658      	mov	r0, fp
 800d02c:	f000 f9d6 	bl	800d3dc <__multadd>
 800d030:	42af      	cmp	r7, r5
 800d032:	4681      	mov	r9, r0
 800d034:	f04f 0300 	mov.w	r3, #0
 800d038:	f04f 020a 	mov.w	r2, #10
 800d03c:	4639      	mov	r1, r7
 800d03e:	4658      	mov	r0, fp
 800d040:	d107      	bne.n	800d052 <_dtoa_r+0xac2>
 800d042:	f000 f9cb 	bl	800d3dc <__multadd>
 800d046:	4607      	mov	r7, r0
 800d048:	4605      	mov	r5, r0
 800d04a:	9b07      	ldr	r3, [sp, #28]
 800d04c:	3301      	adds	r3, #1
 800d04e:	9307      	str	r3, [sp, #28]
 800d050:	e774      	b.n	800cf3c <_dtoa_r+0x9ac>
 800d052:	f000 f9c3 	bl	800d3dc <__multadd>
 800d056:	4629      	mov	r1, r5
 800d058:	4607      	mov	r7, r0
 800d05a:	2300      	movs	r3, #0
 800d05c:	220a      	movs	r2, #10
 800d05e:	4658      	mov	r0, fp
 800d060:	f000 f9bc 	bl	800d3dc <__multadd>
 800d064:	4605      	mov	r5, r0
 800d066:	e7f0      	b.n	800d04a <_dtoa_r+0xaba>
 800d068:	9b00      	ldr	r3, [sp, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfcc      	ite	gt
 800d06e:	461e      	movgt	r6, r3
 800d070:	2601      	movle	r6, #1
 800d072:	4456      	add	r6, sl
 800d074:	2700      	movs	r7, #0
 800d076:	4649      	mov	r1, r9
 800d078:	2201      	movs	r2, #1
 800d07a:	4658      	mov	r0, fp
 800d07c:	f000 fb5a 	bl	800d734 <__lshift>
 800d080:	4621      	mov	r1, r4
 800d082:	4681      	mov	r9, r0
 800d084:	f000 fbc2 	bl	800d80c <__mcmp>
 800d088:	2800      	cmp	r0, #0
 800d08a:	dcb0      	bgt.n	800cfee <_dtoa_r+0xa5e>
 800d08c:	d102      	bne.n	800d094 <_dtoa_r+0xb04>
 800d08e:	f018 0f01 	tst.w	r8, #1
 800d092:	d1ac      	bne.n	800cfee <_dtoa_r+0xa5e>
 800d094:	4633      	mov	r3, r6
 800d096:	461e      	mov	r6, r3
 800d098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d09c:	2a30      	cmp	r2, #48	@ 0x30
 800d09e:	d0fa      	beq.n	800d096 <_dtoa_r+0xb06>
 800d0a0:	e5c2      	b.n	800cc28 <_dtoa_r+0x698>
 800d0a2:	459a      	cmp	sl, r3
 800d0a4:	d1a4      	bne.n	800cff0 <_dtoa_r+0xa60>
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	2331      	movs	r3, #49	@ 0x31
 800d0ae:	f88a 3000 	strb.w	r3, [sl]
 800d0b2:	e5b9      	b.n	800cc28 <_dtoa_r+0x698>
 800d0b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d114 <_dtoa_r+0xb84>
 800d0ba:	b11b      	cbz	r3, 800d0c4 <_dtoa_r+0xb34>
 800d0bc:	f10a 0308 	add.w	r3, sl, #8
 800d0c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	4650      	mov	r0, sl
 800d0c6:	b019      	add	sp, #100	@ 0x64
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	f77f ae37 	ble.w	800cd42 <_dtoa_r+0x7b2>
 800d0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0d8:	2001      	movs	r0, #1
 800d0da:	e655      	b.n	800cd88 <_dtoa_r+0x7f8>
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f77f aed6 	ble.w	800ce90 <_dtoa_r+0x900>
 800d0e4:	4656      	mov	r6, sl
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4648      	mov	r0, r9
 800d0ea:	f7ff f9c8 	bl	800c47e <quorem>
 800d0ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0f2:	f806 8b01 	strb.w	r8, [r6], #1
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	eba6 020a 	sub.w	r2, r6, sl
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	ddb3      	ble.n	800d068 <_dtoa_r+0xad8>
 800d100:	4649      	mov	r1, r9
 800d102:	2300      	movs	r3, #0
 800d104:	220a      	movs	r2, #10
 800d106:	4658      	mov	r0, fp
 800d108:	f000 f968 	bl	800d3dc <__multadd>
 800d10c:	4681      	mov	r9, r0
 800d10e:	e7ea      	b.n	800d0e6 <_dtoa_r+0xb56>
 800d110:	0800e6b8 	.word	0x0800e6b8
 800d114:	0800e63c 	.word	0x0800e63c

0800d118 <_free_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4605      	mov	r5, r0
 800d11c:	2900      	cmp	r1, #0
 800d11e:	d041      	beq.n	800d1a4 <_free_r+0x8c>
 800d120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d124:	1f0c      	subs	r4, r1, #4
 800d126:	2b00      	cmp	r3, #0
 800d128:	bfb8      	it	lt
 800d12a:	18e4      	addlt	r4, r4, r3
 800d12c:	f000 f8e8 	bl	800d300 <__malloc_lock>
 800d130:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a8 <_free_r+0x90>)
 800d132:	6813      	ldr	r3, [r2, #0]
 800d134:	b933      	cbnz	r3, 800d144 <_free_r+0x2c>
 800d136:	6063      	str	r3, [r4, #4]
 800d138:	6014      	str	r4, [r2, #0]
 800d13a:	4628      	mov	r0, r5
 800d13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d140:	f000 b8e4 	b.w	800d30c <__malloc_unlock>
 800d144:	42a3      	cmp	r3, r4
 800d146:	d908      	bls.n	800d15a <_free_r+0x42>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	1821      	adds	r1, r4, r0
 800d14c:	428b      	cmp	r3, r1
 800d14e:	bf01      	itttt	eq
 800d150:	6819      	ldreq	r1, [r3, #0]
 800d152:	685b      	ldreq	r3, [r3, #4]
 800d154:	1809      	addeq	r1, r1, r0
 800d156:	6021      	streq	r1, [r4, #0]
 800d158:	e7ed      	b.n	800d136 <_free_r+0x1e>
 800d15a:	461a      	mov	r2, r3
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	b10b      	cbz	r3, 800d164 <_free_r+0x4c>
 800d160:	42a3      	cmp	r3, r4
 800d162:	d9fa      	bls.n	800d15a <_free_r+0x42>
 800d164:	6811      	ldr	r1, [r2, #0]
 800d166:	1850      	adds	r0, r2, r1
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d10b      	bne.n	800d184 <_free_r+0x6c>
 800d16c:	6820      	ldr	r0, [r4, #0]
 800d16e:	4401      	add	r1, r0
 800d170:	1850      	adds	r0, r2, r1
 800d172:	4283      	cmp	r3, r0
 800d174:	6011      	str	r1, [r2, #0]
 800d176:	d1e0      	bne.n	800d13a <_free_r+0x22>
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	6053      	str	r3, [r2, #4]
 800d17e:	4408      	add	r0, r1
 800d180:	6010      	str	r0, [r2, #0]
 800d182:	e7da      	b.n	800d13a <_free_r+0x22>
 800d184:	d902      	bls.n	800d18c <_free_r+0x74>
 800d186:	230c      	movs	r3, #12
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	e7d6      	b.n	800d13a <_free_r+0x22>
 800d18c:	6820      	ldr	r0, [r4, #0]
 800d18e:	1821      	adds	r1, r4, r0
 800d190:	428b      	cmp	r3, r1
 800d192:	bf04      	itt	eq
 800d194:	6819      	ldreq	r1, [r3, #0]
 800d196:	685b      	ldreq	r3, [r3, #4]
 800d198:	6063      	str	r3, [r4, #4]
 800d19a:	bf04      	itt	eq
 800d19c:	1809      	addeq	r1, r1, r0
 800d19e:	6021      	streq	r1, [r4, #0]
 800d1a0:	6054      	str	r4, [r2, #4]
 800d1a2:	e7ca      	b.n	800d13a <_free_r+0x22>
 800d1a4:	bd38      	pop	{r3, r4, r5, pc}
 800d1a6:	bf00      	nop
 800d1a8:	200021a4 	.word	0x200021a4

0800d1ac <malloc>:
 800d1ac:	4b02      	ldr	r3, [pc, #8]	@ (800d1b8 <malloc+0xc>)
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	f000 b825 	b.w	800d200 <_malloc_r>
 800d1b6:	bf00      	nop
 800d1b8:	20000020 	.word	0x20000020

0800d1bc <sbrk_aligned>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4e0f      	ldr	r6, [pc, #60]	@ (800d1fc <sbrk_aligned+0x40>)
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	6831      	ldr	r1, [r6, #0]
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	b911      	cbnz	r1, 800d1ce <sbrk_aligned+0x12>
 800d1c8:	f000 fcd4 	bl	800db74 <_sbrk_r>
 800d1cc:	6030      	str	r0, [r6, #0]
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f000 fccf 	bl	800db74 <_sbrk_r>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d103      	bne.n	800d1e2 <sbrk_aligned+0x26>
 800d1da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d1de:	4620      	mov	r0, r4
 800d1e0:	bd70      	pop	{r4, r5, r6, pc}
 800d1e2:	1cc4      	adds	r4, r0, #3
 800d1e4:	f024 0403 	bic.w	r4, r4, #3
 800d1e8:	42a0      	cmp	r0, r4
 800d1ea:	d0f8      	beq.n	800d1de <sbrk_aligned+0x22>
 800d1ec:	1a21      	subs	r1, r4, r0
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 fcc0 	bl	800db74 <_sbrk_r>
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	d1f2      	bne.n	800d1de <sbrk_aligned+0x22>
 800d1f8:	e7ef      	b.n	800d1da <sbrk_aligned+0x1e>
 800d1fa:	bf00      	nop
 800d1fc:	200021a0 	.word	0x200021a0

0800d200 <_malloc_r>:
 800d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d204:	1ccd      	adds	r5, r1, #3
 800d206:	f025 0503 	bic.w	r5, r5, #3
 800d20a:	3508      	adds	r5, #8
 800d20c:	2d0c      	cmp	r5, #12
 800d20e:	bf38      	it	cc
 800d210:	250c      	movcc	r5, #12
 800d212:	2d00      	cmp	r5, #0
 800d214:	4606      	mov	r6, r0
 800d216:	db01      	blt.n	800d21c <_malloc_r+0x1c>
 800d218:	42a9      	cmp	r1, r5
 800d21a:	d904      	bls.n	800d226 <_malloc_r+0x26>
 800d21c:	230c      	movs	r3, #12
 800d21e:	6033      	str	r3, [r6, #0]
 800d220:	2000      	movs	r0, #0
 800d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2fc <_malloc_r+0xfc>
 800d22a:	f000 f869 	bl	800d300 <__malloc_lock>
 800d22e:	f8d8 3000 	ldr.w	r3, [r8]
 800d232:	461c      	mov	r4, r3
 800d234:	bb44      	cbnz	r4, 800d288 <_malloc_r+0x88>
 800d236:	4629      	mov	r1, r5
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ffbf 	bl	800d1bc <sbrk_aligned>
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	4604      	mov	r4, r0
 800d242:	d158      	bne.n	800d2f6 <_malloc_r+0xf6>
 800d244:	f8d8 4000 	ldr.w	r4, [r8]
 800d248:	4627      	mov	r7, r4
 800d24a:	2f00      	cmp	r7, #0
 800d24c:	d143      	bne.n	800d2d6 <_malloc_r+0xd6>
 800d24e:	2c00      	cmp	r4, #0
 800d250:	d04b      	beq.n	800d2ea <_malloc_r+0xea>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	4639      	mov	r1, r7
 800d256:	4630      	mov	r0, r6
 800d258:	eb04 0903 	add.w	r9, r4, r3
 800d25c:	f000 fc8a 	bl	800db74 <_sbrk_r>
 800d260:	4581      	cmp	r9, r0
 800d262:	d142      	bne.n	800d2ea <_malloc_r+0xea>
 800d264:	6821      	ldr	r1, [r4, #0]
 800d266:	1a6d      	subs	r5, r5, r1
 800d268:	4629      	mov	r1, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7ff ffa6 	bl	800d1bc <sbrk_aligned>
 800d270:	3001      	adds	r0, #1
 800d272:	d03a      	beq.n	800d2ea <_malloc_r+0xea>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	442b      	add	r3, r5
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	f8d8 3000 	ldr.w	r3, [r8]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	bb62      	cbnz	r2, 800d2dc <_malloc_r+0xdc>
 800d282:	f8c8 7000 	str.w	r7, [r8]
 800d286:	e00f      	b.n	800d2a8 <_malloc_r+0xa8>
 800d288:	6822      	ldr	r2, [r4, #0]
 800d28a:	1b52      	subs	r2, r2, r5
 800d28c:	d420      	bmi.n	800d2d0 <_malloc_r+0xd0>
 800d28e:	2a0b      	cmp	r2, #11
 800d290:	d917      	bls.n	800d2c2 <_malloc_r+0xc2>
 800d292:	1961      	adds	r1, r4, r5
 800d294:	42a3      	cmp	r3, r4
 800d296:	6025      	str	r5, [r4, #0]
 800d298:	bf18      	it	ne
 800d29a:	6059      	strne	r1, [r3, #4]
 800d29c:	6863      	ldr	r3, [r4, #4]
 800d29e:	bf08      	it	eq
 800d2a0:	f8c8 1000 	streq.w	r1, [r8]
 800d2a4:	5162      	str	r2, [r4, r5]
 800d2a6:	604b      	str	r3, [r1, #4]
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f000 f82f 	bl	800d30c <__malloc_unlock>
 800d2ae:	f104 000b 	add.w	r0, r4, #11
 800d2b2:	1d23      	adds	r3, r4, #4
 800d2b4:	f020 0007 	bic.w	r0, r0, #7
 800d2b8:	1ac2      	subs	r2, r0, r3
 800d2ba:	bf1c      	itt	ne
 800d2bc:	1a1b      	subne	r3, r3, r0
 800d2be:	50a3      	strne	r3, [r4, r2]
 800d2c0:	e7af      	b.n	800d222 <_malloc_r+0x22>
 800d2c2:	6862      	ldr	r2, [r4, #4]
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	bf0c      	ite	eq
 800d2c8:	f8c8 2000 	streq.w	r2, [r8]
 800d2cc:	605a      	strne	r2, [r3, #4]
 800d2ce:	e7eb      	b.n	800d2a8 <_malloc_r+0xa8>
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	6864      	ldr	r4, [r4, #4]
 800d2d4:	e7ae      	b.n	800d234 <_malloc_r+0x34>
 800d2d6:	463c      	mov	r4, r7
 800d2d8:	687f      	ldr	r7, [r7, #4]
 800d2da:	e7b6      	b.n	800d24a <_malloc_r+0x4a>
 800d2dc:	461a      	mov	r2, r3
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	d1fb      	bne.n	800d2dc <_malloc_r+0xdc>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6053      	str	r3, [r2, #4]
 800d2e8:	e7de      	b.n	800d2a8 <_malloc_r+0xa8>
 800d2ea:	230c      	movs	r3, #12
 800d2ec:	6033      	str	r3, [r6, #0]
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	f000 f80c 	bl	800d30c <__malloc_unlock>
 800d2f4:	e794      	b.n	800d220 <_malloc_r+0x20>
 800d2f6:	6005      	str	r5, [r0, #0]
 800d2f8:	e7d6      	b.n	800d2a8 <_malloc_r+0xa8>
 800d2fa:	bf00      	nop
 800d2fc:	200021a4 	.word	0x200021a4

0800d300 <__malloc_lock>:
 800d300:	4801      	ldr	r0, [pc, #4]	@ (800d308 <__malloc_lock+0x8>)
 800d302:	f7ff b8ac 	b.w	800c45e <__retarget_lock_acquire_recursive>
 800d306:	bf00      	nop
 800d308:	2000219c 	.word	0x2000219c

0800d30c <__malloc_unlock>:
 800d30c:	4801      	ldr	r0, [pc, #4]	@ (800d314 <__malloc_unlock+0x8>)
 800d30e:	f7ff b8a7 	b.w	800c460 <__retarget_lock_release_recursive>
 800d312:	bf00      	nop
 800d314:	2000219c 	.word	0x2000219c

0800d318 <_Balloc>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	69c6      	ldr	r6, [r0, #28]
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	b976      	cbnz	r6, 800d340 <_Balloc+0x28>
 800d322:	2010      	movs	r0, #16
 800d324:	f7ff ff42 	bl	800d1ac <malloc>
 800d328:	4602      	mov	r2, r0
 800d32a:	61e0      	str	r0, [r4, #28]
 800d32c:	b920      	cbnz	r0, 800d338 <_Balloc+0x20>
 800d32e:	4b18      	ldr	r3, [pc, #96]	@ (800d390 <_Balloc+0x78>)
 800d330:	4818      	ldr	r0, [pc, #96]	@ (800d394 <_Balloc+0x7c>)
 800d332:	216b      	movs	r1, #107	@ 0x6b
 800d334:	f000 fc2e 	bl	800db94 <__assert_func>
 800d338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d33c:	6006      	str	r6, [r0, #0]
 800d33e:	60c6      	str	r6, [r0, #12]
 800d340:	69e6      	ldr	r6, [r4, #28]
 800d342:	68f3      	ldr	r3, [r6, #12]
 800d344:	b183      	cbz	r3, 800d368 <_Balloc+0x50>
 800d346:	69e3      	ldr	r3, [r4, #28]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d34e:	b9b8      	cbnz	r0, 800d380 <_Balloc+0x68>
 800d350:	2101      	movs	r1, #1
 800d352:	fa01 f605 	lsl.w	r6, r1, r5
 800d356:	1d72      	adds	r2, r6, #5
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 fc38 	bl	800dbd0 <_calloc_r>
 800d360:	b160      	cbz	r0, 800d37c <_Balloc+0x64>
 800d362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d366:	e00e      	b.n	800d386 <_Balloc+0x6e>
 800d368:	2221      	movs	r2, #33	@ 0x21
 800d36a:	2104      	movs	r1, #4
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 fc2f 	bl	800dbd0 <_calloc_r>
 800d372:	69e3      	ldr	r3, [r4, #28]
 800d374:	60f0      	str	r0, [r6, #12]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e4      	bne.n	800d346 <_Balloc+0x2e>
 800d37c:	2000      	movs	r0, #0
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	6802      	ldr	r2, [r0, #0]
 800d382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d386:	2300      	movs	r3, #0
 800d388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d38c:	e7f7      	b.n	800d37e <_Balloc+0x66>
 800d38e:	bf00      	nop
 800d390:	0800e649 	.word	0x0800e649
 800d394:	0800e6c9 	.word	0x0800e6c9

0800d398 <_Bfree>:
 800d398:	b570      	push	{r4, r5, r6, lr}
 800d39a:	69c6      	ldr	r6, [r0, #28]
 800d39c:	4605      	mov	r5, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	b976      	cbnz	r6, 800d3c0 <_Bfree+0x28>
 800d3a2:	2010      	movs	r0, #16
 800d3a4:	f7ff ff02 	bl	800d1ac <malloc>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	61e8      	str	r0, [r5, #28]
 800d3ac:	b920      	cbnz	r0, 800d3b8 <_Bfree+0x20>
 800d3ae:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <_Bfree+0x3c>)
 800d3b0:	4809      	ldr	r0, [pc, #36]	@ (800d3d8 <_Bfree+0x40>)
 800d3b2:	218f      	movs	r1, #143	@ 0x8f
 800d3b4:	f000 fbee 	bl	800db94 <__assert_func>
 800d3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3bc:	6006      	str	r6, [r0, #0]
 800d3be:	60c6      	str	r6, [r0, #12]
 800d3c0:	b13c      	cbz	r4, 800d3d2 <_Bfree+0x3a>
 800d3c2:	69eb      	ldr	r3, [r5, #28]
 800d3c4:	6862      	ldr	r2, [r4, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3cc:	6021      	str	r1, [r4, #0]
 800d3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
 800d3d4:	0800e649 	.word	0x0800e649
 800d3d8:	0800e6c9 	.word	0x0800e6c9

0800d3dc <__multadd>:
 800d3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e0:	690d      	ldr	r5, [r1, #16]
 800d3e2:	4607      	mov	r7, r0
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	461e      	mov	r6, r3
 800d3e8:	f101 0c14 	add.w	ip, r1, #20
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	f8dc 3000 	ldr.w	r3, [ip]
 800d3f2:	b299      	uxth	r1, r3
 800d3f4:	fb02 6101 	mla	r1, r2, r1, r6
 800d3f8:	0c1e      	lsrs	r6, r3, #16
 800d3fa:	0c0b      	lsrs	r3, r1, #16
 800d3fc:	fb02 3306 	mla	r3, r2, r6, r3
 800d400:	b289      	uxth	r1, r1
 800d402:	3001      	adds	r0, #1
 800d404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d408:	4285      	cmp	r5, r0
 800d40a:	f84c 1b04 	str.w	r1, [ip], #4
 800d40e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d412:	dcec      	bgt.n	800d3ee <__multadd+0x12>
 800d414:	b30e      	cbz	r6, 800d45a <__multadd+0x7e>
 800d416:	68a3      	ldr	r3, [r4, #8]
 800d418:	42ab      	cmp	r3, r5
 800d41a:	dc19      	bgt.n	800d450 <__multadd+0x74>
 800d41c:	6861      	ldr	r1, [r4, #4]
 800d41e:	4638      	mov	r0, r7
 800d420:	3101      	adds	r1, #1
 800d422:	f7ff ff79 	bl	800d318 <_Balloc>
 800d426:	4680      	mov	r8, r0
 800d428:	b928      	cbnz	r0, 800d436 <__multadd+0x5a>
 800d42a:	4602      	mov	r2, r0
 800d42c:	4b0c      	ldr	r3, [pc, #48]	@ (800d460 <__multadd+0x84>)
 800d42e:	480d      	ldr	r0, [pc, #52]	@ (800d464 <__multadd+0x88>)
 800d430:	21ba      	movs	r1, #186	@ 0xba
 800d432:	f000 fbaf 	bl	800db94 <__assert_func>
 800d436:	6922      	ldr	r2, [r4, #16]
 800d438:	3202      	adds	r2, #2
 800d43a:	f104 010c 	add.w	r1, r4, #12
 800d43e:	0092      	lsls	r2, r2, #2
 800d440:	300c      	adds	r0, #12
 800d442:	f7ff f80e 	bl	800c462 <memcpy>
 800d446:	4621      	mov	r1, r4
 800d448:	4638      	mov	r0, r7
 800d44a:	f7ff ffa5 	bl	800d398 <_Bfree>
 800d44e:	4644      	mov	r4, r8
 800d450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d454:	3501      	adds	r5, #1
 800d456:	615e      	str	r6, [r3, #20]
 800d458:	6125      	str	r5, [r4, #16]
 800d45a:	4620      	mov	r0, r4
 800d45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d460:	0800e6b8 	.word	0x0800e6b8
 800d464:	0800e6c9 	.word	0x0800e6c9

0800d468 <__hi0bits>:
 800d468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d46c:	4603      	mov	r3, r0
 800d46e:	bf36      	itet	cc
 800d470:	0403      	lslcc	r3, r0, #16
 800d472:	2000      	movcs	r0, #0
 800d474:	2010      	movcc	r0, #16
 800d476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d47a:	bf3c      	itt	cc
 800d47c:	021b      	lslcc	r3, r3, #8
 800d47e:	3008      	addcc	r0, #8
 800d480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d484:	bf3c      	itt	cc
 800d486:	011b      	lslcc	r3, r3, #4
 800d488:	3004      	addcc	r0, #4
 800d48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d48e:	bf3c      	itt	cc
 800d490:	009b      	lslcc	r3, r3, #2
 800d492:	3002      	addcc	r0, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	db05      	blt.n	800d4a4 <__hi0bits+0x3c>
 800d498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d49c:	f100 0001 	add.w	r0, r0, #1
 800d4a0:	bf08      	it	eq
 800d4a2:	2020      	moveq	r0, #32
 800d4a4:	4770      	bx	lr

0800d4a6 <__lo0bits>:
 800d4a6:	6803      	ldr	r3, [r0, #0]
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	f013 0007 	ands.w	r0, r3, #7
 800d4ae:	d00b      	beq.n	800d4c8 <__lo0bits+0x22>
 800d4b0:	07d9      	lsls	r1, r3, #31
 800d4b2:	d421      	bmi.n	800d4f8 <__lo0bits+0x52>
 800d4b4:	0798      	lsls	r0, r3, #30
 800d4b6:	bf49      	itett	mi
 800d4b8:	085b      	lsrmi	r3, r3, #1
 800d4ba:	089b      	lsrpl	r3, r3, #2
 800d4bc:	2001      	movmi	r0, #1
 800d4be:	6013      	strmi	r3, [r2, #0]
 800d4c0:	bf5c      	itt	pl
 800d4c2:	6013      	strpl	r3, [r2, #0]
 800d4c4:	2002      	movpl	r0, #2
 800d4c6:	4770      	bx	lr
 800d4c8:	b299      	uxth	r1, r3
 800d4ca:	b909      	cbnz	r1, 800d4d0 <__lo0bits+0x2a>
 800d4cc:	0c1b      	lsrs	r3, r3, #16
 800d4ce:	2010      	movs	r0, #16
 800d4d0:	b2d9      	uxtb	r1, r3
 800d4d2:	b909      	cbnz	r1, 800d4d8 <__lo0bits+0x32>
 800d4d4:	3008      	adds	r0, #8
 800d4d6:	0a1b      	lsrs	r3, r3, #8
 800d4d8:	0719      	lsls	r1, r3, #28
 800d4da:	bf04      	itt	eq
 800d4dc:	091b      	lsreq	r3, r3, #4
 800d4de:	3004      	addeq	r0, #4
 800d4e0:	0799      	lsls	r1, r3, #30
 800d4e2:	bf04      	itt	eq
 800d4e4:	089b      	lsreq	r3, r3, #2
 800d4e6:	3002      	addeq	r0, #2
 800d4e8:	07d9      	lsls	r1, r3, #31
 800d4ea:	d403      	bmi.n	800d4f4 <__lo0bits+0x4e>
 800d4ec:	085b      	lsrs	r3, r3, #1
 800d4ee:	f100 0001 	add.w	r0, r0, #1
 800d4f2:	d003      	beq.n	800d4fc <__lo0bits+0x56>
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	4770      	bx	lr
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	4770      	bx	lr
 800d4fc:	2020      	movs	r0, #32
 800d4fe:	4770      	bx	lr

0800d500 <__i2b>:
 800d500:	b510      	push	{r4, lr}
 800d502:	460c      	mov	r4, r1
 800d504:	2101      	movs	r1, #1
 800d506:	f7ff ff07 	bl	800d318 <_Balloc>
 800d50a:	4602      	mov	r2, r0
 800d50c:	b928      	cbnz	r0, 800d51a <__i2b+0x1a>
 800d50e:	4b05      	ldr	r3, [pc, #20]	@ (800d524 <__i2b+0x24>)
 800d510:	4805      	ldr	r0, [pc, #20]	@ (800d528 <__i2b+0x28>)
 800d512:	f240 1145 	movw	r1, #325	@ 0x145
 800d516:	f000 fb3d 	bl	800db94 <__assert_func>
 800d51a:	2301      	movs	r3, #1
 800d51c:	6144      	str	r4, [r0, #20]
 800d51e:	6103      	str	r3, [r0, #16]
 800d520:	bd10      	pop	{r4, pc}
 800d522:	bf00      	nop
 800d524:	0800e6b8 	.word	0x0800e6b8
 800d528:	0800e6c9 	.word	0x0800e6c9

0800d52c <__multiply>:
 800d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	4614      	mov	r4, r2
 800d532:	690a      	ldr	r2, [r1, #16]
 800d534:	6923      	ldr	r3, [r4, #16]
 800d536:	429a      	cmp	r2, r3
 800d538:	bfa8      	it	ge
 800d53a:	4623      	movge	r3, r4
 800d53c:	460f      	mov	r7, r1
 800d53e:	bfa4      	itt	ge
 800d540:	460c      	movge	r4, r1
 800d542:	461f      	movge	r7, r3
 800d544:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d548:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d54c:	68a3      	ldr	r3, [r4, #8]
 800d54e:	6861      	ldr	r1, [r4, #4]
 800d550:	eb0a 0609 	add.w	r6, sl, r9
 800d554:	42b3      	cmp	r3, r6
 800d556:	b085      	sub	sp, #20
 800d558:	bfb8      	it	lt
 800d55a:	3101      	addlt	r1, #1
 800d55c:	f7ff fedc 	bl	800d318 <_Balloc>
 800d560:	b930      	cbnz	r0, 800d570 <__multiply+0x44>
 800d562:	4602      	mov	r2, r0
 800d564:	4b44      	ldr	r3, [pc, #272]	@ (800d678 <__multiply+0x14c>)
 800d566:	4845      	ldr	r0, [pc, #276]	@ (800d67c <__multiply+0x150>)
 800d568:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d56c:	f000 fb12 	bl	800db94 <__assert_func>
 800d570:	f100 0514 	add.w	r5, r0, #20
 800d574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d578:	462b      	mov	r3, r5
 800d57a:	2200      	movs	r2, #0
 800d57c:	4543      	cmp	r3, r8
 800d57e:	d321      	bcc.n	800d5c4 <__multiply+0x98>
 800d580:	f107 0114 	add.w	r1, r7, #20
 800d584:	f104 0214 	add.w	r2, r4, #20
 800d588:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d58c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d590:	9302      	str	r3, [sp, #8]
 800d592:	1b13      	subs	r3, r2, r4
 800d594:	3b15      	subs	r3, #21
 800d596:	f023 0303 	bic.w	r3, r3, #3
 800d59a:	3304      	adds	r3, #4
 800d59c:	f104 0715 	add.w	r7, r4, #21
 800d5a0:	42ba      	cmp	r2, r7
 800d5a2:	bf38      	it	cc
 800d5a4:	2304      	movcc	r3, #4
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	9103      	str	r1, [sp, #12]
 800d5ac:	428b      	cmp	r3, r1
 800d5ae:	d80c      	bhi.n	800d5ca <__multiply+0x9e>
 800d5b0:	2e00      	cmp	r6, #0
 800d5b2:	dd03      	ble.n	800d5bc <__multiply+0x90>
 800d5b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d05b      	beq.n	800d674 <__multiply+0x148>
 800d5bc:	6106      	str	r6, [r0, #16]
 800d5be:	b005      	add	sp, #20
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	f843 2b04 	str.w	r2, [r3], #4
 800d5c8:	e7d8      	b.n	800d57c <__multiply+0x50>
 800d5ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5ce:	f1ba 0f00 	cmp.w	sl, #0
 800d5d2:	d024      	beq.n	800d61e <__multiply+0xf2>
 800d5d4:	f104 0e14 	add.w	lr, r4, #20
 800d5d8:	46a9      	mov	r9, r5
 800d5da:	f04f 0c00 	mov.w	ip, #0
 800d5de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5e2:	f8d9 3000 	ldr.w	r3, [r9]
 800d5e6:	fa1f fb87 	uxth.w	fp, r7
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d5f4:	f8d9 7000 	ldr.w	r7, [r9]
 800d5f8:	4463      	add	r3, ip
 800d5fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d5fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800d602:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d606:	b29b      	uxth	r3, r3
 800d608:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d60c:	4572      	cmp	r2, lr
 800d60e:	f849 3b04 	str.w	r3, [r9], #4
 800d612:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d616:	d8e2      	bhi.n	800d5de <__multiply+0xb2>
 800d618:	9b01      	ldr	r3, [sp, #4]
 800d61a:	f845 c003 	str.w	ip, [r5, r3]
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d624:	3104      	adds	r1, #4
 800d626:	f1b9 0f00 	cmp.w	r9, #0
 800d62a:	d021      	beq.n	800d670 <__multiply+0x144>
 800d62c:	682b      	ldr	r3, [r5, #0]
 800d62e:	f104 0c14 	add.w	ip, r4, #20
 800d632:	46ae      	mov	lr, r5
 800d634:	f04f 0a00 	mov.w	sl, #0
 800d638:	f8bc b000 	ldrh.w	fp, [ip]
 800d63c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d640:	fb09 770b 	mla	r7, r9, fp, r7
 800d644:	4457      	add	r7, sl
 800d646:	b29b      	uxth	r3, r3
 800d648:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d64c:	f84e 3b04 	str.w	r3, [lr], #4
 800d650:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d658:	f8be 3000 	ldrh.w	r3, [lr]
 800d65c:	fb09 330a 	mla	r3, r9, sl, r3
 800d660:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d664:	4562      	cmp	r2, ip
 800d666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d66a:	d8e5      	bhi.n	800d638 <__multiply+0x10c>
 800d66c:	9f01      	ldr	r7, [sp, #4]
 800d66e:	51eb      	str	r3, [r5, r7]
 800d670:	3504      	adds	r5, #4
 800d672:	e799      	b.n	800d5a8 <__multiply+0x7c>
 800d674:	3e01      	subs	r6, #1
 800d676:	e79b      	b.n	800d5b0 <__multiply+0x84>
 800d678:	0800e6b8 	.word	0x0800e6b8
 800d67c:	0800e6c9 	.word	0x0800e6c9

0800d680 <__pow5mult>:
 800d680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d684:	4615      	mov	r5, r2
 800d686:	f012 0203 	ands.w	r2, r2, #3
 800d68a:	4607      	mov	r7, r0
 800d68c:	460e      	mov	r6, r1
 800d68e:	d007      	beq.n	800d6a0 <__pow5mult+0x20>
 800d690:	4c25      	ldr	r4, [pc, #148]	@ (800d728 <__pow5mult+0xa8>)
 800d692:	3a01      	subs	r2, #1
 800d694:	2300      	movs	r3, #0
 800d696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d69a:	f7ff fe9f 	bl	800d3dc <__multadd>
 800d69e:	4606      	mov	r6, r0
 800d6a0:	10ad      	asrs	r5, r5, #2
 800d6a2:	d03d      	beq.n	800d720 <__pow5mult+0xa0>
 800d6a4:	69fc      	ldr	r4, [r7, #28]
 800d6a6:	b97c      	cbnz	r4, 800d6c8 <__pow5mult+0x48>
 800d6a8:	2010      	movs	r0, #16
 800d6aa:	f7ff fd7f 	bl	800d1ac <malloc>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	61f8      	str	r0, [r7, #28]
 800d6b2:	b928      	cbnz	r0, 800d6c0 <__pow5mult+0x40>
 800d6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d72c <__pow5mult+0xac>)
 800d6b6:	481e      	ldr	r0, [pc, #120]	@ (800d730 <__pow5mult+0xb0>)
 800d6b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6bc:	f000 fa6a 	bl	800db94 <__assert_func>
 800d6c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6c4:	6004      	str	r4, [r0, #0]
 800d6c6:	60c4      	str	r4, [r0, #12]
 800d6c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6d0:	b94c      	cbnz	r4, 800d6e6 <__pow5mult+0x66>
 800d6d2:	f240 2171 	movw	r1, #625	@ 0x271
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	f7ff ff12 	bl	800d500 <__i2b>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	6003      	str	r3, [r0, #0]
 800d6e6:	f04f 0900 	mov.w	r9, #0
 800d6ea:	07eb      	lsls	r3, r5, #31
 800d6ec:	d50a      	bpl.n	800d704 <__pow5mult+0x84>
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	f7ff ff1a 	bl	800d52c <__multiply>
 800d6f8:	4631      	mov	r1, r6
 800d6fa:	4680      	mov	r8, r0
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f7ff fe4b 	bl	800d398 <_Bfree>
 800d702:	4646      	mov	r6, r8
 800d704:	106d      	asrs	r5, r5, #1
 800d706:	d00b      	beq.n	800d720 <__pow5mult+0xa0>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	b938      	cbnz	r0, 800d71c <__pow5mult+0x9c>
 800d70c:	4622      	mov	r2, r4
 800d70e:	4621      	mov	r1, r4
 800d710:	4638      	mov	r0, r7
 800d712:	f7ff ff0b 	bl	800d52c <__multiply>
 800d716:	6020      	str	r0, [r4, #0]
 800d718:	f8c0 9000 	str.w	r9, [r0]
 800d71c:	4604      	mov	r4, r0
 800d71e:	e7e4      	b.n	800d6ea <__pow5mult+0x6a>
 800d720:	4630      	mov	r0, r6
 800d722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d726:	bf00      	nop
 800d728:	0800e724 	.word	0x0800e724
 800d72c:	0800e649 	.word	0x0800e649
 800d730:	0800e6c9 	.word	0x0800e6c9

0800d734 <__lshift>:
 800d734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	460c      	mov	r4, r1
 800d73a:	6849      	ldr	r1, [r1, #4]
 800d73c:	6923      	ldr	r3, [r4, #16]
 800d73e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d742:	68a3      	ldr	r3, [r4, #8]
 800d744:	4607      	mov	r7, r0
 800d746:	4691      	mov	r9, r2
 800d748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d74c:	f108 0601 	add.w	r6, r8, #1
 800d750:	42b3      	cmp	r3, r6
 800d752:	db0b      	blt.n	800d76c <__lshift+0x38>
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff fddf 	bl	800d318 <_Balloc>
 800d75a:	4605      	mov	r5, r0
 800d75c:	b948      	cbnz	r0, 800d772 <__lshift+0x3e>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b28      	ldr	r3, [pc, #160]	@ (800d804 <__lshift+0xd0>)
 800d762:	4829      	ldr	r0, [pc, #164]	@ (800d808 <__lshift+0xd4>)
 800d764:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d768:	f000 fa14 	bl	800db94 <__assert_func>
 800d76c:	3101      	adds	r1, #1
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	e7ee      	b.n	800d750 <__lshift+0x1c>
 800d772:	2300      	movs	r3, #0
 800d774:	f100 0114 	add.w	r1, r0, #20
 800d778:	f100 0210 	add.w	r2, r0, #16
 800d77c:	4618      	mov	r0, r3
 800d77e:	4553      	cmp	r3, sl
 800d780:	db33      	blt.n	800d7ea <__lshift+0xb6>
 800d782:	6920      	ldr	r0, [r4, #16]
 800d784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d788:	f104 0314 	add.w	r3, r4, #20
 800d78c:	f019 091f 	ands.w	r9, r9, #31
 800d790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d798:	d02b      	beq.n	800d7f2 <__lshift+0xbe>
 800d79a:	f1c9 0e20 	rsb	lr, r9, #32
 800d79e:	468a      	mov	sl, r1
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d7a8:	4310      	orrs	r0, r2
 800d7aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b2:	459c      	cmp	ip, r3
 800d7b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7b8:	d8f3      	bhi.n	800d7a2 <__lshift+0x6e>
 800d7ba:	ebac 0304 	sub.w	r3, ip, r4
 800d7be:	3b15      	subs	r3, #21
 800d7c0:	f023 0303 	bic.w	r3, r3, #3
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	f104 0015 	add.w	r0, r4, #21
 800d7ca:	4584      	cmp	ip, r0
 800d7cc:	bf38      	it	cc
 800d7ce:	2304      	movcc	r3, #4
 800d7d0:	50ca      	str	r2, [r1, r3]
 800d7d2:	b10a      	cbz	r2, 800d7d8 <__lshift+0xa4>
 800d7d4:	f108 0602 	add.w	r6, r8, #2
 800d7d8:	3e01      	subs	r6, #1
 800d7da:	4638      	mov	r0, r7
 800d7dc:	612e      	str	r6, [r5, #16]
 800d7de:	4621      	mov	r1, r4
 800d7e0:	f7ff fdda 	bl	800d398 <_Bfree>
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	e7c5      	b.n	800d77e <__lshift+0x4a>
 800d7f2:	3904      	subs	r1, #4
 800d7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7fc:	459c      	cmp	ip, r3
 800d7fe:	d8f9      	bhi.n	800d7f4 <__lshift+0xc0>
 800d800:	e7ea      	b.n	800d7d8 <__lshift+0xa4>
 800d802:	bf00      	nop
 800d804:	0800e6b8 	.word	0x0800e6b8
 800d808:	0800e6c9 	.word	0x0800e6c9

0800d80c <__mcmp>:
 800d80c:	690a      	ldr	r2, [r1, #16]
 800d80e:	4603      	mov	r3, r0
 800d810:	6900      	ldr	r0, [r0, #16]
 800d812:	1a80      	subs	r0, r0, r2
 800d814:	b530      	push	{r4, r5, lr}
 800d816:	d10e      	bne.n	800d836 <__mcmp+0x2a>
 800d818:	3314      	adds	r3, #20
 800d81a:	3114      	adds	r1, #20
 800d81c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d820:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d824:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d828:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d82c:	4295      	cmp	r5, r2
 800d82e:	d003      	beq.n	800d838 <__mcmp+0x2c>
 800d830:	d205      	bcs.n	800d83e <__mcmp+0x32>
 800d832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d836:	bd30      	pop	{r4, r5, pc}
 800d838:	42a3      	cmp	r3, r4
 800d83a:	d3f3      	bcc.n	800d824 <__mcmp+0x18>
 800d83c:	e7fb      	b.n	800d836 <__mcmp+0x2a>
 800d83e:	2001      	movs	r0, #1
 800d840:	e7f9      	b.n	800d836 <__mcmp+0x2a>
	...

0800d844 <__mdiff>:
 800d844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d848:	4689      	mov	r9, r1
 800d84a:	4606      	mov	r6, r0
 800d84c:	4611      	mov	r1, r2
 800d84e:	4648      	mov	r0, r9
 800d850:	4614      	mov	r4, r2
 800d852:	f7ff ffdb 	bl	800d80c <__mcmp>
 800d856:	1e05      	subs	r5, r0, #0
 800d858:	d112      	bne.n	800d880 <__mdiff+0x3c>
 800d85a:	4629      	mov	r1, r5
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7ff fd5b 	bl	800d318 <_Balloc>
 800d862:	4602      	mov	r2, r0
 800d864:	b928      	cbnz	r0, 800d872 <__mdiff+0x2e>
 800d866:	4b3f      	ldr	r3, [pc, #252]	@ (800d964 <__mdiff+0x120>)
 800d868:	f240 2137 	movw	r1, #567	@ 0x237
 800d86c:	483e      	ldr	r0, [pc, #248]	@ (800d968 <__mdiff+0x124>)
 800d86e:	f000 f991 	bl	800db94 <__assert_func>
 800d872:	2301      	movs	r3, #1
 800d874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d878:	4610      	mov	r0, r2
 800d87a:	b003      	add	sp, #12
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	bfbc      	itt	lt
 800d882:	464b      	movlt	r3, r9
 800d884:	46a1      	movlt	r9, r4
 800d886:	4630      	mov	r0, r6
 800d888:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d88c:	bfba      	itte	lt
 800d88e:	461c      	movlt	r4, r3
 800d890:	2501      	movlt	r5, #1
 800d892:	2500      	movge	r5, #0
 800d894:	f7ff fd40 	bl	800d318 <_Balloc>
 800d898:	4602      	mov	r2, r0
 800d89a:	b918      	cbnz	r0, 800d8a4 <__mdiff+0x60>
 800d89c:	4b31      	ldr	r3, [pc, #196]	@ (800d964 <__mdiff+0x120>)
 800d89e:	f240 2145 	movw	r1, #581	@ 0x245
 800d8a2:	e7e3      	b.n	800d86c <__mdiff+0x28>
 800d8a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d8a8:	6926      	ldr	r6, [r4, #16]
 800d8aa:	60c5      	str	r5, [r0, #12]
 800d8ac:	f109 0310 	add.w	r3, r9, #16
 800d8b0:	f109 0514 	add.w	r5, r9, #20
 800d8b4:	f104 0e14 	add.w	lr, r4, #20
 800d8b8:	f100 0b14 	add.w	fp, r0, #20
 800d8bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8c4:	9301      	str	r3, [sp, #4]
 800d8c6:	46d9      	mov	r9, fp
 800d8c8:	f04f 0c00 	mov.w	ip, #0
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	fa1f f38a 	uxth.w	r3, sl
 800d8dc:	4619      	mov	r1, r3
 800d8de:	b283      	uxth	r3, r0
 800d8e0:	1acb      	subs	r3, r1, r3
 800d8e2:	0c00      	lsrs	r0, r0, #16
 800d8e4:	4463      	add	r3, ip
 800d8e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8f4:	4576      	cmp	r6, lr
 800d8f6:	f849 3b04 	str.w	r3, [r9], #4
 800d8fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8fe:	d8e5      	bhi.n	800d8cc <__mdiff+0x88>
 800d900:	1b33      	subs	r3, r6, r4
 800d902:	3b15      	subs	r3, #21
 800d904:	f023 0303 	bic.w	r3, r3, #3
 800d908:	3415      	adds	r4, #21
 800d90a:	3304      	adds	r3, #4
 800d90c:	42a6      	cmp	r6, r4
 800d90e:	bf38      	it	cc
 800d910:	2304      	movcc	r3, #4
 800d912:	441d      	add	r5, r3
 800d914:	445b      	add	r3, fp
 800d916:	461e      	mov	r6, r3
 800d918:	462c      	mov	r4, r5
 800d91a:	4544      	cmp	r4, r8
 800d91c:	d30e      	bcc.n	800d93c <__mdiff+0xf8>
 800d91e:	f108 0103 	add.w	r1, r8, #3
 800d922:	1b49      	subs	r1, r1, r5
 800d924:	f021 0103 	bic.w	r1, r1, #3
 800d928:	3d03      	subs	r5, #3
 800d92a:	45a8      	cmp	r8, r5
 800d92c:	bf38      	it	cc
 800d92e:	2100      	movcc	r1, #0
 800d930:	440b      	add	r3, r1
 800d932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d936:	b191      	cbz	r1, 800d95e <__mdiff+0x11a>
 800d938:	6117      	str	r7, [r2, #16]
 800d93a:	e79d      	b.n	800d878 <__mdiff+0x34>
 800d93c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d940:	46e6      	mov	lr, ip
 800d942:	0c08      	lsrs	r0, r1, #16
 800d944:	fa1c fc81 	uxtah	ip, ip, r1
 800d948:	4471      	add	r1, lr
 800d94a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d94e:	b289      	uxth	r1, r1
 800d950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d954:	f846 1b04 	str.w	r1, [r6], #4
 800d958:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d95c:	e7dd      	b.n	800d91a <__mdiff+0xd6>
 800d95e:	3f01      	subs	r7, #1
 800d960:	e7e7      	b.n	800d932 <__mdiff+0xee>
 800d962:	bf00      	nop
 800d964:	0800e6b8 	.word	0x0800e6b8
 800d968:	0800e6c9 	.word	0x0800e6c9

0800d96c <__d2b>:
 800d96c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d970:	460f      	mov	r7, r1
 800d972:	2101      	movs	r1, #1
 800d974:	ec59 8b10 	vmov	r8, r9, d0
 800d978:	4616      	mov	r6, r2
 800d97a:	f7ff fccd 	bl	800d318 <_Balloc>
 800d97e:	4604      	mov	r4, r0
 800d980:	b930      	cbnz	r0, 800d990 <__d2b+0x24>
 800d982:	4602      	mov	r2, r0
 800d984:	4b23      	ldr	r3, [pc, #140]	@ (800da14 <__d2b+0xa8>)
 800d986:	4824      	ldr	r0, [pc, #144]	@ (800da18 <__d2b+0xac>)
 800d988:	f240 310f 	movw	r1, #783	@ 0x30f
 800d98c:	f000 f902 	bl	800db94 <__assert_func>
 800d990:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d998:	b10d      	cbz	r5, 800d99e <__d2b+0x32>
 800d99a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d9a4:	d023      	beq.n	800d9ee <__d2b+0x82>
 800d9a6:	4668      	mov	r0, sp
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	f7ff fd7c 	bl	800d4a6 <__lo0bits>
 800d9ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9b2:	b1d0      	cbz	r0, 800d9ea <__d2b+0x7e>
 800d9b4:	f1c0 0320 	rsb	r3, r0, #32
 800d9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9bc:	430b      	orrs	r3, r1
 800d9be:	40c2      	lsrs	r2, r0
 800d9c0:	6163      	str	r3, [r4, #20]
 800d9c2:	9201      	str	r2, [sp, #4]
 800d9c4:	9b01      	ldr	r3, [sp, #4]
 800d9c6:	61a3      	str	r3, [r4, #24]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bf0c      	ite	eq
 800d9cc:	2201      	moveq	r2, #1
 800d9ce:	2202      	movne	r2, #2
 800d9d0:	6122      	str	r2, [r4, #16]
 800d9d2:	b1a5      	cbz	r5, 800d9fe <__d2b+0x92>
 800d9d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9d8:	4405      	add	r5, r0
 800d9da:	603d      	str	r5, [r7, #0]
 800d9dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9e0:	6030      	str	r0, [r6, #0]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	b003      	add	sp, #12
 800d9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	6161      	str	r1, [r4, #20]
 800d9ec:	e7ea      	b.n	800d9c4 <__d2b+0x58>
 800d9ee:	a801      	add	r0, sp, #4
 800d9f0:	f7ff fd59 	bl	800d4a6 <__lo0bits>
 800d9f4:	9b01      	ldr	r3, [sp, #4]
 800d9f6:	6163      	str	r3, [r4, #20]
 800d9f8:	3020      	adds	r0, #32
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	e7e8      	b.n	800d9d0 <__d2b+0x64>
 800d9fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800da06:	6038      	str	r0, [r7, #0]
 800da08:	6918      	ldr	r0, [r3, #16]
 800da0a:	f7ff fd2d 	bl	800d468 <__hi0bits>
 800da0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da12:	e7e5      	b.n	800d9e0 <__d2b+0x74>
 800da14:	0800e6b8 	.word	0x0800e6b8
 800da18:	0800e6c9 	.word	0x0800e6c9

0800da1c <__sflush_r>:
 800da1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	0716      	lsls	r6, r2, #28
 800da26:	4605      	mov	r5, r0
 800da28:	460c      	mov	r4, r1
 800da2a:	d454      	bmi.n	800dad6 <__sflush_r+0xba>
 800da2c:	684b      	ldr	r3, [r1, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dc02      	bgt.n	800da38 <__sflush_r+0x1c>
 800da32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	dd48      	ble.n	800daca <__sflush_r+0xae>
 800da38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d045      	beq.n	800daca <__sflush_r+0xae>
 800da3e:	2300      	movs	r3, #0
 800da40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da44:	682f      	ldr	r7, [r5, #0]
 800da46:	6a21      	ldr	r1, [r4, #32]
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	d030      	beq.n	800daae <__sflush_r+0x92>
 800da4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	0759      	lsls	r1, r3, #29
 800da52:	d505      	bpl.n	800da60 <__sflush_r+0x44>
 800da54:	6863      	ldr	r3, [r4, #4]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da5a:	b10b      	cbz	r3, 800da60 <__sflush_r+0x44>
 800da5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	2300      	movs	r3, #0
 800da62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da64:	6a21      	ldr	r1, [r4, #32]
 800da66:	4628      	mov	r0, r5
 800da68:	47b0      	blx	r6
 800da6a:	1c43      	adds	r3, r0, #1
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	d106      	bne.n	800da7e <__sflush_r+0x62>
 800da70:	6829      	ldr	r1, [r5, #0]
 800da72:	291d      	cmp	r1, #29
 800da74:	d82b      	bhi.n	800dace <__sflush_r+0xb2>
 800da76:	4a2a      	ldr	r2, [pc, #168]	@ (800db20 <__sflush_r+0x104>)
 800da78:	410a      	asrs	r2, r1
 800da7a:	07d6      	lsls	r6, r2, #31
 800da7c:	d427      	bmi.n	800dace <__sflush_r+0xb2>
 800da7e:	2200      	movs	r2, #0
 800da80:	6062      	str	r2, [r4, #4]
 800da82:	04d9      	lsls	r1, r3, #19
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	6022      	str	r2, [r4, #0]
 800da88:	d504      	bpl.n	800da94 <__sflush_r+0x78>
 800da8a:	1c42      	adds	r2, r0, #1
 800da8c:	d101      	bne.n	800da92 <__sflush_r+0x76>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	b903      	cbnz	r3, 800da94 <__sflush_r+0x78>
 800da92:	6560      	str	r0, [r4, #84]	@ 0x54
 800da94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da96:	602f      	str	r7, [r5, #0]
 800da98:	b1b9      	cbz	r1, 800daca <__sflush_r+0xae>
 800da9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da9e:	4299      	cmp	r1, r3
 800daa0:	d002      	beq.n	800daa8 <__sflush_r+0x8c>
 800daa2:	4628      	mov	r0, r5
 800daa4:	f7ff fb38 	bl	800d118 <_free_r>
 800daa8:	2300      	movs	r3, #0
 800daaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800daac:	e00d      	b.n	800daca <__sflush_r+0xae>
 800daae:	2301      	movs	r3, #1
 800dab0:	4628      	mov	r0, r5
 800dab2:	47b0      	blx	r6
 800dab4:	4602      	mov	r2, r0
 800dab6:	1c50      	adds	r0, r2, #1
 800dab8:	d1c9      	bne.n	800da4e <__sflush_r+0x32>
 800daba:	682b      	ldr	r3, [r5, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d0c6      	beq.n	800da4e <__sflush_r+0x32>
 800dac0:	2b1d      	cmp	r3, #29
 800dac2:	d001      	beq.n	800dac8 <__sflush_r+0xac>
 800dac4:	2b16      	cmp	r3, #22
 800dac6:	d11e      	bne.n	800db06 <__sflush_r+0xea>
 800dac8:	602f      	str	r7, [r5, #0]
 800daca:	2000      	movs	r0, #0
 800dacc:	e022      	b.n	800db14 <__sflush_r+0xf8>
 800dace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dad2:	b21b      	sxth	r3, r3
 800dad4:	e01b      	b.n	800db0e <__sflush_r+0xf2>
 800dad6:	690f      	ldr	r7, [r1, #16]
 800dad8:	2f00      	cmp	r7, #0
 800dada:	d0f6      	beq.n	800daca <__sflush_r+0xae>
 800dadc:	0793      	lsls	r3, r2, #30
 800dade:	680e      	ldr	r6, [r1, #0]
 800dae0:	bf08      	it	eq
 800dae2:	694b      	ldreq	r3, [r1, #20]
 800dae4:	600f      	str	r7, [r1, #0]
 800dae6:	bf18      	it	ne
 800dae8:	2300      	movne	r3, #0
 800daea:	eba6 0807 	sub.w	r8, r6, r7
 800daee:	608b      	str	r3, [r1, #8]
 800daf0:	f1b8 0f00 	cmp.w	r8, #0
 800daf4:	dde9      	ble.n	800daca <__sflush_r+0xae>
 800daf6:	6a21      	ldr	r1, [r4, #32]
 800daf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dafa:	4643      	mov	r3, r8
 800dafc:	463a      	mov	r2, r7
 800dafe:	4628      	mov	r0, r5
 800db00:	47b0      	blx	r6
 800db02:	2800      	cmp	r0, #0
 800db04:	dc08      	bgt.n	800db18 <__sflush_r+0xfc>
 800db06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db0e:	81a3      	strh	r3, [r4, #12]
 800db10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db18:	4407      	add	r7, r0
 800db1a:	eba8 0800 	sub.w	r8, r8, r0
 800db1e:	e7e7      	b.n	800daf0 <__sflush_r+0xd4>
 800db20:	dfbffffe 	.word	0xdfbffffe

0800db24 <_fflush_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	690b      	ldr	r3, [r1, #16]
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	b913      	cbnz	r3, 800db34 <_fflush_r+0x10>
 800db2e:	2500      	movs	r5, #0
 800db30:	4628      	mov	r0, r5
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	b118      	cbz	r0, 800db3e <_fflush_r+0x1a>
 800db36:	6a03      	ldr	r3, [r0, #32]
 800db38:	b90b      	cbnz	r3, 800db3e <_fflush_r+0x1a>
 800db3a:	f7fe fb99 	bl	800c270 <__sinit>
 800db3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0f3      	beq.n	800db2e <_fflush_r+0xa>
 800db46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db48:	07d0      	lsls	r0, r2, #31
 800db4a:	d404      	bmi.n	800db56 <_fflush_r+0x32>
 800db4c:	0599      	lsls	r1, r3, #22
 800db4e:	d402      	bmi.n	800db56 <_fflush_r+0x32>
 800db50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db52:	f7fe fc84 	bl	800c45e <__retarget_lock_acquire_recursive>
 800db56:	4628      	mov	r0, r5
 800db58:	4621      	mov	r1, r4
 800db5a:	f7ff ff5f 	bl	800da1c <__sflush_r>
 800db5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db60:	07da      	lsls	r2, r3, #31
 800db62:	4605      	mov	r5, r0
 800db64:	d4e4      	bmi.n	800db30 <_fflush_r+0xc>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	059b      	lsls	r3, r3, #22
 800db6a:	d4e1      	bmi.n	800db30 <_fflush_r+0xc>
 800db6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db6e:	f7fe fc77 	bl	800c460 <__retarget_lock_release_recursive>
 800db72:	e7dd      	b.n	800db30 <_fflush_r+0xc>

0800db74 <_sbrk_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d06      	ldr	r5, [pc, #24]	@ (800db90 <_sbrk_r+0x1c>)
 800db78:	2300      	movs	r3, #0
 800db7a:	4604      	mov	r4, r0
 800db7c:	4608      	mov	r0, r1
 800db7e:	602b      	str	r3, [r5, #0]
 800db80:	f7f6 f910 	bl	8003da4 <_sbrk>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_sbrk_r+0x1a>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_sbrk_r+0x1a>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	20002198 	.word	0x20002198

0800db94 <__assert_func>:
 800db94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db96:	4614      	mov	r4, r2
 800db98:	461a      	mov	r2, r3
 800db9a:	4b09      	ldr	r3, [pc, #36]	@ (800dbc0 <__assert_func+0x2c>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4605      	mov	r5, r0
 800dba0:	68d8      	ldr	r0, [r3, #12]
 800dba2:	b954      	cbnz	r4, 800dbba <__assert_func+0x26>
 800dba4:	4b07      	ldr	r3, [pc, #28]	@ (800dbc4 <__assert_func+0x30>)
 800dba6:	461c      	mov	r4, r3
 800dba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbac:	9100      	str	r1, [sp, #0]
 800dbae:	462b      	mov	r3, r5
 800dbb0:	4905      	ldr	r1, [pc, #20]	@ (800dbc8 <__assert_func+0x34>)
 800dbb2:	f000 f841 	bl	800dc38 <fiprintf>
 800dbb6:	f000 f851 	bl	800dc5c <abort>
 800dbba:	4b04      	ldr	r3, [pc, #16]	@ (800dbcc <__assert_func+0x38>)
 800dbbc:	e7f4      	b.n	800dba8 <__assert_func+0x14>
 800dbbe:	bf00      	nop
 800dbc0:	20000020 	.word	0x20000020
 800dbc4:	0800e865 	.word	0x0800e865
 800dbc8:	0800e837 	.word	0x0800e837
 800dbcc:	0800e82a 	.word	0x0800e82a

0800dbd0 <_calloc_r>:
 800dbd0:	b570      	push	{r4, r5, r6, lr}
 800dbd2:	fba1 5402 	umull	r5, r4, r1, r2
 800dbd6:	b93c      	cbnz	r4, 800dbe8 <_calloc_r+0x18>
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7ff fb11 	bl	800d200 <_malloc_r>
 800dbde:	4606      	mov	r6, r0
 800dbe0:	b928      	cbnz	r0, 800dbee <_calloc_r+0x1e>
 800dbe2:	2600      	movs	r6, #0
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	220c      	movs	r2, #12
 800dbea:	6002      	str	r2, [r0, #0]
 800dbec:	e7f9      	b.n	800dbe2 <_calloc_r+0x12>
 800dbee:	462a      	mov	r2, r5
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	f7fe fbb6 	bl	800c362 <memset>
 800dbf6:	e7f5      	b.n	800dbe4 <_calloc_r+0x14>

0800dbf8 <__ascii_mbtowc>:
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	b901      	cbnz	r1, 800dbfe <__ascii_mbtowc+0x6>
 800dbfc:	a901      	add	r1, sp, #4
 800dbfe:	b142      	cbz	r2, 800dc12 <__ascii_mbtowc+0x1a>
 800dc00:	b14b      	cbz	r3, 800dc16 <__ascii_mbtowc+0x1e>
 800dc02:	7813      	ldrb	r3, [r2, #0]
 800dc04:	600b      	str	r3, [r1, #0]
 800dc06:	7812      	ldrb	r2, [r2, #0]
 800dc08:	1e10      	subs	r0, r2, #0
 800dc0a:	bf18      	it	ne
 800dc0c:	2001      	movne	r0, #1
 800dc0e:	b002      	add	sp, #8
 800dc10:	4770      	bx	lr
 800dc12:	4610      	mov	r0, r2
 800dc14:	e7fb      	b.n	800dc0e <__ascii_mbtowc+0x16>
 800dc16:	f06f 0001 	mvn.w	r0, #1
 800dc1a:	e7f8      	b.n	800dc0e <__ascii_mbtowc+0x16>

0800dc1c <__ascii_wctomb>:
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	4608      	mov	r0, r1
 800dc20:	b141      	cbz	r1, 800dc34 <__ascii_wctomb+0x18>
 800dc22:	2aff      	cmp	r2, #255	@ 0xff
 800dc24:	d904      	bls.n	800dc30 <__ascii_wctomb+0x14>
 800dc26:	228a      	movs	r2, #138	@ 0x8a
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc2e:	4770      	bx	lr
 800dc30:	700a      	strb	r2, [r1, #0]
 800dc32:	2001      	movs	r0, #1
 800dc34:	4770      	bx	lr
	...

0800dc38 <fiprintf>:
 800dc38:	b40e      	push	{r1, r2, r3}
 800dc3a:	b503      	push	{r0, r1, lr}
 800dc3c:	4601      	mov	r1, r0
 800dc3e:	ab03      	add	r3, sp, #12
 800dc40:	4805      	ldr	r0, [pc, #20]	@ (800dc58 <fiprintf+0x20>)
 800dc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc46:	6800      	ldr	r0, [r0, #0]
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	f000 f837 	bl	800dcbc <_vfiprintf_r>
 800dc4e:	b002      	add	sp, #8
 800dc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc54:	b003      	add	sp, #12
 800dc56:	4770      	bx	lr
 800dc58:	20000020 	.word	0x20000020

0800dc5c <abort>:
 800dc5c:	b508      	push	{r3, lr}
 800dc5e:	2006      	movs	r0, #6
 800dc60:	f000 fa00 	bl	800e064 <raise>
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7f6 f825 	bl	8003cb4 <_exit>

0800dc6a <__sfputc_r>:
 800dc6a:	6893      	ldr	r3, [r2, #8]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	b410      	push	{r4}
 800dc72:	6093      	str	r3, [r2, #8]
 800dc74:	da08      	bge.n	800dc88 <__sfputc_r+0x1e>
 800dc76:	6994      	ldr	r4, [r2, #24]
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	db01      	blt.n	800dc80 <__sfputc_r+0x16>
 800dc7c:	290a      	cmp	r1, #10
 800dc7e:	d103      	bne.n	800dc88 <__sfputc_r+0x1e>
 800dc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc84:	f000 b932 	b.w	800deec <__swbuf_r>
 800dc88:	6813      	ldr	r3, [r2, #0]
 800dc8a:	1c58      	adds	r0, r3, #1
 800dc8c:	6010      	str	r0, [r2, #0]
 800dc8e:	7019      	strb	r1, [r3, #0]
 800dc90:	4608      	mov	r0, r1
 800dc92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <__sfputs_r>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	4614      	mov	r4, r2
 800dca0:	18d5      	adds	r5, r2, r3
 800dca2:	42ac      	cmp	r4, r5
 800dca4:	d101      	bne.n	800dcaa <__sfputs_r+0x12>
 800dca6:	2000      	movs	r0, #0
 800dca8:	e007      	b.n	800dcba <__sfputs_r+0x22>
 800dcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcae:	463a      	mov	r2, r7
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7ff ffda 	bl	800dc6a <__sfputc_r>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d1f3      	bne.n	800dca2 <__sfputs_r+0xa>
 800dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcbc <_vfiprintf_r>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	b09d      	sub	sp, #116	@ 0x74
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	4698      	mov	r8, r3
 800dcc8:	4606      	mov	r6, r0
 800dcca:	b118      	cbz	r0, 800dcd4 <_vfiprintf_r+0x18>
 800dccc:	6a03      	ldr	r3, [r0, #32]
 800dcce:	b90b      	cbnz	r3, 800dcd4 <_vfiprintf_r+0x18>
 800dcd0:	f7fe face 	bl	800c270 <__sinit>
 800dcd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcd6:	07d9      	lsls	r1, r3, #31
 800dcd8:	d405      	bmi.n	800dce6 <_vfiprintf_r+0x2a>
 800dcda:	89ab      	ldrh	r3, [r5, #12]
 800dcdc:	059a      	lsls	r2, r3, #22
 800dcde:	d402      	bmi.n	800dce6 <_vfiprintf_r+0x2a>
 800dce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dce2:	f7fe fbbc 	bl	800c45e <__retarget_lock_acquire_recursive>
 800dce6:	89ab      	ldrh	r3, [r5, #12]
 800dce8:	071b      	lsls	r3, r3, #28
 800dcea:	d501      	bpl.n	800dcf0 <_vfiprintf_r+0x34>
 800dcec:	692b      	ldr	r3, [r5, #16]
 800dcee:	b99b      	cbnz	r3, 800dd18 <_vfiprintf_r+0x5c>
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f000 f938 	bl	800df68 <__swsetup_r>
 800dcf8:	b170      	cbz	r0, 800dd18 <_vfiprintf_r+0x5c>
 800dcfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcfc:	07dc      	lsls	r4, r3, #31
 800dcfe:	d504      	bpl.n	800dd0a <_vfiprintf_r+0x4e>
 800dd00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd04:	b01d      	add	sp, #116	@ 0x74
 800dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0a:	89ab      	ldrh	r3, [r5, #12]
 800dd0c:	0598      	lsls	r0, r3, #22
 800dd0e:	d4f7      	bmi.n	800dd00 <_vfiprintf_r+0x44>
 800dd10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd12:	f7fe fba5 	bl	800c460 <__retarget_lock_release_recursive>
 800dd16:	e7f3      	b.n	800dd00 <_vfiprintf_r+0x44>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd1c:	2320      	movs	r3, #32
 800dd1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd22:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd26:	2330      	movs	r3, #48	@ 0x30
 800dd28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ded8 <_vfiprintf_r+0x21c>
 800dd2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd30:	f04f 0901 	mov.w	r9, #1
 800dd34:	4623      	mov	r3, r4
 800dd36:	469a      	mov	sl, r3
 800dd38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd3c:	b10a      	cbz	r2, 800dd42 <_vfiprintf_r+0x86>
 800dd3e:	2a25      	cmp	r2, #37	@ 0x25
 800dd40:	d1f9      	bne.n	800dd36 <_vfiprintf_r+0x7a>
 800dd42:	ebba 0b04 	subs.w	fp, sl, r4
 800dd46:	d00b      	beq.n	800dd60 <_vfiprintf_r+0xa4>
 800dd48:	465b      	mov	r3, fp
 800dd4a:	4622      	mov	r2, r4
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f7ff ffa2 	bl	800dc98 <__sfputs_r>
 800dd54:	3001      	adds	r0, #1
 800dd56:	f000 80a7 	beq.w	800dea8 <_vfiprintf_r+0x1ec>
 800dd5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd5c:	445a      	add	r2, fp
 800dd5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd60:	f89a 3000 	ldrb.w	r3, [sl]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f000 809f 	beq.w	800dea8 <_vfiprintf_r+0x1ec>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd74:	f10a 0a01 	add.w	sl, sl, #1
 800dd78:	9304      	str	r3, [sp, #16]
 800dd7a:	9307      	str	r3, [sp, #28]
 800dd7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd80:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd82:	4654      	mov	r4, sl
 800dd84:	2205      	movs	r2, #5
 800dd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8a:	4853      	ldr	r0, [pc, #332]	@ (800ded8 <_vfiprintf_r+0x21c>)
 800dd8c:	f7f2 fa20 	bl	80001d0 <memchr>
 800dd90:	9a04      	ldr	r2, [sp, #16]
 800dd92:	b9d8      	cbnz	r0, 800ddcc <_vfiprintf_r+0x110>
 800dd94:	06d1      	lsls	r1, r2, #27
 800dd96:	bf44      	itt	mi
 800dd98:	2320      	movmi	r3, #32
 800dd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd9e:	0713      	lsls	r3, r2, #28
 800dda0:	bf44      	itt	mi
 800dda2:	232b      	movmi	r3, #43	@ 0x2b
 800dda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dda8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddac:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddae:	d015      	beq.n	800dddc <_vfiprintf_r+0x120>
 800ddb0:	9a07      	ldr	r2, [sp, #28]
 800ddb2:	4654      	mov	r4, sl
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	f04f 0c0a 	mov.w	ip, #10
 800ddba:	4621      	mov	r1, r4
 800ddbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddc0:	3b30      	subs	r3, #48	@ 0x30
 800ddc2:	2b09      	cmp	r3, #9
 800ddc4:	d94b      	bls.n	800de5e <_vfiprintf_r+0x1a2>
 800ddc6:	b1b0      	cbz	r0, 800ddf6 <_vfiprintf_r+0x13a>
 800ddc8:	9207      	str	r2, [sp, #28]
 800ddca:	e014      	b.n	800ddf6 <_vfiprintf_r+0x13a>
 800ddcc:	eba0 0308 	sub.w	r3, r0, r8
 800ddd0:	fa09 f303 	lsl.w	r3, r9, r3
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	9304      	str	r3, [sp, #16]
 800ddd8:	46a2      	mov	sl, r4
 800ddda:	e7d2      	b.n	800dd82 <_vfiprintf_r+0xc6>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	1d19      	adds	r1, r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	9103      	str	r1, [sp, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	bfbb      	ittet	lt
 800dde8:	425b      	neglt	r3, r3
 800ddea:	f042 0202 	orrlt.w	r2, r2, #2
 800ddee:	9307      	strge	r3, [sp, #28]
 800ddf0:	9307      	strlt	r3, [sp, #28]
 800ddf2:	bfb8      	it	lt
 800ddf4:	9204      	strlt	r2, [sp, #16]
 800ddf6:	7823      	ldrb	r3, [r4, #0]
 800ddf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddfa:	d10a      	bne.n	800de12 <_vfiprintf_r+0x156>
 800ddfc:	7863      	ldrb	r3, [r4, #1]
 800ddfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800de00:	d132      	bne.n	800de68 <_vfiprintf_r+0x1ac>
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	1d1a      	adds	r2, r3, #4
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	9203      	str	r2, [sp, #12]
 800de0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de0e:	3402      	adds	r4, #2
 800de10:	9305      	str	r3, [sp, #20]
 800de12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dee8 <_vfiprintf_r+0x22c>
 800de16:	7821      	ldrb	r1, [r4, #0]
 800de18:	2203      	movs	r2, #3
 800de1a:	4650      	mov	r0, sl
 800de1c:	f7f2 f9d8 	bl	80001d0 <memchr>
 800de20:	b138      	cbz	r0, 800de32 <_vfiprintf_r+0x176>
 800de22:	9b04      	ldr	r3, [sp, #16]
 800de24:	eba0 000a 	sub.w	r0, r0, sl
 800de28:	2240      	movs	r2, #64	@ 0x40
 800de2a:	4082      	lsls	r2, r0
 800de2c:	4313      	orrs	r3, r2
 800de2e:	3401      	adds	r4, #1
 800de30:	9304      	str	r3, [sp, #16]
 800de32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de36:	4829      	ldr	r0, [pc, #164]	@ (800dedc <_vfiprintf_r+0x220>)
 800de38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de3c:	2206      	movs	r2, #6
 800de3e:	f7f2 f9c7 	bl	80001d0 <memchr>
 800de42:	2800      	cmp	r0, #0
 800de44:	d03f      	beq.n	800dec6 <_vfiprintf_r+0x20a>
 800de46:	4b26      	ldr	r3, [pc, #152]	@ (800dee0 <_vfiprintf_r+0x224>)
 800de48:	bb1b      	cbnz	r3, 800de92 <_vfiprintf_r+0x1d6>
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	3307      	adds	r3, #7
 800de4e:	f023 0307 	bic.w	r3, r3, #7
 800de52:	3308      	adds	r3, #8
 800de54:	9303      	str	r3, [sp, #12]
 800de56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de58:	443b      	add	r3, r7
 800de5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de5c:	e76a      	b.n	800dd34 <_vfiprintf_r+0x78>
 800de5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800de62:	460c      	mov	r4, r1
 800de64:	2001      	movs	r0, #1
 800de66:	e7a8      	b.n	800ddba <_vfiprintf_r+0xfe>
 800de68:	2300      	movs	r3, #0
 800de6a:	3401      	adds	r4, #1
 800de6c:	9305      	str	r3, [sp, #20]
 800de6e:	4619      	mov	r1, r3
 800de70:	f04f 0c0a 	mov.w	ip, #10
 800de74:	4620      	mov	r0, r4
 800de76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de7a:	3a30      	subs	r2, #48	@ 0x30
 800de7c:	2a09      	cmp	r2, #9
 800de7e:	d903      	bls.n	800de88 <_vfiprintf_r+0x1cc>
 800de80:	2b00      	cmp	r3, #0
 800de82:	d0c6      	beq.n	800de12 <_vfiprintf_r+0x156>
 800de84:	9105      	str	r1, [sp, #20]
 800de86:	e7c4      	b.n	800de12 <_vfiprintf_r+0x156>
 800de88:	fb0c 2101 	mla	r1, ip, r1, r2
 800de8c:	4604      	mov	r4, r0
 800de8e:	2301      	movs	r3, #1
 800de90:	e7f0      	b.n	800de74 <_vfiprintf_r+0x1b8>
 800de92:	ab03      	add	r3, sp, #12
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	462a      	mov	r2, r5
 800de98:	4b12      	ldr	r3, [pc, #72]	@ (800dee4 <_vfiprintf_r+0x228>)
 800de9a:	a904      	add	r1, sp, #16
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7fd fda3 	bl	800b9e8 <_printf_float>
 800dea2:	4607      	mov	r7, r0
 800dea4:	1c78      	adds	r0, r7, #1
 800dea6:	d1d6      	bne.n	800de56 <_vfiprintf_r+0x19a>
 800dea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deaa:	07d9      	lsls	r1, r3, #31
 800deac:	d405      	bmi.n	800deba <_vfiprintf_r+0x1fe>
 800deae:	89ab      	ldrh	r3, [r5, #12]
 800deb0:	059a      	lsls	r2, r3, #22
 800deb2:	d402      	bmi.n	800deba <_vfiprintf_r+0x1fe>
 800deb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deb6:	f7fe fad3 	bl	800c460 <__retarget_lock_release_recursive>
 800deba:	89ab      	ldrh	r3, [r5, #12]
 800debc:	065b      	lsls	r3, r3, #25
 800debe:	f53f af1f 	bmi.w	800dd00 <_vfiprintf_r+0x44>
 800dec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dec4:	e71e      	b.n	800dd04 <_vfiprintf_r+0x48>
 800dec6:	ab03      	add	r3, sp, #12
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	462a      	mov	r2, r5
 800decc:	4b05      	ldr	r3, [pc, #20]	@ (800dee4 <_vfiprintf_r+0x228>)
 800dece:	a904      	add	r1, sp, #16
 800ded0:	4630      	mov	r0, r6
 800ded2:	f7fe f821 	bl	800bf18 <_printf_i>
 800ded6:	e7e4      	b.n	800dea2 <_vfiprintf_r+0x1e6>
 800ded8:	0800e967 	.word	0x0800e967
 800dedc:	0800e971 	.word	0x0800e971
 800dee0:	0800b9e9 	.word	0x0800b9e9
 800dee4:	0800dc99 	.word	0x0800dc99
 800dee8:	0800e96d 	.word	0x0800e96d

0800deec <__swbuf_r>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	460e      	mov	r6, r1
 800def0:	4614      	mov	r4, r2
 800def2:	4605      	mov	r5, r0
 800def4:	b118      	cbz	r0, 800defe <__swbuf_r+0x12>
 800def6:	6a03      	ldr	r3, [r0, #32]
 800def8:	b90b      	cbnz	r3, 800defe <__swbuf_r+0x12>
 800defa:	f7fe f9b9 	bl	800c270 <__sinit>
 800defe:	69a3      	ldr	r3, [r4, #24]
 800df00:	60a3      	str	r3, [r4, #8]
 800df02:	89a3      	ldrh	r3, [r4, #12]
 800df04:	071a      	lsls	r2, r3, #28
 800df06:	d501      	bpl.n	800df0c <__swbuf_r+0x20>
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	b943      	cbnz	r3, 800df1e <__swbuf_r+0x32>
 800df0c:	4621      	mov	r1, r4
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 f82a 	bl	800df68 <__swsetup_r>
 800df14:	b118      	cbz	r0, 800df1e <__swbuf_r+0x32>
 800df16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800df1a:	4638      	mov	r0, r7
 800df1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	6922      	ldr	r2, [r4, #16]
 800df22:	1a98      	subs	r0, r3, r2
 800df24:	6963      	ldr	r3, [r4, #20]
 800df26:	b2f6      	uxtb	r6, r6
 800df28:	4283      	cmp	r3, r0
 800df2a:	4637      	mov	r7, r6
 800df2c:	dc05      	bgt.n	800df3a <__swbuf_r+0x4e>
 800df2e:	4621      	mov	r1, r4
 800df30:	4628      	mov	r0, r5
 800df32:	f7ff fdf7 	bl	800db24 <_fflush_r>
 800df36:	2800      	cmp	r0, #0
 800df38:	d1ed      	bne.n	800df16 <__swbuf_r+0x2a>
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	60a3      	str	r3, [r4, #8]
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	1c5a      	adds	r2, r3, #1
 800df44:	6022      	str	r2, [r4, #0]
 800df46:	701e      	strb	r6, [r3, #0]
 800df48:	6962      	ldr	r2, [r4, #20]
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d004      	beq.n	800df5a <__swbuf_r+0x6e>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	07db      	lsls	r3, r3, #31
 800df54:	d5e1      	bpl.n	800df1a <__swbuf_r+0x2e>
 800df56:	2e0a      	cmp	r6, #10
 800df58:	d1df      	bne.n	800df1a <__swbuf_r+0x2e>
 800df5a:	4621      	mov	r1, r4
 800df5c:	4628      	mov	r0, r5
 800df5e:	f7ff fde1 	bl	800db24 <_fflush_r>
 800df62:	2800      	cmp	r0, #0
 800df64:	d0d9      	beq.n	800df1a <__swbuf_r+0x2e>
 800df66:	e7d6      	b.n	800df16 <__swbuf_r+0x2a>

0800df68 <__swsetup_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4b29      	ldr	r3, [pc, #164]	@ (800e010 <__swsetup_r+0xa8>)
 800df6c:	4605      	mov	r5, r0
 800df6e:	6818      	ldr	r0, [r3, #0]
 800df70:	460c      	mov	r4, r1
 800df72:	b118      	cbz	r0, 800df7c <__swsetup_r+0x14>
 800df74:	6a03      	ldr	r3, [r0, #32]
 800df76:	b90b      	cbnz	r3, 800df7c <__swsetup_r+0x14>
 800df78:	f7fe f97a 	bl	800c270 <__sinit>
 800df7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df80:	0719      	lsls	r1, r3, #28
 800df82:	d422      	bmi.n	800dfca <__swsetup_r+0x62>
 800df84:	06da      	lsls	r2, r3, #27
 800df86:	d407      	bmi.n	800df98 <__swsetup_r+0x30>
 800df88:	2209      	movs	r2, #9
 800df8a:	602a      	str	r2, [r5, #0]
 800df8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df96:	e033      	b.n	800e000 <__swsetup_r+0x98>
 800df98:	0758      	lsls	r0, r3, #29
 800df9a:	d512      	bpl.n	800dfc2 <__swsetup_r+0x5a>
 800df9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df9e:	b141      	cbz	r1, 800dfb2 <__swsetup_r+0x4a>
 800dfa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfa4:	4299      	cmp	r1, r3
 800dfa6:	d002      	beq.n	800dfae <__swsetup_r+0x46>
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	f7ff f8b5 	bl	800d118 <_free_r>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6063      	str	r3, [r4, #4]
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	f043 0308 	orr.w	r3, r3, #8
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	b94b      	cbnz	r3, 800dfe2 <__swsetup_r+0x7a>
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfd8:	d003      	beq.n	800dfe2 <__swsetup_r+0x7a>
 800dfda:	4621      	mov	r1, r4
 800dfdc:	4628      	mov	r0, r5
 800dfde:	f000 f883 	bl	800e0e8 <__smakebuf_r>
 800dfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfe6:	f013 0201 	ands.w	r2, r3, #1
 800dfea:	d00a      	beq.n	800e002 <__swsetup_r+0x9a>
 800dfec:	2200      	movs	r2, #0
 800dfee:	60a2      	str	r2, [r4, #8]
 800dff0:	6962      	ldr	r2, [r4, #20]
 800dff2:	4252      	negs	r2, r2
 800dff4:	61a2      	str	r2, [r4, #24]
 800dff6:	6922      	ldr	r2, [r4, #16]
 800dff8:	b942      	cbnz	r2, 800e00c <__swsetup_r+0xa4>
 800dffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dffe:	d1c5      	bne.n	800df8c <__swsetup_r+0x24>
 800e000:	bd38      	pop	{r3, r4, r5, pc}
 800e002:	0799      	lsls	r1, r3, #30
 800e004:	bf58      	it	pl
 800e006:	6962      	ldrpl	r2, [r4, #20]
 800e008:	60a2      	str	r2, [r4, #8]
 800e00a:	e7f4      	b.n	800dff6 <__swsetup_r+0x8e>
 800e00c:	2000      	movs	r0, #0
 800e00e:	e7f7      	b.n	800e000 <__swsetup_r+0x98>
 800e010:	20000020 	.word	0x20000020

0800e014 <_raise_r>:
 800e014:	291f      	cmp	r1, #31
 800e016:	b538      	push	{r3, r4, r5, lr}
 800e018:	4605      	mov	r5, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	d904      	bls.n	800e028 <_raise_r+0x14>
 800e01e:	2316      	movs	r3, #22
 800e020:	6003      	str	r3, [r0, #0]
 800e022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e02a:	b112      	cbz	r2, 800e032 <_raise_r+0x1e>
 800e02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e030:	b94b      	cbnz	r3, 800e046 <_raise_r+0x32>
 800e032:	4628      	mov	r0, r5
 800e034:	f000 f830 	bl	800e098 <_getpid_r>
 800e038:	4622      	mov	r2, r4
 800e03a:	4601      	mov	r1, r0
 800e03c:	4628      	mov	r0, r5
 800e03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e042:	f000 b817 	b.w	800e074 <_kill_r>
 800e046:	2b01      	cmp	r3, #1
 800e048:	d00a      	beq.n	800e060 <_raise_r+0x4c>
 800e04a:	1c59      	adds	r1, r3, #1
 800e04c:	d103      	bne.n	800e056 <_raise_r+0x42>
 800e04e:	2316      	movs	r3, #22
 800e050:	6003      	str	r3, [r0, #0]
 800e052:	2001      	movs	r0, #1
 800e054:	e7e7      	b.n	800e026 <_raise_r+0x12>
 800e056:	2100      	movs	r1, #0
 800e058:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e05c:	4620      	mov	r0, r4
 800e05e:	4798      	blx	r3
 800e060:	2000      	movs	r0, #0
 800e062:	e7e0      	b.n	800e026 <_raise_r+0x12>

0800e064 <raise>:
 800e064:	4b02      	ldr	r3, [pc, #8]	@ (800e070 <raise+0xc>)
 800e066:	4601      	mov	r1, r0
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f7ff bfd3 	b.w	800e014 <_raise_r>
 800e06e:	bf00      	nop
 800e070:	20000020 	.word	0x20000020

0800e074 <_kill_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	@ (800e094 <_kill_r+0x20>)
 800e078:	2300      	movs	r3, #0
 800e07a:	4604      	mov	r4, r0
 800e07c:	4608      	mov	r0, r1
 800e07e:	4611      	mov	r1, r2
 800e080:	602b      	str	r3, [r5, #0]
 800e082:	f7f5 fe07 	bl	8003c94 <_kill>
 800e086:	1c43      	adds	r3, r0, #1
 800e088:	d102      	bne.n	800e090 <_kill_r+0x1c>
 800e08a:	682b      	ldr	r3, [r5, #0]
 800e08c:	b103      	cbz	r3, 800e090 <_kill_r+0x1c>
 800e08e:	6023      	str	r3, [r4, #0]
 800e090:	bd38      	pop	{r3, r4, r5, pc}
 800e092:	bf00      	nop
 800e094:	20002198 	.word	0x20002198

0800e098 <_getpid_r>:
 800e098:	f7f5 bdf4 	b.w	8003c84 <_getpid>

0800e09c <__swhatbuf_r>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	460c      	mov	r4, r1
 800e0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a4:	2900      	cmp	r1, #0
 800e0a6:	b096      	sub	sp, #88	@ 0x58
 800e0a8:	4615      	mov	r5, r2
 800e0aa:	461e      	mov	r6, r3
 800e0ac:	da0d      	bge.n	800e0ca <__swhatbuf_r+0x2e>
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0b4:	f04f 0100 	mov.w	r1, #0
 800e0b8:	bf14      	ite	ne
 800e0ba:	2340      	movne	r3, #64	@ 0x40
 800e0bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	6031      	str	r1, [r6, #0]
 800e0c4:	602b      	str	r3, [r5, #0]
 800e0c6:	b016      	add	sp, #88	@ 0x58
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	466a      	mov	r2, sp
 800e0cc:	f000 f848 	bl	800e160 <_fstat_r>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	dbec      	blt.n	800e0ae <__swhatbuf_r+0x12>
 800e0d4:	9901      	ldr	r1, [sp, #4]
 800e0d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0de:	4259      	negs	r1, r3
 800e0e0:	4159      	adcs	r1, r3
 800e0e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0e6:	e7eb      	b.n	800e0c0 <__swhatbuf_r+0x24>

0800e0e8 <__smakebuf_r>:
 800e0e8:	898b      	ldrh	r3, [r1, #12]
 800e0ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0ec:	079d      	lsls	r5, r3, #30
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	d507      	bpl.n	800e104 <__smakebuf_r+0x1c>
 800e0f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	6123      	str	r3, [r4, #16]
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	6163      	str	r3, [r4, #20]
 800e100:	b003      	add	sp, #12
 800e102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e104:	ab01      	add	r3, sp, #4
 800e106:	466a      	mov	r2, sp
 800e108:	f7ff ffc8 	bl	800e09c <__swhatbuf_r>
 800e10c:	9f00      	ldr	r7, [sp, #0]
 800e10e:	4605      	mov	r5, r0
 800e110:	4639      	mov	r1, r7
 800e112:	4630      	mov	r0, r6
 800e114:	f7ff f874 	bl	800d200 <_malloc_r>
 800e118:	b948      	cbnz	r0, 800e12e <__smakebuf_r+0x46>
 800e11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e11e:	059a      	lsls	r2, r3, #22
 800e120:	d4ee      	bmi.n	800e100 <__smakebuf_r+0x18>
 800e122:	f023 0303 	bic.w	r3, r3, #3
 800e126:	f043 0302 	orr.w	r3, r3, #2
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	e7e2      	b.n	800e0f4 <__smakebuf_r+0xc>
 800e12e:	89a3      	ldrh	r3, [r4, #12]
 800e130:	6020      	str	r0, [r4, #0]
 800e132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	9b01      	ldr	r3, [sp, #4]
 800e13a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e13e:	b15b      	cbz	r3, 800e158 <__smakebuf_r+0x70>
 800e140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e144:	4630      	mov	r0, r6
 800e146:	f000 f81d 	bl	800e184 <_isatty_r>
 800e14a:	b128      	cbz	r0, 800e158 <__smakebuf_r+0x70>
 800e14c:	89a3      	ldrh	r3, [r4, #12]
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	f043 0301 	orr.w	r3, r3, #1
 800e156:	81a3      	strh	r3, [r4, #12]
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	431d      	orrs	r5, r3
 800e15c:	81a5      	strh	r5, [r4, #12]
 800e15e:	e7cf      	b.n	800e100 <__smakebuf_r+0x18>

0800e160 <_fstat_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	@ (800e180 <_fstat_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	f7f5 fdf1 	bl	8003d54 <_fstat>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_fstat_r+0x1c>
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	b103      	cbz	r3, 800e17c <_fstat_r+0x1c>
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	20002198 	.word	0x20002198

0800e184 <_isatty_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4d06      	ldr	r5, [pc, #24]	@ (800e1a0 <_isatty_r+0x1c>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4604      	mov	r4, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	602b      	str	r3, [r5, #0]
 800e190:	f7f5 fdf0 	bl	8003d74 <_isatty>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_isatty_r+0x1a>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_isatty_r+0x1a>
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	20002198 	.word	0x20002198

0800e1a4 <_init>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	bf00      	nop
 800e1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1aa:	bc08      	pop	{r3}
 800e1ac:	469e      	mov	lr, r3
 800e1ae:	4770      	bx	lr

0800e1b0 <_fini>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	bf00      	nop
 800e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b6:	bc08      	pop	{r3}
 800e1b8:	469e      	mov	lr, r3
 800e1ba:	4770      	bx	lr
