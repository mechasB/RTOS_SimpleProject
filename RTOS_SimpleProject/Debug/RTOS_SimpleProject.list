
RTOS_SimpleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d48c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800d620  0800d620  0000e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd70  0800dd70  0000f1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd78  0800dd78  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd7c  0800dd7c  0000ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800dd80  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fc8  200001dc  0800df5c  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  0800df5c  000101a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f75  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000498e  00000000  00000000  00030181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000165e  00000000  00000000  000367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9a5  00000000  00000000  00037e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f77  00000000  00000000  000637eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103275  00000000  00000000  00085762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001889d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008910  00000000  00000000  00188a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d604 	.word	0x0800d604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d604 	.word	0x0800d604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <GFX_SetFont+0x1c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001f8 	.word	0x200001f8

08000f98 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fb2:	f200 80a3 	bhi.w	80010fc <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	e096      	b.n	80010ea <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fbc:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <GFX_DrawChar+0x16c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	3b20      	subs	r3, #32
 8000fc4:	494f      	ldr	r1, [pc, #316]	@ (8001104 <GFX_DrawChar+0x16c>)
 8000fc6:	6809      	ldr	r1, [r1, #0]
 8000fc8:	3101      	adds	r1, #1
 8000fca:	7809      	ldrb	r1, [r1, #0]
 8000fcc:	fb03 f101 	mul.w	r1, r3, r1
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000fdc:	2300      	movs	r3, #0
 8000fde:	757b      	strb	r3, [r7, #21]
 8000fe0:	e078      	b.n	80010d4 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d032      	beq.n	8001052 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000fec:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <GFX_DrawChar+0x170>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d113      	bne.n	800101c <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b218      	sxth	r0, r3
 8001002:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001006:	b29a      	uxth	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21b      	sxth	r3, r3
 8001012:	79ba      	ldrb	r2, [r7, #6]
 8001014:	4619      	mov	r1, r3
 8001016:	f000 f9d3 	bl	80013c0 <SSD1306_DrawPixel>
 800101a:	e052      	b.n	80010c2 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4a3a      	ldr	r2, [pc, #232]	@ (8001108 <GFX_DrawChar+0x170>)
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	18d0      	adds	r0, r2, r3
 800102a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <GFX_DrawChar+0x170>)
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	fb03 f202 	mul.w	r2, r3, r2
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <GFX_DrawChar+0x170>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <GFX_DrawChar+0x170>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461c      	mov	r4, r3
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	f000 f960 	bl	8001310 <GFX_DrawFillRectangle>
 8001050:	e037      	b.n	80010c2 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001056:	2b00      	cmp	r3, #0
 8001058:	d133      	bne.n	80010c2 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800105a:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <GFX_DrawChar+0x170>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d114      	bne.n	800108c <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	b218      	sxth	r0, r3
 8001070:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001074:	b29a      	uxth	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21b      	sxth	r3, r3
 8001080:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	f000 f99b 	bl	80013c0 <SSD1306_DrawPixel>
 800108a:	e01a      	b.n	80010c2 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <GFX_DrawChar+0x170>)
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	fb03 f202 	mul.w	r2, r3, r2
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	18d0      	adds	r0, r2, r3
 800109a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800109e:	4a1a      	ldr	r2, [pc, #104]	@ (8001108 <GFX_DrawChar+0x170>)
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	fb03 f202 	mul.w	r2, r3, r2
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	18d1      	adds	r1, r2, r3
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <GFX_DrawChar+0x170>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <GFX_DrawChar+0x170>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461c      	mov	r4, r3
 80010b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	f000 f927 	bl	8001310 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	757b      	strb	r3, [r7, #21]
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	75bb      	strb	r3, [r7, #22]
 80010d4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <GFX_DrawChar+0x16c>)
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	4293      	cmp	r3, r2
 80010e0:	f6ff af7f 	blt.w	8000fe2 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <GFX_DrawChar+0x16c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f4ff af61 	bcc.w	8000fbc <GFX_DrawChar+0x24>
 80010fa:	e000      	b.n	80010fe <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80010fc:	bf00      	nop
            }
        }
    }
}
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	200001f8 	.word	0x200001f8
 8001108:	20000000 	.word	0x20000000

0800110c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001124:	e03e      	b.n	80011a4 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001126:	78f9      	ldrb	r1, [r7, #3]
 8001128:	7cfa      	ldrb	r2, [r7, #19]
 800112a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ff2f 	bl	8000f98 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <GFX_DrawString+0xb0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <GFX_DrawString+0xb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	3301      	adds	r3, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d120      	bne.n	800119e <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800115c:	2300      	movs	r3, #0
 800115e:	74bb      	strb	r3, [r7, #18]
 8001160:	e012      	b.n	8001188 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	b218      	sxth	r0, r3
 800116c:	7cbb      	ldrb	r3, [r7, #18]
 800116e:	b29a      	uxth	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4413      	add	r3, r2
 8001176:	b29b      	uxth	r3, r3
 8001178:	b21b      	sxth	r3, r3
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	f000 f91f 	bl	80013c0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001182:	7cbb      	ldrb	r3, [r7, #18]
 8001184:	3301      	adds	r3, #1
 8001186:	74bb      	strb	r3, [r7, #18]
 8001188:	7cba      	ldrb	r2, [r7, #18]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <GFX_DrawString+0xb0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <GFX_DrawString+0xb4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	429a      	cmp	r2, r3
 800119c:	dbe1      	blt.n	8001162 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ba      	bne.n	8001126 <GFX_DrawString+0x1a>
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	20000000 	.word	0x20000000

080011c4 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	429a      	cmp	r2, r3
 80011ee:	bfcc      	ite	gt
 80011f0:	2301      	movgt	r3, #1
 80011f2:	2300      	movle	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 80011f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	dd0b      	ble.n	8001238 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b29b      	uxth	r3, r3
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29b      	uxth	r3, r3
 8001244:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfb8      	it	lt
 8001250:	425b      	neglt	r3, r3
 8001252:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001258:	0fda      	lsrs	r2, r3, #31
 800125a:	4413      	add	r3, r2
 800125c:	105b      	asrs	r3, r3, #1
 800125e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	da02      	bge.n	800126e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800126c:	e030      	b.n	80012d0 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800126e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001272:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001274:	e02c      	b.n	80012d0 <GFX_WriteLine+0x10c>
	        if (steep) {
 8001276:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	b21b      	sxth	r3, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	b211      	sxth	r1, r2
 8001286:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f898 	bl	80013c0 <SSD1306_DrawPixel>
 8001290:	e008      	b.n	80012a4 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	b21b      	sxth	r3, r3
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	b211      	sxth	r1, r2
 800129a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f88e 	bl	80013c0 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80012a6:	8abb      	ldrh	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 80012ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da09      	bge.n	80012ca <GFX_WriteLine+0x106>
	            y_start += ystep;
 80012b6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80012c2:	8afb      	ldrh	r3, [r7, #22]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	ddce      	ble.n	8001276 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	@ 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af02      	add	r7, sp, #8
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff5e 	bl	80011c4 <GFX_WriteLine>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	460b      	mov	r3, r1
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e009      	b.n	8001340 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f7ff ffd4 	bl	80012e2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbef      	blt.n	800132c <GFX_DrawFillRectangle+0x1c>
    }

}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af04      	add	r7, sp, #16
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <SSD1306_Command+0x30>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2200      	movs	r2, #0
 8001378:	2178      	movs	r1, #120	@ 0x78
 800137a:	f003 f97b 	bl	8004674 <HAL_I2C_Mem_Write>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc

0800138c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <SSD1306_Data+0x30>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2240      	movs	r2, #64	@ 0x40
 80013ae:	2178      	movs	r1, #120	@ 0x78
 80013b0:	f003 f960 	bl	8004674 <HAL_I2C_Mem_Write>
#endif
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001fc 	.word	0x200001fc

080013c0 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db79      	blt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013de:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e0:	dc75      	bgt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db71      	blt.n	80014ce <SSD1306_DrawPixel+0x10e>
 80013ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80013f0:	dc6d      	bgt.n	80014ce <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d049      	beq.n	800148c <SSD1306_DrawPixel+0xcc>
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	dc69      	bgt.n	80014d0 <SSD1306_DrawPixel+0x110>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d022      	beq.n	8001446 <SSD1306_DrawPixel+0x86>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d165      	bne.n	80014d0 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001404:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da00      	bge.n	8001412 <SSD1306_DrawPixel+0x52>
 8001410:	3307      	adds	r3, #7
 8001412:	10db      	asrs	r3, r3, #3
 8001414:	b218      	sxth	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	4413      	add	r3, r2
 800141c:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	b25a      	sxtb	r2, r3
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b259      	sxtb	r1, r3
 8001434:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	4413      	add	r3, r2
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001442:	54d1      	strb	r1, [r2, r3]
      break;
 8001444:	e044      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001446:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800144a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	da00      	bge.n	8001454 <SSD1306_DrawPixel+0x94>
 8001452:	3307      	adds	r3, #7
 8001454:	10db      	asrs	r3, r3, #3
 8001456:	b218      	sxth	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	b25b      	sxtb	r3, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4013      	ands	r3, r2
 8001478:	b259      	sxtb	r1, r3
 800147a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	01db      	lsls	r3, r3, #7
 8001482:	4413      	add	r3, r2
 8001484:	b2c9      	uxtb	r1, r1
 8001486:	4a15      	ldr	r2, [pc, #84]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 8001488:	54d1      	strb	r1, [r2, r3]
      break;
 800148a:	e021      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800148c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <SSD1306_DrawPixel+0xda>
 8001498:	3307      	adds	r3, #7
 800149a:	10db      	asrs	r3, r3, #3
 800149c:	b218      	sxth	r0, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	01db      	lsls	r3, r3, #7
 80014a2:	4413      	add	r3, r2
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4053      	eors	r3, r2
 80014ba:	b259      	sxtb	r1, r3
 80014bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c0:	4603      	mov	r3, r0
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4413      	add	r3, r2
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <SSD1306_DrawPixel+0x11c>)
 80014ca:	54d1      	strb	r1, [r2, r3]
      break;
 80014cc:	e000      	b.n	80014d0 <SSD1306_DrawPixel+0x110>
	  return;
 80014ce:	bf00      	nop
    }
}
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000200 	.word	0x20000200

080014e0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <SSD1306_Clear+0x22>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d10d      	bne.n	8001510 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80014f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f8:	21ff      	movs	r1, #255	@ 0xff
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <SSD1306_Clear+0x38>)
 80014fc:	f00a f961 	bl	800b7c2 <memset>
		break;
 8001500:	e006      	b.n	8001510 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001506:	2100      	movs	r1, #0
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <SSD1306_Clear+0x38>)
 800150a:	f00a f95a 	bl	800b7c2 <memset>
		break;
 800150e:	bf00      	nop
	}
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000200 	.word	0x20000200

0800151c <SSD1306_Display>:

void SSD1306_Display(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001520:	2022      	movs	r0, #34	@ 0x22
 8001522:	f7ff ff19 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff ff16 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 800152c:	20ff      	movs	r0, #255	@ 0xff
 800152e:	f7ff ff13 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001532:	2021      	movs	r0, #33	@ 0x21
 8001534:	f7ff ff10 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff ff0d 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800153e:	207f      	movs	r0, #127	@ 0x7f
 8001540:	f7ff ff0a 	bl	8001358 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <SSD1306_Display+0x38>)
 800154a:	f7ff ff1f 	bl	800138c <SSD1306_Data>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000200 	.word	0x20000200

08001558 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <SSD1306_Init+0xac>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001566:	20ae      	movs	r0, #174	@ 0xae
 8001568:	f7ff fef6 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800156c:	20d5      	movs	r0, #213	@ 0xd5
 800156e:	f7ff fef3 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001572:	2080      	movs	r0, #128	@ 0x80
 8001574:	f7ff fef0 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001578:	203f      	movs	r0, #63	@ 0x3f
 800157a:	f7ff feed 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800157e:	20d3      	movs	r0, #211	@ 0xd3
 8001580:	f7ff feea 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fee7 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800158a:	2040      	movs	r0, #64	@ 0x40
 800158c:	f7ff fee4 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001590:	208d      	movs	r0, #141	@ 0x8d
 8001592:	f7ff fee1 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001596:	2014      	movs	r0, #20
 8001598:	f7ff fede 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800159c:	2020      	movs	r0, #32
 800159e:	f7ff fedb 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fed8 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80015a8:	20a1      	movs	r0, #161	@ 0xa1
 80015aa:	f7ff fed5 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80015ae:	20c8      	movs	r0, #200	@ 0xc8
 80015b0:	f7ff fed2 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80015b4:	20da      	movs	r0, #218	@ 0xda
 80015b6:	f7ff fecf 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x12);
 80015ba:	2012      	movs	r0, #18
 80015bc:	f7ff fecc 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80015c0:	2081      	movs	r0, #129	@ 0x81
 80015c2:	f7ff fec9 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80015c6:	20ff      	movs	r0, #255	@ 0xff
 80015c8:	f7ff fec6 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80015cc:	20d9      	movs	r0, #217	@ 0xd9
 80015ce:	f7ff fec3 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80015d2:	20f1      	movs	r0, #241	@ 0xf1
 80015d4:	f7ff fec0 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80015d8:	20db      	movs	r0, #219	@ 0xdb
 80015da:	f7ff febd 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(0x40);
 80015de:	2040      	movs	r0, #64	@ 0x40
 80015e0:	f7ff feba 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80015e4:	20a4      	movs	r0, #164	@ 0xa4
 80015e6:	f7ff feb7 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80015ea:	20a6      	movs	r0, #166	@ 0xa6
 80015ec:	f7ff feb4 	bl	8001358 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80015f0:	202e      	movs	r0, #46	@ 0x2e
 80015f2:	f7ff feb1 	bl	8001358 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80015f6:	20af      	movs	r0, #175	@ 0xaf
 80015f8:	f7ff feae 	bl	8001358 <SSD1306_Command>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001fc 	.word	0x200001fc

08001608 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f107 030f 	add.w	r3, r7, #15
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	f003 f931 	bl	800489c <HAL_I2C_Mem_Read>

	return Value;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af04      	add	r7, sp, #16
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
 8001650:	4613      	mov	r3, r2
 8001652:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b299      	uxth	r1, r3
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	b29a      	uxth	r2, r3
 8001664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	f002 fffe 	bl	8004674 <HAL_I2C_Mem_Write>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	b299      	uxth	r1, r3
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2302      	movs	r3, #2
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	f003 f8f5 	bl	800489c <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7b3b      	ldrb	r3, [r7, #12]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	b29b      	uxth	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b088      	sub	sp, #32
 80016ce:	af04      	add	r7, sp, #16
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	b299      	uxth	r1, r3
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2303      	movs	r3, #3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	f003 f8d0 	bl	800489c <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	7b7b      	ldrb	r3, [r7, #13]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	7bba      	ldrb	r2, [r7, #14]
 8001708:	4313      	orrs	r3, r2
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d901      	bls.n	8001728 <BMP280_SetMode+0x16>
 8001724:	2303      	movs	r3, #3
 8001726:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001728:	21f4      	movs	r1, #244	@ 0xf4
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff6c 	bl	8001608 <Read8>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 800173c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	b25a      	sxtb	r2, r3
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4313      	orrs	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	461a      	mov	r2, r3
 8001754:	21f4      	movs	r1, #244	@ 0xf4
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff74 	bl	8001644 <Write8>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d901      	bls.n	800177a <BMP280_SetPressureOversampling+0x16>
 8001776:	2305      	movs	r3, #5
 8001778:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800177a:	21f4      	movs	r1, #244	@ 0xf4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff43 	bl	8001608 <Read8>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f003 031c 	and.w	r3, r3, #28
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	461a      	mov	r2, r3
 80017a8:	21f4      	movs	r1, #244	@ 0xf4
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff4a 	bl	8001644 <Write8>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d901      	bls.n	80017ce <BMP280_SetTemperatureOversampling+0x16>
 80017ca:	2305      	movs	r3, #5
 80017cc:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017ce:	21f4      	movs	r1, #244	@ 0xf4
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff19 	bl	8001608 <Read8>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	b25a      	sxtb	r2, r3
 80017e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	461a      	mov	r2, r3
 80017f6:	21f4      	movs	r1, #244	@ 0xf4
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff23 	bl	8001644 <Write8>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 800180e:	21fa      	movs	r1, #250	@ 0xfa
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff5a 	bl	80016ca <Read24>
 8001816:	4603      	mov	r3, r0
 8001818:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	111b      	asrs	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001832:	21f7      	movs	r1, #247	@ 0xf7
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff48 	bl	80016ca <Read24>
 800183a:	4603      	mov	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	111b      	asrs	r3, r3, #4
 8001842:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffd4 	bl	8001806 <BMP280_ReadTemperatureRaw>
 800185e:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	10da      	asrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8b5b      	ldrh	r3, [r3, #26]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	12db      	asrs	r3, r3, #11
 8001878:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	111b      	asrs	r3, r3, #4
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	8b52      	ldrh	r2, [r2, #26]
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	1112      	asrs	r2, r2, #4
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	8b49      	ldrh	r1, [r1, #26]
 800188c:	1a52      	subs	r2, r2, r1
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	139b      	asrs	r3, r3, #14
 80018a0:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3380      	adds	r3, #128	@ 0x80
 80018b8:	121b      	asrs	r3, r3, #8
 80018ba:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f7fe fe31 	bl	8000524 <__aeabi_i2d>
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <BMP280_ReadTemperature+0x98>)
 80018c8:	f7fe ffc0 	bl	800084c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f988 	bl	8000be8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	ee07 3a90 	vmov	s15, r3
}
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40590000 	.word	0x40590000

080018ec <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ffa9 	bl	8001850 <BMP280_ReadTemperature>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	105b      	asrs	r3, r3, #1
 800190e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001912:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	109b      	asrs	r3, r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	1092      	asrs	r2, r2, #2
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	12db      	asrs	r3, r3, #11
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	461a      	mov	r2, r3
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	109a      	asrs	r2, r3, #2
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800195a:	4619      	mov	r1, r3
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	109b      	asrs	r3, r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	1092      	asrs	r2, r2, #2
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	135b      	asrs	r3, r3, #13
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	10da      	asrs	r2, r3, #3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001976:	4619      	mov	r1, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	105b      	asrs	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	149b      	asrs	r3, r3, #18
 8001984:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	8b92      	ldrh	r2, [r2, #28]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	13db      	asrs	r3, r3, #15
 8001996:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 800199e:	2301      	movs	r3, #1
 80019a0:	e054      	b.n	8001a4c <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff ff41 	bl	800182a <BMP280_ReadPressureRaw>
 80019a8:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	131b      	asrs	r3, r3, #12
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f640 4235 	movw	r2, #3125	@ 0xc35
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db06      	blt.n	80019d4 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005a      	lsls	r2, r3, #1
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e005      	b.n	80019e0 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019e6:	4619      	mov	r1, r3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08db      	lsrs	r3, r3, #3
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	08d2      	lsrs	r2, r2, #3
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	131b      	asrs	r3, r3, #12
 80019fc:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	135b      	asrs	r3, r3, #13
 8001a10:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a1e:	4413      	add	r3, r2
 8001a20:	111a      	asrs	r2, r3, #4
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f7fe fd6b 	bl	8000504 <__aeabi_ui2d>
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <BMP280_ReadPressureAndTemperature+0x168>)
 8001a34:	f7fe ff0a 	bl	800084c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8d2 	bl	8000be8 <__aeabi_d2f>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	601a      	str	r2, [r3, #0]

	return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40590000 	.word	0x40590000

08001a58 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001a72:	21d0      	movs	r1, #208	@ 0xd0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fdc7 	bl	8001608 <Read8>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b58      	cmp	r3, #88	@ 0x58
 8001a82:	d001      	beq.n	8001a88 <BMP280_Init+0x30>
	{
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e06c      	b.n	8001b62 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001a88:	2188      	movs	r1, #136	@ 0x88
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fdf8 	bl	8001680 <Read16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001a98:	218a      	movs	r1, #138	@ 0x8a
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fdf0 	bl	8001680 <Read16>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001aa8:	218c      	movs	r1, #140	@ 0x8c
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fde8 	bl	8001680 <Read16>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001ab8:	218e      	movs	r1, #142	@ 0x8e
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fde0 	bl	8001680 <Read16>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001ac8:	2190      	movs	r1, #144	@ 0x90
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fdd8 	bl	8001680 <Read16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001ad8:	2192      	movs	r1, #146	@ 0x92
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fdd0 	bl	8001680 <Read16>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001ae8:	2194      	movs	r1, #148	@ 0x94
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fdc8 	bl	8001680 <Read16>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001af8:	2196      	movs	r1, #150	@ 0x96
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fdc0 	bl	8001680 <Read16>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001b08:	2198      	movs	r1, #152	@ 0x98
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fdb8 	bl	8001680 <Read16>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001b18:	219a      	movs	r1, #154	@ 0x9a
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fdb0 	bl	8001680 <Read16>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001b28:	219c      	movs	r1, #156	@ 0x9c
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fda8 	bl	8001680 <Read16>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001b38:	219e      	movs	r1, #158	@ 0x9e
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fda0 	bl	8001680 <Read16>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001b48:	2105      	movs	r1, #5
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe34 	bl	80017b8 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001b50:	2105      	movs	r1, #5
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fe06 	bl	8001764 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001b58:	2103      	movs	r1, #3
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fdd9 	bl	8001712 <BMP280_SetMode>

	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <_putchar>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void _putchar(char character)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  // send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <_putchar+0x38>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f006 f885 	bl	8007c8e <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001b84:	1df9      	adds	r1, r7, #7
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <_putchar+0x3c>)
 8001b8e:	f005 f95f 	bl	8006e50 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8001b92:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <_putchar+0x38>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 f8c4 	bl	8007d24 <osMutexRelease>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000614 	.word	0x20000614
 8001ba8:	200006c4 	.word	0x200006c4

08001bac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001bb0:	4815      	ldr	r0, [pc, #84]	@ (8001c08 <MX_FREERTOS_Init+0x5c>)
 8001bb2:	f005 ffe6 	bl	8007b82 <osMutexNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <MX_FREERTOS_Init+0x60>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1 */
  MutexI2C1Handle = osMutexNew(&MutexI2C1_attributes);
 8001bbc:	4814      	ldr	r0, [pc, #80]	@ (8001c10 <MX_FREERTOS_Init+0x64>)
 8001bbe:	f005 ffe0 	bl	8007b82 <osMutexNew>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <MX_FREERTOS_Init+0x68>)
 8001bc6:	6013      	str	r3, [r2, #0]

  /* creation of MutexBmpData */
  MutexBmpDataHandle = osMutexNew(&MutexBmpData_attributes);
 8001bc8:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <MX_FREERTOS_Init+0x6c>)
 8001bca:	f005 ffda 	bl	8007b82 <osMutexNew>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <MX_FREERTOS_Init+0x70>)
 8001bd2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartbeatTask */
  HeartbeatTaskHandle = osThreadNew(StartHeartbeatTask, NULL, &HeartbeatTask_attributes);
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_FREERTOS_Init+0x74>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4812      	ldr	r0, [pc, #72]	@ (8001c24 <MX_FREERTOS_Init+0x78>)
 8001bda:	f005 ff25 	bl	8007a28 <osThreadNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <MX_FREERTOS_Init+0x7c>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* creation of Bmp280Task */
  Bmp280TaskHandle = osThreadNew(StartBmp280Task, NULL, &Bmp280Task_attributes);
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <MX_FREERTOS_Init+0x80>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <MX_FREERTOS_Init+0x84>)
 8001bea:	f005 ff1d 	bl	8007a28 <osThreadNew>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <MX_FREERTOS_Init+0x88>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(StartOledTask, NULL, &OledTask_attributes);
 8001bf4:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <MX_FREERTOS_Init+0x8c>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4810      	ldr	r0, [pc, #64]	@ (8001c3c <MX_FREERTOS_Init+0x90>)
 8001bfa:	f005 ff15 	bl	8007a28 <osThreadNew>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <MX_FREERTOS_Init+0x94>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0800d934 	.word	0x0800d934
 8001c0c:	20000614 	.word	0x20000614
 8001c10:	0800d944 	.word	0x0800d944
 8001c14:	20000618 	.word	0x20000618
 8001c18:	0800d954 	.word	0x0800d954
 8001c1c:	2000061c 	.word	0x2000061c
 8001c20:	0800d8c8 	.word	0x0800d8c8
 8001c24:	08001c45 	.word	0x08001c45
 8001c28:	20000608 	.word	0x20000608
 8001c2c:	0800d8ec 	.word	0x0800d8ec
 8001c30:	08001c65 	.word	0x08001c65
 8001c34:	2000060c 	.word	0x2000060c
 8001c38:	0800d910 	.word	0x0800d910
 8001c3c:	08001d29 	.word	0x08001d29
 8001c40:	20000610 	.word	0x20000610

08001c44 <StartHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c52:	f002 fc59 	bl	8004508 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001c56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c5a:	f005 ff77 	bl	8007b4c <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c5e:	bf00      	nop
 8001c60:	e7f4      	b.n	8001c4c <StartHeartbeatTask+0x8>
	...

08001c64 <StartBmp280Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp280Task */
void StartBmp280Task(void *argument)
{
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b090      	sub	sp, #64	@ 0x40
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp280Task */
	BMP280_t Bmp280;

	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <StartBmp280Task+0xac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c74:	4618      	mov	r0, r3
 8001c76:	f006 f80a 	bl	8007c8e <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c1, 0x76);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2276      	movs	r2, #118	@ 0x76
 8001c80:	4924      	ldr	r1, [pc, #144]	@ (8001d14 <StartBmp280Task+0xb0>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fee8 	bl	8001a58 <BMP280_Init>
	osMutexRelease(MutexI2C1Handle);
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <StartBmp280Task+0xac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 f849 	bl	8007d24 <osMutexRelease>

	float _Pressure, _Temperature;
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <StartBmp280Task+0xac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 fff7 	bl	8007c8e <osMutexAcquire>
	  BMP280_ReadPressureAndTemperature(&Bmp280, &_Pressure, &_Temperature);
 8001ca0:	f107 020c 	add.w	r2, r7, #12
 8001ca4:	f107 0110 	add.w	r1, r7, #16
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe1d 	bl	80018ec <BMP280_ReadPressureAndTemperature>
	  osMutexRelease(MutexI2C1Handle);
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <StartBmp280Task+0xac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 f834 	bl	8007d24 <osMutexRelease>

	  osMutexAcquire(MutexBmpDataHandle, osWaitForever);
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <StartBmp280Task+0xb4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 ffe2 	bl	8007c8e <osMutexAcquire>
	  Pressure = _Pressure;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <StartBmp280Task+0xb8>)
 8001cce:	6013      	str	r3, [r2, #0]
	  Temperature = _Temperature;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <StartBmp280Task+0xbc>)
 8001cd4:	6013      	str	r3, [r2, #0]
	  osMutexRelease(MutexBmpDataHandle);
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <StartBmp280Task+0xb4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f006 f822 	bl	8007d24 <osMutexRelease>

	  printf("Temperature: %.2f, Pressure: %.2f\n\r", _Temperature, _Pressure);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc30 	bl	8000548 <__aeabi_f2d>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc2a 	bl	8000548 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	462b      	mov	r3, r5
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <StartBmp280Task+0xc0>)
 8001d02:	f001 fe9b 	bl	8003a3c <printf_>

	  osDelay(10);
 8001d06:	200a      	movs	r0, #10
 8001d08:	f005 ff20 	bl	8007b4c <osDelay>
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001d0c:	bf00      	nop
 8001d0e:	e7c0      	b.n	8001c92 <StartBmp280Task+0x2e>
 8001d10:	20000618 	.word	0x20000618
 8001d14:	20000620 	.word	0x20000620
 8001d18:	2000061c 	.word	0x2000061c
 8001d1c:	20000600 	.word	0x20000600
 8001d20:	20000604 	.word	0x20000604
 8001d24:	0800d670 	.word	0x0800d670

08001d28 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	@ 0x40
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
		char Message[32];
		uint8_t i = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		float _Pressure, _Temperature;

		osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <StartOledTask+0x11c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f005 ffa5 	bl	8007c8e <osMutexAcquire>
		SSD1306_Init(&hi2c1);
 8001d44:	4840      	ldr	r0, [pc, #256]	@ (8001e48 <StartOledTask+0x120>)
 8001d46:	f7ff fc07 	bl	8001558 <SSD1306_Init>
		osMutexRelease(MutexI2C1Handle);
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <StartOledTask+0x11c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 ffe8 	bl	8007d24 <osMutexRelease>

		GFX_SetFont(font_8x5);
 8001d54:	483d      	ldr	r0, [pc, #244]	@ (8001e4c <StartOledTask+0x124>)
 8001d56:	f7ff f90f 	bl	8000f78 <GFX_SetFont>

		SSD1306_Clear(BLACK);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fbc0 	bl	80014e0 <SSD1306_Clear>

		osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001d60:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <StartOledTask+0x11c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 ff90 	bl	8007c8e <osMutexAcquire>
		SSD1306_Display();
 8001d6e:	f7ff fbd5 	bl	800151c <SSD1306_Display>
		osMutexRelease(MutexI2C1Handle);
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <StartOledTask+0x11c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 ffd4 	bl	8007d24 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
		SSD1306_Clear(BLACK);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fbaf 	bl	80014e0 <SSD1306_Clear>

		sprintf(Message, "Hello %d", i++);
 8001d82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	492f      	ldr	r1, [pc, #188]	@ (8001e50 <StartOledTask+0x128>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fe6d 	bl	8003a74 <sprintf_>

		GFX_DrawString(0, 0, Message, WHITE, 0);
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f9b0 	bl	800110c <GFX_DrawString>

		osMutexAcquire(MutexBmpDataHandle, osWaitForever);
 8001dac:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <StartOledTask+0x12c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 ff6a 	bl	8007c8e <osMutexAcquire>
		_Pressure = Pressure;
 8001dba:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <StartOledTask+0x130>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
		_Temperature = Temperature;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <StartOledTask+0x134>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		osMutexRelease(MutexBmpDataHandle);
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <StartOledTask+0x12c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 ffaa 	bl	8007d24 <osMutexRelease>

		sprintf(Message, "Press: %.2f", _Pressure);
 8001dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001dd2:	f7fe fbb9 	bl	8000548 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	f107 000c 	add.w	r0, r7, #12
 8001dde:	4920      	ldr	r1, [pc, #128]	@ (8001e60 <StartOledTask+0x138>)
 8001de0:	f001 fe48 	bl	8003a74 <sprintf_>
		GFX_DrawString(0, 10, Message, WHITE, 0);
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	210a      	movs	r1, #10
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff f98b 	bl	800110c <GFX_DrawString>

		sprintf(Message, "Temp: %.2f", _Temperature);
 8001df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f107 000c 	add.w	r0, r7, #12
 8001e04:	4917      	ldr	r1, [pc, #92]	@ (8001e64 <StartOledTask+0x13c>)
 8001e06:	f001 fe35 	bl	8003a74 <sprintf_>
		GFX_DrawString(0, 20, Message, WHITE, 0);
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	2114      	movs	r1, #20
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff f978 	bl	800110c <GFX_DrawString>

		osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <StartOledTask+0x11c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 ff32 	bl	8007c8e <osMutexAcquire>
		SSD1306_Display();
 8001e2a:	f7ff fb77 	bl	800151c <SSD1306_Display>
		osMutexRelease(MutexI2C1Handle);
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <StartOledTask+0x11c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 ff76 	bl	8007d24 <osMutexRelease>
	    osDelay(100);
 8001e38:	2064      	movs	r0, #100	@ 0x64
 8001e3a:	f005 fe87 	bl	8007b4c <osDelay>
		SSD1306_Clear(BLACK);
 8001e3e:	bf00      	nop
 8001e40:	e79c      	b.n	8001d7c <StartOledTask+0x54>
 8001e42:	bf00      	nop
 8001e44:	20000618 	.word	0x20000618
 8001e48:	20000620 	.word	0x20000620
 8001e4c:	0800d6e8 	.word	0x0800d6e8
 8001e50:	0800d694 	.word	0x0800d694
 8001e54:	2000061c 	.word	0x2000061c
 8001e58:	20000600 	.word	0x20000600
 8001e5c:	20000604 	.word	0x20000604
 8001e60:	0800d6a0 	.word	0x0800d6a0
 8001e64:	0800d6ac 	.word	0x0800d6ac

08001e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8a:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <MX_GPIO_Init+0xc4>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f002 faf7 	bl	80044d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480b      	ldr	r0, [pc, #44]	@ (8001f30 <MX_GPIO_Init+0xc8>)
 8001f02:	f002 f93f 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f06:	2320      	movs	r3, #32
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f20:	f002 f930 	bl	8004184 <HAL_GPIO_Init>

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	@ 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	48000800 	.word	0x48000800

08001f34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fac <MX_I2C1_Init+0x78>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <MX_I2C1_Init+0x7c>)
 8001f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6e:	480e      	ldr	r0, [pc, #56]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f70:	f002 fae4 	bl	800453c <HAL_I2C_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f7a:	f000 f8f1 	bl	8002160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4809      	ldr	r0, [pc, #36]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f82:	f003 f867 	bl	8005054 <HAL_I2CEx_ConfigAnalogFilter>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f8c:	f000 f8e8 	bl	8002160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f90:	2100      	movs	r1, #0
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <MX_I2C1_Init+0x74>)
 8001f94:	f003 f8a9 	bl	80050ea <HAL_I2CEx_ConfigDigitalFilter>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f9e:	f000 f8df 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000620 	.word	0x20000620
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	00702991 	.word	0x00702991

08001fb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0ac      	sub	sp, #176	@ 0xb0
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2288      	movs	r2, #136	@ 0x88
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 fbf4 	bl	800b7c2 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <HAL_I2C_MspInit+0xb0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d13b      	bne.n	800205c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fe4:	2340      	movs	r3, #64	@ 0x40
 8001fe6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 ff5d 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ffc:	f000 f8b0 	bl	8002160 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800201c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002020:	2312      	movs	r3, #18
 8002022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002032:	2304      	movs	r3, #4
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800203c:	4619      	mov	r1, r3
 800203e:	480b      	ldr	r0, [pc, #44]	@ (800206c <HAL_I2C_MspInit+0xb8>)
 8002040:	f002 f8a0 	bl	8004184 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	4a07      	ldr	r2, [pc, #28]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800204e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_I2C_MspInit+0xb4>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800205c:	bf00      	nop
 800205e:	37b0      	adds	r7, #176	@ 0xb0
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40005400 	.word	0x40005400
 8002068:	40021000 	.word	0x40021000
 800206c:	48000400 	.word	0x48000400

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002074:	f001 ff64 	bl	8003f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002078:	f000 f80e 	bl	8002098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f7ff fef4 	bl	8001e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002080:	f001 fea8 	bl	8003dd4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002084:	f7ff ff56 	bl	8001f34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002088:	f005 fc84 	bl	8007994 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800208c:	f7ff fd8e 	bl	8001bac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002090:	f005 fca4 	bl	80079dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <main+0x24>

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	@ 0x58
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	2244      	movs	r2, #68	@ 0x44
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f009 fb8b 	bl	800b7c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020be:	f003 f86f 	bl	80051a0 <HAL_PWREx_ControlVoltageScaling>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020c8:	f000 f84a 	bl	8002160 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020cc:	2302      	movs	r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d6:	2310      	movs	r3, #16
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020da:	2302      	movs	r3, #2
 80020dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020de:	2302      	movs	r3, #2
 80020e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80020e6:	230a      	movs	r3, #10
 80020e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020ea:	2307      	movs	r3, #7
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020ee:	2302      	movs	r3, #2
 80020f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020f2:	2302      	movs	r3, #2
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f8a6 	bl	800524c <HAL_RCC_OscConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002106:	f000 f82b 	bl	8002160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800210a:	230f      	movs	r3, #15
 800210c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800210e:	2303      	movs	r3, #3
 8002110:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800211e:	463b      	mov	r3, r7
 8002120:	2104      	movs	r1, #4
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fc6e 	bl	8005a04 <HAL_RCC_ClockConfig>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800212e:	f000 f817 	bl	8002160 <Error_Handler>
  }
}
 8002132:	bf00      	nop
 8002134:	3758      	adds	r7, #88	@ 0x58
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800214e:	f001 ff17 	bl	8003f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40014800 	.word	0x40014800

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <Error_Handler+0x8>

0800216c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d204      	bcs.n	800218e <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	701a      	strb	r2, [r3, #0]
  }
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <_out_char+0x1e>
    _putchar(character);
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fccc 	bl	8001b6c <_putchar>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e002      	b.n	80021f2 <_strnlen_s+0x16>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <_strnlen_s+0x28>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	603a      	str	r2, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f3      	bne.n	80021ec <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b2f      	cmp	r3, #47	@ 0x2f
 8002224:	d904      	bls.n	8002230 <_is_digit+0x1a>
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b39      	cmp	r3, #57	@ 0x39
 800222a:	d801      	bhi.n	8002230 <_is_digit+0x1a>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <_is_digit+0x1c>
 8002230:	2300      	movs	r3, #0
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002250:	e00e      	b.n	8002270 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4618      	mov	r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6011      	str	r1, [r2, #0]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4403      	add	r3, r0
 800226c:	3b30      	subs	r3, #48	@ 0x30
 800226e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ffcd 	bl	8002216 <_is_digit>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e7      	bne.n	8002252 <_atoi+0xe>
  }
  return i;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d125      	bne.n	80022f4 <_out_rev+0x68>
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d120      	bne.n	80022f4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80022b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e00a      	b.n	80022ce <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	1c53      	adds	r3, r2, #1
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	68fc      	ldr	r4, [r7, #12]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	2020      	movs	r0, #32
 80022c6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3f0      	bcc.n	80022b8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80022d6:	e00d      	b.n	80022f4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	3b01      	subs	r3, #1
 80022dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e2:	4413      	add	r3, r2
 80022e4:	7818      	ldrb	r0, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	1c53      	adds	r3, r2, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	68fc      	ldr	r4, [r7, #12]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	47a0      	blx	r4
  while (len) {
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80022fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00e      	beq.n	8002322 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002304:	e007      	b.n	8002316 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	1c53      	adds	r3, r2, #1
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	68fc      	ldr	r4, [r7, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	2020      	movs	r0, #32
 8002314:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800231e:	429a      	cmp	r2, r3
 8002320:	d8f1      	bhi.n	8002306 <_out_rev+0x7a>
    }
  }

  return idx;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af04      	add	r7, sp, #16
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d136      	bne.n	80023b2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d018      	beq.n	800237c <_ntoa_format+0x50>
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <_ntoa_format+0x50>
 8002354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <_ntoa_format+0x3a>
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <_ntoa_format+0x50>
      width--;
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	3b01      	subs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800236c:	e006      	b.n	800237c <_ntoa_format+0x50>
      buf[len++] = '0';
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	61fa      	str	r2, [r7, #28]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4413      	add	r3, r2
 8002378:	2230      	movs	r2, #48	@ 0x30
 800237a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	429a      	cmp	r2, r3
 8002382:	d20a      	bcs.n	800239a <_ntoa_format+0x6e>
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b1f      	cmp	r3, #31
 8002388:	d9f1      	bls.n	800236e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800238a:	e006      	b.n	800239a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	61fa      	str	r2, [r7, #28]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4413      	add	r3, r2
 8002396:	2230      	movs	r2, #48	@ 0x30
 8002398:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <_ntoa_format+0x86>
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d202      	bcs.n	80023b2 <_ntoa_format+0x86>
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b1f      	cmp	r3, #31
 80023b0:	d9ec      	bls.n	800238c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d058      	beq.n	800246e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <_ntoa_format+0xc8>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <_ntoa_format+0xc8>
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d003      	beq.n	80023dc <_ntoa_format+0xb0>
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10b      	bne.n	80023f4 <_ntoa_format+0xc8>
      len--;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3b01      	subs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <_ntoa_format+0xc8>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d102      	bne.n	80023f4 <_ntoa_format+0xc8>
        len--;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d10f      	bne.n	800241a <_ntoa_format+0xee>
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <_ntoa_format+0xee>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b1f      	cmp	r3, #31
 8002408:	d807      	bhi.n	800241a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	61fa      	str	r2, [r7, #28]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	2278      	movs	r2, #120	@ 0x78
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e01f      	b.n	800245a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	2b10      	cmp	r3, #16
 800241e:	d10f      	bne.n	8002440 <_ntoa_format+0x114>
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <_ntoa_format+0x114>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b1f      	cmp	r3, #31
 800242e:	d807      	bhi.n	8002440 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	61fa      	str	r2, [r7, #28]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4413      	add	r3, r2
 800243a:	2258      	movs	r2, #88	@ 0x58
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e00c      	b.n	800245a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	2b02      	cmp	r3, #2
 8002444:	d109      	bne.n	800245a <_ntoa_format+0x12e>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2b1f      	cmp	r3, #31
 800244a:	d806      	bhi.n	800245a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	61fa      	str	r2, [r7, #28]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	2262      	movs	r2, #98	@ 0x62
 8002458:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b1f      	cmp	r3, #31
 800245e:	d806      	bhi.n	800246e <_ntoa_format+0x142>
      buf[len++] = '0';
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	61fa      	str	r2, [r7, #28]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	2230      	movs	r2, #48	@ 0x30
 800246c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	2b1f      	cmp	r3, #31
 8002472:	d824      	bhi.n	80024be <_ntoa_format+0x192>
    if (negative) {
 8002474:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <_ntoa_format+0x160>
      buf[len++] = '-';
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	61fa      	str	r2, [r7, #28]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	222d      	movs	r2, #45	@ 0x2d
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e018      	b.n	80024be <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	222b      	movs	r2, #43	@ 0x2b
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e00b      	b.n	80024be <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <_ntoa_format+0x192>
      buf[len++] = ' ';
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	2220      	movs	r2, #32
 80024bc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fed9 	bl	800228c <_out_rev>
 80024da:	4603      	mov	r3, r0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b096      	sub	sp, #88	@ 0x58
 80024e8:	af08      	add	r7, sp, #32
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80024f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80024fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fe:	f023 0310 	bic.w	r3, r3, #16
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <_ntoa_long+0x30>
 800250e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d032      	beq.n	800257a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002518:	fbb3 f2f2 	udiv	r2, r3, r2
 800251c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800251e:	fb01 f202 	mul.w	r2, r1, r2
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002528:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800252c:	2b09      	cmp	r3, #9
 800252e:	d804      	bhi.n	800253a <_ntoa_long+0x56>
 8002530:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002534:	3330      	adds	r3, #48	@ 0x30
 8002536:	b2da      	uxtb	r2, r3
 8002538:	e00d      	b.n	8002556 <_ntoa_long+0x72>
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <_ntoa_long+0x64>
 8002544:	2241      	movs	r2, #65	@ 0x41
 8002546:	e000      	b.n	800254a <_ntoa_long+0x66>
 8002548:	2261      	movs	r2, #97	@ 0x61
 800254a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800254e:	4413      	add	r3, r2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b0a      	subs	r3, #10
 8002554:	b2da      	uxtb	r2, r3
 8002556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002558:	1c59      	adds	r1, r3, #1
 800255a:	6379      	str	r1, [r7, #52]	@ 0x34
 800255c:	3338      	adds	r3, #56	@ 0x38
 800255e:	443b      	add	r3, r7
 8002560:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <_ntoa_long+0x96>
 8002574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002576:	2b1f      	cmp	r3, #31
 8002578:	d9cc      	bls.n	8002514 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800257a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257c:	9306      	str	r3, [sp, #24]
 800257e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002580:	9305      	str	r3, [sp, #20]
 8002582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002588:	9303      	str	r3, [sp, #12]
 800258a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800258e:	9302      	str	r3, [sp, #8]
 8002590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fec3 	bl	800232c <_ntoa_format>
 80025a6:	4603      	mov	r3, r0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3738      	adds	r7, #56	@ 0x38
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b096      	sub	sp, #88	@ 0x58
 80025b4:	af08      	add	r7, sp, #32
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80025c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025c6:	4313      	orrs	r3, r2
 80025c8:	d103      	bne.n	80025d2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80025ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025cc:	f023 0310 	bic.w	r3, r3, #16
 80025d0:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80025d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <_ntoa_long_long+0x34>
 80025dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025e0:	4313      	orrs	r3, r2
 80025e2:	d037      	beq.n	8002654 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80025e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025ec:	f7fe fb4c 	bl	8000c88 <__aeabi_uldivmod>
 80025f0:	4613      	mov	r3, r2
 80025f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80025f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	d804      	bhi.n	8002608 <_ntoa_long_long+0x58>
 80025fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002602:	3330      	adds	r3, #48	@ 0x30
 8002604:	b2da      	uxtb	r2, r3
 8002606:	e00d      	b.n	8002624 <_ntoa_long_long+0x74>
 8002608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <_ntoa_long_long+0x66>
 8002612:	2241      	movs	r2, #65	@ 0x41
 8002614:	e000      	b.n	8002618 <_ntoa_long_long+0x68>
 8002616:	2261      	movs	r2, #97	@ 0x61
 8002618:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800261c:	4413      	add	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3b0a      	subs	r3, #10
 8002622:	b2da      	uxtb	r2, r3
 8002624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	6379      	str	r1, [r7, #52]	@ 0x34
 800262a:	3338      	adds	r3, #56	@ 0x38
 800262c:	443b      	add	r3, r7
 800262e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002632:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002636:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800263a:	f7fe fb25 	bl	8000c88 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800264a:	4313      	orrs	r3, r2
 800264c:	d002      	beq.n	8002654 <_ntoa_long_long+0xa4>
 800264e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002650:	2b1f      	cmp	r3, #31
 8002652:	d9c7      	bls.n	80025e4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002656:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002658:	9206      	str	r2, [sp, #24]
 800265a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800265c:	9205      	str	r2, [sp, #20]
 800265e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002660:	9204      	str	r2, [sp, #16]
 8002662:	9303      	str	r3, [sp, #12]
 8002664:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff fe56 	bl	800232c <_ntoa_format>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3738      	adds	r7, #56	@ 0x38
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	0000      	movs	r0, r0
 800268c:	0000      	movs	r0, r0
	...

08002690 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b09d      	sub	sp, #116	@ 0x74
 8002694:	af04      	add	r7, sp, #16
 8002696:	6178      	str	r0, [r7, #20]
 8002698:	6139      	str	r1, [r7, #16]
 800269a:	60fa      	str	r2, [r7, #12]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80026b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ba:	f7fe fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80026c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026c6:	9303      	str	r3, [sp, #12]
 80026c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	2303      	movs	r3, #3
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002970 <_ftoa+0x2e0>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	6939      	ldr	r1, [r7, #16]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff fdd6 	bl	800228c <_out_rev>
 80026e0:	4603      	mov	r3, r0
 80026e2:	e222      	b.n	8002b2a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026e8:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80026ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026f0:	f7fe f9f4 	bl	8000adc <__aeabi_dcmplt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80026fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	2304      	movs	r3, #4
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	4b9b      	ldr	r3, [pc, #620]	@ (8002974 <_ftoa+0x2e4>)
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6939      	ldr	r1, [r7, #16]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7ff fdbb 	bl	800228c <_out_rev>
 8002716:	4603      	mov	r3, r0
 8002718:	e207      	b.n	8002b2a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800271a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800271e:	4b96      	ldr	r3, [pc, #600]	@ (8002978 <_ftoa+0x2e8>)
 8002720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002724:	f7fe f9f8 	bl	8000b18 <__aeabi_dcmpgt>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01d      	beq.n	800276a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800272e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <_ftoa+0xac>
 8002738:	4b90      	ldr	r3, [pc, #576]	@ (800297c <_ftoa+0x2ec>)
 800273a:	e000      	b.n	800273e <_ftoa+0xae>
 800273c:	4b90      	ldr	r3, [pc, #576]	@ (8002980 <_ftoa+0x2f0>)
 800273e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002740:	f002 0204 	and.w	r2, r2, #4
 8002744:	2a00      	cmp	r2, #0
 8002746:	d001      	beq.n	800274c <_ftoa+0xbc>
 8002748:	2204      	movs	r2, #4
 800274a:	e000      	b.n	800274e <_ftoa+0xbe>
 800274c:	2203      	movs	r2, #3
 800274e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002750:	9103      	str	r1, [sp, #12]
 8002752:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002754:	9102      	str	r1, [sp, #8]
 8002756:	9201      	str	r2, [sp, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	6939      	ldr	r1, [r7, #16]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff fd93 	bl	800228c <_out_rev>
 8002766:	4603      	mov	r3, r0
 8002768:	e1df      	b.n	8002b2a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800276a:	a37d      	add	r3, pc, #500	@ (adr r3, 8002960 <_ftoa+0x2d0>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002774:	f7fe f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <_ftoa+0x102>
 800277e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002968 <_ftoa+0x2d8>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002788:	f7fe f9a8 	bl	8000adc <__aeabi_dcmplt>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00f      	beq.n	80027b2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	ed97 0b00 	vldr	d0, [r7]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6939      	ldr	r1, [r7, #16]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f000 f9c9 	bl	8002b40 <_etoa>
 80027ae:	4603      	mov	r3, r0
 80027b0:	e1bb      	b.n	8002b2a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c4:	f7fe f98a 	bl	8000adc <__aeabi_dcmplt>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <_ftoa+0x15c>
    negative = true;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	f04f 0000 	mov.w	r0, #0
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	f7fd fd52 	bl	8000288 <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80027ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80027f6:	2306      	movs	r3, #6
 80027f8:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80027fa:	e00a      	b.n	8002812 <_ftoa+0x182>
    buf[len++] = '0';
 80027fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002802:	3360      	adds	r3, #96	@ 0x60
 8002804:	443b      	add	r3, r7
 8002806:	2230      	movs	r2, #48	@ 0x30
 8002808:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800280c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800280e:	3b01      	subs	r3, #1
 8002810:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002814:	2b1f      	cmp	r3, #31
 8002816:	d802      	bhi.n	800281e <_ftoa+0x18e>
 8002818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800281a:	2b09      	cmp	r3, #9
 800281c:	d8ee      	bhi.n	80027fc <_ftoa+0x16c>
  }

  int whole = (int)value;
 800281e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002822:	f7fe f999 	bl	8000b58 <__aeabi_d2iz>
 8002826:	4603      	mov	r3, r0
 8002828:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 800282a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800282c:	f7fd fe7a 	bl	8000524 <__aeabi_i2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002838:	f7fd fd26 	bl	8000288 <__aeabi_dsub>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	4a4f      	ldr	r2, [pc, #316]	@ (8002984 <_ftoa+0x2f4>)
 8002846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fd fed2 	bl	80005f8 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 800285c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002860:	f7fe f9a2 	bl	8000ba8 <__aeabi_d2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002868:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800286a:	f7fd fe4b 	bl	8000504 <__aeabi_ui2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002876:	f7fd fd07 	bl	8000288 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <_ftoa+0x2f8>)
 8002888:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800288c:	f7fe f944 	bl	8000b18 <__aeabi_dcmpgt>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <_ftoa+0x234>
    ++frac;
 8002896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002898:	3301      	adds	r3, #1
 800289a:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800289c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800289e:	f7fd fe31 	bl	8000504 <__aeabi_ui2d>
 80028a2:	4a38      	ldr	r2, [pc, #224]	@ (8002984 <_ftoa+0x2f4>)
 80028a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fe f929 	bl	8000b04 <__aeabi_dcmpge>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01a      	beq.n	80028ee <_ftoa+0x25e>
      frac = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 80028bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028be:	3301      	adds	r3, #1
 80028c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c2:	e014      	b.n	80028ee <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <_ftoa+0x2f8>)
 80028ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028ce:	f7fe f905 	bl	8000adc <__aeabi_dcmplt>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80028d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <_ftoa+0x258>
 80028de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80028e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ea:	3301      	adds	r3, #1
 80028ec:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 80028ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d14b      	bne.n	800298c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80028f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80028f6:	f7fd fe15 	bl	8000524 <__aeabi_i2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002902:	f7fd fcc1 	bl	8000288 <__aeabi_dsub>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800290e:	2301      	movs	r3, #1
 8002910:	461c      	mov	r4, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b1c      	ldr	r3, [pc, #112]	@ (8002988 <_ftoa+0x2f8>)
 8002918:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800291c:	f7fe f8de 	bl	8000adc <__aeabi_dcmplt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <_ftoa+0x29a>
 8002926:	2300      	movs	r3, #0
 8002928:	461c      	mov	r4, r3
 800292a:	b2e3      	uxtb	r3, r4
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <_ftoa+0x2ba>
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <_ftoa+0x2f8>)
 800293c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002940:	f7fe f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d064      	beq.n	8002a14 <_ftoa+0x384>
 800294a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8081 	beq.w	8002a58 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002958:	3301      	adds	r3, #1
 800295a:	657b      	str	r3, [r7, #84]	@ 0x54
 800295c:	e07c      	b.n	8002a58 <_ftoa+0x3c8>
 800295e:	bf00      	nop
 8002960:	00000000 	.word	0x00000000
 8002964:	41cdcd65 	.word	0x41cdcd65
 8002968:	00000000 	.word	0x00000000
 800296c:	c1cdcd65 	.word	0xc1cdcd65
 8002970:	0800d6b8 	.word	0x0800d6b8
 8002974:	0800d6bc 	.word	0x0800d6bc
 8002978:	7fefffff 	.word	0x7fefffff
 800297c:	0800d6c4 	.word	0x0800d6c4
 8002980:	0800d6cc 	.word	0x0800d6cc
 8002984:	0800d968 	.word	0x0800d968
 8002988:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800298c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002990:	e01f      	b.n	80029d2 <_ftoa+0x342>
      --count;
 8002992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002994:	3b01      	subs	r3, #1
 8002996:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002998:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800299a:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <_ftoa+0x4a4>)
 800299c:	fba3 2301 	umull	r2, r3, r3, r1
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	1aca      	subs	r2, r1, r3
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80029b4:	3230      	adds	r2, #48	@ 0x30
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	3360      	adds	r3, #96	@ 0x60
 80029ba:	443b      	add	r3, r7
 80029bc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80029c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b34 <_ftoa+0x4a4>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80029cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d4:	2b1f      	cmp	r3, #31
 80029d6:	d9dc      	bls.n	8002992 <_ftoa+0x302>
 80029d8:	e009      	b.n	80029ee <_ftoa+0x35e>
        break;
 80029da:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80029dc:	e007      	b.n	80029ee <_ftoa+0x35e>
      buf[len++] = '0';
 80029de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029e4:	3360      	adds	r3, #96	@ 0x60
 80029e6:	443b      	add	r3, r7
 80029e8:	2230      	movs	r2, #48	@ 0x30
 80029ea:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80029ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f0:	2b1f      	cmp	r3, #31
 80029f2:	d804      	bhi.n	80029fe <_ftoa+0x36e>
 80029f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ef      	bne.n	80029de <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	2b1f      	cmp	r3, #31
 8002a02:	d829      	bhi.n	8002a58 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a0a:	3360      	adds	r3, #96	@ 0x60
 8002a0c:	443b      	add	r3, r7
 8002a0e:	222e      	movs	r2, #46	@ 0x2e
 8002a10:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a14:	e020      	b.n	8002a58 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002a16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a18:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <_ftoa+0x4a8>)
 8002a1a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a1e:	1099      	asrs	r1, r3, #2
 8002a20:	17d3      	asrs	r3, r2, #31
 8002a22:	1ac9      	subs	r1, r1, r3
 8002a24:	460b      	mov	r3, r1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	1ad1      	subs	r1, r2, r3
 8002a2e:	b2ca      	uxtb	r2, r1
 8002a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002a36:	3230      	adds	r2, #48	@ 0x30
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	3360      	adds	r3, #96	@ 0x60
 8002a3c:	443b      	add	r3, r7
 8002a3e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a44:	4a3c      	ldr	r2, [pc, #240]	@ (8002b38 <_ftoa+0x4a8>)
 8002a46:	fb82 1203 	smull	r1, r2, r2, r3
 8002a4a:	1092      	asrs	r2, r2, #2
 8002a4c:	17db      	asrs	r3, r3, #31
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5a:	2b1f      	cmp	r3, #31
 8002a5c:	d9db      	bls.n	8002a16 <_ftoa+0x386>
 8002a5e:	e000      	b.n	8002a62 <_ftoa+0x3d2>
      break;
 8002a60:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d123      	bne.n	8002ab4 <_ftoa+0x424>
 8002a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01e      	beq.n	8002ab4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d014      	beq.n	8002aa6 <_ftoa+0x416>
 8002a7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <_ftoa+0x3fe>
 8002a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <_ftoa+0x416>
      width--;
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a90:	3b01      	subs	r3, #1
 8002a92:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002a94:	e007      	b.n	8002aa6 <_ftoa+0x416>
      buf[len++] = '0';
 8002a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a9c:	3360      	adds	r3, #96	@ 0x60
 8002a9e:	443b      	add	r3, r7
 8002aa0:	2230      	movs	r2, #48	@ 0x30
 8002aa2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002aa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d202      	bcs.n	8002ab4 <_ftoa+0x424>
 8002aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab0:	2b1f      	cmp	r3, #31
 8002ab2:	d9f0      	bls.n	8002a96 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab6:	2b1f      	cmp	r3, #31
 8002ab8:	d827      	bhi.n	8002b0a <_ftoa+0x47a>
    if (negative) {
 8002aba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <_ftoa+0x444>
      buf[len++] = '-';
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ac8:	3360      	adds	r3, #96	@ 0x60
 8002aca:	443b      	add	r3, r7
 8002acc:	222d      	movs	r2, #45	@ 0x2d
 8002ace:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002ad2:	e01a      	b.n	8002b0a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ae4:	3360      	adds	r3, #96	@ 0x60
 8002ae6:	443b      	add	r3, r7
 8002ae8:	222b      	movs	r2, #43	@ 0x2b
 8002aea:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002aee:	e00c      	b.n	8002b0a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <_ftoa+0x47a>
      buf[len++] = ' ';
 8002afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b00:	3360      	adds	r3, #96	@ 0x60
 8002b02:	443b      	add	r3, r7
 8002b04:	2220      	movs	r2, #32
 8002b06:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b0c:	9303      	str	r3, [sp, #12]
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f107 0318 	add.w	r3, r7, #24
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	6939      	ldr	r1, [r7, #16]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff fbb2 	bl	800228c <_out_rev>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3764      	adds	r7, #100	@ 0x64
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	cccccccd 	.word	0xcccccccd
 8002b38:	66666667 	.word	0x66666667
 8002b3c:	00000000 	.word	0x00000000

08002b40 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	b09f      	sub	sp, #124	@ 0x7c
 8002b46:	af06      	add	r7, sp, #24
 8002b48:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b4a:	6239      	str	r1, [r7, #32]
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b5c:	f7fd ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <_etoa+0x50>
 8002b66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b6a:	4bc1      	ldr	r3, [pc, #772]	@ (8002e70 <_etoa+0x330>)
 8002b6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b70:	f7fd ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <_etoa+0x50>
 8002b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b7e:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002b82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b86:	f7fd ffa9 	bl	8000adc <__aeabi_dcmplt>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d012      	beq.n	8002bb6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b94:	9302      	str	r3, [sp, #8]
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	6a39      	ldr	r1, [r7, #32]
 8002bac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bae:	f7ff fd6f 	bl	8002690 <_ftoa>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	e23f      	b.n	8003036 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	461e      	mov	r6, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc6:	f7fd ff89 	bl	8000adc <__aeabi_dcmplt>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <_etoa+0x94>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	461e      	mov	r6, r3
 8002bd4:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002bd8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <_etoa+0xb4>
    value = -value;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	ed97 7b00 	vldr	d7, [r7]
 8002bf0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c00:	2306      	movs	r3, #6
 8002c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002c06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002c0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	0d0a      	lsrs	r2, r1, #20
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	4613      	mov	r3, r2
 8002c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c24:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c2e:	4690      	mov	r8, r2
 8002c30:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002c34:	4644      	mov	r4, r8
 8002c36:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 8002c3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002c3e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002c42:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c44:	f7fd fc6e 	bl	8000524 <__aeabi_i2d>
 8002c48:	a37d      	add	r3, pc, #500	@ (adr r3, 8002e40 <_etoa+0x300>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fcd3 	bl	80005f8 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	a37b      	add	r3, pc, #492	@ (adr r3, 8002e48 <_etoa+0x308>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd fb14 	bl	800028c <__adddf3>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	4b7f      	ldr	r3, [pc, #508]	@ (8002e74 <_etoa+0x334>)
 8002c76:	f7fd fb07 	bl	8000288 <__aeabi_dsub>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	a373      	add	r3, pc, #460	@ (adr r3, 8002e50 <_etoa+0x310>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcb6 	bl	80005f8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fafa 	bl	800028c <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd ff5a 	bl	8000b58 <__aeabi_d2iz>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002ca8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002caa:	f7fd fc3b 	bl	8000524 <__aeabi_i2d>
 8002cae:	a36a      	add	r3, pc, #424	@ (adr r3, 8002e58 <_etoa+0x318>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fca0 	bl	80005f8 <__aeabi_dmul>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e78 <_etoa+0x338>)
 8002cc6:	f7fd fae1 	bl	800028c <__adddf3>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff41 	bl	8000b58 <__aeabi_d2iz>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002cda:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002cdc:	f7fd fc22 	bl	8000524 <__aeabi_i2d>
 8002ce0:	a35f      	add	r3, pc, #380	@ (adr r3, 8002e60 <_etoa+0x320>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fc87 	bl	80005f8 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4614      	mov	r4, r2
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cf4:	f7fd fc16 	bl	8000524 <__aeabi_i2d>
 8002cf8:	a35b      	add	r3, pc, #364	@ (adr r3, 8002e68 <_etoa+0x328>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fc7b 	bl	80005f8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fabd 	bl	8000288 <__aeabi_dsub>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 8002d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002d1e:	f7fd fc6b 	bl	80005f8 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d2c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002d30:	17da      	asrs	r2, r3, #31
 8002d32:	469a      	mov	sl, r3
 8002d34:	4693      	mov	fp, r2
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002d42:	2200      	movs	r2, #0
 8002d44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002d48:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002d4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	f7fd fa9a 	bl	800028c <__adddf3>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4690      	mov	r8, r2
 8002d5e:	4699      	mov	r9, r3
 8002d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d6c:	f7fd fa8c 	bl	8000288 <__aeabi_dsub>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4692      	mov	sl, r2
 8002d76:	469b      	mov	fp, r3
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e7c <_etoa+0x33c>)
 8002d7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002d82:	f7fd fd63 	bl	800084c <__aeabi_ddiv>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <_etoa+0x340>)
 8002d94:	f7fd fa7a 	bl	800028c <__adddf3>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002da0:	f7fd fd54 	bl	800084c <__aeabi_ddiv>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	4b34      	ldr	r3, [pc, #208]	@ (8002e84 <_etoa+0x344>)
 8002db2:	f7fd fa6b 	bl	800028c <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dbe:	f7fd fd45 	bl	800084c <__aeabi_ddiv>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	4659      	mov	r1, fp
 8002dca:	f7fd fa5f 	bl	800028c <__adddf3>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	f7fd fd39 	bl	800084c <__aeabi_ddiv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <_etoa+0x348>)
 8002de8:	f7fd fa50 	bl	800028c <__adddf3>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd fc00 	bl	80005f8 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e08:	f7fd fe68 	bl	8000adc <__aeabi_dcmplt>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <_etoa+0x2ee>
    expval--;
 8002e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e14:	3b01      	subs	r3, #1
 8002e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002e18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <_etoa+0x340>)
 8002e22:	f7fd fd13 	bl	800084c <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e30:	2b63      	cmp	r3, #99	@ 0x63
 8002e32:	dc2b      	bgt.n	8002e8c <_etoa+0x34c>
 8002e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e36:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002e3a:	db27      	blt.n	8002e8c <_etoa+0x34c>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	e026      	b.n	8002e8e <_etoa+0x34e>
 8002e40:	509f79fb 	.word	0x509f79fb
 8002e44:	3fd34413 	.word	0x3fd34413
 8002e48:	8b60c8b3 	.word	0x8b60c8b3
 8002e4c:	3fc68a28 	.word	0x3fc68a28
 8002e50:	636f4361 	.word	0x636f4361
 8002e54:	3fd287a7 	.word	0x3fd287a7
 8002e58:	0979a371 	.word	0x0979a371
 8002e5c:	400a934f 	.word	0x400a934f
 8002e60:	bbb55516 	.word	0xbbb55516
 8002e64:	40026bb1 	.word	0x40026bb1
 8002e68:	fefa39ef 	.word	0xfefa39ef
 8002e6c:	3fe62e42 	.word	0x3fe62e42
 8002e70:	7fefffff 	.word	0x7fefffff
 8002e74:	3ff80000 	.word	0x3ff80000
 8002e78:	3fe00000 	.word	0x3fe00000
 8002e7c:	402c0000 	.word	0x402c0000
 8002e80:	40240000 	.word	0x40240000
 8002e84:	40180000 	.word	0x40180000
 8002e88:	3ff00000 	.word	0x3ff00000
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03d      	beq.n	8002f18 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002e9c:	a368      	add	r3, pc, #416	@ (adr r3, 8003040 <_etoa+0x500>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ea6:	f7fd fe2d 	bl	8000b04 <__aeabi_dcmpge>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d024      	beq.n	8002efa <_etoa+0x3ba>
 8002eb0:	a365      	add	r3, pc, #404	@ (adr r3, 8003048 <_etoa+0x508>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eba:	f7fd fe0f 	bl	8000adc <__aeabi_dcmplt>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01a      	beq.n	8002efa <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ec8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	da07      	bge.n	8002ede <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002edc:	e002      	b.n	8002ee4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ef8:	e00e      	b.n	8002f18 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <_etoa+0x3d8>
 8002f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <_etoa+0x3d8>
        --prec;
 8002f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002f1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d904      	bls.n	8002f32 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002f28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f30:	e001      	b.n	8002f36 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <_etoa+0x40c>
 8002f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 8002f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <_etoa+0x426>
    value /= conv.F;
 8002f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f5a:	f7fd fc77 	bl	800084c <__aeabi_ddiv>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002f6a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <_etoa+0x440>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e003      	b.n	8002f88 <_etoa+0x448>
 8002f80:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f84:	ed87 7b02 	vstr	d7, [r7, #8]
 8002f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f90:	9302      	str	r3, [sp, #8]
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	6a39      	ldr	r1, [r7, #32]
 8002fa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fa8:	f7ff fb72 	bl	8002690 <_ftoa>
 8002fac:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03f      	beq.n	8003034 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <_etoa+0x484>
 8002fc0:	2045      	movs	r0, #69	@ 0x45
 8002fc2:	e000      	b.n	8002fc6 <_etoa+0x486>
 8002fc4:	2065      	movs	r0, #101	@ 0x65
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	1c53      	adds	r3, r2, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfb8      	it	lt
 8002fda:	425b      	neglt	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe0:	0fdb      	lsrs	r3, r3, #31
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	2105      	movs	r1, #5
 8002fea:	9105      	str	r1, [sp, #20]
 8002fec:	9204      	str	r2, [sp, #16]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	9203      	str	r2, [sp, #12]
 8002ff2:	220a      	movs	r2, #10
 8002ff4:	9202      	str	r2, [sp, #8]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	9000      	str	r0, [sp, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	6a39      	ldr	r1, [r7, #32]
 8003000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003002:	f7ff fa6f 	bl	80024e4 <_ntoa_long>
 8003006:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003008:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00f      	beq.n	8003034 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003014:	e007      	b.n	8003026 <_etoa+0x4e6>
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	1c53      	adds	r3, r2, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6a39      	ldr	r1, [r7, #32]
 8003022:	2020      	movs	r0, #32
 8003024:	47a0      	blx	r4
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003030:	429a      	cmp	r2, r3
 8003032:	d8f0      	bhi.n	8003016 <_etoa+0x4d6>
    }
  }
  return idx;
 8003034:	69fb      	ldr	r3, [r7, #28]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3764      	adds	r7, #100	@ 0x64
 800303a:	46bd      	mov	sp, r7
 800303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003040:	eb1c432d 	.word	0xeb1c432d
 8003044:	3f1a36e2 	.word	0x3f1a36e2
 8003048:	00000000 	.word	0x00000000
 800304c:	412e8480 	.word	0x412e8480

08003050 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	b0a3      	sub	sp, #140	@ 0x8c
 8003056:	af0a      	add	r7, sp, #40	@ 0x28
 8003058:	6178      	str	r0, [r7, #20]
 800305a:	6139      	str	r1, [r7, #16]
 800305c:	60fa      	str	r2, [r7, #12]
 800305e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 84cf 	bne.w	8003a0a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 800306c:	4ba8      	ldr	r3, [pc, #672]	@ (8003310 <_vsnprintf+0x2c0>)
 800306e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003070:	f000 bccb 	b.w	8003a0a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b25      	cmp	r3, #37	@ 0x25
 800307a:	d00d      	beq.n	8003098 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	7818      	ldrb	r0, [r3, #0]
 8003080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003082:	1c53      	adds	r3, r2, #1
 8003084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003086:	697c      	ldr	r4, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	47a0      	blx	r4
      format++;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
      continue;
 8003094:	f000 bcb9 	b.w	8003a0a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	3b20      	subs	r3, #32
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d857      	bhi.n	800315c <_vsnprintf+0x10c>
 80030ac:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <_vsnprintf+0x64>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	08003135 	.word	0x08003135
 80030b8:	0800315d 	.word	0x0800315d
 80030bc:	0800315d 	.word	0x0800315d
 80030c0:	08003149 	.word	0x08003149
 80030c4:	0800315d 	.word	0x0800315d
 80030c8:	0800315d 	.word	0x0800315d
 80030cc:	0800315d 	.word	0x0800315d
 80030d0:	0800315d 	.word	0x0800315d
 80030d4:	0800315d 	.word	0x0800315d
 80030d8:	0800315d 	.word	0x0800315d
 80030dc:	0800315d 	.word	0x0800315d
 80030e0:	08003121 	.word	0x08003121
 80030e4:	0800315d 	.word	0x0800315d
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	0800315d 	.word	0x0800315d
 80030f0:	0800315d 	.word	0x0800315d
 80030f4:	080030f9 	.word	0x080030f9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80030f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3301      	adds	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	2301      	movs	r3, #1
 8003108:	653b      	str	r3, [r7, #80]	@ 0x50
 800310a:	e02a      	b.n	8003162 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800310c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	2301      	movs	r3, #1
 800311c:	653b      	str	r3, [r7, #80]	@ 0x50
 800311e:	e020      	b.n	8003162 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3301      	adds	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	2301      	movs	r3, #1
 8003130:	653b      	str	r3, [r7, #80]	@ 0x50
 8003132:	e016      	b.n	8003162 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003136:	f043 0308 	orr.w	r3, r3, #8
 800313a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3301      	adds	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	2301      	movs	r3, #1
 8003144:	653b      	str	r3, [r7, #80]	@ 0x50
 8003146:	e00c      	b.n	8003162 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314a:	f043 0310 	orr.w	r3, r3, #16
 800314e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	2301      	movs	r3, #1
 8003158:	653b      	str	r3, [r7, #80]	@ 0x50
 800315a:	e002      	b.n	8003162 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800315c:	2300      	movs	r3, #0
 800315e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003160:	bf00      	nop
      }
    } while (n);
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	2b00      	cmp	r3, #0
 8003166:	d19c      	bne.n	80030a2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f850 	bl	8002216 <_is_digit>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f85f 	bl	8002244 <_atoi>
 8003186:	65b8      	str	r0, [r7, #88]	@ 0x58
 8003188:	e01a      	b.n	80031c0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003190:	d116      	bne.n	80031c0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003192:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 80031a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da07      	bge.n	80031b6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80031a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b0:	425b      	negs	r3, r3
 80031b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031b4:	e001      	b.n	80031ba <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	3301      	adds	r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80031ca:	d127      	bne.n	800321c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80031cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f819 	bl	8002216 <_is_digit>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f828 	bl	8002244 <_atoi>
 80031f4:	6578      	str	r0, [r7, #84]	@ 0x54
 80031f6:	e011      	b.n	800321c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80031fe:	d10d      	bne.n	800321c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003200:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003204:	1d1a      	adds	r2, r3, #4
 8003206:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003214:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	3b68      	subs	r3, #104	@ 0x68
 8003222:	2b12      	cmp	r3, #18
 8003224:	d866      	bhi.n	80032f4 <_vsnprintf+0x2a4>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <_vsnprintf+0x1dc>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800329f 	.word	0x0800329f
 8003230:	080032f5 	.word	0x080032f5
 8003234:	080032d5 	.word	0x080032d5
 8003238:	080032f5 	.word	0x080032f5
 800323c:	08003279 	.word	0x08003279
 8003240:	080032f5 	.word	0x080032f5
 8003244:	080032f5 	.word	0x080032f5
 8003248:	080032f5 	.word	0x080032f5
 800324c:	080032f5 	.word	0x080032f5
 8003250:	080032f5 	.word	0x080032f5
 8003254:	080032f5 	.word	0x080032f5
 8003258:	080032f5 	.word	0x080032f5
 800325c:	080032c5 	.word	0x080032c5
 8003260:	080032f5 	.word	0x080032f5
 8003264:	080032f5 	.word	0x080032f5
 8003268:	080032f5 	.word	0x080032f5
 800326c:	080032f5 	.word	0x080032f5
 8003270:	080032f5 	.word	0x080032f5
 8003274:	080032e5 	.word	0x080032e5
      case 'l' :
        flags |= FLAGS_LONG;
 8003278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800327a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	3301      	adds	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b6c      	cmp	r3, #108	@ 0x6c
 800328c:	d134      	bne.n	80032f8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800328e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003294:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3301      	adds	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800329c:	e02c      	b.n	80032f8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800329e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b68      	cmp	r3, #104	@ 0x68
 80032b2:	d123      	bne.n	80032fc <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80032b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3301      	adds	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80032c2:	e01b      	b.n	80032fc <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
        break;
 80032d2:	e014      	b.n	80032fe <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
        break;
 80032e2:	e00c      	b.n	80032fe <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
        break;
 80032f2:	e004      	b.n	80032fe <_vsnprintf+0x2ae>
      default :
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <_vsnprintf+0x2ae>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <_vsnprintf+0x2ae>
        break;
 80032fc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b67      	cmp	r3, #103	@ 0x67
 8003304:	f300 80b8 	bgt.w	8003478 <_vsnprintf+0x428>
 8003308:	2b25      	cmp	r3, #37	@ 0x25
 800330a:	da27      	bge.n	800335c <_vsnprintf+0x30c>
 800330c:	e370      	b.n	80039f0 <_vsnprintf+0x9a0>
 800330e:	bf00      	nop
 8003310:	0800219b 	.word	0x0800219b
 8003314:	3b69      	subs	r3, #105	@ 0x69
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	f249 0241 	movw	r2, #36929	@ 0x9041
 8003320:	401a      	ands	r2, r3
 8003322:	2a00      	cmp	r2, #0
 8003324:	bf14      	ite	ne
 8003326:	2201      	movne	r2, #1
 8003328:	2200      	moveq	r2, #0
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	2a00      	cmp	r2, #0
 800332e:	f040 80aa 	bne.w	8003486 <_vsnprintf+0x436>
 8003332:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8003336:	2a00      	cmp	r2, #0
 8003338:	bf14      	ite	ne
 800333a:	2201      	movne	r2, #1
 800333c:	2200      	moveq	r2, #0
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	2a00      	cmp	r2, #0
 8003342:	f040 82fb 	bne.w	800393c <_vsnprintf+0x8ec>
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 828d 	bne.w	8003874 <_vsnprintf+0x824>
 800335a:	e349      	b.n	80039f0 <_vsnprintf+0x9a0>
 800335c:	3b25      	subs	r3, #37	@ 0x25
 800335e:	2b42      	cmp	r3, #66	@ 0x42
 8003360:	f200 8346 	bhi.w	80039f0 <_vsnprintf+0x9a0>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <_vsnprintf+0x31c>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080039d9 	.word	0x080039d9
 8003370:	080039f1 	.word	0x080039f1
 8003374:	080039f1 	.word	0x080039f1
 8003378:	080039f1 	.word	0x080039f1
 800337c:	080039f1 	.word	0x080039f1
 8003380:	080039f1 	.word	0x080039f1
 8003384:	080039f1 	.word	0x080039f1
 8003388:	080039f1 	.word	0x080039f1
 800338c:	080039f1 	.word	0x080039f1
 8003390:	080039f1 	.word	0x080039f1
 8003394:	080039f1 	.word	0x080039f1
 8003398:	080039f1 	.word	0x080039f1
 800339c:	080039f1 	.word	0x080039f1
 80033a0:	080039f1 	.word	0x080039f1
 80033a4:	080039f1 	.word	0x080039f1
 80033a8:	080039f1 	.word	0x080039f1
 80033ac:	080039f1 	.word	0x080039f1
 80033b0:	080039f1 	.word	0x080039f1
 80033b4:	080039f1 	.word	0x080039f1
 80033b8:	080039f1 	.word	0x080039f1
 80033bc:	080039f1 	.word	0x080039f1
 80033c0:	080039f1 	.word	0x080039f1
 80033c4:	080039f1 	.word	0x080039f1
 80033c8:	080039f1 	.word	0x080039f1
 80033cc:	080039f1 	.word	0x080039f1
 80033d0:	080039f1 	.word	0x080039f1
 80033d4:	080039f1 	.word	0x080039f1
 80033d8:	080039f1 	.word	0x080039f1
 80033dc:	080039f1 	.word	0x080039f1
 80033e0:	080039f1 	.word	0x080039f1
 80033e4:	080039f1 	.word	0x080039f1
 80033e8:	080039f1 	.word	0x080039f1
 80033ec:	0800378d 	.word	0x0800378d
 80033f0:	0800373d 	.word	0x0800373d
 80033f4:	0800378d 	.word	0x0800378d
 80033f8:	080039f1 	.word	0x080039f1
 80033fc:	080039f1 	.word	0x080039f1
 8003400:	080039f1 	.word	0x080039f1
 8003404:	080039f1 	.word	0x080039f1
 8003408:	080039f1 	.word	0x080039f1
 800340c:	080039f1 	.word	0x080039f1
 8003410:	080039f1 	.word	0x080039f1
 8003414:	080039f1 	.word	0x080039f1
 8003418:	080039f1 	.word	0x080039f1
 800341c:	080039f1 	.word	0x080039f1
 8003420:	080039f1 	.word	0x080039f1
 8003424:	080039f1 	.word	0x080039f1
 8003428:	080039f1 	.word	0x080039f1
 800342c:	080039f1 	.word	0x080039f1
 8003430:	080039f1 	.word	0x080039f1
 8003434:	080039f1 	.word	0x080039f1
 8003438:	08003487 	.word	0x08003487
 800343c:	080039f1 	.word	0x080039f1
 8003440:	080039f1 	.word	0x080039f1
 8003444:	080039f1 	.word	0x080039f1
 8003448:	080039f1 	.word	0x080039f1
 800344c:	080039f1 	.word	0x080039f1
 8003450:	080039f1 	.word	0x080039f1
 8003454:	080039f1 	.word	0x080039f1
 8003458:	080039f1 	.word	0x080039f1
 800345c:	080039f1 	.word	0x080039f1
 8003460:	08003487 	.word	0x08003487
 8003464:	080037fd 	.word	0x080037fd
 8003468:	08003487 	.word	0x08003487
 800346c:	0800378d 	.word	0x0800378d
 8003470:	0800373d 	.word	0x0800373d
 8003474:	0800378d 	.word	0x0800378d
 8003478:	2b78      	cmp	r3, #120	@ 0x78
 800347a:	f300 82b9 	bgt.w	80039f0 <_vsnprintf+0x9a0>
 800347e:	2b69      	cmp	r3, #105	@ 0x69
 8003480:	f6bf af48 	bge.w	8003314 <_vsnprintf+0x2c4>
 8003484:	e2b4      	b.n	80039f0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b78      	cmp	r3, #120	@ 0x78
 800348c:	d003      	beq.n	8003496 <_vsnprintf+0x446>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b58      	cmp	r3, #88	@ 0x58
 8003494:	d102      	bne.n	800349c <_vsnprintf+0x44c>
          base = 16U;
 8003496:	2310      	movs	r3, #16
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349a:	e013      	b.n	80034c4 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b6f      	cmp	r3, #111	@ 0x6f
 80034a2:	d102      	bne.n	80034aa <_vsnprintf+0x45a>
          base =  8U;
 80034a4:	2308      	movs	r3, #8
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034a8:	e00c      	b.n	80034c4 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b62      	cmp	r3, #98	@ 0x62
 80034b0:	d102      	bne.n	80034b8 <_vsnprintf+0x468>
          base =  2U;
 80034b2:	2302      	movs	r3, #2
 80034b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b6:	e005      	b.n	80034c4 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80034b8:	230a      	movs	r3, #10
 80034ba:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	f023 0310 	bic.w	r3, r3, #16
 80034c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b58      	cmp	r3, #88	@ 0x58
 80034ca:	d103      	bne.n	80034d4 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80034cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b69      	cmp	r3, #105	@ 0x69
 80034da:	d007      	beq.n	80034ec <_vsnprintf+0x49c>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b64      	cmp	r3, #100	@ 0x64
 80034e2:	d003      	beq.n	80034ec <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80034e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e6:	f023 030c 	bic.w	r3, r3, #12
 80034ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80034ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80034f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b69      	cmp	r3, #105	@ 0x69
 8003504:	d004      	beq.n	8003510 <_vsnprintf+0x4c0>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	f040 8098 	bne.w	8003640 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003516:	2b00      	cmp	r3, #0
 8003518:	d031      	beq.n	800357e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800351a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800351e:	3307      	adds	r3, #7
 8003520:	f023 0307 	bic.w	r3, r3, #7
 8003524:	f103 0208 	add.w	r2, r3, #8
 8003528:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da06      	bge.n	800354a <_vsnprintf+0x4fa>
 800353c:	2100      	movs	r1, #0
 800353e:	f1d2 0800 	rsbs	r8, r2, #0
 8003542:	eb61 0903 	sbc.w	r9, r1, r3
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	69f9      	ldr	r1, [r7, #28]
 800354c:	0fc9      	lsrs	r1, r1, #31
 800354e:	b2c9      	uxtb	r1, r1
 8003550:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003552:	2400      	movs	r4, #0
 8003554:	4682      	mov	sl, r0
 8003556:	46a3      	mov	fp, r4
 8003558:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800355a:	9008      	str	r0, [sp, #32]
 800355c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800355e:	9007      	str	r0, [sp, #28]
 8003560:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003562:	9006      	str	r0, [sp, #24]
 8003564:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003568:	9102      	str	r1, [sp, #8]
 800356a:	e9cd 2300 	strd	r2, r3, [sp]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003572:	6939      	ldr	r1, [r7, #16]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f7ff f81b 	bl	80025b0 <_ntoa_long_long>
 800357a:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800357c:	e0da      	b.n	8003734 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800357e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8003588:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	bfb8      	it	lt
 800359c:	425b      	neglt	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	0fdb      	lsrs	r3, r3, #31
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035a8:	9205      	str	r2, [sp, #20]
 80035aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ac:	9204      	str	r2, [sp, #16]
 80035ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035b0:	9203      	str	r2, [sp, #12]
 80035b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035b4:	9202      	str	r2, [sp, #8]
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	9100      	str	r1, [sp, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035be:	6939      	ldr	r1, [r7, #16]
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f7fe ff8f 	bl	80024e4 <_ntoa_long>
 80035c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80035c8:	e0b4      	b.n	8003734 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80035ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <_vsnprintf+0x594>
 80035d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035d8:	1d1a      	adds	r2, r3, #4
 80035da:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <_vsnprintf+0x5ba>
 80035e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <_vsnprintf+0x5ae>
 80035ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	e005      	b.n	800360a <_vsnprintf+0x5ba>
 80035fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	425b      	neglt	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	0fdb      	lsrs	r3, r3, #31
 800361a:	b2db      	uxtb	r3, r3
 800361c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800361e:	9205      	str	r2, [sp, #20]
 8003620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003622:	9204      	str	r2, [sp, #16]
 8003624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003626:	9203      	str	r2, [sp, #12]
 8003628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	9100      	str	r1, [sp, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7fe ff54 	bl	80024e4 <_ntoa_long>
 800363c:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800363e:	e079      	b.n	8003734 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d022      	beq.n	8003690 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800364a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800364e:	3307      	adds	r3, #7
 8003650:	f023 0307 	bic.w	r3, r3, #7
 8003654:	f103 0208 	add.w	r2, r3, #8
 8003658:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003662:	2000      	movs	r0, #0
 8003664:	460d      	mov	r5, r1
 8003666:	4606      	mov	r6, r0
 8003668:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800366a:	9108      	str	r1, [sp, #32]
 800366c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800366e:	9107      	str	r1, [sp, #28]
 8003670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003672:	9106      	str	r1, [sp, #24]
 8003674:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003678:	2100      	movs	r1, #0
 800367a:	9102      	str	r1, [sp, #8]
 800367c:	e9cd 2300 	strd	r2, r3, [sp]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7fe ff92 	bl	80025b0 <_ntoa_long_long>
 800368c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800368e:	e051      	b.n	8003734 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800369a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80036a8:	9205      	str	r2, [sp, #20]
 80036aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ac:	9204      	str	r2, [sp, #16]
 80036ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036b0:	9203      	str	r2, [sp, #12]
 80036b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b4:	9202      	str	r2, [sp, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	9201      	str	r2, [sp, #4]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7fe ff0e 	bl	80024e4 <_ntoa_long>
 80036c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80036ca:	e033      	b.n	8003734 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80036cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <_vsnprintf+0x696>
 80036d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e012      	b.n	800370c <_vsnprintf+0x6bc>
 80036e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <_vsnprintf+0x6b0>
 80036f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	e005      	b.n	800370c <_vsnprintf+0x6bc>
 8003700:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003704:	1d1a      	adds	r2, r3, #4
 8003706:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800370e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003710:	9305      	str	r3, [sp, #20]
 8003712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003714:	9304      	str	r3, [sp, #16]
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	2300      	movs	r3, #0
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800372a:	6939      	ldr	r1, [r7, #16]
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f7fe fed9 	bl	80024e4 <_ntoa_long>
 8003732:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
        break;
 800373a:	e166      	b.n	8003a0a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b46      	cmp	r3, #70	@ 0x46
 8003742:	d103      	bne.n	800374c <_vsnprintf+0x6fc>
 8003744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003746:	f043 0320 	orr.w	r3, r3, #32
 800374a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800374c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003750:	3307      	adds	r3, #7
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	f103 0208 	add.w	r2, r3, #8
 800375a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800375e:	ed93 7b00 	vldr	d7, [r3]
 8003762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	eeb0 0a47 	vmov.f32	s0, s14
 8003772:	eef0 0a67 	vmov.f32	s1, s15
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800377a:	6939      	ldr	r1, [r7, #16]
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f7fe ff87 	bl	8002690 <_ftoa>
 8003782:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3301      	adds	r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
        break;
 800378a:	e13e      	b.n	8003a0a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b67      	cmp	r3, #103	@ 0x67
 8003792:	d003      	beq.n	800379c <_vsnprintf+0x74c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b47      	cmp	r3, #71	@ 0x47
 800379a:	d103      	bne.n	80037a4 <_vsnprintf+0x754>
 800379c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800379e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b45      	cmp	r3, #69	@ 0x45
 80037aa:	d003      	beq.n	80037b4 <_vsnprintf+0x764>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b47      	cmp	r3, #71	@ 0x47
 80037b2:	d103      	bne.n	80037bc <_vsnprintf+0x76c>
 80037b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80037bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c0:	3307      	adds	r3, #7
 80037c2:	f023 0307 	bic.w	r3, r3, #7
 80037c6:	f103 0208 	add.w	r2, r3, #8
 80037ca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037ce:	ed93 7b00 	vldr	d7, [r3]
 80037d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	eeb0 0a47 	vmov.f32	s0, s14
 80037e2:	eef0 0a67 	vmov.f32	s1, s15
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ea:	6939      	ldr	r1, [r7, #16]
 80037ec:	6978      	ldr	r0, [r7, #20]
 80037ee:	f7ff f9a7 	bl	8002b40 <_etoa>
 80037f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
        break;
 80037fa:	e106      	b.n	8003a0a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <_vsnprintf+0x7d8>
          while (l++ < width) {
 800380a:	e007      	b.n	800381c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 800380c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800380e:	1c53      	adds	r3, r2, #1
 8003810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003812:	697c      	ldr	r4, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	2020      	movs	r0, #32
 800381a:	47a0      	blx	r4
          while (l++ < width) {
 800381c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	647a      	str	r2, [r7, #68]	@ 0x44
 8003822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003824:	429a      	cmp	r2, r3
 8003826:	d8f1      	bhi.n	800380c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b2d8      	uxtb	r0, r3
 8003836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003838:	1c53      	adds	r3, r2, #1
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800383c:	697c      	ldr	r4, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6939      	ldr	r1, [r7, #16]
 8003842:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00e      	beq.n	800386c <_vsnprintf+0x81c>
          while (l++ < width) {
 800384e:	e007      	b.n	8003860 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003852:	1c53      	adds	r3, r2, #1
 8003854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003856:	697c      	ldr	r4, [r7, #20]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	2020      	movs	r0, #32
 800385e:	47a0      	blx	r4
          while (l++ < width) {
 8003860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	647a      	str	r2, [r7, #68]	@ 0x44
 8003866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003868:	429a      	cmp	r2, r3
 800386a:	d8f1      	bhi.n	8003850 <_vsnprintf+0x800>
          }
        }
        format++;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
        break;
 8003872:	e0ca      	b.n	8003a0a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <_vsnprintf+0x83c>
 8003888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388a:	e001      	b.n	8003890 <_vsnprintf+0x840>
 800388c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003890:	4619      	mov	r1, r3
 8003892:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003894:	f7fe fca2 	bl	80021dc <_strnlen_s>
 8003898:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800389a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800389c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80038a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bf28      	it	cs
 80038ac:	4613      	movcs	r3, r2
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80038b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11a      	bne.n	80038f0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80038ba:	e007      	b.n	80038cc <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80038bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038be:	1c53      	adds	r3, r2, #1
 80038c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c2:	697c      	ldr	r4, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6939      	ldr	r1, [r7, #16]
 80038c8:	2020      	movs	r0, #32
 80038ca:	47a0      	blx	r4
          while (l++ < width) {
 80038cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d8f1      	bhi.n	80038bc <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80038d8:	e00a      	b.n	80038f0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	643a      	str	r2, [r7, #64]	@ 0x40
 80038e0:	7818      	ldrb	r0, [r3, #0]
 80038e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e4:	1c53      	adds	r3, r2, #1
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e8:	697c      	ldr	r4, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6939      	ldr	r1, [r7, #16]
 80038ee:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80038f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <_vsnprintf+0x8bc>
 80038f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0eb      	beq.n	80038da <_vsnprintf+0x88a>
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	657a      	str	r2, [r7, #84]	@ 0x54
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e6      	bne.n	80038da <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800390c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003916:	e007      	b.n	8003928 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391a:	1c53      	adds	r3, r2, #1
 800391c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800391e:	697c      	ldr	r4, [r7, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	2020      	movs	r0, #32
 8003926:	47a0      	blx	r4
          while (l++ < width) {
 8003928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800392e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003930:	429a      	cmp	r2, r3
 8003932:	d8f1      	bhi.n	8003918 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3301      	adds	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
        break;
 800393a:	e066      	b.n	8003a0a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800393c:	2308      	movs	r3, #8
 800393e:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003942:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8003946:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003948:	2300      	movs	r3, #0
 800394a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 800394e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003952:	2b00      	cmp	r3, #0
 8003954:	d023      	beq.n	800399e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800395a:	1d1a      	adds	r2, r3, #4
 800395c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	603a      	str	r2, [r7, #0]
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396c:	9308      	str	r3, [sp, #32]
 800396e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003970:	9307      	str	r3, [sp, #28]
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	9306      	str	r3, [sp, #24]
 8003976:	f04f 0210 	mov.w	r2, #16
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003982:	2300      	movs	r3, #0
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	e9d7 3400 	ldrd	r3, r4, [r7]
 800398a:	e9cd 3400 	strd	r3, r4, [sp]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7fe fe0b 	bl	80025b0 <_ntoa_long_long>
 800399a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800399c:	e018      	b.n	80039d0 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	2310      	movs	r3, #16
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	9200      	str	r2, [sp, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	6978      	ldr	r0, [r7, #20]
 80039ca:	f7fe fd8b 	bl	80024e4 <_ntoa_long>
 80039ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
        break;
 80039d6:	e018      	b.n	8003a0a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80039d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039da:	1c53      	adds	r3, r2, #1
 80039dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039de:	697c      	ldr	r4, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	2025      	movs	r0, #37	@ 0x25
 80039e6:	47a0      	blx	r4
        format++;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
        break;
 80039ee:	e00c      	b.n	8003a0a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	7818      	ldrb	r0, [r3, #0]
 80039f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f6:	1c53      	adds	r3, r2, #1
 80039f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039fa:	697c      	ldr	r4, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6939      	ldr	r1, [r7, #16]
 8003a00:	47a0      	blx	r4
        format++;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
        break;
 8003a08:	bf00      	nop
  while (*format)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f ab30 	bne.w	8003074 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <_vsnprintf+0x9d2>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e5a      	subs	r2, r3, #1
 8003a20:	e000      	b.n	8003a24 <_vsnprintf+0x9d4>
 8003a22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a24:	697c      	ldr	r4, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6939      	ldr	r1, [r7, #16]
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3764      	adds	r7, #100	@ 0x64
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop

08003a3c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003a3c:	b40f      	push	{r0, r1, r2, r3}
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003a4a:	1d39      	adds	r1, r7, #4
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a56:	4806      	ldr	r0, [pc, #24]	@ (8003a70 <printf_+0x34>)
 8003a58:	f7ff fafa 	bl	8003050 <_vsnprintf>
 8003a5c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a6a:	b004      	add	sp, #16
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	080021b7 	.word	0x080021b7

08003a74 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8003a74:	b40e      	push	{r1, r2, r3}
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4805      	ldr	r0, [pc, #20]	@ (8003aa8 <sprintf_+0x34>)
 8003a92:	f7ff fadd 	bl	8003050 <_vsnprintf>
 8003a96:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa4:	b003      	add	sp, #12
 8003aa6:	4770      	bx	lr
 8003aa8:	0800216d 	.word	0x0800216d

08003aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	4a10      	ldr	r2, [pc, #64]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad6:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <HAL_MspInit+0x4c>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	f06f 0001 	mvn.w	r0, #1
 8003aea:	f000 fb21 	bl	8004130 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	@ 0x30
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_InitTick+0xc8>)
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_InitTick+0xc8>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b16:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc4 <HAL_InitTick+0xc8>)
 8003b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b22:	f107 020c 	add.w	r2, r7, #12
 8003b26:	f107 0310 	add.w	r3, r7, #16
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 f92d 	bl	8005d8c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b32:	f002 f915 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8003b36:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	4a23      	ldr	r2, [pc, #140]	@ (8003bc8 <HAL_InitTick+0xcc>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	3b01      	subs	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003b46:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b48:	4a21      	ldr	r2, [pc, #132]	@ (8003bd0 <HAL_InitTick+0xd4>)
 8003b4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b52:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003b54:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b66:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8003b6c:	4817      	ldr	r0, [pc, #92]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b6e:	f002 fe5b 	bl	8006828 <HAL_TIM_Base_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003b80:	4812      	ldr	r0, [pc, #72]	@ (8003bcc <HAL_InitTick+0xd0>)
 8003b82:	f002 feb3 	bl	80068ec <HAL_TIM_Base_Start_IT>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003b94:	201a      	movs	r0, #26
 8003b96:	f000 fae7 	bl	8004168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d808      	bhi.n	8003bb2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	201a      	movs	r0, #26
 8003ba6:	f000 fac3 	bl	8004130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <HAL_InitTick+0xd8>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e002      	b.n	8003bb8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3730      	adds	r7, #48	@ 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	20000674 	.word	0x20000674
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	20000008 	.word	0x20000008

08003bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <NMI_Handler+0x4>

08003be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <HardFault_Handler+0x4>

08003be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <MemManage_Handler+0x4>

08003bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	bf00      	nop
 8003bfe:	e7fd      	b.n	8003bfc <UsageFault_Handler+0x4>

08003c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c14:	4802      	ldr	r0, [pc, #8]	@ (8003c20 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003c16:	f002 fed9 	bl	80069cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000674 	.word	0x20000674

08003c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return 1;
 8003c28:	2301      	movs	r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_kill>:

int _kill(int pid, int sig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c3e:	f007 fe13 	bl	800b868 <__errno>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2216      	movs	r2, #22
 8003c46:	601a      	str	r2, [r3, #0]
  return -1;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_exit>:

void _exit (int status)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ffe7 	bl	8003c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <_exit+0x12>

08003c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	e00a      	b.n	8003c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c7c:	f3af 8000 	nop.w
 8003c80:	4601      	mov	r1, r0
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	60ba      	str	r2, [r7, #8]
 8003c88:	b2ca      	uxtb	r2, r1
 8003c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dbf0      	blt.n	8003c7c <_read+0x12>
  }

  return len;
 8003c9a:	687b      	ldr	r3, [r7, #4]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e009      	b.n	8003cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	60ba      	str	r2, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dbf1      	blt.n	8003cb6 <_write+0x12>
  }
  return len;
 8003cd2:	687b      	ldr	r3, [r7, #4]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_close>:

int _close(int file)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d04:	605a      	str	r2, [r3, #4]
  return 0;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_isatty>:

int _isatty(int file)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d1c:	2301      	movs	r3, #1
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d4c:	4a14      	ldr	r2, [pc, #80]	@ (8003da0 <_sbrk+0x5c>)
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <_sbrk+0x60>)
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <_sbrk+0x64>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d60:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <_sbrk+0x64>)
 8003d62:	4a12      	ldr	r2, [pc, #72]	@ (8003dac <_sbrk+0x68>)
 8003d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d66:	4b10      	ldr	r3, [pc, #64]	@ (8003da8 <_sbrk+0x64>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d207      	bcs.n	8003d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d74:	f007 fd78 	bl	800b868 <__errno>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d82:	e009      	b.n	8003d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d84:	4b08      	ldr	r3, [pc, #32]	@ (8003da8 <_sbrk+0x64>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <_sbrk+0x64>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	4a05      	ldr	r2, [pc, #20]	@ (8003da8 <_sbrk+0x64>)
 8003d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20018000 	.word	0x20018000
 8003da4:	00000400 	.word	0x00000400
 8003da8:	200006c0 	.word	0x200006c0
 8003dac:	200021a8 	.word	0x200021a8

08003db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <SystemInit+0x20>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dba:	4a05      	ldr	r2, [pc, #20]	@ (8003dd0 <SystemInit+0x20>)
 8003dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003dda:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <MX_USART2_UART_Init+0x5c>)
 8003ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dde:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003de6:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dec:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003df2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e04:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e16:	4805      	ldr	r0, [pc, #20]	@ (8003e2c <MX_USART2_UART_Init+0x58>)
 8003e18:	f002 ffcc 	bl	8006db4 <HAL_UART_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e22:	f7fe f99d 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200006c4 	.word	0x200006c4
 8003e30:	40004400 	.word	0x40004400

08003e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ac      	sub	sp, #176	@ 0xb0
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	2288      	movs	r2, #136	@ 0x88
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f007 fcb4 	bl	800b7c2 <memset>
  if(uartHandle->Instance==USART2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ee4 <HAL_UART_MspInit+0xb0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d13b      	bne.n	8003edc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e64:	2302      	movs	r3, #2
 8003e66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 f81d 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e7c:	f7fe f970 	bl	8002160 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e98:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ea4:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <HAL_UART_MspInit+0xb4>)
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec8:	2307      	movs	r3, #7
 8003eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ed8:	f000 f954 	bl	8004184 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003edc:	bf00      	nop
 8003ede:	37b0      	adds	r7, #176	@ 0xb0
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40004400 	.word	0x40004400
 8003ee8:	40021000 	.word	0x40021000

08003eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ef0:	f7ff ff5e 	bl	8003db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef4:	480c      	ldr	r0, [pc, #48]	@ (8003f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ef6:	490d      	ldr	r1, [pc, #52]	@ (8003f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f30 <LoopForever+0xe>)
  movs r3, #0
 8003efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003efc:	e002      	b.n	8003f04 <LoopCopyDataInit>

08003efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f02:	3304      	adds	r3, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f08:	d3f9      	bcc.n	8003efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f38 <LoopForever+0x16>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f10:	e001      	b.n	8003f16 <LoopFillZerobss>

08003f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f14:	3204      	adds	r2, #4

08003f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f18:	d3fb      	bcc.n	8003f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f1a:	f007 fcab 	bl	800b874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f1e:	f7fe f8a7 	bl	8002070 <main>

08003f22 <LoopForever>:

LoopForever:
    b LoopForever
 8003f22:	e7fe      	b.n	8003f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003f30:	0800dd80 	.word	0x0800dd80
  ldr r2, =_sbss
 8003f34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003f38:	200021a4 	.word	0x200021a4

08003f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <ADC1_2_IRQHandler>
	...

08003f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <HAL_Init+0x3c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f7c <HAL_Init+0x3c>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f56:	2003      	movs	r0, #3
 8003f58:	f000 f8df 	bl	800411a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f5c:	200f      	movs	r0, #15
 8003f5e:	f7ff fdcd 	bl	8003afc <HAL_InitTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	e001      	b.n	8003f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f6e:	f7ff fd9d 	bl	8003aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f72:	79fb      	ldrb	r3, [r7, #7]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40022000 	.word	0x40022000

08003f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_IncTick+0x20>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_IncTick+0x24>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <HAL_IncTick+0x24>)
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	2000074c 	.word	0x2000074c

08003fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return uwTick;
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <HAL_GetTick+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	2000074c 	.word	0x2000074c

08003fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff2:	4a04      	ldr	r2, [pc, #16]	@ (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	60d3      	str	r3, [r2, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <__NVIC_GetPriorityGrouping+0x18>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0307 	and.w	r3, r3, #7
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db0b      	blt.n	800404e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4907      	ldr	r1, [pc, #28]	@ (800405c <__NVIC_EnableIRQ+0x38>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db0a      	blt.n	800408a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	490c      	ldr	r1, [pc, #48]	@ (80040ac <__NVIC_SetPriority+0x4c>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	440b      	add	r3, r1
 8004084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004088:	e00a      	b.n	80040a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4908      	ldr	r1, [pc, #32]	@ (80040b0 <__NVIC_SetPriority+0x50>)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3b04      	subs	r3, #4
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	440b      	add	r3, r1
 800409e:	761a      	strb	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000e100 	.word	0xe000e100
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	@ 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf28      	it	cs
 80040d2:	2304      	movcs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3304      	adds	r3, #4
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d902      	bls.n	80040e4 <NVIC_EncodePriority+0x30>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b03      	subs	r3, #3
 80040e2:	e000      	b.n	80040e6 <NVIC_EncodePriority+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43d9      	mvns	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	4313      	orrs	r3, r2
         );
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	@ 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ff4c 	bl	8003fc0 <__NVIC_SetPriorityGrouping>
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004142:	f7ff ff61 	bl	8004008 <__NVIC_GetPriorityGrouping>
 8004146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	6978      	ldr	r0, [r7, #20]
 800414e:	f7ff ffb1 	bl	80040b4 <NVIC_EncodePriority>
 8004152:	4602      	mov	r2, r0
 8004154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff80 	bl	8004060 <__NVIC_SetPriority>
}
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ff54 	bl	8004024 <__NVIC_EnableIRQ>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004192:	e17f      	b.n	8004494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8171 	beq.w	800448e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d005      	beq.n	80041c4 <HAL_GPIO_Init+0x40>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d130      	bne.n	8004226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041fa:	2201      	movs	r2, #1
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 0201 	and.w	r2, r3, #1
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b03      	cmp	r3, #3
 8004230:	d118      	bne.n	8004264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004238:	2201      	movs	r2, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	08db      	lsrs	r3, r3, #3
 800424e:	f003 0201 	and.w	r2, r3, #1
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	2b03      	cmp	r3, #3
 800426e:	d017      	beq.n	80042a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	2203      	movs	r2, #3
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d123      	bne.n	80042f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	08da      	lsrs	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	08da      	lsrs	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3208      	adds	r2, #8
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	2203      	movs	r2, #3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80ac 	beq.w	800448e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004336:	4b5f      	ldr	r3, [pc, #380]	@ (80044b4 <HAL_GPIO_Init+0x330>)
 8004338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433a:	4a5e      	ldr	r2, [pc, #376]	@ (80044b4 <HAL_GPIO_Init+0x330>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6613      	str	r3, [r2, #96]	@ 0x60
 8004342:	4b5c      	ldr	r3, [pc, #368]	@ (80044b4 <HAL_GPIO_Init+0x330>)
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800434e:	4a5a      	ldr	r2, [pc, #360]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	3302      	adds	r3, #2
 8004356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	220f      	movs	r2, #15
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004378:	d025      	beq.n	80043c6 <HAL_GPIO_Init+0x242>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a4f      	ldr	r2, [pc, #316]	@ (80044bc <HAL_GPIO_Init+0x338>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <HAL_GPIO_Init+0x23e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4e      	ldr	r2, [pc, #312]	@ (80044c0 <HAL_GPIO_Init+0x33c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d019      	beq.n	80043be <HAL_GPIO_Init+0x23a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4d      	ldr	r2, [pc, #308]	@ (80044c4 <HAL_GPIO_Init+0x340>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_GPIO_Init+0x236>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4c      	ldr	r2, [pc, #304]	@ (80044c8 <HAL_GPIO_Init+0x344>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00d      	beq.n	80043b6 <HAL_GPIO_Init+0x232>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4b      	ldr	r2, [pc, #300]	@ (80044cc <HAL_GPIO_Init+0x348>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x22e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4a      	ldr	r2, [pc, #296]	@ (80044d0 <HAL_GPIO_Init+0x34c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_GPIO_Init+0x22a>
 80043aa:	2306      	movs	r3, #6
 80043ac:	e00c      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043ae:	2307      	movs	r3, #7
 80043b0:	e00a      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043b2:	2305      	movs	r3, #5
 80043b4:	e008      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e006      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e004      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043be:	2302      	movs	r3, #2
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_Init+0x244>
 80043c6:	2300      	movs	r3, #0
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	f002 0203 	and.w	r2, r2, #3
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4093      	lsls	r3, r2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043d8:	4937      	ldr	r1, [pc, #220]	@ (80044b8 <HAL_GPIO_Init+0x334>)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043e6:	4b3b      	ldr	r3, [pc, #236]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800440a:	4a32      	ldr	r2, [pc, #200]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004410:	4b30      	ldr	r3, [pc, #192]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004434:	4a27      	ldr	r2, [pc, #156]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800443a:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800445e:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004488:	4a12      	ldr	r2, [pc, #72]	@ (80044d4 <HAL_GPIO_Init+0x350>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f47f ae78 	bne.w	8004194 <HAL_GPIO_Init+0x10>
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40010000 	.word	0x40010000
 80044bc:	48000400 	.word	0x48000400
 80044c0:	48000800 	.word	0x48000800
 80044c4:	48000c00 	.word	0x48000c00
 80044c8:	48001000 	.word	0x48001000
 80044cc:	48001400 	.word	0x48001400
 80044d0:	48001800 	.word	0x48001800
 80044d4:	40010400 	.word	0x40010400

080044d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
 80044e4:	4613      	mov	r3, r2
 80044e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044e8:	787b      	ldrb	r3, [r7, #1]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4013      	ands	r3, r2
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	43d9      	mvns	r1, r3
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	400b      	ands	r3, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	619a      	str	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e08d      	b.n	800466a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd fd26 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800458c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800459c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	e006      	b.n	80045c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d108      	bne.n	80045de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	e007      	b.n	80045ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 80f9 	bne.w	800488e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x34>
 80046a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0ed      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Mem_Write+0x4e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0e6      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ca:	f7ff fc6d 	bl	8003fa8 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2319      	movs	r3, #25
 80046d6:	2201      	movs	r2, #1
 80046d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fac3 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0d1      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2221      	movs	r2, #33	@ 0x21
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	@ 0x40
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800470c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004714:	88f8      	ldrh	r0, [r7, #6]
 8004716:	893a      	ldrh	r2, [r7, #8]
 8004718:	8979      	ldrh	r1, [r7, #10]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4603      	mov	r3, r0
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9d3 	bl	8004ad0 <I2C_RequestMemoryWrite>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0a9      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	@ 0xff
 8004744:	d90e      	bls.n	8004764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	@ 0xff
 800474a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004750:	b2da      	uxtb	r2, r3
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fc47 	bl	8004ff0 <I2C_TransferConfig>
 8004762:	e00f      	b.n	8004784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fc36 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fac6 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e07b      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d034      	beq.n	800483c <HAL_I2C_Mem_Write+0x1c8>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d130      	bne.n	800483c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	@ 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fa3f 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e04d      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2bff      	cmp	r3, #255	@ 0xff
 80047fc:	d90e      	bls.n	800481c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	22ff      	movs	r2, #255	@ 0xff
 8004802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	2300      	movs	r3, #0
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fbeb 	bl	8004ff0 <I2C_TransferConfig>
 800481a:	e00f      	b.n	800483c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	8979      	ldrh	r1, [r7, #10]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fbda 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d19e      	bne.n	8004784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 faac 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e01a      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2220      	movs	r2, #32
 8004860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_I2C_Mem_Write+0x224>)
 800486e:	400b      	ands	r3, r1
 8004870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	460b      	mov	r3, r1
 80048b0:	813b      	strh	r3, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	f040 80fd 	bne.w	8004abe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_I2C_Mem_Read+0x34>
 80048ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0f1      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Mem_Read+0x4e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e0ea      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048f2:	f7ff fb59 	bl	8003fa8 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2319      	movs	r3, #25
 80048fe:	2201      	movs	r2, #1
 8004900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f9af 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0d5      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2222      	movs	r2, #34	@ 0x22
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2240      	movs	r2, #64	@ 0x40
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800493c:	88f8      	ldrh	r0, [r7, #6]
 800493e:	893a      	ldrh	r2, [r7, #8]
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4603      	mov	r3, r0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f913 	bl	8004b78 <I2C_RequestMemoryRead>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0ad      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2bff      	cmp	r3, #255	@ 0xff
 800496c:	d90e      	bls.n	800498c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	b2da      	uxtb	r2, r3
 800497a:	8979      	ldrh	r1, [r7, #10]
 800497c:	4b52      	ldr	r3, [pc, #328]	@ (8004ac8 <HAL_I2C_Mem_Read+0x22c>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fb33 	bl	8004ff0 <I2C_TransferConfig>
 800498a:	e00f      	b.n	80049ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499a:	b2da      	uxtb	r2, r3
 800499c:	8979      	ldrh	r1, [r7, #10]
 800499e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac8 <HAL_I2C_Mem_Read+0x22c>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fb22 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	2200      	movs	r2, #0
 80049b4:	2104      	movs	r1, #4
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f956 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e07c      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d034      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d130      	bne.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	@ 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f927 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e04d      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2bff      	cmp	r3, #255	@ 0xff
 8004a2c:	d90e      	bls.n	8004a4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	8979      	ldrh	r1, [r7, #10]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fad3 	bl	8004ff0 <I2C_TransferConfig>
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	8979      	ldrh	r1, [r7, #10]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fac2 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d19a      	bne.n	80049ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f994 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01a      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_I2C_Mem_Read+0x230>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	80002400 	.word	0x80002400
 8004acc:	fe00e800 	.word	0xfe00e800

08004ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <I2C_RequestMemoryWrite+0xa4>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa79 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f909 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02c      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b22:	e015      	b.n	8004b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8ef 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e012      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f884 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80002000 	.word	0x80002000

08004b78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <I2C_RequestMemoryRead+0xa4>)
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fa26 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8b6 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e02c      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbe:	893b      	ldrh	r3, [r7, #8]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc8:	e015      	b.n	8004bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f89c 	bl	8004d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e012      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2140      	movs	r1, #64	@ 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f831 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	80002000 	.word	0x80002000

08004c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d007      	beq.n	8004c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	619a      	str	r2, [r3, #24]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c78:	e03b      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8d6 	bl	8004e30 <I2C_IsErrorOccurred>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c94:	d02d      	beq.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7ff f987 	bl	8003fa8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d122      	bne.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d113      	bne.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00f      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d0b4      	beq.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d26:	e033      	b.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f87f 	bl	8004e30 <I2C_IsErrorOccurred>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e031      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d42:	d025      	beq.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7ff f930 	bl	8003fa8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11a      	bne.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d013      	beq.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e007      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d1c4      	bne.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db4:	e02f      	b.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f838 	bl	8004e30 <I2C_IsErrorOccurred>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e02d      	b.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7ff f8ed 	bl	8003fa8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11a      	bne.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d013      	beq.n	8004e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e007      	b.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d1c8      	bne.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	@ 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d068      	beq.n	8004f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e64:	e049      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e6c:	d045      	beq.n	8004efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7ff f89b 	bl	8003fa8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_IsErrorOccurred+0x54>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13a      	bne.n	8004efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea6:	d121      	bne.n	8004eec <I2C_IsErrorOccurred+0xbc>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eae:	d01d      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d01a      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec6:	f7ff f86f 	bl	8003fa8 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ecc:	e00e      	b.n	8004eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ece:	f7ff f86b 	bl	8003fa8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b19      	cmp	r3, #25
 8004eda:	d907      	bls.n	8004eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004eea:	e006      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d1e9      	bne.n	8004ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d003      	beq.n	8004f10 <I2C_IsErrorOccurred+0xe0>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0aa      	beq.n	8004e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fe3b 	bl	8004c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <I2C_IsErrorOccurred+0x1bc>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	@ 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	4613      	mov	r3, r2
 8005000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4313      	orrs	r3, r2
 800501a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800501e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	0d5b      	lsrs	r3, r3, #21
 800502a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <I2C_TransferConfig+0x60>)
 8005030:	430b      	orrs	r3, r1
 8005032:	43db      	mvns	r3, r3
 8005034:	ea02 0103 	and.w	r1, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	03ff63ff 	.word	0x03ff63ff

08005054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	d138      	bne.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005074:	2302      	movs	r3, #2
 8005076:	e032      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	@ 0x24
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d139      	bne.n	8005174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800510a:	2302      	movs	r3, #2
 800510c:	e033      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	@ 0x24
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800513c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <HAL_PWREx_GetVoltageRange+0x18>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40007000 	.word	0x40007000

080051a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ae:	d130      	bne.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051b0:	4b23      	ldr	r3, [pc, #140]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d038      	beq.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051be:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005244 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2232      	movs	r2, #50	@ 0x32
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0c9b      	lsrs	r3, r3, #18
 80051e0:	3301      	adds	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e4:	e002      	b.n	80051ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ec:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f8:	d102      	bne.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x60>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f2      	bne.n	80051e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005200:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520c:	d110      	bne.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00f      	b.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d007      	beq.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005220:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005228:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800522a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800522e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40007000 	.word	0x40007000
 8005244:	20000004 	.word	0x20000004
 8005248:	431bde83 	.word	0x431bde83

0800524c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e3ca      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525e:	4b97      	ldr	r3, [pc, #604]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	4b94      	ldr	r3, [pc, #592]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80e4 	beq.w	8005448 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_RCC_OscConfig+0x4a>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	f040 808b 	bne.w	80053a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b01      	cmp	r3, #1
 8005292:	f040 8087 	bne.w	80053a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005296:	4b89      	ldr	r3, [pc, #548]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_RCC_OscConfig+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e3a2      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	4b82      	ldr	r3, [pc, #520]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_RCC_OscConfig+0x7c>
 80052be:	4b7f      	ldr	r3, [pc, #508]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c6:	e005      	b.n	80052d4 <HAL_RCC_OscConfig+0x88>
 80052c8:	4b7c      	ldr	r3, [pc, #496]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d223      	bcs.n	8005320 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fd87 	bl	8005df0 <RCC_SetFlashLatencyFromMSIRange>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e383      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ec:	4b73      	ldr	r3, [pc, #460]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a72      	ldr	r2, [pc, #456]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052f2:	f043 0308 	orr.w	r3, r3, #8
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4b70      	ldr	r3, [pc, #448]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	496d      	ldr	r1, [pc, #436]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800530a:	4b6c      	ldr	r3, [pc, #432]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	4968      	ldr	r1, [pc, #416]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
 800531e:	e025      	b.n	800536c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005320:	4b66      	ldr	r3, [pc, #408]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a65      	ldr	r2, [pc, #404]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b63      	ldr	r3, [pc, #396]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4960      	ldr	r1, [pc, #384]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533e:	4b5f      	ldr	r3, [pc, #380]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	495b      	ldr	r1, [pc, #364]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fd47 	bl	8005df0 <RCC_SetFlashLatencyFromMSIRange>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e343      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800536c:	f000 fc4a 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b52      	ldr	r3, [pc, #328]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	4950      	ldr	r1, [pc, #320]	@ (80054c0 <HAL_RCC_OscConfig+0x274>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
 8005388:	4a4e      	ldr	r2, [pc, #312]	@ (80054c4 <HAL_RCC_OscConfig+0x278>)
 800538a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800538c:	4b4e      	ldr	r3, [pc, #312]	@ (80054c8 <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe fbb3 	bl	8003afc <HAL_InitTick>
 8005396:	4603      	mov	r3, r0
 8005398:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d052      	beq.n	8005446 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	e327      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d032      	beq.n	8005412 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053ac:	4b43      	ldr	r3, [pc, #268]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a42      	ldr	r2, [pc, #264]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053b8:	f7fe fdf6 	bl	8003fa8 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053c0:	f7fe fdf2 	bl	8003fa8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e310      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053d2:	4b3a      	ldr	r3, [pc, #232]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a36      	ldr	r2, [pc, #216]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b34      	ldr	r3, [pc, #208]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4931      	ldr	r1, [pc, #196]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053fc:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	492c      	ldr	r1, [pc, #176]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
 8005410:	e01a      	b.n	8005448 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005412:	4b2a      	ldr	r3, [pc, #168]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a29      	ldr	r2, [pc, #164]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800541e:	f7fe fdc3 	bl	8003fa8 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005426:	f7fe fdbf 	bl	8003fa8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e2dd      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005438:	4b20      	ldr	r3, [pc, #128]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCC_OscConfig+0x1da>
 8005444:	e000      	b.n	8005448 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005446:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d074      	beq.n	800553e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d005      	beq.n	8005466 <HAL_RCC_OscConfig+0x21a>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b0c      	cmp	r3, #12
 800545e:	d10e      	bne.n	800547e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d10b      	bne.n	800547e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005466:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d064      	beq.n	800553c <HAL_RCC_OscConfig+0x2f0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d160      	bne.n	800553c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e2ba      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x24a>
 8005488:	4b0c      	ldr	r3, [pc, #48]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0b      	ldr	r2, [pc, #44]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 800548e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e026      	b.n	80054e4 <HAL_RCC_OscConfig+0x298>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800549e:	d115      	bne.n	80054cc <HAL_RCC_OscConfig+0x280>
 80054a0:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a05      	ldr	r2, [pc, #20]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80054a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4b03      	ldr	r3, [pc, #12]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a02      	ldr	r2, [pc, #8]	@ (80054bc <HAL_RCC_OscConfig+0x270>)
 80054b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e014      	b.n	80054e4 <HAL_RCC_OscConfig+0x298>
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000
 80054c0:	0800d9b8 	.word	0x0800d9b8
 80054c4:	20000004 	.word	0x20000004
 80054c8:	20000008 	.word	0x20000008
 80054cc:	4ba0      	ldr	r3, [pc, #640]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a9f      	ldr	r2, [pc, #636]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b9d      	ldr	r3, [pc, #628]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a9c      	ldr	r2, [pc, #624]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80054de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d013      	beq.n	8005514 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fe fd5c 	bl	8003fa8 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fe fd58 	bl	8003fa8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e276      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	4b92      	ldr	r3, [pc, #584]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0x2a8>
 8005512:	e014      	b.n	800553e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fd48 	bl	8003fa8 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800551c:	f7fe fd44 	bl	8003fa8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	@ 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e262      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552e:	4b88      	ldr	r3, [pc, #544]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x2d0>
 800553a:	e000      	b.n	800553e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d060      	beq.n	800560c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d005      	beq.n	800555c <HAL_RCC_OscConfig+0x310>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b0c      	cmp	r3, #12
 8005554:	d119      	bne.n	800558a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d116      	bne.n	800558a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800555c:	4b7c      	ldr	r3, [pc, #496]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_OscConfig+0x328>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e23f      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005574:	4b76      	ldr	r3, [pc, #472]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	061b      	lsls	r3, r3, #24
 8005582:	4973      	ldr	r1, [pc, #460]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005588:	e040      	b.n	800560c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d023      	beq.n	80055da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005592:	4b6f      	ldr	r3, [pc, #444]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6e      	ldr	r2, [pc, #440]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fe fd03 	bl	8003fa8 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a6:	f7fe fcff 	bl	8003fa8 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e21d      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b8:	4b65      	ldr	r3, [pc, #404]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c4:	4b62      	ldr	r3, [pc, #392]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	495f      	ldr	r1, [pc, #380]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	604b      	str	r3, [r1, #4]
 80055d8:	e018      	b.n	800560c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055da:	4b5d      	ldr	r3, [pc, #372]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a5c      	ldr	r2, [pc, #368]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80055e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fe fcdf 	bl	8003fa8 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ee:	f7fe fcdb 	bl	8003fa8 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1f9      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005600:	4b53      	ldr	r3, [pc, #332]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d03c      	beq.n	8005692 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01c      	beq.n	800565a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005620:	4b4b      	ldr	r3, [pc, #300]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005626:	4a4a      	ldr	r2, [pc, #296]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fe fcba 	bl	8003fa8 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005638:	f7fe fcb6 	bl	8003fa8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e1d4      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800564a:	4b41      	ldr	r3, [pc, #260]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ef      	beq.n	8005638 <HAL_RCC_OscConfig+0x3ec>
 8005658:	e01b      	b.n	8005692 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565a:	4b3d      	ldr	r3, [pc, #244]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005660:	4a3b      	ldr	r2, [pc, #236]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fe fc9d 	bl	8003fa8 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005672:	f7fe fc99 	bl	8003fa8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1b7      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005684:	4b32      	ldr	r3, [pc, #200]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1ef      	bne.n	8005672 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80a6 	beq.w	80057ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10d      	bne.n	80056cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	4b27      	ldr	r3, [pc, #156]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b4:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <HAL_RCC_OscConfig+0x508>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d118      	bne.n	800570a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_RCC_OscConfig+0x508>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005754 <HAL_RCC_OscConfig+0x508>)
 80056de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e4:	f7fe fc60 	bl	8003fa8 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ec:	f7fe fc5c 	bl	8003fa8 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e17a      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fe:	4b15      	ldr	r3, [pc, #84]	@ (8005754 <HAL_RCC_OscConfig+0x508>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d108      	bne.n	8005724 <HAL_RCC_OscConfig+0x4d8>
 8005712:	4b0f      	ldr	r3, [pc, #60]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005718:	4a0d      	ldr	r2, [pc, #52]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005722:	e029      	b.n	8005778 <HAL_RCC_OscConfig+0x52c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b05      	cmp	r3, #5
 800572a:	d115      	bne.n	8005758 <HAL_RCC_OscConfig+0x50c>
 800572c:	4b08      	ldr	r3, [pc, #32]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005732:	4a07      	ldr	r2, [pc, #28]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800573c:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005742:	4a03      	ldr	r2, [pc, #12]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800574c:	e014      	b.n	8005778 <HAL_RCC_OscConfig+0x52c>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
 8005754:	40007000 	.word	0x40007000
 8005758:	4b9c      	ldr	r3, [pc, #624]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	4a9b      	ldr	r2, [pc, #620]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005768:	4b98      	ldr	r3, [pc, #608]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	4a97      	ldr	r2, [pc, #604]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005770:	f023 0304 	bic.w	r3, r3, #4
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d016      	beq.n	80057ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fe fc12 	bl	8003fa8 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005786:	e00a      	b.n	800579e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fe fc0e 	bl	8003fa8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e12a      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800579e:	4b8b      	ldr	r3, [pc, #556]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ed      	beq.n	8005788 <HAL_RCC_OscConfig+0x53c>
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fe fbfb 	bl	8003fa8 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b4:	e00a      	b.n	80057cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b6:	f7fe fbf7 	bl	8003fa8 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e113      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057cc:	4b7f      	ldr	r3, [pc, #508]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ed      	bne.n	80057b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057da:	7ffb      	ldrb	r3, [r7, #31]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d105      	bne.n	80057ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e0:	4b7a      	ldr	r3, [pc, #488]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e4:	4a79      	ldr	r2, [pc, #484]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80fe 	beq.w	80059f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	f040 80d0 	bne.w	80059a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005800:	4b72      	ldr	r3, [pc, #456]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0203 	and.w	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	429a      	cmp	r2, r3
 8005812:	d130      	bne.n	8005876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	3b01      	subs	r3, #1
 8005820:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d127      	bne.n	8005876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005830:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d11f      	bne.n	8005876 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005840:	2a07      	cmp	r2, #7
 8005842:	bf14      	ite	ne
 8005844:	2201      	movne	r2, #1
 8005846:	2200      	moveq	r2, #0
 8005848:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800584a:	4293      	cmp	r3, r2
 800584c:	d113      	bne.n	8005876 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	3b01      	subs	r3, #1
 800585c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d109      	bne.n	8005876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	3b01      	subs	r3, #1
 8005870:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d06e      	beq.n	8005954 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d069      	beq.n	8005950 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800587c:	4b53      	ldr	r3, [pc, #332]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005888:	4b50      	ldr	r3, [pc, #320]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ad      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005898:	4b4c      	ldr	r3, [pc, #304]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4b      	ldr	r2, [pc, #300]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058a4:	f7fe fb80 	bl	8003fa8 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fe fb7c 	bl	8003fa8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e09a      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058be:	4b43      	ldr	r3, [pc, #268]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ca:	4b40      	ldr	r3, [pc, #256]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	4b40      	ldr	r3, [pc, #256]	@ (80059d0 <HAL_RCC_OscConfig+0x784>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058da:	3a01      	subs	r2, #1
 80058dc:	0112      	lsls	r2, r2, #4
 80058de:	4311      	orrs	r1, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058e4:	0212      	lsls	r2, r2, #8
 80058e6:	4311      	orrs	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058ec:	0852      	lsrs	r2, r2, #1
 80058ee:	3a01      	subs	r2, #1
 80058f0:	0552      	lsls	r2, r2, #21
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80058f8:	0852      	lsrs	r2, r2, #1
 80058fa:	3a01      	subs	r2, #1
 80058fc:	0652      	lsls	r2, r2, #25
 80058fe:	4311      	orrs	r1, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005904:	0912      	lsrs	r2, r2, #4
 8005906:	0452      	lsls	r2, r2, #17
 8005908:	430a      	orrs	r2, r1
 800590a:	4930      	ldr	r1, [pc, #192]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800590c:	4313      	orrs	r3, r2
 800590e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005910:	4b2e      	ldr	r3, [pc, #184]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2d      	ldr	r2, [pc, #180]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800591c:	4b2b      	ldr	r3, [pc, #172]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a2a      	ldr	r2, [pc, #168]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005928:	f7fe fb3e 	bl	8003fa8 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005930:	f7fe fb3a 	bl	8003fa8 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e058      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005942:	4b22      	ldr	r3, [pc, #136]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800594e:	e050      	b.n	80059f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e04f      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005954:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d148      	bne.n	80059f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005960:	4b1a      	ldr	r3, [pc, #104]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a19      	ldr	r2, [pc, #100]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800596a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800596c:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005978:	f7fe fb16 	bl	8003fa8 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005980:	f7fe fb12 	bl	8003fa8 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e030      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x734>
 800599e:	e028      	b.n	80059f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d023      	beq.n	80059ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <HAL_RCC_OscConfig+0x780>)
 80059ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fe faf9 	bl	8003fa8 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	e00c      	b.n	80059d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fe faf5 	bl	8003fa8 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d905      	bls.n	80059d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e013      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <HAL_RCC_OscConfig+0x7b0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1ec      	bne.n	80059ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059e0:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_RCC_OscConfig+0x7b0>)
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	4905      	ldr	r1, [pc, #20]	@ (80059fc <HAL_RCC_OscConfig+0x7b0>)
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_RCC_OscConfig+0x7b4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60cb      	str	r3, [r1, #12]
 80059ec:	e001      	b.n	80059f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000
 8005a00:	feeefffc 	.word	0xfeeefffc

08005a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0e7      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b75      	ldr	r3, [pc, #468]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d910      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b72      	ldr	r3, [pc, #456]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 0207 	bic.w	r2, r3, #7
 8005a2e:	4970      	ldr	r1, [pc, #448]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0cf      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b66      	ldr	r3, [pc, #408]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d908      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b63      	ldr	r3, [pc, #396]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4960      	ldr	r1, [pc, #384]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04c      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d107      	bne.n	8005a9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d121      	bne.n	8005ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0a6      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa2:	4b54      	ldr	r3, [pc, #336]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d115      	bne.n	8005ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e09a      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005aba:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e08e      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aca:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e086      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ada:	4b46      	ldr	r3, [pc, #280]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 0203 	bic.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4943      	ldr	r1, [pc, #268]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fe fa5c 	bl	8003fa8 <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af4:	f7fe fa58 	bl	8003fa8 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e06e      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 020c 	and.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d1eb      	bne.n	8005af4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d208      	bcs.n	8005b4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b38:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	492b      	ldr	r1, [pc, #172]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4a:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d210      	bcs.n	8005b7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b58:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f023 0207 	bic.w	r2, r3, #7
 8005b60:	4923      	ldr	r1, [pc, #140]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b68:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e036      	b.n	8005be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b86:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	4918      	ldr	r1, [pc, #96]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4910      	ldr	r1, [pc, #64]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb8:	f000 f824 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	490b      	ldr	r1, [pc, #44]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	4a09      	ldr	r2, [pc, #36]	@ (8005bfc <HAL_RCC_ClockConfig+0x1f8>)
 8005bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bd8:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <HAL_RCC_ClockConfig+0x1fc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd ff8d 	bl	8003afc <HAL_InitTick>
 8005be2:	4603      	mov	r3, r0
 8005be4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005be6:	7afb      	ldrb	r3, [r7, #11]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	0800d9b8 	.word	0x0800d9b8
 8005bfc:	20000004 	.word	0x20000004
 8005c00:	20000008 	.word	0x20000008

08005c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	@ 0x24
 8005c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c12:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b0c      	cmp	r3, #12
 8005c30:	d121      	bne.n	8005c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d11e      	bne.n	8005c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c38:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c44:	4b31      	ldr	r3, [pc, #196]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	e005      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c54:	4b2d      	ldr	r3, [pc, #180]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c60:	4a2b      	ldr	r2, [pc, #172]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c7c:	4b25      	ldr	r3, [pc, #148]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e004      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c88:	4b23      	ldr	r3, [pc, #140]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d134      	bne.n	8005cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c92:	4b1e      	ldr	r3, [pc, #120]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d003      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0xa6>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d003      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005caa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cac:	617b      	str	r3, [r7, #20]
      break;
 8005cae:	e005      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cb0:	4b19      	ldr	r3, [pc, #100]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cb2:	617b      	str	r3, [r7, #20]
      break;
 8005cb4:	e002      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	617b      	str	r3, [r7, #20]
      break;
 8005cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cbc:	4b13      	ldr	r3, [pc, #76]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cca:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	fb03 f202 	mul.w	r2, r3, r2
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	0e5b      	lsrs	r3, r3, #25
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	3301      	adds	r3, #1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	0800d9d0 	.word	0x0800d9d0
 8005d14:	00f42400 	.word	0x00f42400
 8005d18:	007a1200 	.word	0x007a1200

08005d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d20:	4b03      	ldr	r3, [pc, #12]	@ (8005d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d22:	681b      	ldr	r3, [r3, #0]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000004 	.word	0x20000004

08005d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d38:	f7ff fff0 	bl	8005d1c <HAL_RCC_GetHCLKFreq>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	4904      	ldr	r1, [pc, #16]	@ (8005d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d4a:	5ccb      	ldrb	r3, [r1, r3]
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	0800d9c8 	.word	0x0800d9c8

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d64:	f7ff ffda 	bl	8005d1c <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0adb      	lsrs	r3, r3, #11
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4904      	ldr	r1, [pc, #16]	@ (8005d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	f003 031f 	and.w	r3, r3, #31
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	0800d9c8 	.word	0x0800d9c8

08005d8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	220f      	movs	r2, #15
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d9c:	4b12      	ldr	r3, [pc, #72]	@ (8005de8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0203 	and.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005da8:	4b0f      	ldr	r3, [pc, #60]	@ (8005de8 <HAL_RCC_GetClockConfig+0x5c>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <HAL_RCC_GetClockConfig+0x5c>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005dce:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <HAL_RCC_GetClockConfig+0x60>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0207 	and.w	r2, r3, #7
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40022000 	.word	0x40022000

08005df0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e08:	f7ff f9bc 	bl	8005184 <HAL_PWREx_GetVoltageRange>
 8005e0c:	6178      	str	r0, [r7, #20]
 8005e0e:	e014      	b.n	8005e3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e10:	4b25      	ldr	r3, [pc, #148]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e28:	f7ff f9ac 	bl	8005184 <HAL_PWREx_GetVoltageRange>
 8005e2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e40:	d10b      	bne.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b80      	cmp	r3, #128	@ 0x80
 8005e46:	d919      	bls.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e4c:	d902      	bls.n	8005e54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e4e:	2302      	movs	r3, #2
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e013      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e54:	2301      	movs	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	e010      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b80      	cmp	r3, #128	@ 0x80
 8005e5e:	d902      	bls.n	8005e66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e60:	2303      	movs	r3, #3
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e00a      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b80      	cmp	r3, #128	@ 0x80
 8005e6a:	d102      	bne.n	8005e72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	e004      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b70      	cmp	r3, #112	@ 0x70
 8005e76:	d101      	bne.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e78:	2301      	movs	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 0207 	bic.w	r2, r3, #7
 8005e84:	4909      	ldr	r1, [pc, #36]	@ (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d001      	beq.n	8005e9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40022000 	.word	0x40022000

08005eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005eb8:	2300      	movs	r3, #0
 8005eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d041      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ed4:	d02a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ed6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005eda:	d824      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005edc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ee0:	d008      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ee2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ee6:	d81e      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef0:	d010      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ef2:	e018      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ef4:	4b86      	ldr	r3, [pc, #536]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	4a85      	ldr	r2, [pc, #532]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f00:	e015      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fabb 	bl	8006484 <RCCEx_PLLSAI1_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f12:	e00c      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3320      	adds	r3, #32
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fba6 	bl	800666c <RCCEx_PLLSAI2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f24:	e003      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	74fb      	strb	r3, [r7, #19]
      break;
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f34:	4b76      	ldr	r3, [pc, #472]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f42:	4973      	ldr	r1, [pc, #460]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f4a:	e001      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d041      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f64:	d02a      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005f66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f6a:	d824      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f70:	d008      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f76:	d81e      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f80:	d010      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f82:	e018      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f84:	4b62      	ldr	r3, [pc, #392]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a61      	ldr	r2, [pc, #388]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f90:	e015      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fa73 	bl	8006484 <RCCEx_PLLSAI1_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fa2:	e00c      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3320      	adds	r3, #32
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fb5e 	bl	800666c <RCCEx_PLLSAI2_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8005fba:	e000      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fbe:	7cfb      	ldrb	r3, [r7, #19]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fc4:	4b52      	ldr	r3, [pc, #328]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fd2:	494f      	ldr	r1, [pc, #316]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005fda:	e001      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a0 	beq.w	800612e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ff2:	4b47      	ldr	r3, [pc, #284]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006008:	4b41      	ldr	r3, [pc, #260]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600c:	4a40      	ldr	r2, [pc, #256]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006012:	6593      	str	r3, [r2, #88]	@ 0x58
 8006014:	4b3e      	ldr	r3, [pc, #248]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006020:	2301      	movs	r3, #1
 8006022:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006024:	4b3b      	ldr	r3, [pc, #236]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a3a      	ldr	r2, [pc, #232]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800602a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800602e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006030:	f7fd ffba 	bl	8003fa8 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006036:	e009      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006038:	f7fd ffb6 	bl	8003fa8 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d902      	bls.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	74fb      	strb	r3, [r7, #19]
        break;
 800604a:	e005      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800604c:	4b31      	ldr	r3, [pc, #196]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0ef      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006058:	7cfb      	ldrb	r3, [r7, #19]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d15c      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800605e:	4b2c      	ldr	r3, [pc, #176]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006068:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01f      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	d019      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800607c:	4b24      	ldr	r3, [pc, #144]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006088:	4b21      	ldr	r3, [pc, #132]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608e:	4a20      	ldr	r2, [pc, #128]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006098:	4b1d      	ldr	r3, [pc, #116]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609e:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a8:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fd ff75 	bl	8003fa8 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c0:	e00b      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fd ff71 	bl	8003fa8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d902      	bls.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	74fb      	strb	r3, [r7, #19]
            break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ec      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80060e8:	7cfb      	ldrb	r3, [r7, #19]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ee:	4b08      	ldr	r3, [pc, #32]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fe:	4904      	ldr	r1, [pc, #16]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006106:	e009      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	74bb      	strb	r3, [r7, #18]
 800610c:	e006      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800611c:	7c7b      	ldrb	r3, [r7, #17]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006122:	4b9e      	ldr	r3, [pc, #632]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006126:	4a9d      	ldr	r2, [pc, #628]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800612c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800613a:	4b98      	ldr	r3, [pc, #608]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006140:	f023 0203 	bic.w	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	4994      	ldr	r1, [pc, #592]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800615c:	4b8f      	ldr	r3, [pc, #572]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f023 020c 	bic.w	r2, r3, #12
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616a:	498c      	ldr	r1, [pc, #560]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800617e:	4b87      	ldr	r3, [pc, #540]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	4983      	ldr	r1, [pc, #524]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061a0:	4b7e      	ldr	r3, [pc, #504]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	497b      	ldr	r1, [pc, #492]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061c2:	4b76      	ldr	r3, [pc, #472]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d0:	4972      	ldr	r1, [pc, #456]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061e4:	4b6d      	ldr	r3, [pc, #436]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	496a      	ldr	r1, [pc, #424]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006206:	4b65      	ldr	r3, [pc, #404]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006214:	4961      	ldr	r1, [pc, #388]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006228:	4b5c      	ldr	r3, [pc, #368]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006236:	4959      	ldr	r1, [pc, #356]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800624a:	4b54      	ldr	r3, [pc, #336]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006250:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006258:	4950      	ldr	r1, [pc, #320]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800626c:	4b4b      	ldr	r3, [pc, #300]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	4948      	ldr	r1, [pc, #288]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800628e:	4b43      	ldr	r3, [pc, #268]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	493f      	ldr	r1, [pc, #252]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d028      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062b0:	4b3a      	ldr	r3, [pc, #232]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062be:	4937      	ldr	r1, [pc, #220]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ce:	d106      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d0:	4b32      	ldr	r3, [pc, #200]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4a31      	ldr	r2, [pc, #196]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062da:	60d3      	str	r3, [r2, #12]
 80062dc:	e011      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062e6:	d10c      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 f8c8 	bl	8006484 <RCCEx_PLLSAI1_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80062fe:	7cfb      	ldrb	r3, [r7, #19]
 8006300:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d028      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800630e:	4b23      	ldr	r3, [pc, #140]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006314:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631c:	491f      	ldr	r1, [pc, #124]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800632c:	d106      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800632e:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4a1a      	ldr	r2, [pc, #104]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006338:	60d3      	str	r3, [r2, #12]
 800633a:	e011      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2101      	movs	r1, #1
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f899 	bl	8006484 <RCCEx_PLLSAI1_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d02b      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	4908      	ldr	r1, [pc, #32]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800638a:	d109      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800638c:	4b03      	ldr	r3, [pc, #12]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4a02      	ldr	r2, [pc, #8]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006396:	60d3      	str	r3, [r2, #12]
 8006398:	e014      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2101      	movs	r1, #1
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f867 	bl	8006484 <RCCEx_PLLSAI1_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ba:	7cfb      	ldrb	r3, [r7, #19]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02f      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063de:	4928      	ldr	r1, [pc, #160]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ee:	d10d      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	2102      	movs	r1, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f844 	bl	8006484 <RCCEx_PLLSAI1_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d014      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006406:	7cfb      	ldrb	r3, [r7, #19]
 8006408:	74bb      	strb	r3, [r7, #18]
 800640a:	e011      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3320      	adds	r3, #32
 800641a:	2102      	movs	r1, #2
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f925 	bl	800666c <RCCEx_PLLSAI2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644a:	490d      	ldr	r1, [pc, #52]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800645e:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800646e:	4904      	ldr	r1, [pc, #16]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006476:	7cbb      	ldrb	r3, [r7, #18]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000

08006484 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006492:	4b75      	ldr	r3, [pc, #468]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d018      	beq.n	80064d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800649e:	4b72      	ldr	r3, [pc, #456]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0203 	and.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d10d      	bne.n	80064ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
       ||
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064b6:	4b6c      	ldr	r3, [pc, #432]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
       ||
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d047      	beq.n	800655a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
 80064ce:	e044      	b.n	800655a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d018      	beq.n	800650a <RCCEx_PLLSAI1_Config+0x86>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d825      	bhi.n	8006528 <RCCEx_PLLSAI1_Config+0xa4>
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d002      	beq.n	80064e6 <RCCEx_PLLSAI1_Config+0x62>
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d009      	beq.n	80064f8 <RCCEx_PLLSAI1_Config+0x74>
 80064e4:	e020      	b.n	8006528 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064e6:	4b60      	ldr	r3, [pc, #384]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11d      	bne.n	800652e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f6:	e01a      	b.n	800652e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d116      	bne.n	8006532 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006508:	e013      	b.n	8006532 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800650a:	4b57      	ldr	r3, [pc, #348]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10f      	bne.n	8006536 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006516:	4b54      	ldr	r3, [pc, #336]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006526:	e006      	b.n	8006536 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e004      	b.n	8006538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006536:	bf00      	nop
    }

    if(status == HAL_OK)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800653e:	4b4a      	ldr	r3, [pc, #296]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	3b01      	subs	r3, #1
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	430b      	orrs	r3, r1
 8006554:	4944      	ldr	r1, [pc, #272]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006556:	4313      	orrs	r3, r2
 8006558:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d17d      	bne.n	800665c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006560:	4b41      	ldr	r3, [pc, #260]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a40      	ldr	r2, [pc, #256]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800656a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656c:	f7fd fd1c 	bl	8003fa8 <HAL_GetTick>
 8006570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006572:	e009      	b.n	8006588 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006574:	f7fd fd18 	bl	8003fa8 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d902      	bls.n	8006588 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	73fb      	strb	r3, [r7, #15]
        break;
 8006586:	e005      	b.n	8006594 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006588:	4b37      	ldr	r3, [pc, #220]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1ef      	bne.n	8006574 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d160      	bne.n	800665c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d111      	bne.n	80065c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065a0:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80065a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6892      	ldr	r2, [r2, #8]
 80065b0:	0211      	lsls	r1, r2, #8
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68d2      	ldr	r2, [r2, #12]
 80065b6:	0912      	lsrs	r2, r2, #4
 80065b8:	0452      	lsls	r2, r2, #17
 80065ba:	430a      	orrs	r2, r1
 80065bc:	492a      	ldr	r1, [pc, #168]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	610b      	str	r3, [r1, #16]
 80065c2:	e027      	b.n	8006614 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d112      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065ca:	4b27      	ldr	r3, [pc, #156]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80065d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6892      	ldr	r2, [r2, #8]
 80065da:	0211      	lsls	r1, r2, #8
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6912      	ldr	r2, [r2, #16]
 80065e0:	0852      	lsrs	r2, r2, #1
 80065e2:	3a01      	subs	r2, #1
 80065e4:	0552      	lsls	r2, r2, #21
 80065e6:	430a      	orrs	r2, r1
 80065e8:	491f      	ldr	r1, [pc, #124]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	610b      	str	r3, [r1, #16]
 80065ee:	e011      	b.n	8006614 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80065f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6892      	ldr	r2, [r2, #8]
 8006600:	0211      	lsls	r1, r2, #8
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6952      	ldr	r2, [r2, #20]
 8006606:	0852      	lsrs	r2, r2, #1
 8006608:	3a01      	subs	r2, #1
 800660a:	0652      	lsls	r2, r2, #25
 800660c:	430a      	orrs	r2, r1
 800660e:	4916      	ldr	r1, [pc, #88]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006614:	4b14      	ldr	r3, [pc, #80]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a13      	ldr	r2, [pc, #76]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800661e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fd fcc2 	bl	8003fa8 <HAL_GetTick>
 8006624:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006626:	e009      	b.n	800663c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006628:	f7fd fcbe 	bl	8003fa8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d902      	bls.n	800663c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	73fb      	strb	r3, [r7, #15]
          break;
 800663a:	e005      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0ef      	beq.n	8006628 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800664e:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	4904      	ldr	r1, [pc, #16]	@ (8006668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40021000 	.word	0x40021000

0800666c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800667a:	4b6a      	ldr	r3, [pc, #424]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d018      	beq.n	80066b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006686:	4b67      	ldr	r3, [pc, #412]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0203 	and.w	r2, r3, #3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d10d      	bne.n	80066b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
       ||
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800669e:	4b61      	ldr	r3, [pc, #388]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
       ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d047      	beq.n	8006742 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
 80066b6:	e044      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d018      	beq.n	80066f2 <RCCEx_PLLSAI2_Config+0x86>
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d825      	bhi.n	8006710 <RCCEx_PLLSAI2_Config+0xa4>
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d002      	beq.n	80066ce <RCCEx_PLLSAI2_Config+0x62>
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d009      	beq.n	80066e0 <RCCEx_PLLSAI2_Config+0x74>
 80066cc:	e020      	b.n	8006710 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066ce:	4b55      	ldr	r3, [pc, #340]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d11d      	bne.n	8006716 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066de:	e01a      	b.n	8006716 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066e0:	4b50      	ldr	r3, [pc, #320]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d116      	bne.n	800671a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f0:	e013      	b.n	800671a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10f      	bne.n	800671e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066fe:	4b49      	ldr	r3, [pc, #292]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800670e:	e006      	b.n	800671e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e004      	b.n	8006720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800671e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006726:	4b3f      	ldr	r3, [pc, #252]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6819      	ldr	r1, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	3b01      	subs	r3, #1
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	430b      	orrs	r3, r1
 800673c:	4939      	ldr	r1, [pc, #228]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800673e:	4313      	orrs	r3, r2
 8006740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d167      	bne.n	8006818 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006748:	4b36      	ldr	r3, [pc, #216]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a35      	ldr	r2, [pc, #212]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800674e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006754:	f7fd fc28 	bl	8003fa8 <HAL_GetTick>
 8006758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800675a:	e009      	b.n	8006770 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800675c:	f7fd fc24 	bl	8003fa8 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d902      	bls.n	8006770 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	73fb      	strb	r3, [r7, #15]
        break;
 800676e:	e005      	b.n	800677c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006770:	4b2c      	ldr	r3, [pc, #176]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ef      	bne.n	800675c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d14a      	bne.n	8006818 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d111      	bne.n	80067ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006788:	4b26      	ldr	r3, [pc, #152]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6892      	ldr	r2, [r2, #8]
 8006798:	0211      	lsls	r1, r2, #8
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68d2      	ldr	r2, [r2, #12]
 800679e:	0912      	lsrs	r2, r2, #4
 80067a0:	0452      	lsls	r2, r2, #17
 80067a2:	430a      	orrs	r2, r1
 80067a4:	491f      	ldr	r1, [pc, #124]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	614b      	str	r3, [r1, #20]
 80067aa:	e011      	b.n	80067d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80067b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6892      	ldr	r2, [r2, #8]
 80067bc:	0211      	lsls	r1, r2, #8
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6912      	ldr	r2, [r2, #16]
 80067c2:	0852      	lsrs	r2, r2, #1
 80067c4:	3a01      	subs	r2, #1
 80067c6:	0652      	lsls	r2, r2, #25
 80067c8:	430a      	orrs	r2, r1
 80067ca:	4916      	ldr	r1, [pc, #88]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067d0:	4b14      	ldr	r3, [pc, #80]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a13      	ldr	r2, [pc, #76]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fd fbe4 	bl	8003fa8 <HAL_GetTick>
 80067e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067e2:	e009      	b.n	80067f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067e4:	f7fd fbe0 	bl	8003fa8 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d902      	bls.n	80067f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	73fb      	strb	r3, [r7, #15]
          break;
 80067f6:	e005      	b.n	8006804 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ef      	beq.n	80067e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800680a:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	4904      	ldr	r1, [pc, #16]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000

08006828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e049      	b.n	80068ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f841 	bl	80068d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f000 f9e0 	bl	8006c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d001      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e04f      	b.n	80069a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a23      	ldr	r2, [pc, #140]	@ (80069b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01d      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692e:	d018      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1f      	ldr	r2, [pc, #124]	@ (80069b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1e      	ldr	r2, [pc, #120]	@ (80069b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <HAL_TIM_Base_Start_IT+0xd0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_TIM_Base_Start_IT+0x76>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d115      	bne.n	800698e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	4b17      	ldr	r3, [pc, #92]	@ (80069c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800696a:	4013      	ands	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d015      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0xb4>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697a:	d011      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698c:	e008      	b.n	80069a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e000      	b.n	80069a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	00010007 	.word	0x00010007

080069cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d020      	beq.n	8006a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0202 	mvn.w	r2, #2
 8006a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f8e9 	bl	8006bee <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8db 	bl	8006bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8ec 	bl	8006c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0204 	mvn.w	r2, #4
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8c3 	bl	8006bee <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8b5 	bl	8006bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8c6 	bl	8006c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0208 	mvn.w	r2, #8
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f89d 	bl	8006bee <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f88f 	bl	8006bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8a0 	bl	8006c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d020      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01b      	beq.n	8006b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0210 	mvn.w	r2, #16
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f877 	bl	8006bee <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f869 	bl	8006bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f87a 	bl	8006c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0201 	mvn.w	r2, #1
 8006b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fb fb02 	bl	800213c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f913 	bl	8006d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f90b 	bl	8006da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f834 	bl	8006c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00c      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f06f 0220 	mvn.w	r2, #32
 8006bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8d3 	bl	8006d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a46      	ldr	r2, [pc, #280]	@ (8006d58 <TIM_Base_SetConfig+0x12c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <TIM_Base_SetConfig+0x40>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4a:	d00f      	beq.n	8006c6c <TIM_Base_SetConfig+0x40>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a43      	ldr	r2, [pc, #268]	@ (8006d5c <TIM_Base_SetConfig+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00b      	beq.n	8006c6c <TIM_Base_SetConfig+0x40>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a42      	ldr	r2, [pc, #264]	@ (8006d60 <TIM_Base_SetConfig+0x134>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a41      	ldr	r2, [pc, #260]	@ (8006d64 <TIM_Base_SetConfig+0x138>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a40      	ldr	r2, [pc, #256]	@ (8006d68 <TIM_Base_SetConfig+0x13c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a35      	ldr	r2, [pc, #212]	@ (8006d58 <TIM_Base_SetConfig+0x12c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01f      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8c:	d01b      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a32      	ldr	r2, [pc, #200]	@ (8006d5c <TIM_Base_SetConfig+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d017      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a31      	ldr	r2, [pc, #196]	@ (8006d60 <TIM_Base_SetConfig+0x134>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a30      	ldr	r2, [pc, #192]	@ (8006d64 <TIM_Base_SetConfig+0x138>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8006d68 <TIM_Base_SetConfig+0x13c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8006d6c <TIM_Base_SetConfig+0x140>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8006d70 <TIM_Base_SetConfig+0x144>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_Base_SetConfig+0x9a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d74 <TIM_Base_SetConfig+0x148>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d108      	bne.n	8006cd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	@ (8006d58 <TIM_Base_SetConfig+0x12c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_Base_SetConfig+0xf8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <TIM_Base_SetConfig+0x13c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_Base_SetConfig+0xf8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <TIM_Base_SetConfig+0x140>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_Base_SetConfig+0xf8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a16      	ldr	r2, [pc, #88]	@ (8006d70 <TIM_Base_SetConfig+0x144>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_Base_SetConfig+0xf8>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <TIM_Base_SetConfig+0x148>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d103      	bne.n	8006d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d105      	bne.n	8006d4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f023 0201 	bic.w	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e040      	b.n	8006e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fd f82c 	bl	8003e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	@ 0x24
 8006de0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fb6a 	bl	80074d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8af 	bl	8006f64 <UART_SetConfig>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e01b      	b.n	8006e48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fbe9 	bl	8007618 <UART_CheckIdleState>
 8006e46:	4603      	mov	r3, r0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	@ 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d177      	bne.n	8006f58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_UART_Transmit+0x24>
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e070      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2221      	movs	r2, #33	@ 0x21
 8006e84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e86:	f7fd f88f 	bl	8003fa8 <HAL_GetTick>
 8006e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_UART_Transmit+0x68>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e003      	b.n	8006ec0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ec0:	e02f      	b.n	8006f22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	@ 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fc4b 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e03b      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10b      	bne.n	8006f00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	881a      	ldrh	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3302      	adds	r3, #2
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e007      	b.n	8006f10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1c9      	bne.n	8006ec2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2200      	movs	r2, #0
 8006f36:	2140      	movs	r1, #64	@ 0x40
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fc15 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e005      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f68:	b08a      	sub	sp, #40	@ 0x28
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4ba4      	ldr	r3, [pc, #656]	@ (8007224 <UART_SetConfig+0x2c0>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a99      	ldr	r2, [pc, #612]	@ (8007228 <UART_SetConfig+0x2c4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a90      	ldr	r2, [pc, #576]	@ (800722c <UART_SetConfig+0x2c8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d126      	bne.n	800703c <UART_SetConfig+0xd8>
 8006fee:	4b90      	ldr	r3, [pc, #576]	@ (8007230 <UART_SetConfig+0x2cc>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d81b      	bhi.n	8007034 <UART_SetConfig+0xd0>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0xa0>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007015 	.word	0x08007015
 8007008:	08007025 	.word	0x08007025
 800700c:	0800701d 	.word	0x0800701d
 8007010:	0800702d 	.word	0x0800702d
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e116      	b.n	800724a <UART_SetConfig+0x2e6>
 800701c:	2302      	movs	r3, #2
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e112      	b.n	800724a <UART_SetConfig+0x2e6>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e10e      	b.n	800724a <UART_SetConfig+0x2e6>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007032:	e10a      	b.n	800724a <UART_SetConfig+0x2e6>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703a:	e106      	b.n	800724a <UART_SetConfig+0x2e6>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a7c      	ldr	r2, [pc, #496]	@ (8007234 <UART_SetConfig+0x2d0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d138      	bne.n	80070b8 <UART_SetConfig+0x154>
 8007046:	4b7a      	ldr	r3, [pc, #488]	@ (8007230 <UART_SetConfig+0x2cc>)
 8007048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704c:	f003 030c 	and.w	r3, r3, #12
 8007050:	2b0c      	cmp	r3, #12
 8007052:	d82d      	bhi.n	80070b0 <UART_SetConfig+0x14c>
 8007054:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <UART_SetConfig+0xf8>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007091 	.word	0x08007091
 8007060:	080070b1 	.word	0x080070b1
 8007064:	080070b1 	.word	0x080070b1
 8007068:	080070b1 	.word	0x080070b1
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070b1 	.word	0x080070b1
 8007074:	080070b1 	.word	0x080070b1
 8007078:	080070b1 	.word	0x080070b1
 800707c:	08007099 	.word	0x08007099
 8007080:	080070b1 	.word	0x080070b1
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007096:	e0d8      	b.n	800724a <UART_SetConfig+0x2e6>
 8007098:	2302      	movs	r3, #2
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709e:	e0d4      	b.n	800724a <UART_SetConfig+0x2e6>
 80070a0:	2304      	movs	r3, #4
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a6:	e0d0      	b.n	800724a <UART_SetConfig+0x2e6>
 80070a8:	2308      	movs	r3, #8
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ae:	e0cc      	b.n	800724a <UART_SetConfig+0x2e6>
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b6:	e0c8      	b.n	800724a <UART_SetConfig+0x2e6>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007238 <UART_SetConfig+0x2d4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d125      	bne.n	800710e <UART_SetConfig+0x1aa>
 80070c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007230 <UART_SetConfig+0x2cc>)
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070cc:	2b30      	cmp	r3, #48	@ 0x30
 80070ce:	d016      	beq.n	80070fe <UART_SetConfig+0x19a>
 80070d0:	2b30      	cmp	r3, #48	@ 0x30
 80070d2:	d818      	bhi.n	8007106 <UART_SetConfig+0x1a2>
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d00a      	beq.n	80070ee <UART_SetConfig+0x18a>
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d814      	bhi.n	8007106 <UART_SetConfig+0x1a2>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <UART_SetConfig+0x182>
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d008      	beq.n	80070f6 <UART_SetConfig+0x192>
 80070e4:	e00f      	b.n	8007106 <UART_SetConfig+0x1a2>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ec:	e0ad      	b.n	800724a <UART_SetConfig+0x2e6>
 80070ee:	2302      	movs	r3, #2
 80070f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f4:	e0a9      	b.n	800724a <UART_SetConfig+0x2e6>
 80070f6:	2304      	movs	r3, #4
 80070f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fc:	e0a5      	b.n	800724a <UART_SetConfig+0x2e6>
 80070fe:	2308      	movs	r3, #8
 8007100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007104:	e0a1      	b.n	800724a <UART_SetConfig+0x2e6>
 8007106:	2310      	movs	r3, #16
 8007108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710c:	e09d      	b.n	800724a <UART_SetConfig+0x2e6>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a4a      	ldr	r2, [pc, #296]	@ (800723c <UART_SetConfig+0x2d8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d125      	bne.n	8007164 <UART_SetConfig+0x200>
 8007118:	4b45      	ldr	r3, [pc, #276]	@ (8007230 <UART_SetConfig+0x2cc>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007122:	2bc0      	cmp	r3, #192	@ 0xc0
 8007124:	d016      	beq.n	8007154 <UART_SetConfig+0x1f0>
 8007126:	2bc0      	cmp	r3, #192	@ 0xc0
 8007128:	d818      	bhi.n	800715c <UART_SetConfig+0x1f8>
 800712a:	2b80      	cmp	r3, #128	@ 0x80
 800712c:	d00a      	beq.n	8007144 <UART_SetConfig+0x1e0>
 800712e:	2b80      	cmp	r3, #128	@ 0x80
 8007130:	d814      	bhi.n	800715c <UART_SetConfig+0x1f8>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <UART_SetConfig+0x1d8>
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	d008      	beq.n	800714c <UART_SetConfig+0x1e8>
 800713a:	e00f      	b.n	800715c <UART_SetConfig+0x1f8>
 800713c:	2300      	movs	r3, #0
 800713e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007142:	e082      	b.n	800724a <UART_SetConfig+0x2e6>
 8007144:	2302      	movs	r3, #2
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714a:	e07e      	b.n	800724a <UART_SetConfig+0x2e6>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007152:	e07a      	b.n	800724a <UART_SetConfig+0x2e6>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715a:	e076      	b.n	800724a <UART_SetConfig+0x2e6>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007162:	e072      	b.n	800724a <UART_SetConfig+0x2e6>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a35      	ldr	r2, [pc, #212]	@ (8007240 <UART_SetConfig+0x2dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d12a      	bne.n	80071c4 <UART_SetConfig+0x260>
 800716e:	4b30      	ldr	r3, [pc, #192]	@ (8007230 <UART_SetConfig+0x2cc>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800717c:	d01a      	beq.n	80071b4 <UART_SetConfig+0x250>
 800717e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007182:	d81b      	bhi.n	80071bc <UART_SetConfig+0x258>
 8007184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007188:	d00c      	beq.n	80071a4 <UART_SetConfig+0x240>
 800718a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800718e:	d815      	bhi.n	80071bc <UART_SetConfig+0x258>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <UART_SetConfig+0x238>
 8007194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007198:	d008      	beq.n	80071ac <UART_SetConfig+0x248>
 800719a:	e00f      	b.n	80071bc <UART_SetConfig+0x258>
 800719c:	2300      	movs	r3, #0
 800719e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a2:	e052      	b.n	800724a <UART_SetConfig+0x2e6>
 80071a4:	2302      	movs	r3, #2
 80071a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071aa:	e04e      	b.n	800724a <UART_SetConfig+0x2e6>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b2:	e04a      	b.n	800724a <UART_SetConfig+0x2e6>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ba:	e046      	b.n	800724a <UART_SetConfig+0x2e6>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c2:	e042      	b.n	800724a <UART_SetConfig+0x2e6>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a17      	ldr	r2, [pc, #92]	@ (8007228 <UART_SetConfig+0x2c4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d13a      	bne.n	8007244 <UART_SetConfig+0x2e0>
 80071ce:	4b18      	ldr	r3, [pc, #96]	@ (8007230 <UART_SetConfig+0x2cc>)
 80071d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071dc:	d01a      	beq.n	8007214 <UART_SetConfig+0x2b0>
 80071de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071e2:	d81b      	bhi.n	800721c <UART_SetConfig+0x2b8>
 80071e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e8:	d00c      	beq.n	8007204 <UART_SetConfig+0x2a0>
 80071ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ee:	d815      	bhi.n	800721c <UART_SetConfig+0x2b8>
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <UART_SetConfig+0x298>
 80071f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f8:	d008      	beq.n	800720c <UART_SetConfig+0x2a8>
 80071fa:	e00f      	b.n	800721c <UART_SetConfig+0x2b8>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e022      	b.n	800724a <UART_SetConfig+0x2e6>
 8007204:	2302      	movs	r3, #2
 8007206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720a:	e01e      	b.n	800724a <UART_SetConfig+0x2e6>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007212:	e01a      	b.n	800724a <UART_SetConfig+0x2e6>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721a:	e016      	b.n	800724a <UART_SetConfig+0x2e6>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007222:	e012      	b.n	800724a <UART_SetConfig+0x2e6>
 8007224:	efff69f3 	.word	0xefff69f3
 8007228:	40008000 	.word	0x40008000
 800722c:	40013800 	.word	0x40013800
 8007230:	40021000 	.word	0x40021000
 8007234:	40004400 	.word	0x40004400
 8007238:	40004800 	.word	0x40004800
 800723c:	40004c00 	.word	0x40004c00
 8007240:	40005000 	.word	0x40005000
 8007244:	2310      	movs	r3, #16
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a9f      	ldr	r2, [pc, #636]	@ (80074cc <UART_SetConfig+0x568>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d17a      	bne.n	800734a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007254:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007258:	2b08      	cmp	r3, #8
 800725a:	d824      	bhi.n	80072a6 <UART_SetConfig+0x342>
 800725c:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <UART_SetConfig+0x300>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007289 	.word	0x08007289
 8007268:	080072a7 	.word	0x080072a7
 800726c:	08007291 	.word	0x08007291
 8007270:	080072a7 	.word	0x080072a7
 8007274:	08007297 	.word	0x08007297
 8007278:	080072a7 	.word	0x080072a7
 800727c:	080072a7 	.word	0x080072a7
 8007280:	080072a7 	.word	0x080072a7
 8007284:	0800729f 	.word	0x0800729f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007288:	f7fe fd54 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 800728c:	61f8      	str	r0, [r7, #28]
        break;
 800728e:	e010      	b.n	80072b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007290:	4b8f      	ldr	r3, [pc, #572]	@ (80074d0 <UART_SetConfig+0x56c>)
 8007292:	61fb      	str	r3, [r7, #28]
        break;
 8007294:	e00d      	b.n	80072b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007296:	f7fe fcb5 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 800729a:	61f8      	str	r0, [r7, #28]
        break;
 800729c:	e009      	b.n	80072b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a2:	61fb      	str	r3, [r7, #28]
        break;
 80072a4:	e005      	b.n	80072b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80fb 	beq.w	80074b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d305      	bcc.n	80072d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d903      	bls.n	80072de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072dc:	e0e8      	b.n	80074b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2200      	movs	r2, #0
 80072e2:	461c      	mov	r4, r3
 80072e4:	4615      	mov	r5, r2
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	022b      	lsls	r3, r5, #8
 80072f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072f4:	0222      	lsls	r2, r4, #8
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6849      	ldr	r1, [r1, #4]
 80072fa:	0849      	lsrs	r1, r1, #1
 80072fc:	2000      	movs	r0, #0
 80072fe:	4688      	mov	r8, r1
 8007300:	4681      	mov	r9, r0
 8007302:	eb12 0a08 	adds.w	sl, r2, r8
 8007306:	eb43 0b09 	adc.w	fp, r3, r9
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007318:	4650      	mov	r0, sl
 800731a:	4659      	mov	r1, fp
 800731c:	f7f9 fcb4 	bl	8000c88 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4613      	mov	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800732e:	d308      	bcc.n	8007342 <UART_SetConfig+0x3de>
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007336:	d204      	bcs.n	8007342 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	e0b6      	b.n	80074b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007348:	e0b2      	b.n	80074b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007352:	d15e      	bne.n	8007412 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007354:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007358:	2b08      	cmp	r3, #8
 800735a:	d828      	bhi.n	80073ae <UART_SetConfig+0x44a>
 800735c:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <UART_SetConfig+0x400>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	080073af 	.word	0x080073af
 8007374:	0800739f 	.word	0x0800739f
 8007378:	080073af 	.word	0x080073af
 800737c:	080073af 	.word	0x080073af
 8007380:	080073af 	.word	0x080073af
 8007384:	080073a7 	.word	0x080073a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fe fcd4 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 800738c:	61f8      	str	r0, [r7, #28]
        break;
 800738e:	e014      	b.n	80073ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fe fce6 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8007394:	61f8      	str	r0, [r7, #28]
        break;
 8007396:	e010      	b.n	80073ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007398:	4b4d      	ldr	r3, [pc, #308]	@ (80074d0 <UART_SetConfig+0x56c>)
 800739a:	61fb      	str	r3, [r7, #28]
        break;
 800739c:	e00d      	b.n	80073ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739e:	f7fe fc31 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 80073a2:	61f8      	str	r0, [r7, #28]
        break;
 80073a4:	e009      	b.n	80073ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073aa:	61fb      	str	r3, [r7, #28]
        break;
 80073ac:	e005      	b.n	80073ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d077      	beq.n	80074b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	005a      	lsls	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	441a      	add	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d916      	bls.n	800740a <UART_SetConfig+0x4a6>
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e2:	d212      	bcs.n	800740a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f023 030f 	bic.w	r3, r3, #15
 80073ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	8afa      	ldrh	r2, [r7, #22]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e052      	b.n	80074b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007410:	e04e      	b.n	80074b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007412:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007416:	2b08      	cmp	r3, #8
 8007418:	d827      	bhi.n	800746a <UART_SetConfig+0x506>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <UART_SetConfig+0x4bc>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007445 	.word	0x08007445
 8007424:	0800744d 	.word	0x0800744d
 8007428:	08007455 	.word	0x08007455
 800742c:	0800746b 	.word	0x0800746b
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800746b 	.word	0x0800746b
 8007438:	0800746b 	.word	0x0800746b
 800743c:	0800746b 	.word	0x0800746b
 8007440:	08007463 	.word	0x08007463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007444:	f7fe fc76 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8007448:	61f8      	str	r0, [r7, #28]
        break;
 800744a:	e014      	b.n	8007476 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fe fc88 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8007450:	61f8      	str	r0, [r7, #28]
        break;
 8007452:	e010      	b.n	8007476 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007454:	4b1e      	ldr	r3, [pc, #120]	@ (80074d0 <UART_SetConfig+0x56c>)
 8007456:	61fb      	str	r3, [r7, #28]
        break;
 8007458:	e00d      	b.n	8007476 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745a:	f7fe fbd3 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 800745e:	61f8      	str	r0, [r7, #28]
        break;
 8007460:	e009      	b.n	8007476 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007466:	61fb      	str	r3, [r7, #28]
        break;
 8007468:	e005      	b.n	8007476 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007474:	bf00      	nop
    }

    if (pclk != 0U)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d019      	beq.n	80074b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085a      	lsrs	r2, r3, #1
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	fbb2 f3f3 	udiv	r3, r2, r3
 800748e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b0f      	cmp	r3, #15
 8007494:	d909      	bls.n	80074aa <UART_SetConfig+0x546>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749c:	d205      	bcs.n	80074aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60da      	str	r2, [r3, #12]
 80074a8:	e002      	b.n	80074b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80074bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3728      	adds	r7, #40	@ 0x28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ca:	bf00      	nop
 80074cc:	40008000 	.word	0x40008000
 80074d0:	00f42400 	.word	0x00f42400

080074d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01a      	beq.n	80075ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d2:	d10a      	bne.n	80075ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
  }
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b098      	sub	sp, #96	@ 0x60
 800761c:	af02      	add	r7, sp, #8
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007628:	f7fc fcbe 	bl	8003fa8 <HAL_GetTick>
 800762c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d12e      	bne.n	800769a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007644:	2200      	movs	r2, #0
 8007646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f88c 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d021      	beq.n	800769a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007674:	647b      	str	r3, [r7, #68]	@ 0x44
 8007676:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800767a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e062      	b.n	8007760 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d149      	bne.n	800773c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b0:	2200      	movs	r2, #0
 80076b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f856 	bl	8007768 <UART_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d03c      	beq.n	800773c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	623b      	str	r3, [r7, #32]
   return(result);
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	60fb      	str	r3, [r7, #12]
   return(result);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007714:	61fa      	str	r2, [r7, #28]
 8007716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	69b9      	ldr	r1, [r7, #24]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	617b      	str	r3, [r7, #20]
   return(result);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e5      	bne.n	80076f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e011      	b.n	8007760 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3758      	adds	r7, #88	@ 0x58
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007778:	e04f      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007780:	d04b      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7fc fc11 	bl	8003fa8 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <UART_WaitOnFlagUntilTimeout+0x30>
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e04e      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d037      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b80      	cmp	r3, #128	@ 0x80
 80077ae:	d034      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d031      	beq.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d110      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2208      	movs	r2, #8
 80077ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f838 	bl	8007842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2208      	movs	r2, #8
 80077d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e029      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f4:	d111      	bne.n	800781a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f81e 	bl	8007842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e00f      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4013      	ands	r3, r2
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	429a      	cmp	r2, r3
 8007828:	bf0c      	ite	eq
 800782a:	2301      	moveq	r3, #1
 800782c:	2300      	movne	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	429a      	cmp	r2, r3
 8007836:	d0a0      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007842:	b480      	push	{r7}
 8007844:	b095      	sub	sp, #84	@ 0x54
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007868:	643b      	str	r3, [r7, #64]	@ 0x40
 800786a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e6      	bne.n	800784a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	61fb      	str	r3, [r7, #28]
   return(result);
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d118      	bne.n	80078ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f023 0310 	bic.w	r3, r3, #16
 80078cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6979      	ldr	r1, [r7, #20]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078fe:	bf00      	nop
 8007900:	3754      	adds	r7, #84	@ 0x54
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <__NVIC_SetPriority>:
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791c:	2b00      	cmp	r3, #0
 800791e:	db0a      	blt.n	8007936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	490c      	ldr	r1, [pc, #48]	@ (8007958 <__NVIC_SetPriority+0x4c>)
 8007926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792a:	0112      	lsls	r2, r2, #4
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	440b      	add	r3, r1
 8007930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007934:	e00a      	b.n	800794c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4908      	ldr	r1, [pc, #32]	@ (800795c <__NVIC_SetPriority+0x50>)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	3b04      	subs	r3, #4
 8007944:	0112      	lsls	r2, r2, #4
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	440b      	add	r3, r1
 800794a:	761a      	strb	r2, [r3, #24]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000e100 	.word	0xe000e100
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007964:	4b05      	ldr	r3, [pc, #20]	@ (800797c <SysTick_Handler+0x1c>)
 8007966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007968:	f002 f852 	bl	8009a10 <xTaskGetSchedulerState>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d001      	beq.n	8007976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007972:	f002 ff49 	bl	800a808 <xPortSysTickHandler>
  }
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	e000e010 	.word	0xe000e010

08007980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007984:	2100      	movs	r1, #0
 8007986:	f06f 0004 	mvn.w	r0, #4
 800798a:	f7ff ffbf 	bl	800790c <__NVIC_SetPriority>
#endif
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799a:	f3ef 8305 	mrs	r3, IPSR
 800799e:	603b      	str	r3, [r7, #0]
  return(result);
 80079a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079a6:	f06f 0305 	mvn.w	r3, #5
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e00c      	b.n	80079c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <osKernelInitialize+0x44>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079b6:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <osKernelInitialize+0x44>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079bc:	2300      	movs	r3, #0
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e002      	b.n	80079c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000750 	.word	0x20000750

080079dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e2:	f3ef 8305 	mrs	r3, IPSR
 80079e6:	603b      	str	r3, [r7, #0]
  return(result);
 80079e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80079ee:	f06f 0305 	mvn.w	r3, #5
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e010      	b.n	8007a18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <osKernelStart+0x48>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d109      	bne.n	8007a12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079fe:	f7ff ffbf 	bl	8007980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a02:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <osKernelStart+0x48>)
 8007a04:	2202      	movs	r2, #2
 8007a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a08:	f001 fba4 	bl	8009154 <vTaskStartScheduler>
      stat = osOK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e002      	b.n	8007a18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a18:	687b      	ldr	r3, [r7, #4]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000750 	.word	0x20000750

08007a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	@ 0x38
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d17e      	bne.n	8007b42 <osThreadNew+0x11a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d07b      	beq.n	8007b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a4a:	2380      	movs	r3, #128	@ 0x80
 8007a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a4e:	2318      	movs	r3, #24
 8007a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d045      	beq.n	8007aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <osThreadNew+0x48>
        name = attr->name;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <osThreadNew+0x6e>
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b38      	cmp	r3, #56	@ 0x38
 8007a88:	d805      	bhi.n	8007a96 <osThreadNew+0x6e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <osThreadNew+0x72>
        return (NULL);
 8007a96:	2300      	movs	r3, #0
 8007a98:	e054      	b.n	8007b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <osThreadNew+0xa8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ab8:	d90a      	bls.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <osThreadNew+0xa8>
        mem = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e010      	b.n	8007af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <osThreadNew+0xca>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <osThreadNew+0xca>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <osThreadNew+0xca>
          mem = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e001      	b.n	8007af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d110      	bne.n	8007b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 f944 	bl	8008d9c <xTaskCreateStatic>
 8007b14:	4603      	mov	r3, r0
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e013      	b.n	8007b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 f992 	bl	8008e5c <xTaskCreate>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <osThreadNew+0x11a>
            hTask = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b42:	693b      	ldr	r3, [r7, #16]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b54:	f3ef 8305 	mrs	r3, IPSR
 8007b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <osDelay+0x1c>
    stat = osErrorISR;
 8007b60:	f06f 0305 	mvn.w	r3, #5
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e007      	b.n	8007b78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fab8 	bl	80090e8 <vTaskDelay>
    }
  }

  return (stat);
 8007b78:	68fb      	ldr	r3, [r7, #12]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8e:	f3ef 8305 	mrs	r3, IPSR
 8007b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b94:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d174      	bne.n	8007c84 <osMutexNew+0x102>
    if (attr != NULL) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	e001      	b.n	8007bac <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <osMutexNew+0x3a>
      rmtx = 1U;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	e001      	b.n	8007bc0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d15c      	bne.n	8007c84 <osMutexNew+0x102>
      mem = -1;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d015      	beq.n	8007c02 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d006      	beq.n	8007bec <osMutexNew+0x6a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b4f      	cmp	r3, #79	@ 0x4f
 8007be4:	d902      	bls.n	8007bec <osMutexNew+0x6a>
          mem = 1;
 8007be6:	2301      	movs	r3, #1
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	e00c      	b.n	8007c06 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <osMutexNew+0x84>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <osMutexNew+0x84>
            mem = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	e001      	b.n	8007c06 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d112      	bne.n	8007c32 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	4619      	mov	r1, r3
 8007c18:	2004      	movs	r0, #4
 8007c1a:	f000 fb20 	bl	800825e <xQueueCreateMutexStatic>
 8007c1e:	61f8      	str	r0, [r7, #28]
 8007c20:	e016      	b.n	8007c50 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4619      	mov	r1, r3
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f000 fb18 	bl	800825e <xQueueCreateMutexStatic>
 8007c2e:	61f8      	str	r0, [r7, #28]
 8007c30:	e00e      	b.n	8007c50 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10b      	bne.n	8007c50 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c3e:	2004      	movs	r0, #4
 8007c40:	f000 faf5 	bl	800822e <xQueueCreateMutex>
 8007c44:	61f8      	str	r0, [r7, #28]
 8007c46:	e003      	b.n	8007c50 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f000 faf0 	bl	800822e <xQueueCreateMutex>
 8007c4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00c      	beq.n	8007c70 <osMutexNew+0xee>
        if (attr != NULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <osMutexNew+0xe2>
          name = attr->name;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e001      	b.n	8007c68 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	69f8      	ldr	r0, [r7, #28]
 8007c6c:	f001 f838 	bl	8008ce0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <osMutexNew+0x102>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cac:	f3ef 8305 	mrs	r3, IPSR
 8007cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cb2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007cb8:	f06f 0305 	mvn.w	r3, #5
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	e02c      	b.n	8007d1a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d103      	bne.n	8007cce <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007cc6:	f06f 0303 	mvn.w	r3, #3
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	e025      	b.n	8007d1a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d011      	beq.n	8007cf8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6938      	ldr	r0, [r7, #16]
 8007cd8:	f000 fb11 	bl	80082fe <xQueueTakeMutexRecursive>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d01b      	beq.n	8007d1a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007ce8:	f06f 0301 	mvn.w	r3, #1
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	e014      	b.n	8007d1a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007cf0:	f06f 0302 	mvn.w	r3, #2
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e010      	b.n	8007d1a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6938      	ldr	r0, [r7, #16]
 8007cfc:	f000 fdb8 	bl	8008870 <xQueueSemaphoreTake>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d009      	beq.n	8007d1a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007d0c:	f06f 0301 	mvn.w	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	e002      	b.n	8007d1a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d14:	f06f 0302 	mvn.w	r3, #2
 8007d18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007d1a:	697b      	ldr	r3, [r7, #20]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d40:	f3ef 8305 	mrs	r3, IPSR
 8007d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d46:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007d4c:	f06f 0305 	mvn.w	r3, #5
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e01f      	b.n	8007d94 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007d5a:	f06f 0303 	mvn.w	r3, #3
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e018      	b.n	8007d94 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007d68:	6938      	ldr	r0, [r7, #16]
 8007d6a:	f000 fa93 	bl	8008294 <xQueueGiveMutexRecursive>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d00f      	beq.n	8007d94 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d74:	f06f 0302 	mvn.w	r3, #2
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e00b      	b.n	8007d94 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	6938      	ldr	r0, [r7, #16]
 8007d84:	f000 faf2 	bl	800836c <xQueueGenericSend>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d002      	beq.n	8007d94 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007d8e:	f06f 0302 	mvn.w	r3, #2
 8007d92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007d94:	697b      	ldr	r3, [r7, #20]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4a07      	ldr	r2, [pc, #28]	@ (8007dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8007db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4a06      	ldr	r2, [pc, #24]	@ (8007dd0 <vApplicationGetIdleTaskMemory+0x30>)
 8007db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2280      	movs	r2, #128	@ 0x80
 8007dbc:	601a      	str	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000754 	.word	0x20000754
 8007dd0:	200007b0 	.word	0x200007b0

08007dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a07      	ldr	r2, [pc, #28]	@ (8007e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8007de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4a06      	ldr	r2, [pc, #24]	@ (8007e04 <vApplicationGetTimerTaskMemory+0x30>)
 8007dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	200009b0 	.word	0x200009b0
 8007e04:	20000a0c 	.word	0x20000a0c

08007e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 0208 	add.w	r2, r3, #8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f103 0208 	add.w	r2, r3, #8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e62:	b480      	push	{r7}
 8007e64:	b085      	sub	sp, #20
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec0:	d103      	bne.n	8007eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e00c      	b.n	8007ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e002      	b.n	8007ed8 <vListInsert+0x2e>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d2f6      	bcs.n	8007ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6892      	ldr	r2, [r2, #8]
 8007f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6852      	ldr	r2, [r2, #4]
 8007f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d103      	bne.n	8007f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1e5a      	subs	r2, r3, #1
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f9c:	f002 fba4 	bl	800a6e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	441a      	add	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	441a      	add	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	22ff      	movs	r2, #255	@ 0xff
 8007fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	22ff      	movs	r2, #255	@ 0xff
 8007fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d114      	bne.n	800801c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01a      	beq.n	8008030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fb36 	bl	8009670 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d012      	beq.n	8008030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800800a:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <xQueueGenericReset+0xd0>)
 800800c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	e009      	b.n	8008030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3310      	adds	r3, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fef1 	bl	8007e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3324      	adds	r3, #36	@ 0x24
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff feec 	bl	8007e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008030:	f002 fb8c 	bl	800a74c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008034:	2301      	movs	r3, #1
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08e      	sub	sp, #56	@ 0x38
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xQueueGenericCreateStatic+0x56>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <xQueueGenericCreateStatic+0x5a>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericCreateStatic+0x5c>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10b      	bne.n	80080bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <xQueueGenericCreateStatic+0x84>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueGenericCreateStatic+0x88>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueGenericCreateStatic+0x8a>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ea:	2350      	movs	r3, #80	@ 0x50
 80080ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b50      	cmp	r3, #80	@ 0x50
 80080f2:	d00b      	beq.n	800810c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	61bb      	str	r3, [r7, #24]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800810c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f840 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008136:	4618      	mov	r0, r3
 8008138:	3730      	adds	r7, #48	@ 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800813e:	b580      	push	{r7, lr}
 8008140:	b08a      	sub	sp, #40	@ 0x28
 8008142:	af02      	add	r7, sp, #8
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	613b      	str	r3, [r7, #16]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	3350      	adds	r3, #80	@ 0x50
 8008178:	4618      	mov	r0, r3
 800817a:	f002 fbd7 	bl	800a92c <pvPortMalloc>
 800817e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3350      	adds	r3, #80	@ 0x50
 800818e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008198:	79fa      	ldrb	r2, [r7, #7]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4613      	mov	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f805 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081aa:	69bb      	ldr	r3, [r7, #24]
	}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e002      	b.n	80081d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081e2:	2101      	movs	r1, #1
 80081e4:	69b8      	ldr	r0, [r7, #24]
 80081e6:	f7ff fec3 	bl	8007f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00e      	beq.n	8008226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800821a:	2300      	movs	r3, #0
 800821c:	2200      	movs	r2, #0
 800821e:	2100      	movs	r1, #0
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f8a3 	bl	800836c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	4603      	mov	r3, r0
 8008236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	461a      	mov	r2, r3
 8008244:	6939      	ldr	r1, [r7, #16]
 8008246:	6978      	ldr	r0, [r7, #20]
 8008248:	f7ff ff79 	bl	800813e <xQueueGenericCreate>
 800824c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ffd3 	bl	80081fa <prvInitialiseMutex>

		return xNewQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
	}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af02      	add	r7, sp, #8
 8008264:	4603      	mov	r3, r0
 8008266:	6039      	str	r1, [r7, #0]
 8008268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	6939      	ldr	r1, [r7, #16]
 800827c:	6978      	ldr	r0, [r7, #20]
 800827e:	f7ff fee1 	bl	8008044 <xQueueGenericCreateStatic>
 8008282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff ffb8 	bl	80081fa <prvInitialiseMutex>

		return xNewQueue;
 800828a:	68fb      	ldr	r3, [r7, #12]
	}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10b      	bne.n	80082be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	60fb      	str	r3, [r7, #12]
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	689c      	ldr	r4, [r3, #8]
 80082c2:	f001 fb95 	bl	80099f0 <xTaskGetCurrentTaskHandle>
 80082c6:	4603      	mov	r3, r0
 80082c8:	429c      	cmp	r4, r3
 80082ca:	d111      	bne.n	80082f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	1e5a      	subs	r2, r3, #1
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80082de:	2300      	movs	r3, #0
 80082e0:	2200      	movs	r2, #0
 80082e2:	2100      	movs	r1, #0
 80082e4:	6938      	ldr	r0, [r7, #16]
 80082e6:	f000 f841 	bl	800836c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80082ea:	2301      	movs	r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e001      	b.n	80082f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80082f4:	697b      	ldr	r3, [r7, #20]
	}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd90      	pop	{r4, r7, pc}

080082fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80082fe:	b590      	push	{r4, r7, lr}
 8008300:	b087      	sub	sp, #28
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	689c      	ldr	r4, [r3, #8]
 800832e:	f001 fb5f 	bl	80099f0 <xTaskGetCurrentTaskHandle>
 8008332:	4603      	mov	r3, r0
 8008334:	429c      	cmp	r4, r3
 8008336:	d107      	bne.n	8008348 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008342:	2301      	movs	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	e00c      	b.n	8008362 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6938      	ldr	r0, [r7, #16]
 800834c:	f000 fa90 	bl	8008870 <xQueueSemaphoreTake>
 8008350:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008362:	697b      	ldr	r3, [r7, #20]
	}
 8008364:	4618      	mov	r0, r3
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd90      	pop	{r4, r7, pc}

0800836c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	@ 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xQueueGenericSend+0x34>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <xQueueGenericSend+0x42>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <xQueueGenericSend+0x46>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <xQueueGenericSend+0x48>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <xQueueGenericSend+0x64>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <xQueueGenericSend+0x72>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <xQueueGenericSend+0x76>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericSend+0x78>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xQueueGenericSend+0x94>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008400:	f001 fb06 	bl	8009a10 <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xQueueGenericSend+0xa4>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <xQueueGenericSend+0xa8>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <xQueueGenericSend+0xaa>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <xQueueGenericSend+0xc6>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61fb      	str	r3, [r7, #28]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008432:	f002 f959 	bl	800a6e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <xQueueGenericSend+0xdc>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d129      	bne.n	800849c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800844e:	f000 fb37 	bl	8008ac0 <prvCopyDataToQueue>
 8008452:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	3324      	adds	r3, #36	@ 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f905 	bl	8009670 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d013      	beq.n	8008494 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b3f      	ldr	r3, [pc, #252]	@ (800856c <xQueueGenericSend+0x200>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e00a      	b.n	8008494 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008484:	4b39      	ldr	r3, [pc, #228]	@ (800856c <xQueueGenericSend+0x200>)
 8008486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008494:	f002 f95a 	bl	800a74c <vPortExitCritical>
				return pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	e063      	b.n	8008564 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a2:	f002 f953 	bl	800a74c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e05c      	b.n	8008564 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f93f 	bl	8009738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084be:	f002 f945 	bl	800a74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c2:	f000 feaf 	bl	8009224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c6:	f002 f90f 	bl	800a6e8 <vPortEnterCritical>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSend+0x174>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x18a>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084f6:	f002 f929 	bl	800a74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fa:	1d3a      	adds	r2, r7, #4
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 f92e 	bl	8009764 <xTaskCheckForTimeOut>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d124      	bne.n	8008558 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800850e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008510:	f000 fbce 	bl	8008cb0 <prvIsQueueFull>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f852 	bl	80095cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800852a:	f000 fb59 	bl	8008be0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800852e:	f000 fe87 	bl	8009240 <xTaskResumeAll>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f af7c 	bne.w	8008432 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800853a:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <xQueueGenericSend+0x200>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e772      	b.n	8008432 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800854c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800854e:	f000 fb47 	bl	8008be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008552:	f000 fe75 	bl	8009240 <xTaskResumeAll>
 8008556:	e76c      	b.n	8008432 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855a:	f000 fb41 	bl	8008be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855e:	f000 fe6f 	bl	8009240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3738      	adds	r7, #56	@ 0x38
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b090      	sub	sp, #64	@ 0x40
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <xQueueGenericSendFromISR+0x3e>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <xQueueGenericSendFromISR+0x42>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <xQueueGenericSendFromISR+0x44>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d103      	bne.n	80085de <xQueueGenericSendFromISR+0x6e>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <xQueueGenericSendFromISR+0x72>
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <xQueueGenericSendFromISR+0x74>
 80085e2:	2300      	movs	r3, #0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	623b      	str	r3, [r7, #32]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008600:	f002 f952 	bl	800a8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008604:	f3ef 8211 	mrs	r2, BASEPRI
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	61fa      	str	r2, [r7, #28]
 800861a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800861c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <xQueueGenericSendFromISR+0xc2>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d12f      	bne.n	8008692 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008648:	f000 fa3a 	bl	8008ac0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800864c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008654:	d112      	bne.n	800867c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d016      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	3324      	adds	r3, #36	@ 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f804 	bl	8009670 <xTaskRemoveFromEventList>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e007      	b.n	800868c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800867c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008680:	3301      	adds	r3, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	b25a      	sxtb	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800868c:	2301      	movs	r3, #1
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008690:	e001      	b.n	8008696 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3740      	adds	r7, #64	@ 0x40
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	@ 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <xQueueReceive+0x32>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	623b      	str	r3, [r7, #32]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <xQueueReceive+0x40>
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <xQueueReceive+0x44>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xQueueReceive+0x46>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueReceive+0x62>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870e:	f001 f97f 	bl	8009a10 <xTaskGetSchedulerState>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xQueueReceive+0x72>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <xQueueReceive+0x76>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueReceive+0x78>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10b      	bne.n	8008740 <xQueueReceive+0x94>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61bb      	str	r3, [r7, #24]
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008740:	f001 ffd2 	bl	800a6e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01f      	beq.n	8008790 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008754:	f000 fa1e 	bl	8008b94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00f      	beq.n	8008788 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	3310      	adds	r3, #16
 800876c:	4618      	mov	r0, r3
 800876e:	f000 ff7f 	bl	8009670 <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008778:	4b3c      	ldr	r3, [pc, #240]	@ (800886c <xQueueReceive+0x1c0>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008788:	f001 ffe0 	bl	800a74c <vPortExitCritical>
				return pdPASS;
 800878c:	2301      	movs	r3, #1
 800878e:	e069      	b.n	8008864 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008796:	f001 ffd9 	bl	800a74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800879a:	2300      	movs	r3, #0
 800879c:	e062      	b.n	8008864 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 ffc5 	bl	8009738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ae:	2301      	movs	r3, #1
 80087b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087b2:	f001 ffcb 	bl	800a74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087b6:	f000 fd35 	bl	8009224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ba:	f001 ff95 	bl	800a6e8 <vPortEnterCritical>
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087ca:	d103      	bne.n	80087d4 <xQueueReceive+0x128>
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e0:	d103      	bne.n	80087ea <xQueueReceive+0x13e>
 80087e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ea:	f001 ffaf 	bl	800a74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ee:	1d3a      	adds	r2, r7, #4
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ffb4 	bl	8009764 <xTaskCheckForTimeOut>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d123      	bne.n	800884a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008804:	f000 fa3e 	bl	8008c84 <prvIsQueueEmpty>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d017      	beq.n	800883e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fed8 	bl	80095cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881e:	f000 f9df 	bl	8008be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008822:	f000 fd0d 	bl	8009240 <xTaskResumeAll>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d189      	bne.n	8008740 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800882c:	4b0f      	ldr	r3, [pc, #60]	@ (800886c <xQueueReceive+0x1c0>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	e780      	b.n	8008740 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800883e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008840:	f000 f9ce 	bl	8008be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008844:	f000 fcfc 	bl	8009240 <xTaskResumeAll>
 8008848:	e77a      	b.n	8008740 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800884a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800884c:	f000 f9c8 	bl	8008be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008850:	f000 fcf6 	bl	8009240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008856:	f000 fa15 	bl	8008c84 <prvIsQueueEmpty>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f af6f 	beq.w	8008740 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08e      	sub	sp, #56	@ 0x38
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61fb      	str	r3, [r7, #28]
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088c4:	f001 f8a4 	bl	8009a10 <xTaskGetSchedulerState>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <xQueueSemaphoreTake+0x64>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <xQueueSemaphoreTake+0x68>
 80088d4:	2301      	movs	r3, #1
 80088d6:	e000      	b.n	80088da <xQueueSemaphoreTake+0x6a>
 80088d8:	2300      	movs	r3, #0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10b      	bne.n	80088f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	61bb      	str	r3, [r7, #24]
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	e7fd      	b.n	80088f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088f6:	f001 fef7 	bl	800a6e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	d024      	beq.n	8008950 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	1e5a      	subs	r2, r3, #1
 800890a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800890e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008916:	f001 f9f5 	bl	8009d04 <pvTaskIncrementMutexHeldCount>
 800891a:	4602      	mov	r2, r0
 800891c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00f      	beq.n	8008948 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fe9f 	bl	8009670 <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008938:	4b54      	ldr	r3, [pc, #336]	@ (8008a8c <xQueueSemaphoreTake+0x21c>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008948:	f001 ff00 	bl	800a74c <vPortExitCritical>
				return pdPASS;
 800894c:	2301      	movs	r3, #1
 800894e:	e098      	b.n	8008a82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d112      	bne.n	800897c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	617b      	str	r3, [r7, #20]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008974:	f001 feea 	bl	800a74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008978:	2300      	movs	r3, #0
 800897a:	e082      	b.n	8008a82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800897c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fed6 	bl	8009738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008990:	f001 fedc 	bl	800a74c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008994:	f000 fc46 	bl	8009224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008998:	f001 fea6 	bl	800a6e8 <vPortEnterCritical>
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089a8:	d103      	bne.n	80089b2 <xQueueSemaphoreTake+0x142>
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089be:	d103      	bne.n	80089c8 <xQueueSemaphoreTake+0x158>
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089c8:	f001 fec0 	bl	800a74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089cc:	463a      	mov	r2, r7
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fec5 	bl	8009764 <xTaskCheckForTimeOut>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d132      	bne.n	8008a46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089e2:	f000 f94f 	bl	8008c84 <prvIsQueueEmpty>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d026      	beq.n	8008a3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d109      	bne.n	8008a08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80089f4:	f001 fe78 	bl	800a6e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 f825 	bl	8009a4c <xTaskPriorityInherit>
 8008a02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008a04:	f001 fea2 	bl	800a74c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	3324      	adds	r3, #36	@ 0x24
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fddb 	bl	80095cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a18:	f000 f8e2 	bl	8008be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a1c:	f000 fc10 	bl	8009240 <xTaskResumeAll>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f47f af67 	bne.w	80088f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008a28:	4b18      	ldr	r3, [pc, #96]	@ (8008a8c <xQueueSemaphoreTake+0x21c>)
 8008a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	e75d      	b.n	80088f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a3c:	f000 f8d0 	bl	8008be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a40:	f000 fbfe 	bl	8009240 <xTaskResumeAll>
 8008a44:	e757      	b.n	80088f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008a46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a48:	f000 f8ca 	bl	8008be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a4c:	f000 fbf8 	bl	8009240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a52:	f000 f917 	bl	8008c84 <prvIsQueueEmpty>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f43f af4c 	beq.w	80088f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00d      	beq.n	8008a80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008a64:	f001 fe40 	bl	800a6e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008a68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a6a:	f000 f811 	bl	8008a90 <prvGetDisinheritPriorityAfterTimeout>
 8008a6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 f8c0 	bl	8009bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a7c:	f001 fe66 	bl	800a74c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3738      	adds	r7, #56	@ 0x38
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	e000ed04 	.word	0xe000ed04

08008a90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d006      	beq.n	8008aae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	e001      	b.n	8008ab2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10d      	bne.n	8008afa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d14d      	bne.n	8008b82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 f816 	bl	8009b1c <xTaskPriorityDisinherit>
 8008af0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	e043      	b.n	8008b82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d119      	bne.n	8008b34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6858      	ldr	r0, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	f002 fed9 	bl	800b8c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d32b      	bcc.n	8008b82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	605a      	str	r2, [r3, #4]
 8008b32:	e026      	b.n	8008b82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68d8      	ldr	r0, [r3, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	f002 febf 	bl	800b8c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	441a      	add	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d207      	bcs.n	8008b70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b68:	425b      	negs	r3, r3
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d105      	bne.n	8008b82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b8a:	697b      	ldr	r3, [r7, #20]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d018      	beq.n	8008bd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d303      	bcc.n	8008bc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68d9      	ldr	r1, [r3, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6838      	ldr	r0, [r7, #0]
 8008bd4:	f002 fe75 	bl	800b8c2 <memcpy>
	}
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008be8:	f001 fd7e 	bl	800a6e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bf4:	e011      	b.n	8008c1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d012      	beq.n	8008c24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3324      	adds	r3, #36	@ 0x24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fd34 	bl	8009670 <xTaskRemoveFromEventList>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c0e:	f000 fe0d 	bl	800982c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dce9      	bgt.n	8008bf6 <prvUnlockQueue+0x16>
 8008c22:	e000      	b.n	8008c26 <prvUnlockQueue+0x46>
					break;
 8008c24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	22ff      	movs	r2, #255	@ 0xff
 8008c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c2e:	f001 fd8d 	bl	800a74c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c32:	f001 fd59 	bl	800a6e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c3e:	e011      	b.n	8008c64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d012      	beq.n	8008c6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fd0f 	bl	8009670 <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c58:	f000 fde8 	bl	800982c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dce9      	bgt.n	8008c40 <prvUnlockQueue+0x60>
 8008c6c:	e000      	b.n	8008c70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	22ff      	movs	r2, #255	@ 0xff
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c78:	f001 fd68 	bl	800a74c <vPortExitCritical>
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c8c:	f001 fd2c 	bl	800a6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e001      	b.n	8008ca2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ca2:	f001 fd53 	bl	800a74c <vPortExitCritical>

	return xReturn;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cb8:	f001 fd16 	bl	800a6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d102      	bne.n	8008cce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e001      	b.n	8008cd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cd2:	f001 fd3b 	bl	800a74c <vPortExitCritical>

	return xReturn;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	e014      	b.n	8008d1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8008d30 <vQueueAddToRegistry+0x50>)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cfc:	490c      	ldr	r1, [pc, #48]	@ (8008d30 <vQueueAddToRegistry+0x50>)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d06:	4a0a      	ldr	r2, [pc, #40]	@ (8008d30 <vQueueAddToRegistry+0x50>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d12:	e006      	b.n	8008d22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	d9e7      	bls.n	8008cf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000e0c 	.word	0x20000e0c

08008d34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d44:	f001 fcd0 	bl	800a6e8 <vPortEnterCritical>
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d54:	d103      	bne.n	8008d5e <vQueueWaitForMessageRestricted+0x2a>
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d6a:	d103      	bne.n	8008d74 <vQueueWaitForMessageRestricted+0x40>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d74:	f001 fcea 	bl	800a74c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3324      	adds	r3, #36	@ 0x24
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fc45 	bl	8009618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d8e:	6978      	ldr	r0, [r7, #20]
 8008d90:	f7ff ff26 	bl	8008be0 <prvUnlockQueue>
	}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08e      	sub	sp, #56	@ 0x38
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	61fb      	str	r3, [r7, #28]
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	e7fd      	b.n	8008de2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008de6:	235c      	movs	r3, #92	@ 0x5c
 8008de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b5c      	cmp	r3, #92	@ 0x5c
 8008dee:	d00b      	beq.n	8008e08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61bb      	str	r3, [r7, #24]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01e      	beq.n	8008e4e <xTaskCreateStatic+0xb2>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d01b      	beq.n	8008e4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f850 	bl	8008ee6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e48:	f000 f8de 	bl	8009008 <prvAddNewTaskToReadyList>
 8008e4c:	e001      	b.n	8008e52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e52:	697b      	ldr	r3, [r7, #20]
	}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3728      	adds	r7, #40	@ 0x28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	@ 0x30
 8008e60:	af04      	add	r7, sp, #16
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e6c:	88fb      	ldrh	r3, [r7, #6]
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 fd5b 	bl	800a92c <pvPortMalloc>
 8008e76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00e      	beq.n	8008e9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e7e:	205c      	movs	r0, #92	@ 0x5c
 8008e80:	f001 fd54 	bl	800a92c <pvPortMalloc>
 8008e84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e92:	e005      	b.n	8008ea0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e94:	6978      	ldr	r0, [r7, #20]
 8008e96:	f001 fe17 	bl	800aac8 <vPortFree>
 8008e9a:	e001      	b.n	8008ea0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d017      	beq.n	8008ed6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f80e 	bl	8008ee6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eca:	69f8      	ldr	r0, [r7, #28]
 8008ecc:	f000 f89c 	bl	8009008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	61bb      	str	r3, [r7, #24]
 8008ed4:	e002      	b.n	8008edc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008eda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008edc:	69bb      	ldr	r3, [r7, #24]
	}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3720      	adds	r7, #32
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b088      	sub	sp, #32
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	461a      	mov	r2, r3
 8008efe:	21a5      	movs	r1, #165	@ 0xa5
 8008f00:	f002 fc5f 	bl	800b7c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f023 0307 	bic.w	r3, r3, #7
 8008f1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	617b      	str	r3, [r7, #20]
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01f      	beq.n	8008f86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	e012      	b.n	8008f72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	7819      	ldrb	r1, [r3, #0]
 8008f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	4413      	add	r3, r2
 8008f5a:	3334      	adds	r3, #52	@ 0x34
 8008f5c:	460a      	mov	r2, r1
 8008f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d006      	beq.n	8008f7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b0f      	cmp	r3, #15
 8008f76:	d9e9      	bls.n	8008f4c <prvInitialiseNewTask+0x66>
 8008f78:	e000      	b.n	8008f7c <prvInitialiseNewTask+0x96>
			{
				break;
 8008f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f84:	e003      	b.n	8008f8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	2b37      	cmp	r3, #55	@ 0x37
 8008f92:	d901      	bls.n	8008f98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f94:	2337      	movs	r3, #55	@ 0x37
 8008f96:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	3304      	adds	r3, #4
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe ff4a 	bl	8007e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe ff45 	bl	8007e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	68f9      	ldr	r1, [r7, #12]
 8008fe6:	69b8      	ldr	r0, [r7, #24]
 8008fe8:	f001 fa4e 	bl	800a488 <pxPortInitialiseStack>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ffe:	bf00      	nop
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009010:	f001 fb6a 	bl	800a6e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009014:	4b2d      	ldr	r3, [pc, #180]	@ (80090cc <prvAddNewTaskToReadyList+0xc4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	4a2c      	ldr	r2, [pc, #176]	@ (80090cc <prvAddNewTaskToReadyList+0xc4>)
 800901c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800901e:	4b2c      	ldr	r3, [pc, #176]	@ (80090d0 <prvAddNewTaskToReadyList+0xc8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009026:	4a2a      	ldr	r2, [pc, #168]	@ (80090d0 <prvAddNewTaskToReadyList+0xc8>)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800902c:	4b27      	ldr	r3, [pc, #156]	@ (80090cc <prvAddNewTaskToReadyList+0xc4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d110      	bne.n	8009056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009034:	f000 fc1e 	bl	8009874 <prvInitialiseTaskLists>
 8009038:	e00d      	b.n	8009056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800903a:	4b26      	ldr	r3, [pc, #152]	@ (80090d4 <prvAddNewTaskToReadyList+0xcc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d109      	bne.n	8009056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009042:	4b23      	ldr	r3, [pc, #140]	@ (80090d0 <prvAddNewTaskToReadyList+0xc8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904c:	429a      	cmp	r2, r3
 800904e:	d802      	bhi.n	8009056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009050:	4a1f      	ldr	r2, [pc, #124]	@ (80090d0 <prvAddNewTaskToReadyList+0xc8>)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009056:	4b20      	ldr	r3, [pc, #128]	@ (80090d8 <prvAddNewTaskToReadyList+0xd0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	4a1e      	ldr	r2, [pc, #120]	@ (80090d8 <prvAddNewTaskToReadyList+0xd0>)
 800905e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009060:	4b1d      	ldr	r3, [pc, #116]	@ (80090d8 <prvAddNewTaskToReadyList+0xd0>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906c:	4b1b      	ldr	r3, [pc, #108]	@ (80090dc <prvAddNewTaskToReadyList+0xd4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <prvAddNewTaskToReadyList+0x74>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <prvAddNewTaskToReadyList+0xd4>)
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4a15      	ldr	r2, [pc, #84]	@ (80090e0 <prvAddNewTaskToReadyList+0xd8>)
 800908a:	441a      	add	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7fe fee5 	bl	8007e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009098:	f001 fb58 	bl	800a74c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800909c:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <prvAddNewTaskToReadyList+0xcc>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00e      	beq.n	80090c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <prvAddNewTaskToReadyList+0xc8>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d207      	bcs.n	80090c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090b2:	4b0c      	ldr	r3, [pc, #48]	@ (80090e4 <prvAddNewTaskToReadyList+0xdc>)
 80090b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001320 	.word	0x20001320
 80090d0:	20000e4c 	.word	0x20000e4c
 80090d4:	2000132c 	.word	0x2000132c
 80090d8:	2000133c 	.word	0x2000133c
 80090dc:	20001328 	.word	0x20001328
 80090e0:	20000e50 	.word	0x20000e50
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d018      	beq.n	800912c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090fa:	4b14      	ldr	r3, [pc, #80]	@ (800914c <vTaskDelay+0x64>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <vTaskDelay+0x32>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	60bb      	str	r3, [r7, #8]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800911a:	f000 f883 	bl	8009224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800911e:	2100      	movs	r1, #0
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fe03 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009126:	f000 f88b 	bl	8009240 <xTaskResumeAll>
 800912a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d107      	bne.n	8009142 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009132:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <vTaskDelay+0x68>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20001348 	.word	0x20001348
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	@ 0x28
 8009158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009162:	463a      	mov	r2, r7
 8009164:	1d39      	adds	r1, r7, #4
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fe18 	bl	8007da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	9202      	str	r2, [sp, #8]
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	2300      	movs	r3, #0
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	2300      	movs	r3, #0
 8009180:	460a      	mov	r2, r1
 8009182:	4922      	ldr	r1, [pc, #136]	@ (800920c <vTaskStartScheduler+0xb8>)
 8009184:	4822      	ldr	r0, [pc, #136]	@ (8009210 <vTaskStartScheduler+0xbc>)
 8009186:	f7ff fe09 	bl	8008d9c <xTaskCreateStatic>
 800918a:	4603      	mov	r3, r0
 800918c:	4a21      	ldr	r2, [pc, #132]	@ (8009214 <vTaskStartScheduler+0xc0>)
 800918e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009190:	4b20      	ldr	r3, [pc, #128]	@ (8009214 <vTaskStartScheduler+0xc0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009198:	2301      	movs	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e001      	b.n	80091a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d102      	bne.n	80091ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091a8:	f000 fe14 	bl	8009dd4 <xTimerCreateTimerTask>
 80091ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d116      	bne.n	80091e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	613b      	str	r3, [r7, #16]
}
 80091c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091c8:	4b13      	ldr	r3, [pc, #76]	@ (8009218 <vTaskStartScheduler+0xc4>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091d0:	4b12      	ldr	r3, [pc, #72]	@ (800921c <vTaskStartScheduler+0xc8>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091d6:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <vTaskStartScheduler+0xcc>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091dc:	f001 f9e0 	bl	800a5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091e0:	e00f      	b.n	8009202 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091e8:	d10b      	bne.n	8009202 <vTaskStartScheduler+0xae>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vTaskStartScheduler+0xaa>
}
 8009202:	bf00      	nop
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	0800d6d0 	.word	0x0800d6d0
 8009210:	08009845 	.word	0x08009845
 8009214:	20001344 	.word	0x20001344
 8009218:	20001340 	.word	0x20001340
 800921c:	2000132c 	.word	0x2000132c
 8009220:	20001324 	.word	0x20001324

08009224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <vTaskSuspendAll+0x18>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	4a03      	ldr	r2, [pc, #12]	@ (800923c <vTaskSuspendAll+0x18>)
 8009230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009232:	bf00      	nop
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20001348 	.word	0x20001348

08009240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800924a:	2300      	movs	r3, #0
 800924c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800924e:	4b42      	ldr	r3, [pc, #264]	@ (8009358 <xTaskResumeAll+0x118>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <xTaskResumeAll+0x2e>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	603b      	str	r3, [r7, #0]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800926e:	f001 fa3b 	bl	800a6e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009272:	4b39      	ldr	r3, [pc, #228]	@ (8009358 <xTaskResumeAll+0x118>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3b01      	subs	r3, #1
 8009278:	4a37      	ldr	r2, [pc, #220]	@ (8009358 <xTaskResumeAll+0x118>)
 800927a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800927c:	4b36      	ldr	r3, [pc, #216]	@ (8009358 <xTaskResumeAll+0x118>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d162      	bne.n	800934a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009284:	4b35      	ldr	r3, [pc, #212]	@ (800935c <xTaskResumeAll+0x11c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d05e      	beq.n	800934a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800928c:	e02f      	b.n	80092ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928e:	4b34      	ldr	r3, [pc, #208]	@ (8009360 <xTaskResumeAll+0x120>)
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3318      	adds	r3, #24
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fe3e 	bl	8007f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe fe39 	bl	8007f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009364 <xTaskResumeAll+0x124>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d903      	bls.n	80092be <xTaskResumeAll+0x7e>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009364 <xTaskResumeAll+0x124>)
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4a27      	ldr	r2, [pc, #156]	@ (8009368 <xTaskResumeAll+0x128>)
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7fe fdc4 	bl	8007e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092de:	4b23      	ldr	r3, [pc, #140]	@ (800936c <xTaskResumeAll+0x12c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80092e8:	4b21      	ldr	r3, [pc, #132]	@ (8009370 <xTaskResumeAll+0x130>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009360 <xTaskResumeAll+0x120>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1cb      	bne.n	800928e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092fc:	f000 fb58 	bl	80099b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009300:	4b1c      	ldr	r3, [pc, #112]	@ (8009374 <xTaskResumeAll+0x134>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800930c:	f000 f846 	bl	800939c <xTaskIncrementTick>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009316:	4b16      	ldr	r3, [pc, #88]	@ (8009370 <xTaskResumeAll+0x130>)
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3b01      	subs	r3, #1
 8009320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1f1      	bne.n	800930c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009328:	4b12      	ldr	r3, [pc, #72]	@ (8009374 <xTaskResumeAll+0x134>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800932e:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <xTaskResumeAll+0x130>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800933a:	4b0f      	ldr	r3, [pc, #60]	@ (8009378 <xTaskResumeAll+0x138>)
 800933c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800934a:	f001 f9ff 	bl	800a74c <vPortExitCritical>

	return xAlreadyYielded;
 800934e:	68bb      	ldr	r3, [r7, #8]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20001348 	.word	0x20001348
 800935c:	20001320 	.word	0x20001320
 8009360:	200012e0 	.word	0x200012e0
 8009364:	20001328 	.word	0x20001328
 8009368:	20000e50 	.word	0x20000e50
 800936c:	20000e4c 	.word	0x20000e4c
 8009370:	20001334 	.word	0x20001334
 8009374:	20001330 	.word	0x20001330
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009382:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <xTaskGetTickCount+0x1c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009388:	687b      	ldr	r3, [r7, #4]
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20001324 	.word	0x20001324

0800939c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a6:	4b4f      	ldr	r3, [pc, #316]	@ (80094e4 <xTaskIncrementTick+0x148>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 8090 	bne.w	80094d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093b0:	4b4d      	ldr	r3, [pc, #308]	@ (80094e8 <xTaskIncrementTick+0x14c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093b8:	4a4b      	ldr	r2, [pc, #300]	@ (80094e8 <xTaskIncrementTick+0x14c>)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d121      	bne.n	8009408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093c4:	4b49      	ldr	r3, [pc, #292]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	603b      	str	r3, [r7, #0]
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <xTaskIncrementTick+0x46>
 80093e6:	4b41      	ldr	r3, [pc, #260]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	4b40      	ldr	r3, [pc, #256]	@ (80094f0 <xTaskIncrementTick+0x154>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a3e      	ldr	r2, [pc, #248]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	4a3e      	ldr	r2, [pc, #248]	@ (80094f0 <xTaskIncrementTick+0x154>)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4b3e      	ldr	r3, [pc, #248]	@ (80094f4 <xTaskIncrementTick+0x158>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3301      	adds	r3, #1
 8009400:	4a3c      	ldr	r2, [pc, #240]	@ (80094f4 <xTaskIncrementTick+0x158>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	f000 fad4 	bl	80099b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009408:	4b3b      	ldr	r3, [pc, #236]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d349      	bcc.n	80094a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009412:	4b36      	ldr	r3, [pc, #216]	@ (80094ec <xTaskIncrementTick+0x150>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941c:	4b36      	ldr	r3, [pc, #216]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009422:	601a      	str	r2, [r3, #0]
					break;
 8009424:	e03f      	b.n	80094a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009426:	4b31      	ldr	r3, [pc, #196]	@ (80094ec <xTaskIncrementTick+0x150>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d203      	bcs.n	8009446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800943e:	4a2e      	ldr	r2, [pc, #184]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009444:	e02f      	b.n	80094a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	3304      	adds	r3, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fd66 	bl	8007f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	3318      	adds	r3, #24
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fd5d 	bl	8007f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009466:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <xTaskIncrementTick+0x160>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d903      	bls.n	8009476 <xTaskIncrementTick+0xda>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	4a22      	ldr	r2, [pc, #136]	@ (80094fc <xTaskIncrementTick+0x160>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a1f      	ldr	r2, [pc, #124]	@ (8009500 <xTaskIncrementTick+0x164>)
 8009484:	441a      	add	r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7fe fce8 	bl	8007e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	4b1b      	ldr	r3, [pc, #108]	@ (8009504 <xTaskIncrementTick+0x168>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d3b8      	bcc.n	8009412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a4:	e7b5      	b.n	8009412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094a6:	4b17      	ldr	r3, [pc, #92]	@ (8009504 <xTaskIncrementTick+0x168>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ac:	4914      	ldr	r1, [pc, #80]	@ (8009500 <xTaskIncrementTick+0x164>)
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d901      	bls.n	80094c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094c2:	4b11      	ldr	r3, [pc, #68]	@ (8009508 <xTaskIncrementTick+0x16c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094ca:	2301      	movs	r3, #1
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	e004      	b.n	80094da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094d0:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <xTaskIncrementTick+0x170>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a0d      	ldr	r2, [pc, #52]	@ (800950c <xTaskIncrementTick+0x170>)
 80094d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094da:	697b      	ldr	r3, [r7, #20]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20001348 	.word	0x20001348
 80094e8:	20001324 	.word	0x20001324
 80094ec:	200012d8 	.word	0x200012d8
 80094f0:	200012dc 	.word	0x200012dc
 80094f4:	20001338 	.word	0x20001338
 80094f8:	20001340 	.word	0x20001340
 80094fc:	20001328 	.word	0x20001328
 8009500:	20000e50 	.word	0x20000e50
 8009504:	20000e4c 	.word	0x20000e4c
 8009508:	20001334 	.word	0x20001334
 800950c:	20001330 	.word	0x20001330

08009510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009516:	4b28      	ldr	r3, [pc, #160]	@ (80095b8 <vTaskSwitchContext+0xa8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800951e:	4b27      	ldr	r3, [pc, #156]	@ (80095bc <vTaskSwitchContext+0xac>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009524:	e042      	b.n	80095ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009526:	4b25      	ldr	r3, [pc, #148]	@ (80095bc <vTaskSwitchContext+0xac>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952c:	4b24      	ldr	r3, [pc, #144]	@ (80095c0 <vTaskSwitchContext+0xb0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	e011      	b.n	8009558 <vTaskSwitchContext+0x48>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <vTaskSwitchContext+0x42>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	607b      	str	r3, [r7, #4]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <vTaskSwitchContext+0x3e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3b01      	subs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	491a      	ldr	r1, [pc, #104]	@ (80095c4 <vTaskSwitchContext+0xb4>)
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0e3      	beq.n	8009534 <vTaskSwitchContext+0x24>
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4a13      	ldr	r2, [pc, #76]	@ (80095c4 <vTaskSwitchContext+0xb4>)
 8009578:	4413      	add	r3, r2
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	3308      	adds	r3, #8
 800958e:	429a      	cmp	r2, r3
 8009590:	d104      	bne.n	800959c <vTaskSwitchContext+0x8c>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	605a      	str	r2, [r3, #4]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	4a09      	ldr	r2, [pc, #36]	@ (80095c8 <vTaskSwitchContext+0xb8>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4a06      	ldr	r2, [pc, #24]	@ (80095c0 <vTaskSwitchContext+0xb0>)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6013      	str	r3, [r2, #0]
}
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20001348 	.word	0x20001348
 80095bc:	20001334 	.word	0x20001334
 80095c0:	20001328 	.word	0x20001328
 80095c4:	20000e50 	.word	0x20000e50
 80095c8:	20000e4c 	.word	0x20000e4c

080095cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10b      	bne.n	80095f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	60fb      	str	r3, [r7, #12]
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095f4:	4b07      	ldr	r3, [pc, #28]	@ (8009614 <vTaskPlaceOnEventList+0x48>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3318      	adds	r3, #24
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fe fc54 	bl	8007eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009602:	2101      	movs	r1, #1
 8009604:	6838      	ldr	r0, [r7, #0]
 8009606:	f000 fb91 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20000e4c 	.word	0x20000e4c

08009618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	617b      	str	r3, [r7, #20]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009642:	4b0a      	ldr	r3, [pc, #40]	@ (800966c <vTaskPlaceOnEventListRestricted+0x54>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3318      	adds	r3, #24
 8009648:	4619      	mov	r1, r3
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f7fe fc09 	bl	8007e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800965a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	68b8      	ldr	r0, [r7, #8]
 8009660:	f000 fb64 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
	}
 8009664:	bf00      	nop
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000e4c 	.word	0x20000e4c

08009670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	60fb      	str	r3, [r7, #12]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3318      	adds	r3, #24
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fc3a 	bl	8007f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009720 <xTaskRemoveFromEventList+0xb0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11d      	bne.n	80096ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fc31 	bl	8007f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096be:	4b19      	ldr	r3, [pc, #100]	@ (8009724 <xTaskRemoveFromEventList+0xb4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d903      	bls.n	80096ce <xTaskRemoveFromEventList+0x5e>
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	4a16      	ldr	r2, [pc, #88]	@ (8009724 <xTaskRemoveFromEventList+0xb4>)
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4a13      	ldr	r2, [pc, #76]	@ (8009728 <xTaskRemoveFromEventList+0xb8>)
 80096dc:	441a      	add	r2, r3
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f7fe fbbc 	bl	8007e62 <vListInsertEnd>
 80096ea:	e005      	b.n	80096f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	3318      	adds	r3, #24
 80096f0:	4619      	mov	r1, r3
 80096f2:	480e      	ldr	r0, [pc, #56]	@ (800972c <xTaskRemoveFromEventList+0xbc>)
 80096f4:	f7fe fbb5 	bl	8007e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009730 <xTaskRemoveFromEventList+0xc0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009702:	429a      	cmp	r2, r3
 8009704:	d905      	bls.n	8009712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009706:	2301      	movs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800970a:	4b0a      	ldr	r3, [pc, #40]	@ (8009734 <xTaskRemoveFromEventList+0xc4>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	e001      	b.n	8009716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009716:	697b      	ldr	r3, [r7, #20]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20001348 	.word	0x20001348
 8009724:	20001328 	.word	0x20001328
 8009728:	20000e50 	.word	0x20000e50
 800972c:	200012e0 	.word	0x200012e0
 8009730:	20000e4c 	.word	0x20000e4c
 8009734:	20001334 	.word	0x20001334

08009738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009740:	4b06      	ldr	r3, [pc, #24]	@ (800975c <vTaskInternalSetTimeOutState+0x24>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <vTaskInternalSetTimeOutState+0x28>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	605a      	str	r2, [r3, #4]
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20001338 	.word	0x20001338
 8009760:	20001324 	.word	0x20001324

08009764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10b      	bne.n	800978c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	613b      	str	r3, [r7, #16]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60fb      	str	r3, [r7, #12]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80097aa:	f000 ff9d 	bl	800a6e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009824 <xTaskCheckForTimeOut+0xc0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097c6:	d102      	bne.n	80097ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e023      	b.n	8009816 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b15      	ldr	r3, [pc, #84]	@ (8009828 <xTaskCheckForTimeOut+0xc4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d007      	beq.n	80097ea <xTaskCheckForTimeOut+0x86>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d302      	bcc.n	80097ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097e4:	2301      	movs	r3, #1
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	e015      	b.n	8009816 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d20b      	bcs.n	800980c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff99 	bl	8009738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e004      	b.n	8009816 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009812:	2301      	movs	r3, #1
 8009814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009816:	f000 ff99 	bl	800a74c <vPortExitCritical>

	return xReturn;
 800981a:	69fb      	ldr	r3, [r7, #28]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3720      	adds	r7, #32
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20001324 	.word	0x20001324
 8009828:	20001338 	.word	0x20001338

0800982c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009830:	4b03      	ldr	r3, [pc, #12]	@ (8009840 <vTaskMissedYield+0x14>)
 8009832:	2201      	movs	r2, #1
 8009834:	601a      	str	r2, [r3, #0]
}
 8009836:	bf00      	nop
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	20001334 	.word	0x20001334

08009844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800984c:	f000 f852 	bl	80098f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009850:	4b06      	ldr	r3, [pc, #24]	@ (800986c <prvIdleTask+0x28>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d9f9      	bls.n	800984c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009858:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <prvIdleTask+0x2c>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009868:	e7f0      	b.n	800984c <prvIdleTask+0x8>
 800986a:	bf00      	nop
 800986c:	20000e50 	.word	0x20000e50
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800987a:	2300      	movs	r3, #0
 800987c:	607b      	str	r3, [r7, #4]
 800987e:	e00c      	b.n	800989a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4a12      	ldr	r2, [pc, #72]	@ (80098d4 <prvInitialiseTaskLists+0x60>)
 800988c:	4413      	add	r3, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe faba 	bl	8007e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3301      	adds	r3, #1
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b37      	cmp	r3, #55	@ 0x37
 800989e:	d9ef      	bls.n	8009880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098a0:	480d      	ldr	r0, [pc, #52]	@ (80098d8 <prvInitialiseTaskLists+0x64>)
 80098a2:	f7fe fab1 	bl	8007e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098a6:	480d      	ldr	r0, [pc, #52]	@ (80098dc <prvInitialiseTaskLists+0x68>)
 80098a8:	f7fe faae 	bl	8007e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098ac:	480c      	ldr	r0, [pc, #48]	@ (80098e0 <prvInitialiseTaskLists+0x6c>)
 80098ae:	f7fe faab 	bl	8007e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098b2:	480c      	ldr	r0, [pc, #48]	@ (80098e4 <prvInitialiseTaskLists+0x70>)
 80098b4:	f7fe faa8 	bl	8007e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098b8:	480b      	ldr	r0, [pc, #44]	@ (80098e8 <prvInitialiseTaskLists+0x74>)
 80098ba:	f7fe faa5 	bl	8007e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098be:	4b0b      	ldr	r3, [pc, #44]	@ (80098ec <prvInitialiseTaskLists+0x78>)
 80098c0:	4a05      	ldr	r2, [pc, #20]	@ (80098d8 <prvInitialiseTaskLists+0x64>)
 80098c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098c4:	4b0a      	ldr	r3, [pc, #40]	@ (80098f0 <prvInitialiseTaskLists+0x7c>)
 80098c6:	4a05      	ldr	r2, [pc, #20]	@ (80098dc <prvInitialiseTaskLists+0x68>)
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20000e50 	.word	0x20000e50
 80098d8:	200012b0 	.word	0x200012b0
 80098dc:	200012c4 	.word	0x200012c4
 80098e0:	200012e0 	.word	0x200012e0
 80098e4:	200012f4 	.word	0x200012f4
 80098e8:	2000130c 	.word	0x2000130c
 80098ec:	200012d8 	.word	0x200012d8
 80098f0:	200012dc 	.word	0x200012dc

080098f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fa:	e019      	b.n	8009930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098fc:	f000 fef4 	bl	800a6e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009900:	4b10      	ldr	r3, [pc, #64]	@ (8009944 <prvCheckTasksWaitingTermination+0x50>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fb05 	bl	8007f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <prvCheckTasksWaitingTermination+0x54>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a0b      	ldr	r2, [pc, #44]	@ (8009948 <prvCheckTasksWaitingTermination+0x54>)
 800991a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800991c:	4b0b      	ldr	r3, [pc, #44]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3b01      	subs	r3, #1
 8009922:	4a0a      	ldr	r2, [pc, #40]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009926:	f000 ff11 	bl	800a74c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f810 	bl	8009950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009930:	4b06      	ldr	r3, [pc, #24]	@ (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e1      	bne.n	80098fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	200012f4 	.word	0x200012f4
 8009948:	20001320 	.word	0x20001320
 800994c:	20001308 	.word	0x20001308

08009950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800995e:	2b00      	cmp	r3, #0
 8009960:	d108      	bne.n	8009974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f8ae 	bl	800aac8 <vPortFree>
				vPortFree( pxTCB );
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 f8ab 	bl	800aac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009972:	e019      	b.n	80099a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800997a:	2b01      	cmp	r3, #1
 800997c:	d103      	bne.n	8009986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 f8a2 	bl	800aac8 <vPortFree>
	}
 8009984:	e010      	b.n	80099a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800998c:	2b02      	cmp	r3, #2
 800998e:	d00b      	beq.n	80099a8 <prvDeleteTCB+0x58>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <prvDeleteTCB+0x54>
	}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099b6:	4b0c      	ldr	r3, [pc, #48]	@ (80099e8 <prvResetNextTaskUnblockTime+0x38>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d104      	bne.n	80099ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	@ (80099ec <prvResetNextTaskUnblockTime+0x3c>)
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099c8:	e008      	b.n	80099dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ca:	4b07      	ldr	r3, [pc, #28]	@ (80099e8 <prvResetNextTaskUnblockTime+0x38>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a04      	ldr	r2, [pc, #16]	@ (80099ec <prvResetNextTaskUnblockTime+0x3c>)
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	200012d8 	.word	0x200012d8
 80099ec:	20001340 	.word	0x20001340

080099f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80099f6:	4b05      	ldr	r3, [pc, #20]	@ (8009a0c <xTaskGetCurrentTaskHandle+0x1c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80099fc:	687b      	ldr	r3, [r7, #4]
	}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20000e4c 	.word	0x20000e4c

08009a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a16:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <xTaskGetSchedulerState+0x34>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	e008      	b.n	8009a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a24:	4b08      	ldr	r3, [pc, #32]	@ (8009a48 <xTaskGetSchedulerState+0x38>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	607b      	str	r3, [r7, #4]
 8009a30:	e001      	b.n	8009a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a36:	687b      	ldr	r3, [r7, #4]
	}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2000132c 	.word	0x2000132c
 8009a48:	20001348 	.word	0x20001348

08009a4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d051      	beq.n	8009b06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a66:	4b2a      	ldr	r3, [pc, #168]	@ (8009b10 <xTaskPriorityInherit+0xc4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d241      	bcs.n	8009af4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	db06      	blt.n	8009a86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a78:	4b25      	ldr	r3, [pc, #148]	@ (8009b10 <xTaskPriorityInherit+0xc4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6959      	ldr	r1, [r3, #20]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4a1f      	ldr	r2, [pc, #124]	@ (8009b14 <xTaskPriorityInherit+0xc8>)
 8009a98:	4413      	add	r3, r2
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	d122      	bne.n	8009ae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fa3a 	bl	8007f1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aa8:	4b19      	ldr	r3, [pc, #100]	@ (8009b10 <xTaskPriorityInherit+0xc4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab6:	4b18      	ldr	r3, [pc, #96]	@ (8009b18 <xTaskPriorityInherit+0xcc>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d903      	bls.n	8009ac6 <xTaskPriorityInherit+0x7a>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	4a15      	ldr	r2, [pc, #84]	@ (8009b18 <xTaskPriorityInherit+0xcc>)
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4a10      	ldr	r2, [pc, #64]	@ (8009b14 <xTaskPriorityInherit+0xc8>)
 8009ad4:	441a      	add	r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f7fe f9c0 	bl	8007e62 <vListInsertEnd>
 8009ae2:	e004      	b.n	8009aee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <xTaskPriorityInherit+0xc4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009aee:	2301      	movs	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	e008      	b.n	8009b06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009af8:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <xTaskPriorityInherit+0xc4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d201      	bcs.n	8009b06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b06:	68fb      	ldr	r3, [r7, #12]
	}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000e4c 	.word	0x20000e4c
 8009b14:	20000e50 	.word	0x20000e50
 8009b18:	20001328 	.word	0x20001328

08009b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d058      	beq.n	8009be4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b32:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf0 <xTaskPriorityDisinherit+0xd4>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d00b      	beq.n	8009b54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	60fb      	str	r3, [r7, #12]
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	e7fd      	b.n	8009b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60bb      	str	r3, [r7, #8]
}
 8009b6e:	bf00      	nop
 8009b70:	bf00      	nop
 8009b72:	e7fd      	b.n	8009b70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b78:	1e5a      	subs	r2, r3, #1
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d02c      	beq.n	8009be4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d128      	bne.n	8009be4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe f9c0 	bl	8007f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf4 <xTaskPriorityDisinherit+0xd8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d903      	bls.n	8009bc4 <xTaskPriorityDisinherit+0xa8>
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf4 <xTaskPriorityDisinherit+0xd8>)
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4a09      	ldr	r2, [pc, #36]	@ (8009bf8 <xTaskPriorityDisinherit+0xdc>)
 8009bd2:	441a      	add	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f7fe f941 	bl	8007e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009be4:	697b      	ldr	r3, [r7, #20]
	}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000e4c 	.word	0x20000e4c
 8009bf4:	20001328 	.word	0x20001328
 8009bf8:	20000e50 	.word	0x20000e50

08009bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d06c      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60fb      	str	r3, [r7, #12]
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d902      	bls.n	8009c44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	61fb      	str	r3, [r7, #28]
 8009c42:	e002      	b.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d04c      	beq.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d147      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c5e:	4b26      	ldr	r3, [pc, #152]	@ (8009cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d10b      	bne.n	8009c80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	60bb      	str	r3, [r7, #8]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	db04      	blt.n	8009c9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	6959      	ldr	r1, [r3, #20]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a13      	ldr	r2, [pc, #76]	@ (8009cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009cae:	4413      	add	r3, r2
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d11c      	bne.n	8009cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe f92f 	bl	8007f1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cce:	4a0c      	ldr	r2, [pc, #48]	@ (8009d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4a07      	ldr	r2, [pc, #28]	@ (8009cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ce0:	441a      	add	r2, r3
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fe f8ba 	bl	8007e62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cee:	bf00      	nop
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000e4c 	.word	0x20000e4c
 8009cfc:	20000e50 	.word	0x20000e50
 8009d00:	20001328 	.word	0x20001328

08009d04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d08:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d10:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d16:	3201      	adds	r2, #1
 8009d18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009d1a:	4b03      	ldr	r3, [pc, #12]	@ (8009d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	20000e4c 	.word	0x20000e4c

08009d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d36:	4b21      	ldr	r3, [pc, #132]	@ (8009dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d3c:	4b20      	ldr	r3, [pc, #128]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe f8ea 	bl	8007f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d4e:	d10a      	bne.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d56:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4819      	ldr	r0, [pc, #100]	@ (8009dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d60:	f7fe f87f 	bl	8007e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d64:	e026      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d209      	bcs.n	8009d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d7e:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe f88d 	bl	8007eaa <vListInsert>
}
 8009d90:	e010      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fe f883 	bl	8007eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d202      	bcs.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dae:	4a08      	ldr	r2, [pc, #32]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20001324 	.word	0x20001324
 8009dc0:	20000e4c 	.word	0x20000e4c
 8009dc4:	2000130c 	.word	0x2000130c
 8009dc8:	200012dc 	.word	0x200012dc
 8009dcc:	200012d8 	.word	0x200012d8
 8009dd0:	20001340 	.word	0x20001340

08009dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dde:	f000 fb13 	bl	800a408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009de2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e58 <xTimerCreateTimerTask+0x84>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d021      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009df2:	1d3a      	adds	r2, r7, #4
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd ffe9 	bl	8007dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	9202      	str	r2, [sp, #8]
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	460a      	mov	r2, r1
 8009e14:	4911      	ldr	r1, [pc, #68]	@ (8009e5c <xTimerCreateTimerTask+0x88>)
 8009e16:	4812      	ldr	r0, [pc, #72]	@ (8009e60 <xTimerCreateTimerTask+0x8c>)
 8009e18:	f7fe ffc0 	bl	8008d9c <xTaskCreateStatic>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4a11      	ldr	r2, [pc, #68]	@ (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e22:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e4c:	697b      	ldr	r3, [r7, #20]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	2000137c 	.word	0x2000137c
 8009e5c:	0800d6d8 	.word	0x0800d6d8
 8009e60:	08009fa1 	.word	0x08009fa1
 8009e64:	20001380 	.word	0x20001380

08009e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	@ 0x28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <xTimerGenericCommand+0x30>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	623b      	str	r3, [r7, #32]
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e98:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02a      	beq.n	8009ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	dc18      	bgt.n	8009ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eb2:	f7ff fdad 	bl	8009a10 <xTaskGetSchedulerState>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d109      	bne.n	8009ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ebc:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	f107 0110 	add.w	r1, r7, #16
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec8:	f7fe fa50 	bl	800836c <xQueueGenericSend>
 8009ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ece:	e012      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f107 0110 	add.w	r1, r7, #16
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7fe fa46 	bl	800836c <xQueueGenericSend>
 8009ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ee2:	e008      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ee4:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	f107 0110 	add.w	r1, r7, #16
 8009eec:	2300      	movs	r3, #0
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	f7fe fb3e 	bl	8008570 <xQueueGenericSendFromISR>
 8009ef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3728      	adds	r7, #40	@ 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	2000137c 	.word	0x2000137c

08009f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0e:	4b23      	ldr	r3, [pc, #140]	@ (8009f9c <prvProcessExpiredTimer+0x98>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd fffd 	bl	8007f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d023      	beq.n	8009f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	18d1      	adds	r1, r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f000 f8d5 	bl	800a0ec <prvInsertTimerInActiveList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff88 	bl	8009e68 <xTimerGenericCommand>
 8009f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d114      	bne.n	8009f8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	4798      	blx	r3
}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20001374 	.word	0x20001374

08009fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fa8:	f107 0308 	add.w	r3, r7, #8
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f859 	bl	800a064 <prvGetNextExpireTime>
 8009fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f805 	bl	8009fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fbe:	f000 f8d7 	bl	800a170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fc2:	bf00      	nop
 8009fc4:	e7f0      	b.n	8009fa8 <prvTimerTask+0x8>
	...

08009fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fd2:	f7ff f927 	bl	8009224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f866 	bl	800a0ac <prvSampleTimeNow>
 8009fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d130      	bne.n	800a04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <prvProcessTimerOrBlockTask+0x3c>
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d806      	bhi.n	800a004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ff6:	f7ff f923 	bl	8009240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff81 	bl	8009f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a002:	e024      	b.n	800a04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d008      	beq.n	800a01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a00a:	4b13      	ldr	r3, [pc, #76]	@ (800a058 <prvProcessTimerOrBlockTask+0x90>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <prvProcessTimerOrBlockTask+0x50>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <prvProcessTimerOrBlockTask+0x52>
 800a018:	2300      	movs	r3, #0
 800a01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a01c:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <prvProcessTimerOrBlockTask+0x94>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4619      	mov	r1, r3
 800a02a:	f7fe fe83 	bl	8008d34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a02e:	f7ff f907 	bl	8009240 <xTaskResumeAll>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a038:	4b09      	ldr	r3, [pc, #36]	@ (800a060 <prvProcessTimerOrBlockTask+0x98>)
 800a03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	f3bf 8f6f 	isb	sy
}
 800a048:	e001      	b.n	800a04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a04a:	f7ff f8f9 	bl	8009240 <xTaskResumeAll>
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20001378 	.word	0x20001378
 800a05c:	2000137c 	.word	0x2000137c
 800a060:	e000ed04 	.word	0xe000ed04

0800a064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a06c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <prvGetNextExpireTime+0x44>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <prvGetNextExpireTime+0x16>
 800a076:	2201      	movs	r2, #1
 800a078:	e000      	b.n	800a07c <prvGetNextExpireTime+0x18>
 800a07a:	2200      	movs	r2, #0
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d105      	bne.n	800a094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a088:	4b07      	ldr	r3, [pc, #28]	@ (800a0a8 <prvGetNextExpireTime+0x44>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	e001      	b.n	800a098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a098:	68fb      	ldr	r3, [r7, #12]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20001374 	.word	0x20001374

0800a0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0b4:	f7ff f962 	bl	800937c <xTaskGetTickCount>
 800a0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <prvSampleTimeNow+0x3c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d205      	bcs.n	800a0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0c4:	f000 f93a 	bl	800a33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e002      	b.n	800a0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0d6:	4a04      	ldr	r2, [pc, #16]	@ (800a0e8 <prvSampleTimeNow+0x3c>)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20001384 	.word	0x20001384

0800a0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d812      	bhi.n	800a138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d302      	bcc.n	800a126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	e01b      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a126:	4b10      	ldr	r3, [pc, #64]	@ (800a168 <prvInsertTimerInActiveList+0x7c>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4619      	mov	r1, r3
 800a130:	4610      	mov	r0, r2
 800a132:	f7fd feba 	bl	8007eaa <vListInsert>
 800a136:	e012      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d206      	bcs.n	800a14e <prvInsertTimerInActiveList+0x62>
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d302      	bcc.n	800a14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e007      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a14e:	4b07      	ldr	r3, [pc, #28]	@ (800a16c <prvInsertTimerInActiveList+0x80>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3304      	adds	r3, #4
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7fd fea6 	bl	8007eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a15e:	697b      	ldr	r3, [r7, #20]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20001378 	.word	0x20001378
 800a16c:	20001374 	.word	0x20001374

0800a170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08e      	sub	sp, #56	@ 0x38
 800a174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a176:	e0ce      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	da19      	bge.n	800a1b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a17e:	1d3b      	adds	r3, r7, #4
 800a180:	3304      	adds	r3, #4
 800a182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61fb      	str	r3, [r7, #28]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1a8:	6850      	ldr	r0, [r2, #4]
 800a1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ac:	6892      	ldr	r2, [r2, #8]
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f2c0 80ae 	blt.w	800a316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fd fea6 	bl	8007f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff ff6a 	bl	800a0ac <prvSampleTimeNow>
 800a1d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	f200 8097 	bhi.w	800a310 <prvProcessReceivedCommands+0x1a0>
 800a1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e8 <prvProcessReceivedCommands+0x78>)
 800a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a287 	.word	0x0800a287
 800a1f8:	0800a29b 	.word	0x0800a29b
 800a1fc:	0800a2e7 	.word	0x0800a2e7
 800a200:	0800a211 	.word	0x0800a211
 800a204:	0800a211 	.word	0x0800a211
 800a208:	0800a287 	.word	0x0800a287
 800a20c:	0800a29b 	.word	0x0800a29b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	18d1      	adds	r1, r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a230:	f7ff ff5c 	bl	800a0ec <prvInsertTimerInActiveList>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d06c      	beq.n	800a314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d061      	beq.n	800a314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	441a      	add	r2, r3
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	2300      	movs	r3, #0
 800a25e:	2100      	movs	r1, #0
 800a260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a262:	f7ff fe01 	bl	8009e68 <xTimerGenericCommand>
 800a266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d152      	bne.n	800a314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	61bb      	str	r3, [r7, #24]
}
 800a280:	bf00      	nop
 800a282:	bf00      	nop
 800a284:	e7fd      	b.n	800a282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a28c:	f023 0301 	bic.w	r3, r3, #1
 800a290:	b2da      	uxtb	r2, r3
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a298:	e03d      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a0:	f043 0301 	orr.w	r3, r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	617b      	str	r3, [r7, #20]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	18d1      	adds	r1, r2, r3
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e0:	f7ff ff04 	bl	800a0ec <prvInsertTimerInActiveList>
					break;
 800a2e4:	e017      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d103      	bne.n	800a2fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a2f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2f6:	f000 fbe7 	bl	800aac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2fa:	e00c      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a30e:	e002      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a310:	bf00      	nop
 800a312:	e000      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
					break;
 800a314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a316:	4b08      	ldr	r3, [pc, #32]	@ (800a338 <prvProcessReceivedCommands+0x1c8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	1d39      	adds	r1, r7, #4
 800a31c:	2200      	movs	r2, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe f9c4 	bl	80086ac <xQueueReceive>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	f47f af26 	bne.w	800a178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	3730      	adds	r7, #48	@ 0x30
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000137c 	.word	0x2000137c

0800a33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a342:	e049      	b.n	800a3d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a344:	4b2e      	ldr	r3, [pc, #184]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34e:	4b2c      	ldr	r3, [pc, #176]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fd fddd 	bl	8007f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d02f      	beq.n	800a3d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4413      	add	r3, r2
 800a380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d90e      	bls.n	800a3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a396:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	f7fd fd82 	bl	8007eaa <vListInsert>
 800a3a6:	e017      	b.n	800a3d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff fd58 	bl	8009e68 <xTimerGenericCommand>
 800a3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10b      	bne.n	800a3d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	603b      	str	r3, [r7, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3d8:	4b09      	ldr	r3, [pc, #36]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1b0      	bne.n	800a344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3e2:	4b07      	ldr	r3, [pc, #28]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3e8:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <prvSwitchTimerLists+0xc8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a04      	ldr	r2, [pc, #16]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3f0:	4a04      	ldr	r2, [pc, #16]	@ (800a404 <prvSwitchTimerLists+0xc8>)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	6013      	str	r3, [r2, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20001374 	.word	0x20001374
 800a404:	20001378 	.word	0x20001378

0800a408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a40e:	f000 f96b 	bl	800a6e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a412:	4b15      	ldr	r3, [pc, #84]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d120      	bne.n	800a45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a41a:	4814      	ldr	r0, [pc, #80]	@ (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a41c:	f7fd fcf4 	bl	8007e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a420:	4813      	ldr	r0, [pc, #76]	@ (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a422:	f7fd fcf1 	bl	8007e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a426:	4b13      	ldr	r3, [pc, #76]	@ (800a474 <prvCheckForValidListAndQueue+0x6c>)
 800a428:	4a10      	ldr	r2, [pc, #64]	@ (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a42c:	4b12      	ldr	r3, [pc, #72]	@ (800a478 <prvCheckForValidListAndQueue+0x70>)
 800a42e:	4a10      	ldr	r2, [pc, #64]	@ (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a432:	2300      	movs	r3, #0
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4b11      	ldr	r3, [pc, #68]	@ (800a47c <prvCheckForValidListAndQueue+0x74>)
 800a438:	4a11      	ldr	r2, [pc, #68]	@ (800a480 <prvCheckForValidListAndQueue+0x78>)
 800a43a:	2110      	movs	r1, #16
 800a43c:	200a      	movs	r0, #10
 800a43e:	f7fd fe01 	bl	8008044 <xQueueGenericCreateStatic>
 800a442:	4603      	mov	r3, r0
 800a444:	4a08      	ldr	r2, [pc, #32]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a448:	4b07      	ldr	r3, [pc, #28]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	490b      	ldr	r1, [pc, #44]	@ (800a484 <prvCheckForValidListAndQueue+0x7c>)
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fc42 	bl	8008ce0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a45c:	f000 f976 	bl	800a74c <vPortExitCritical>
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	2000137c 	.word	0x2000137c
 800a46c:	2000134c 	.word	0x2000134c
 800a470:	20001360 	.word	0x20001360
 800a474:	20001374 	.word	0x20001374
 800a478:	20001378 	.word	0x20001378
 800a47c:	20001428 	.word	0x20001428
 800a480:	20001388 	.word	0x20001388
 800a484:	0800d6e0 	.word	0x0800d6e0

0800a488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3b04      	subs	r3, #4
 800a498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b04      	subs	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f023 0201 	bic.w	r2, r3, #1
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4b8:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ec <pxPortInitialiseStack+0x64>)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3b14      	subs	r3, #20
 800a4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f06f 0202 	mvn.w	r2, #2
 800a4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3b20      	subs	r3, #32
 800a4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	0800a4f1 	.word	0x0800a4f1

0800a4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <prvTaskExitError+0x58>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a502:	d00b      	beq.n	800a51c <prvTaskExitError+0x2c>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60fb      	str	r3, [r7, #12]
}
 800a516:	bf00      	nop
 800a518:	bf00      	nop
 800a51a:	e7fd      	b.n	800a518 <prvTaskExitError+0x28>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	60bb      	str	r3, [r7, #8]
}
 800a52e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a530:	bf00      	nop
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0fc      	beq.n	800a532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000010 	.word	0x20000010
 800a54c:	00000000 	.word	0x00000000

0800a550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a550:	4b07      	ldr	r3, [pc, #28]	@ (800a570 <pxCurrentTCBConst2>)
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	6808      	ldr	r0, [r1, #0]
 800a556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	f380 8809 	msr	PSP, r0
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8811 	msr	BASEPRI, r0
 800a56a:	4770      	bx	lr
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst2>:
 800a570:	20000e4c 	.word	0x20000e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a578:	4808      	ldr	r0, [pc, #32]	@ (800a59c <prvPortStartFirstTask+0x24>)
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	6800      	ldr	r0, [r0, #0]
 800a57e:	f380 8808 	msr	MSP, r0
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8814 	msr	CONTROL, r0
 800a58a:	b662      	cpsie	i
 800a58c:	b661      	cpsie	f
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	df00      	svc	0
 800a598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a59a:	bf00      	nop
 800a59c:	e000ed08 	.word	0xe000ed08

0800a5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5a6:	4b47      	ldr	r3, [pc, #284]	@ (800a6c4 <xPortStartScheduler+0x124>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a47      	ldr	r2, [pc, #284]	@ (800a6c8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10b      	bne.n	800a5c8 <xPortStartScheduler+0x28>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	613b      	str	r3, [r7, #16]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6c4 <xPortStartScheduler+0x124>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6cc <xPortStartScheduler+0x12c>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d10b      	bne.n	800a5ea <xPortStartScheduler+0x4a>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ea:	4b39      	ldr	r3, [pc, #228]	@ (800a6d0 <xPortStartScheduler+0x130>)
 800a5ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	22ff      	movs	r2, #255	@ 0xff
 800a5fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <xPortStartScheduler+0x134>)
 800a610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a612:	4b31      	ldr	r3, [pc, #196]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a614:	2207      	movs	r2, #7
 800a616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a618:	e009      	b.n	800a62e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a61a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3b01      	subs	r3, #1
 800a620:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a636:	2b80      	cmp	r3, #128	@ 0x80
 800a638:	d0ef      	beq.n	800a61a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a63a:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1c3 0307 	rsb	r3, r3, #7
 800a642:	2b04      	cmp	r3, #4
 800a644:	d00b      	beq.n	800a65e <xPortStartScheduler+0xbe>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	e7fd      	b.n	800a65a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a65e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a668:	4b1b      	ldr	r3, [pc, #108]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a670:	4a19      	ldr	r2, [pc, #100]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a67c:	4b17      	ldr	r3, [pc, #92]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a16      	ldr	r2, [pc, #88]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a688:	4b14      	ldr	r3, [pc, #80]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a13      	ldr	r2, [pc, #76]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a694:	f000 f8da 	bl	800a84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a698:	4b11      	ldr	r3, [pc, #68]	@ (800a6e0 <xPortStartScheduler+0x140>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a69e:	f000 f8f9 	bl	800a894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6a2:	4b10      	ldr	r3, [pc, #64]	@ (800a6e4 <xPortStartScheduler+0x144>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a6e4 <xPortStartScheduler+0x144>)
 800a6a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6ae:	f7ff ff63 	bl	800a578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6b2:	f7fe ff2d 	bl	8009510 <vTaskSwitchContext>
	prvTaskExitError();
 800a6b6:	f7ff ff1b 	bl	800a4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	e000ed00 	.word	0xe000ed00
 800a6c8:	410fc271 	.word	0x410fc271
 800a6cc:	410fc270 	.word	0x410fc270
 800a6d0:	e000e400 	.word	0xe000e400
 800a6d4:	20001478 	.word	0x20001478
 800a6d8:	2000147c 	.word	0x2000147c
 800a6dc:	e000ed20 	.word	0xe000ed20
 800a6e0:	20000010 	.word	0x20000010
 800a6e4:	e000ef34 	.word	0xe000ef34

0800a6e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	607b      	str	r3, [r7, #4]
}
 800a700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3301      	adds	r3, #1
 800a708:	4a0e      	ldr	r2, [pc, #56]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a70a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a70c:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d110      	bne.n	800a736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a714:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <vPortEnterCritical+0x60>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <vPortEnterCritical+0x4e>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	603b      	str	r3, [r7, #0]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <vPortEnterCritical+0x4a>
	}
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20000010 	.word	0x20000010
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a752:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <vPortExitCritical+0x26>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a772:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <vPortExitCritical+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	4a08      	ldr	r2, [pc, #32]	@ (800a79c <vPortExitCritical+0x50>)
 800a77a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <vPortExitCritical+0x50>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <vPortExitCritical+0x44>
 800a784:	2300      	movs	r3, #0
 800a786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f383 8811 	msr	BASEPRI, r3
}
 800a78e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	20000010 	.word	0x20000010

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	@ (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7c4:	f380 8811 	msr	BASEPRI, r0
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f7fe fe9e 	bl	8009510 <vTaskSwitchContext>
 800a7d4:	f04f 0000 	mov.w	r0, #0
 800a7d8:	f380 8811 	msr	BASEPRI, r0
 800a7dc:	bc09      	pop	{r0, r3}
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	f01e 0f10 	tst.w	lr, #16
 800a7ea:	bf08      	it	eq
 800a7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f0:	f380 8809 	msr	PSP, r0
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst>:
 800a800:	20000e4c 	.word	0x20000e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a822:	f7fe fdbb 	bl	800939c <xTaskIncrementTick>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a82c:	4b06      	ldr	r3, [pc, #24]	@ (800a848 <xPortSysTickHandler+0x40>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a856:	4b0b      	ldr	r3, [pc, #44]	@ (800a884 <vPortSetupTimerInterrupt+0x38>)
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <vPortSetupTimerInterrupt+0x3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0a      	ldr	r2, [pc, #40]	@ (800a88c <vPortSetupTimerInterrupt+0x40>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	4a09      	ldr	r2, [pc, #36]	@ (800a890 <vPortSetupTimerInterrupt+0x44>)
 800a86a:	3b01      	subs	r3, #1
 800a86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a86e:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a870:	2207      	movs	r2, #7
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	e000e010 	.word	0xe000e010
 800a884:	e000e018 	.word	0xe000e018
 800a888:	20000004 	.word	0x20000004
 800a88c:	10624dd3 	.word	0x10624dd3
 800a890:	e000e014 	.word	0xe000e014

0800a894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8a4 <vPortEnableVFP+0x10>
 800a898:	6801      	ldr	r1, [r0, #0]
 800a89a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a89e:	6001      	str	r1, [r0, #0]
 800a8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8a2:	bf00      	nop
 800a8a4:	e000ed88 	.word	0xe000ed88

0800a8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b0f      	cmp	r3, #15
 800a8b8:	d915      	bls.n	800a8e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ba:	4a18      	ldr	r2, [pc, #96]	@ (800a91c <vPortValidateInterruptPriority+0x74>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8c4:	4b16      	ldr	r3, [pc, #88]	@ (800a920 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7afa      	ldrb	r2, [r7, #11]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d20b      	bcs.n	800a8e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a924 <vPortValidateInterruptPriority+0x7c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a928 <vPortValidateInterruptPriority+0x80>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d90b      	bls.n	800a90e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	603b      	str	r3, [r7, #0]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vPortValidateInterruptPriority+0x62>
	}
 800a90e:	bf00      	nop
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	e000e3f0 	.word	0xe000e3f0
 800a920:	20001478 	.word	0x20001478
 800a924:	e000ed0c 	.word	0xe000ed0c
 800a928:	2000147c 	.word	0x2000147c

0800a92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	@ 0x28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a938:	f7fe fc74 	bl	8009224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a93c:	4b5c      	ldr	r3, [pc, #368]	@ (800aab0 <pvPortMalloc+0x184>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a944:	f000 f924 	bl	800ab90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a948:	4b5a      	ldr	r3, [pc, #360]	@ (800aab4 <pvPortMalloc+0x188>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 8095 	bne.w	800aa80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01e      	beq.n	800a99a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a95c:	2208      	movs	r2, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d015      	beq.n	800a99a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f023 0307 	bic.w	r3, r3, #7
 800a974:	3308      	adds	r3, #8
 800a976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <pvPortMalloc+0x6e>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	617b      	str	r3, [r7, #20]
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d06f      	beq.n	800aa80 <pvPortMalloc+0x154>
 800a9a0:	4b45      	ldr	r3, [pc, #276]	@ (800aab8 <pvPortMalloc+0x18c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d86a      	bhi.n	800aa80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9aa:	4b44      	ldr	r3, [pc, #272]	@ (800aabc <pvPortMalloc+0x190>)
 800a9ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9ae:	4b43      	ldr	r3, [pc, #268]	@ (800aabc <pvPortMalloc+0x190>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9b4:	e004      	b.n	800a9c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d903      	bls.n	800a9d2 <pvPortMalloc+0xa6>
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1f1      	bne.n	800a9b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9d2:	4b37      	ldr	r3, [pc, #220]	@ (800aab0 <pvPortMalloc+0x184>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d051      	beq.n	800aa80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	4413      	add	r3, r2
 800a9e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	1ad2      	subs	r2, r2, r3
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d920      	bls.n	800aa40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4413      	add	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00b      	beq.n	800aa28 <pvPortMalloc+0xfc>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	e7fd      	b.n	800aa24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa3a:	69b8      	ldr	r0, [r7, #24]
 800aa3c:	f000 f90a 	bl	800ac54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa40:	4b1d      	ldr	r3, [pc, #116]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	4a1b      	ldr	r2, [pc, #108]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa4e:	4b1a      	ldr	r3, [pc, #104]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b1b      	ldr	r3, [pc, #108]	@ (800aac0 <pvPortMalloc+0x194>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d203      	bcs.n	800aa62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa5a:	4b17      	ldr	r3, [pc, #92]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	@ (800aac0 <pvPortMalloc+0x194>)
 800aa60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	4b13      	ldr	r3, [pc, #76]	@ (800aab4 <pvPortMalloc+0x188>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa76:	4b13      	ldr	r3, [pc, #76]	@ (800aac4 <pvPortMalloc+0x198>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	4a11      	ldr	r2, [pc, #68]	@ (800aac4 <pvPortMalloc+0x198>)
 800aa7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa80:	f7fe fbde 	bl	8009240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00b      	beq.n	800aaa6 <pvPortMalloc+0x17a>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	60fb      	str	r3, [r7, #12]
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <pvPortMalloc+0x176>
	return pvReturn;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3728      	adds	r7, #40	@ 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20002040 	.word	0x20002040
 800aab4:	20002054 	.word	0x20002054
 800aab8:	20002044 	.word	0x20002044
 800aabc:	20002038 	.word	0x20002038
 800aac0:	20002048 	.word	0x20002048
 800aac4:	2000204c 	.word	0x2000204c

0800aac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d04f      	beq.n	800ab7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aada:	2308      	movs	r3, #8
 800aadc:	425b      	negs	r3, r3
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4413      	add	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	4b25      	ldr	r3, [pc, #148]	@ (800ab84 <vPortFree+0xbc>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <vPortFree+0x46>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00b      	beq.n	800ab2e <vPortFree+0x66>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	4b14      	ldr	r3, [pc, #80]	@ (800ab84 <vPortFree+0xbc>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4013      	ands	r3, r2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01e      	beq.n	800ab7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d11a      	bne.n	800ab7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	4b0e      	ldr	r3, [pc, #56]	@ (800ab84 <vPortFree+0xbc>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	43db      	mvns	r3, r3
 800ab4e:	401a      	ands	r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab54:	f7fe fb66 	bl	8009224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <vPortFree+0xc0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4413      	add	r3, r2
 800ab62:	4a09      	ldr	r2, [pc, #36]	@ (800ab88 <vPortFree+0xc0>)
 800ab64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab66:	6938      	ldr	r0, [r7, #16]
 800ab68:	f000 f874 	bl	800ac54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab6c:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <vPortFree+0xc4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3301      	adds	r3, #1
 800ab72:	4a06      	ldr	r2, [pc, #24]	@ (800ab8c <vPortFree+0xc4>)
 800ab74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab76:	f7fe fb63 	bl	8009240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20002054 	.word	0x20002054
 800ab88:	20002044 	.word	0x20002044
 800ab8c:	20002050 	.word	0x20002050

0800ab90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ab9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab9c:	4b27      	ldr	r3, [pc, #156]	@ (800ac3c <prvHeapInit+0xac>)
 800ab9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00c      	beq.n	800abc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3307      	adds	r3, #7
 800abae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0307 	bic.w	r3, r3, #7
 800abb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	4a1f      	ldr	r2, [pc, #124]	@ (800ac3c <prvHeapInit+0xac>)
 800abc0:	4413      	add	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac40 <prvHeapInit+0xb0>)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abce:	4b1c      	ldr	r3, [pc, #112]	@ (800ac40 <prvHeapInit+0xb0>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	4413      	add	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abdc:	2208      	movs	r2, #8
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0307 	bic.w	r3, r3, #7
 800abea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4a15      	ldr	r2, [pc, #84]	@ (800ac44 <prvHeapInit+0xb4>)
 800abf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abf2:	4b14      	ldr	r3, [pc, #80]	@ (800ac44 <prvHeapInit+0xb4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2200      	movs	r2, #0
 800abf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abfa:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <prvHeapInit+0xb4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac10:	4b0c      	ldr	r3, [pc, #48]	@ (800ac44 <prvHeapInit+0xb4>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac48 <prvHeapInit+0xb8>)
 800ac1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4a09      	ldr	r2, [pc, #36]	@ (800ac4c <prvHeapInit+0xbc>)
 800ac26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <prvHeapInit+0xc0>)
 800ac2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac2e:	601a      	str	r2, [r3, #0]
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	20001480 	.word	0x20001480
 800ac40:	20002038 	.word	0x20002038
 800ac44:	20002040 	.word	0x20002040
 800ac48:	20002048 	.word	0x20002048
 800ac4c:	20002044 	.word	0x20002044
 800ac50:	20002054 	.word	0x20002054

0800ac54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac5c:	4b28      	ldr	r3, [pc, #160]	@ (800ad00 <prvInsertBlockIntoFreeList+0xac>)
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e002      	b.n	800ac68 <prvInsertBlockIntoFreeList+0x14>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d8f7      	bhi.n	800ac62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d108      	bne.n	800ac96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	441a      	add	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	441a      	add	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d118      	bne.n	800acdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b15      	ldr	r3, [pc, #84]	@ (800ad04 <prvInsertBlockIntoFreeList+0xb0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d00d      	beq.n	800acd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	441a      	add	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	e008      	b.n	800ace4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad04 <prvInsertBlockIntoFreeList+0xb0>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	e003      	b.n	800ace4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d002      	beq.n	800acf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20002038 	.word	0x20002038
 800ad04:	20002040 	.word	0x20002040

0800ad08 <__cvt>:
 800ad08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0c:	ec57 6b10 	vmov	r6, r7, d0
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4619      	mov	r1, r3
 800ad16:	463b      	mov	r3, r7
 800ad18:	bfbb      	ittet	lt
 800ad1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad1e:	461f      	movlt	r7, r3
 800ad20:	2300      	movge	r3, #0
 800ad22:	232d      	movlt	r3, #45	@ 0x2d
 800ad24:	700b      	strb	r3, [r1, #0]
 800ad26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad2c:	4691      	mov	r9, r2
 800ad2e:	f023 0820 	bic.w	r8, r3, #32
 800ad32:	bfbc      	itt	lt
 800ad34:	4632      	movlt	r2, r6
 800ad36:	4616      	movlt	r6, r2
 800ad38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad3c:	d005      	beq.n	800ad4a <__cvt+0x42>
 800ad3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad42:	d100      	bne.n	800ad46 <__cvt+0x3e>
 800ad44:	3401      	adds	r4, #1
 800ad46:	2102      	movs	r1, #2
 800ad48:	e000      	b.n	800ad4c <__cvt+0x44>
 800ad4a:	2103      	movs	r1, #3
 800ad4c:	ab03      	add	r3, sp, #12
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	ab02      	add	r3, sp, #8
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	ec47 6b10 	vmov	d0, r6, r7
 800ad58:	4653      	mov	r3, sl
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	f000 fe48 	bl	800b9f0 <_dtoa_r>
 800ad60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad64:	4605      	mov	r5, r0
 800ad66:	d119      	bne.n	800ad9c <__cvt+0x94>
 800ad68:	f019 0f01 	tst.w	r9, #1
 800ad6c:	d00e      	beq.n	800ad8c <__cvt+0x84>
 800ad6e:	eb00 0904 	add.w	r9, r0, r4
 800ad72:	2200      	movs	r2, #0
 800ad74:	2300      	movs	r3, #0
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	f7f5 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad7e:	b108      	cbz	r0, 800ad84 <__cvt+0x7c>
 800ad80:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad84:	2230      	movs	r2, #48	@ 0x30
 800ad86:	9b03      	ldr	r3, [sp, #12]
 800ad88:	454b      	cmp	r3, r9
 800ad8a:	d31e      	bcc.n	800adca <__cvt+0xc2>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad90:	1b5b      	subs	r3, r3, r5
 800ad92:	4628      	mov	r0, r5
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	b004      	add	sp, #16
 800ad98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ada0:	eb00 0904 	add.w	r9, r0, r4
 800ada4:	d1e5      	bne.n	800ad72 <__cvt+0x6a>
 800ada6:	7803      	ldrb	r3, [r0, #0]
 800ada8:	2b30      	cmp	r3, #48	@ 0x30
 800adaa:	d10a      	bne.n	800adc2 <__cvt+0xba>
 800adac:	2200      	movs	r2, #0
 800adae:	2300      	movs	r3, #0
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 800adb8:	b918      	cbnz	r0, 800adc2 <__cvt+0xba>
 800adba:	f1c4 0401 	rsb	r4, r4, #1
 800adbe:	f8ca 4000 	str.w	r4, [sl]
 800adc2:	f8da 3000 	ldr.w	r3, [sl]
 800adc6:	4499      	add	r9, r3
 800adc8:	e7d3      	b.n	800ad72 <__cvt+0x6a>
 800adca:	1c59      	adds	r1, r3, #1
 800adcc:	9103      	str	r1, [sp, #12]
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	e7d9      	b.n	800ad86 <__cvt+0x7e>

0800add2 <__exponent>:
 800add2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add4:	2900      	cmp	r1, #0
 800add6:	bfba      	itte	lt
 800add8:	4249      	neglt	r1, r1
 800adda:	232d      	movlt	r3, #45	@ 0x2d
 800addc:	232b      	movge	r3, #43	@ 0x2b
 800adde:	2909      	cmp	r1, #9
 800ade0:	7002      	strb	r2, [r0, #0]
 800ade2:	7043      	strb	r3, [r0, #1]
 800ade4:	dd29      	ble.n	800ae3a <__exponent+0x68>
 800ade6:	f10d 0307 	add.w	r3, sp, #7
 800adea:	461d      	mov	r5, r3
 800adec:	270a      	movs	r7, #10
 800adee:	461a      	mov	r2, r3
 800adf0:	fbb1 f6f7 	udiv	r6, r1, r7
 800adf4:	fb07 1416 	mls	r4, r7, r6, r1
 800adf8:	3430      	adds	r4, #48	@ 0x30
 800adfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adfe:	460c      	mov	r4, r1
 800ae00:	2c63      	cmp	r4, #99	@ 0x63
 800ae02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ae06:	4631      	mov	r1, r6
 800ae08:	dcf1      	bgt.n	800adee <__exponent+0x1c>
 800ae0a:	3130      	adds	r1, #48	@ 0x30
 800ae0c:	1e94      	subs	r4, r2, #2
 800ae0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae12:	1c41      	adds	r1, r0, #1
 800ae14:	4623      	mov	r3, r4
 800ae16:	42ab      	cmp	r3, r5
 800ae18:	d30a      	bcc.n	800ae30 <__exponent+0x5e>
 800ae1a:	f10d 0309 	add.w	r3, sp, #9
 800ae1e:	1a9b      	subs	r3, r3, r2
 800ae20:	42ac      	cmp	r4, r5
 800ae22:	bf88      	it	hi
 800ae24:	2300      	movhi	r3, #0
 800ae26:	3302      	adds	r3, #2
 800ae28:	4403      	add	r3, r0
 800ae2a:	1a18      	subs	r0, r3, r0
 800ae2c:	b003      	add	sp, #12
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae30:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae34:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae38:	e7ed      	b.n	800ae16 <__exponent+0x44>
 800ae3a:	2330      	movs	r3, #48	@ 0x30
 800ae3c:	3130      	adds	r1, #48	@ 0x30
 800ae3e:	7083      	strb	r3, [r0, #2]
 800ae40:	70c1      	strb	r1, [r0, #3]
 800ae42:	1d03      	adds	r3, r0, #4
 800ae44:	e7f1      	b.n	800ae2a <__exponent+0x58>
	...

0800ae48 <_printf_float>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	b08d      	sub	sp, #52	@ 0x34
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae54:	4616      	mov	r6, r2
 800ae56:	461f      	mov	r7, r3
 800ae58:	4605      	mov	r5, r0
 800ae5a:	f000 fcbb 	bl	800b7d4 <_localeconv_r>
 800ae5e:	6803      	ldr	r3, [r0, #0]
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f5 fa04 	bl	8000270 <strlen>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae70:	9005      	str	r0, [sp, #20]
 800ae72:	3307      	adds	r3, #7
 800ae74:	f023 0307 	bic.w	r3, r3, #7
 800ae78:	f103 0208 	add.w	r2, r3, #8
 800ae7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae80:	f8d4 b000 	ldr.w	fp, [r4]
 800ae84:	f8c8 2000 	str.w	r2, [r8]
 800ae88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae90:	9307      	str	r3, [sp, #28]
 800ae92:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae9e:	4b9c      	ldr	r3, [pc, #624]	@ (800b110 <_printf_float+0x2c8>)
 800aea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aea4:	f7f5 fe42 	bl	8000b2c <__aeabi_dcmpun>
 800aea8:	bb70      	cbnz	r0, 800af08 <_printf_float+0xc0>
 800aeaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeae:	4b98      	ldr	r3, [pc, #608]	@ (800b110 <_printf_float+0x2c8>)
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aeb4:	f7f5 fe1c 	bl	8000af0 <__aeabi_dcmple>
 800aeb8:	bb30      	cbnz	r0, 800af08 <_printf_float+0xc0>
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7f5 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800aec6:	b110      	cbz	r0, 800aece <_printf_float+0x86>
 800aec8:	232d      	movs	r3, #45	@ 0x2d
 800aeca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aece:	4a91      	ldr	r2, [pc, #580]	@ (800b114 <_printf_float+0x2cc>)
 800aed0:	4b91      	ldr	r3, [pc, #580]	@ (800b118 <_printf_float+0x2d0>)
 800aed2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aed6:	bf94      	ite	ls
 800aed8:	4690      	movls	r8, r2
 800aeda:	4698      	movhi	r8, r3
 800aedc:	2303      	movs	r3, #3
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	f02b 0304 	bic.w	r3, fp, #4
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	f04f 0900 	mov.w	r9, #0
 800aeea:	9700      	str	r7, [sp, #0]
 800aeec:	4633      	mov	r3, r6
 800aeee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aef0:	4621      	mov	r1, r4
 800aef2:	4628      	mov	r0, r5
 800aef4:	f000 f9d2 	bl	800b29c <_printf_common>
 800aef8:	3001      	adds	r0, #1
 800aefa:	f040 808d 	bne.w	800b018 <_printf_float+0x1d0>
 800aefe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af02:	b00d      	add	sp, #52	@ 0x34
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	4642      	mov	r2, r8
 800af0a:	464b      	mov	r3, r9
 800af0c:	4640      	mov	r0, r8
 800af0e:	4649      	mov	r1, r9
 800af10:	f7f5 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 800af14:	b140      	cbz	r0, 800af28 <_printf_float+0xe0>
 800af16:	464b      	mov	r3, r9
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfbc      	itt	lt
 800af1c:	232d      	movlt	r3, #45	@ 0x2d
 800af1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af22:	4a7e      	ldr	r2, [pc, #504]	@ (800b11c <_printf_float+0x2d4>)
 800af24:	4b7e      	ldr	r3, [pc, #504]	@ (800b120 <_printf_float+0x2d8>)
 800af26:	e7d4      	b.n	800aed2 <_printf_float+0x8a>
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af2e:	9206      	str	r2, [sp, #24]
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	d13b      	bne.n	800afac <_printf_float+0x164>
 800af34:	2306      	movs	r3, #6
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af3c:	2300      	movs	r3, #0
 800af3e:	6022      	str	r2, [r4, #0]
 800af40:	9303      	str	r3, [sp, #12]
 800af42:	ab0a      	add	r3, sp, #40	@ 0x28
 800af44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af48:	ab09      	add	r3, sp, #36	@ 0x24
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	6861      	ldr	r1, [r4, #4]
 800af4e:	ec49 8b10 	vmov	d0, r8, r9
 800af52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af56:	4628      	mov	r0, r5
 800af58:	f7ff fed6 	bl	800ad08 <__cvt>
 800af5c:	9b06      	ldr	r3, [sp, #24]
 800af5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af60:	2b47      	cmp	r3, #71	@ 0x47
 800af62:	4680      	mov	r8, r0
 800af64:	d129      	bne.n	800afba <_printf_float+0x172>
 800af66:	1cc8      	adds	r0, r1, #3
 800af68:	db02      	blt.n	800af70 <_printf_float+0x128>
 800af6a:	6863      	ldr	r3, [r4, #4]
 800af6c:	4299      	cmp	r1, r3
 800af6e:	dd41      	ble.n	800aff4 <_printf_float+0x1ac>
 800af70:	f1aa 0a02 	sub.w	sl, sl, #2
 800af74:	fa5f fa8a 	uxtb.w	sl, sl
 800af78:	3901      	subs	r1, #1
 800af7a:	4652      	mov	r2, sl
 800af7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af80:	9109      	str	r1, [sp, #36]	@ 0x24
 800af82:	f7ff ff26 	bl	800add2 <__exponent>
 800af86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af88:	1813      	adds	r3, r2, r0
 800af8a:	2a01      	cmp	r2, #1
 800af8c:	4681      	mov	r9, r0
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	dc02      	bgt.n	800af98 <_printf_float+0x150>
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	07d2      	lsls	r2, r2, #31
 800af96:	d501      	bpl.n	800af9c <_printf_float+0x154>
 800af98:	3301      	adds	r3, #1
 800af9a:	6123      	str	r3, [r4, #16]
 800af9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0a2      	beq.n	800aeea <_printf_float+0xa2>
 800afa4:	232d      	movs	r3, #45	@ 0x2d
 800afa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afaa:	e79e      	b.n	800aeea <_printf_float+0xa2>
 800afac:	9a06      	ldr	r2, [sp, #24]
 800afae:	2a47      	cmp	r2, #71	@ 0x47
 800afb0:	d1c2      	bne.n	800af38 <_printf_float+0xf0>
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1c0      	bne.n	800af38 <_printf_float+0xf0>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e7bd      	b.n	800af36 <_printf_float+0xee>
 800afba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afbe:	d9db      	bls.n	800af78 <_printf_float+0x130>
 800afc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afc4:	d118      	bne.n	800aff8 <_printf_float+0x1b0>
 800afc6:	2900      	cmp	r1, #0
 800afc8:	6863      	ldr	r3, [r4, #4]
 800afca:	dd0b      	ble.n	800afe4 <_printf_float+0x19c>
 800afcc:	6121      	str	r1, [r4, #16]
 800afce:	b913      	cbnz	r3, 800afd6 <_printf_float+0x18e>
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	07d0      	lsls	r0, r2, #31
 800afd4:	d502      	bpl.n	800afdc <_printf_float+0x194>
 800afd6:	3301      	adds	r3, #1
 800afd8:	440b      	add	r3, r1
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800afde:	f04f 0900 	mov.w	r9, #0
 800afe2:	e7db      	b.n	800af9c <_printf_float+0x154>
 800afe4:	b913      	cbnz	r3, 800afec <_printf_float+0x1a4>
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	07d2      	lsls	r2, r2, #31
 800afea:	d501      	bpl.n	800aff0 <_printf_float+0x1a8>
 800afec:	3302      	adds	r3, #2
 800afee:	e7f4      	b.n	800afda <_printf_float+0x192>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e7f2      	b.n	800afda <_printf_float+0x192>
 800aff4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affa:	4299      	cmp	r1, r3
 800affc:	db05      	blt.n	800b00a <_printf_float+0x1c2>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	6121      	str	r1, [r4, #16]
 800b002:	07d8      	lsls	r0, r3, #31
 800b004:	d5ea      	bpl.n	800afdc <_printf_float+0x194>
 800b006:	1c4b      	adds	r3, r1, #1
 800b008:	e7e7      	b.n	800afda <_printf_float+0x192>
 800b00a:	2900      	cmp	r1, #0
 800b00c:	bfd4      	ite	le
 800b00e:	f1c1 0202 	rsble	r2, r1, #2
 800b012:	2201      	movgt	r2, #1
 800b014:	4413      	add	r3, r2
 800b016:	e7e0      	b.n	800afda <_printf_float+0x192>
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	055a      	lsls	r2, r3, #21
 800b01c:	d407      	bmi.n	800b02e <_printf_float+0x1e6>
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	4642      	mov	r2, r8
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	d12b      	bne.n	800b084 <_printf_float+0x23c>
 800b02c:	e767      	b.n	800aefe <_printf_float+0xb6>
 800b02e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b032:	f240 80dd 	bls.w	800b1f0 <_printf_float+0x3a8>
 800b036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f7f5 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 800b042:	2800      	cmp	r0, #0
 800b044:	d033      	beq.n	800b0ae <_printf_float+0x266>
 800b046:	4a37      	ldr	r2, [pc, #220]	@ (800b124 <_printf_float+0x2dc>)
 800b048:	2301      	movs	r3, #1
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	f43f af54 	beq.w	800aefe <_printf_float+0xb6>
 800b056:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b05a:	4543      	cmp	r3, r8
 800b05c:	db02      	blt.n	800b064 <_printf_float+0x21c>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	07d8      	lsls	r0, r3, #31
 800b062:	d50f      	bpl.n	800b084 <_printf_float+0x23c>
 800b064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f af45 	beq.w	800aefe <_printf_float+0xb6>
 800b074:	f04f 0900 	mov.w	r9, #0
 800b078:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b07c:	f104 0a1a 	add.w	sl, r4, #26
 800b080:	45c8      	cmp	r8, r9
 800b082:	dc09      	bgt.n	800b098 <_printf_float+0x250>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	079b      	lsls	r3, r3, #30
 800b088:	f100 8103 	bmi.w	800b292 <_printf_float+0x44a>
 800b08c:	68e0      	ldr	r0, [r4, #12]
 800b08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b090:	4298      	cmp	r0, r3
 800b092:	bfb8      	it	lt
 800b094:	4618      	movlt	r0, r3
 800b096:	e734      	b.n	800af02 <_printf_float+0xba>
 800b098:	2301      	movs	r3, #1
 800b09a:	4652      	mov	r2, sl
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f af2b 	beq.w	800aefe <_printf_float+0xb6>
 800b0a8:	f109 0901 	add.w	r9, r9, #1
 800b0ac:	e7e8      	b.n	800b080 <_printf_float+0x238>
 800b0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dc39      	bgt.n	800b128 <_printf_float+0x2e0>
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b124 <_printf_float+0x2dc>)
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f43f af1d 	beq.w	800aefe <_printf_float+0xb6>
 800b0c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0c8:	ea59 0303 	orrs.w	r3, r9, r3
 800b0cc:	d102      	bne.n	800b0d4 <_printf_float+0x28c>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	07d9      	lsls	r1, r3, #31
 800b0d2:	d5d7      	bpl.n	800b084 <_printf_float+0x23c>
 800b0d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b8      	blx	r7
 800b0de:	3001      	adds	r0, #1
 800b0e0:	f43f af0d 	beq.w	800aefe <_printf_float+0xb6>
 800b0e4:	f04f 0a00 	mov.w	sl, #0
 800b0e8:	f104 0b1a 	add.w	fp, r4, #26
 800b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ee:	425b      	negs	r3, r3
 800b0f0:	4553      	cmp	r3, sl
 800b0f2:	dc01      	bgt.n	800b0f8 <_printf_float+0x2b0>
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	e793      	b.n	800b020 <_printf_float+0x1d8>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	465a      	mov	r2, fp
 800b0fc:	4631      	mov	r1, r6
 800b0fe:	4628      	mov	r0, r5
 800b100:	47b8      	blx	r7
 800b102:	3001      	adds	r0, #1
 800b104:	f43f aefb 	beq.w	800aefe <_printf_float+0xb6>
 800b108:	f10a 0a01 	add.w	sl, sl, #1
 800b10c:	e7ee      	b.n	800b0ec <_printf_float+0x2a4>
 800b10e:	bf00      	nop
 800b110:	7fefffff 	.word	0x7fefffff
 800b114:	0800da00 	.word	0x0800da00
 800b118:	0800da04 	.word	0x0800da04
 800b11c:	0800da08 	.word	0x0800da08
 800b120:	0800da0c 	.word	0x0800da0c
 800b124:	0800da10 	.word	0x0800da10
 800b128:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b12a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b12e:	4553      	cmp	r3, sl
 800b130:	bfa8      	it	ge
 800b132:	4653      	movge	r3, sl
 800b134:	2b00      	cmp	r3, #0
 800b136:	4699      	mov	r9, r3
 800b138:	dc36      	bgt.n	800b1a8 <_printf_float+0x360>
 800b13a:	f04f 0b00 	mov.w	fp, #0
 800b13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b142:	f104 021a 	add.w	r2, r4, #26
 800b146:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b148:	9306      	str	r3, [sp, #24]
 800b14a:	eba3 0309 	sub.w	r3, r3, r9
 800b14e:	455b      	cmp	r3, fp
 800b150:	dc31      	bgt.n	800b1b6 <_printf_float+0x36e>
 800b152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b154:	459a      	cmp	sl, r3
 800b156:	dc3a      	bgt.n	800b1ce <_printf_float+0x386>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	07da      	lsls	r2, r3, #31
 800b15c:	d437      	bmi.n	800b1ce <_printf_float+0x386>
 800b15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b160:	ebaa 0903 	sub.w	r9, sl, r3
 800b164:	9b06      	ldr	r3, [sp, #24]
 800b166:	ebaa 0303 	sub.w	r3, sl, r3
 800b16a:	4599      	cmp	r9, r3
 800b16c:	bfa8      	it	ge
 800b16e:	4699      	movge	r9, r3
 800b170:	f1b9 0f00 	cmp.w	r9, #0
 800b174:	dc33      	bgt.n	800b1de <_printf_float+0x396>
 800b176:	f04f 0800 	mov.w	r8, #0
 800b17a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b17e:	f104 0b1a 	add.w	fp, r4, #26
 800b182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b184:	ebaa 0303 	sub.w	r3, sl, r3
 800b188:	eba3 0309 	sub.w	r3, r3, r9
 800b18c:	4543      	cmp	r3, r8
 800b18e:	f77f af79 	ble.w	800b084 <_printf_float+0x23c>
 800b192:	2301      	movs	r3, #1
 800b194:	465a      	mov	r2, fp
 800b196:	4631      	mov	r1, r6
 800b198:	4628      	mov	r0, r5
 800b19a:	47b8      	blx	r7
 800b19c:	3001      	adds	r0, #1
 800b19e:	f43f aeae 	beq.w	800aefe <_printf_float+0xb6>
 800b1a2:	f108 0801 	add.w	r8, r8, #1
 800b1a6:	e7ec      	b.n	800b182 <_printf_float+0x33a>
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	47b8      	blx	r7
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d1c2      	bne.n	800b13a <_printf_float+0x2f2>
 800b1b4:	e6a3      	b.n	800aefe <_printf_float+0xb6>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	9206      	str	r2, [sp, #24]
 800b1be:	47b8      	blx	r7
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	f43f ae9c 	beq.w	800aefe <_printf_float+0xb6>
 800b1c6:	9a06      	ldr	r2, [sp, #24]
 800b1c8:	f10b 0b01 	add.w	fp, fp, #1
 800b1cc:	e7bb      	b.n	800b146 <_printf_float+0x2fe>
 800b1ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d1c0      	bne.n	800b15e <_printf_float+0x316>
 800b1dc:	e68f      	b.n	800aefe <_printf_float+0xb6>
 800b1de:	9a06      	ldr	r2, [sp, #24]
 800b1e0:	464b      	mov	r3, r9
 800b1e2:	4442      	add	r2, r8
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d1c3      	bne.n	800b176 <_printf_float+0x32e>
 800b1ee:	e686      	b.n	800aefe <_printf_float+0xb6>
 800b1f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1f4:	f1ba 0f01 	cmp.w	sl, #1
 800b1f8:	dc01      	bgt.n	800b1fe <_printf_float+0x3b6>
 800b1fa:	07db      	lsls	r3, r3, #31
 800b1fc:	d536      	bpl.n	800b26c <_printf_float+0x424>
 800b1fe:	2301      	movs	r3, #1
 800b200:	4642      	mov	r2, r8
 800b202:	4631      	mov	r1, r6
 800b204:	4628      	mov	r0, r5
 800b206:	47b8      	blx	r7
 800b208:	3001      	adds	r0, #1
 800b20a:	f43f ae78 	beq.w	800aefe <_printf_float+0xb6>
 800b20e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b212:	4631      	mov	r1, r6
 800b214:	4628      	mov	r0, r5
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f ae70 	beq.w	800aefe <_printf_float+0xb6>
 800b21e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b222:	2200      	movs	r2, #0
 800b224:	2300      	movs	r3, #0
 800b226:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b22a:	f7f5 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b22e:	b9c0      	cbnz	r0, 800b262 <_printf_float+0x41a>
 800b230:	4653      	mov	r3, sl
 800b232:	f108 0201 	add.w	r2, r8, #1
 800b236:	4631      	mov	r1, r6
 800b238:	4628      	mov	r0, r5
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	d10c      	bne.n	800b25a <_printf_float+0x412>
 800b240:	e65d      	b.n	800aefe <_printf_float+0xb6>
 800b242:	2301      	movs	r3, #1
 800b244:	465a      	mov	r2, fp
 800b246:	4631      	mov	r1, r6
 800b248:	4628      	mov	r0, r5
 800b24a:	47b8      	blx	r7
 800b24c:	3001      	adds	r0, #1
 800b24e:	f43f ae56 	beq.w	800aefe <_printf_float+0xb6>
 800b252:	f108 0801 	add.w	r8, r8, #1
 800b256:	45d0      	cmp	r8, sl
 800b258:	dbf3      	blt.n	800b242 <_printf_float+0x3fa>
 800b25a:	464b      	mov	r3, r9
 800b25c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b260:	e6df      	b.n	800b022 <_printf_float+0x1da>
 800b262:	f04f 0800 	mov.w	r8, #0
 800b266:	f104 0b1a 	add.w	fp, r4, #26
 800b26a:	e7f4      	b.n	800b256 <_printf_float+0x40e>
 800b26c:	2301      	movs	r3, #1
 800b26e:	4642      	mov	r2, r8
 800b270:	e7e1      	b.n	800b236 <_printf_float+0x3ee>
 800b272:	2301      	movs	r3, #1
 800b274:	464a      	mov	r2, r9
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	f43f ae3e 	beq.w	800aefe <_printf_float+0xb6>
 800b282:	f108 0801 	add.w	r8, r8, #1
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b28a:	1a5b      	subs	r3, r3, r1
 800b28c:	4543      	cmp	r3, r8
 800b28e:	dcf0      	bgt.n	800b272 <_printf_float+0x42a>
 800b290:	e6fc      	b.n	800b08c <_printf_float+0x244>
 800b292:	f04f 0800 	mov.w	r8, #0
 800b296:	f104 0919 	add.w	r9, r4, #25
 800b29a:	e7f4      	b.n	800b286 <_printf_float+0x43e>

0800b29c <_printf_common>:
 800b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	4616      	mov	r6, r2
 800b2a2:	4698      	mov	r8, r3
 800b2a4:	688a      	ldr	r2, [r1, #8]
 800b2a6:	690b      	ldr	r3, [r1, #16]
 800b2a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfb8      	it	lt
 800b2b0:	4613      	movlt	r3, r2
 800b2b2:	6033      	str	r3, [r6, #0]
 800b2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	b10a      	cbz	r2, 800b2c2 <_printf_common+0x26>
 800b2be:	3301      	adds	r3, #1
 800b2c0:	6033      	str	r3, [r6, #0]
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	0699      	lsls	r1, r3, #26
 800b2c6:	bf42      	ittt	mi
 800b2c8:	6833      	ldrmi	r3, [r6, #0]
 800b2ca:	3302      	addmi	r3, #2
 800b2cc:	6033      	strmi	r3, [r6, #0]
 800b2ce:	6825      	ldr	r5, [r4, #0]
 800b2d0:	f015 0506 	ands.w	r5, r5, #6
 800b2d4:	d106      	bne.n	800b2e4 <_printf_common+0x48>
 800b2d6:	f104 0a19 	add.w	sl, r4, #25
 800b2da:	68e3      	ldr	r3, [r4, #12]
 800b2dc:	6832      	ldr	r2, [r6, #0]
 800b2de:	1a9b      	subs	r3, r3, r2
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	dc26      	bgt.n	800b332 <_printf_common+0x96>
 800b2e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	3b00      	subs	r3, #0
 800b2ec:	bf18      	it	ne
 800b2ee:	2301      	movne	r3, #1
 800b2f0:	0692      	lsls	r2, r2, #26
 800b2f2:	d42b      	bmi.n	800b34c <_printf_common+0xb0>
 800b2f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c8      	blx	r9
 800b2fe:	3001      	adds	r0, #1
 800b300:	d01e      	beq.n	800b340 <_printf_common+0xa4>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	6922      	ldr	r2, [r4, #16]
 800b306:	f003 0306 	and.w	r3, r3, #6
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	bf02      	ittt	eq
 800b30e:	68e5      	ldreq	r5, [r4, #12]
 800b310:	6833      	ldreq	r3, [r6, #0]
 800b312:	1aed      	subeq	r5, r5, r3
 800b314:	68a3      	ldr	r3, [r4, #8]
 800b316:	bf0c      	ite	eq
 800b318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b31c:	2500      	movne	r5, #0
 800b31e:	4293      	cmp	r3, r2
 800b320:	bfc4      	itt	gt
 800b322:	1a9b      	subgt	r3, r3, r2
 800b324:	18ed      	addgt	r5, r5, r3
 800b326:	2600      	movs	r6, #0
 800b328:	341a      	adds	r4, #26
 800b32a:	42b5      	cmp	r5, r6
 800b32c:	d11a      	bne.n	800b364 <_printf_common+0xc8>
 800b32e:	2000      	movs	r0, #0
 800b330:	e008      	b.n	800b344 <_printf_common+0xa8>
 800b332:	2301      	movs	r3, #1
 800b334:	4652      	mov	r2, sl
 800b336:	4641      	mov	r1, r8
 800b338:	4638      	mov	r0, r7
 800b33a:	47c8      	blx	r9
 800b33c:	3001      	adds	r0, #1
 800b33e:	d103      	bne.n	800b348 <_printf_common+0xac>
 800b340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b348:	3501      	adds	r5, #1
 800b34a:	e7c6      	b.n	800b2da <_printf_common+0x3e>
 800b34c:	18e1      	adds	r1, r4, r3
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	2030      	movs	r0, #48	@ 0x30
 800b352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b356:	4422      	add	r2, r4
 800b358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b35c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b360:	3302      	adds	r3, #2
 800b362:	e7c7      	b.n	800b2f4 <_printf_common+0x58>
 800b364:	2301      	movs	r3, #1
 800b366:	4622      	mov	r2, r4
 800b368:	4641      	mov	r1, r8
 800b36a:	4638      	mov	r0, r7
 800b36c:	47c8      	blx	r9
 800b36e:	3001      	adds	r0, #1
 800b370:	d0e6      	beq.n	800b340 <_printf_common+0xa4>
 800b372:	3601      	adds	r6, #1
 800b374:	e7d9      	b.n	800b32a <_printf_common+0x8e>
	...

0800b378 <_printf_i>:
 800b378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	7e0f      	ldrb	r7, [r1, #24]
 800b37e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b380:	2f78      	cmp	r7, #120	@ 0x78
 800b382:	4691      	mov	r9, r2
 800b384:	4680      	mov	r8, r0
 800b386:	460c      	mov	r4, r1
 800b388:	469a      	mov	sl, r3
 800b38a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b38e:	d807      	bhi.n	800b3a0 <_printf_i+0x28>
 800b390:	2f62      	cmp	r7, #98	@ 0x62
 800b392:	d80a      	bhi.n	800b3aa <_printf_i+0x32>
 800b394:	2f00      	cmp	r7, #0
 800b396:	f000 80d2 	beq.w	800b53e <_printf_i+0x1c6>
 800b39a:	2f58      	cmp	r7, #88	@ 0x58
 800b39c:	f000 80b9 	beq.w	800b512 <_printf_i+0x19a>
 800b3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3a8:	e03a      	b.n	800b420 <_printf_i+0xa8>
 800b3aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3ae:	2b15      	cmp	r3, #21
 800b3b0:	d8f6      	bhi.n	800b3a0 <_printf_i+0x28>
 800b3b2:	a101      	add	r1, pc, #4	@ (adr r1, 800b3b8 <_printf_i+0x40>)
 800b3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b8:	0800b411 	.word	0x0800b411
 800b3bc:	0800b425 	.word	0x0800b425
 800b3c0:	0800b3a1 	.word	0x0800b3a1
 800b3c4:	0800b3a1 	.word	0x0800b3a1
 800b3c8:	0800b3a1 	.word	0x0800b3a1
 800b3cc:	0800b3a1 	.word	0x0800b3a1
 800b3d0:	0800b425 	.word	0x0800b425
 800b3d4:	0800b3a1 	.word	0x0800b3a1
 800b3d8:	0800b3a1 	.word	0x0800b3a1
 800b3dc:	0800b3a1 	.word	0x0800b3a1
 800b3e0:	0800b3a1 	.word	0x0800b3a1
 800b3e4:	0800b525 	.word	0x0800b525
 800b3e8:	0800b44f 	.word	0x0800b44f
 800b3ec:	0800b4df 	.word	0x0800b4df
 800b3f0:	0800b3a1 	.word	0x0800b3a1
 800b3f4:	0800b3a1 	.word	0x0800b3a1
 800b3f8:	0800b547 	.word	0x0800b547
 800b3fc:	0800b3a1 	.word	0x0800b3a1
 800b400:	0800b44f 	.word	0x0800b44f
 800b404:	0800b3a1 	.word	0x0800b3a1
 800b408:	0800b3a1 	.word	0x0800b3a1
 800b40c:	0800b4e7 	.word	0x0800b4e7
 800b410:	6833      	ldr	r3, [r6, #0]
 800b412:	1d1a      	adds	r2, r3, #4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6032      	str	r2, [r6, #0]
 800b418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b41c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b420:	2301      	movs	r3, #1
 800b422:	e09d      	b.n	800b560 <_printf_i+0x1e8>
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	6820      	ldr	r0, [r4, #0]
 800b428:	1d19      	adds	r1, r3, #4
 800b42a:	6031      	str	r1, [r6, #0]
 800b42c:	0606      	lsls	r6, r0, #24
 800b42e:	d501      	bpl.n	800b434 <_printf_i+0xbc>
 800b430:	681d      	ldr	r5, [r3, #0]
 800b432:	e003      	b.n	800b43c <_printf_i+0xc4>
 800b434:	0645      	lsls	r5, r0, #25
 800b436:	d5fb      	bpl.n	800b430 <_printf_i+0xb8>
 800b438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	da03      	bge.n	800b448 <_printf_i+0xd0>
 800b440:	232d      	movs	r3, #45	@ 0x2d
 800b442:	426d      	negs	r5, r5
 800b444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b448:	4859      	ldr	r0, [pc, #356]	@ (800b5b0 <_printf_i+0x238>)
 800b44a:	230a      	movs	r3, #10
 800b44c:	e011      	b.n	800b472 <_printf_i+0xfa>
 800b44e:	6821      	ldr	r1, [r4, #0]
 800b450:	6833      	ldr	r3, [r6, #0]
 800b452:	0608      	lsls	r0, r1, #24
 800b454:	f853 5b04 	ldr.w	r5, [r3], #4
 800b458:	d402      	bmi.n	800b460 <_printf_i+0xe8>
 800b45a:	0649      	lsls	r1, r1, #25
 800b45c:	bf48      	it	mi
 800b45e:	b2ad      	uxthmi	r5, r5
 800b460:	2f6f      	cmp	r7, #111	@ 0x6f
 800b462:	4853      	ldr	r0, [pc, #332]	@ (800b5b0 <_printf_i+0x238>)
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	bf14      	ite	ne
 800b468:	230a      	movne	r3, #10
 800b46a:	2308      	moveq	r3, #8
 800b46c:	2100      	movs	r1, #0
 800b46e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b472:	6866      	ldr	r6, [r4, #4]
 800b474:	60a6      	str	r6, [r4, #8]
 800b476:	2e00      	cmp	r6, #0
 800b478:	bfa2      	ittt	ge
 800b47a:	6821      	ldrge	r1, [r4, #0]
 800b47c:	f021 0104 	bicge.w	r1, r1, #4
 800b480:	6021      	strge	r1, [r4, #0]
 800b482:	b90d      	cbnz	r5, 800b488 <_printf_i+0x110>
 800b484:	2e00      	cmp	r6, #0
 800b486:	d04b      	beq.n	800b520 <_printf_i+0x1a8>
 800b488:	4616      	mov	r6, r2
 800b48a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b48e:	fb03 5711 	mls	r7, r3, r1, r5
 800b492:	5dc7      	ldrb	r7, [r0, r7]
 800b494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b498:	462f      	mov	r7, r5
 800b49a:	42bb      	cmp	r3, r7
 800b49c:	460d      	mov	r5, r1
 800b49e:	d9f4      	bls.n	800b48a <_printf_i+0x112>
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d10b      	bne.n	800b4bc <_printf_i+0x144>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	07df      	lsls	r7, r3, #31
 800b4a8:	d508      	bpl.n	800b4bc <_printf_i+0x144>
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	bfde      	ittt	le
 800b4b2:	2330      	movle	r3, #48	@ 0x30
 800b4b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b4bc:	1b92      	subs	r2, r2, r6
 800b4be:	6122      	str	r2, [r4, #16]
 800b4c0:	f8cd a000 	str.w	sl, [sp]
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	aa03      	add	r2, sp, #12
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f7ff fee6 	bl	800b29c <_printf_common>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d14a      	bne.n	800b56a <_printf_i+0x1f2>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4d8:	b004      	add	sp, #16
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f043 0320 	orr.w	r3, r3, #32
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	4833      	ldr	r0, [pc, #204]	@ (800b5b4 <_printf_i+0x23c>)
 800b4e8:	2778      	movs	r7, #120	@ 0x78
 800b4ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	6831      	ldr	r1, [r6, #0]
 800b4f2:	061f      	lsls	r7, r3, #24
 800b4f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4f8:	d402      	bmi.n	800b500 <_printf_i+0x188>
 800b4fa:	065f      	lsls	r7, r3, #25
 800b4fc:	bf48      	it	mi
 800b4fe:	b2ad      	uxthmi	r5, r5
 800b500:	6031      	str	r1, [r6, #0]
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	bf44      	itt	mi
 800b506:	f043 0320 	orrmi.w	r3, r3, #32
 800b50a:	6023      	strmi	r3, [r4, #0]
 800b50c:	b11d      	cbz	r5, 800b516 <_printf_i+0x19e>
 800b50e:	2310      	movs	r3, #16
 800b510:	e7ac      	b.n	800b46c <_printf_i+0xf4>
 800b512:	4827      	ldr	r0, [pc, #156]	@ (800b5b0 <_printf_i+0x238>)
 800b514:	e7e9      	b.n	800b4ea <_printf_i+0x172>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f023 0320 	bic.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	e7f6      	b.n	800b50e <_printf_i+0x196>
 800b520:	4616      	mov	r6, r2
 800b522:	e7bd      	b.n	800b4a0 <_printf_i+0x128>
 800b524:	6833      	ldr	r3, [r6, #0]
 800b526:	6825      	ldr	r5, [r4, #0]
 800b528:	6961      	ldr	r1, [r4, #20]
 800b52a:	1d18      	adds	r0, r3, #4
 800b52c:	6030      	str	r0, [r6, #0]
 800b52e:	062e      	lsls	r6, r5, #24
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	d501      	bpl.n	800b538 <_printf_i+0x1c0>
 800b534:	6019      	str	r1, [r3, #0]
 800b536:	e002      	b.n	800b53e <_printf_i+0x1c6>
 800b538:	0668      	lsls	r0, r5, #25
 800b53a:	d5fb      	bpl.n	800b534 <_printf_i+0x1bc>
 800b53c:	8019      	strh	r1, [r3, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	6123      	str	r3, [r4, #16]
 800b542:	4616      	mov	r6, r2
 800b544:	e7bc      	b.n	800b4c0 <_printf_i+0x148>
 800b546:	6833      	ldr	r3, [r6, #0]
 800b548:	1d1a      	adds	r2, r3, #4
 800b54a:	6032      	str	r2, [r6, #0]
 800b54c:	681e      	ldr	r6, [r3, #0]
 800b54e:	6862      	ldr	r2, [r4, #4]
 800b550:	2100      	movs	r1, #0
 800b552:	4630      	mov	r0, r6
 800b554:	f7f4 fe3c 	bl	80001d0 <memchr>
 800b558:	b108      	cbz	r0, 800b55e <_printf_i+0x1e6>
 800b55a:	1b80      	subs	r0, r0, r6
 800b55c:	6060      	str	r0, [r4, #4]
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	6123      	str	r3, [r4, #16]
 800b562:	2300      	movs	r3, #0
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b568:	e7aa      	b.n	800b4c0 <_printf_i+0x148>
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	4632      	mov	r2, r6
 800b56e:	4649      	mov	r1, r9
 800b570:	4640      	mov	r0, r8
 800b572:	47d0      	blx	sl
 800b574:	3001      	adds	r0, #1
 800b576:	d0ad      	beq.n	800b4d4 <_printf_i+0x15c>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	079b      	lsls	r3, r3, #30
 800b57c:	d413      	bmi.n	800b5a6 <_printf_i+0x22e>
 800b57e:	68e0      	ldr	r0, [r4, #12]
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	4298      	cmp	r0, r3
 800b584:	bfb8      	it	lt
 800b586:	4618      	movlt	r0, r3
 800b588:	e7a6      	b.n	800b4d8 <_printf_i+0x160>
 800b58a:	2301      	movs	r3, #1
 800b58c:	4632      	mov	r2, r6
 800b58e:	4649      	mov	r1, r9
 800b590:	4640      	mov	r0, r8
 800b592:	47d0      	blx	sl
 800b594:	3001      	adds	r0, #1
 800b596:	d09d      	beq.n	800b4d4 <_printf_i+0x15c>
 800b598:	3501      	adds	r5, #1
 800b59a:	68e3      	ldr	r3, [r4, #12]
 800b59c:	9903      	ldr	r1, [sp, #12]
 800b59e:	1a5b      	subs	r3, r3, r1
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	dcf2      	bgt.n	800b58a <_printf_i+0x212>
 800b5a4:	e7eb      	b.n	800b57e <_printf_i+0x206>
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	f104 0619 	add.w	r6, r4, #25
 800b5ac:	e7f5      	b.n	800b59a <_printf_i+0x222>
 800b5ae:	bf00      	nop
 800b5b0:	0800da12 	.word	0x0800da12
 800b5b4:	0800da23 	.word	0x0800da23

0800b5b8 <std>:
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	b510      	push	{r4, lr}
 800b5bc:	4604      	mov	r4, r0
 800b5be:	e9c0 3300 	strd	r3, r3, [r0]
 800b5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5c6:	6083      	str	r3, [r0, #8]
 800b5c8:	8181      	strh	r1, [r0, #12]
 800b5ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5cc:	81c2      	strh	r2, [r0, #14]
 800b5ce:	6183      	str	r3, [r0, #24]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	2208      	movs	r2, #8
 800b5d4:	305c      	adds	r0, #92	@ 0x5c
 800b5d6:	f000 f8f4 	bl	800b7c2 <memset>
 800b5da:	4b0d      	ldr	r3, [pc, #52]	@ (800b610 <std+0x58>)
 800b5dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5de:	4b0d      	ldr	r3, [pc, #52]	@ (800b614 <std+0x5c>)
 800b5e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b618 <std+0x60>)
 800b5e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b61c <std+0x64>)
 800b5e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b620 <std+0x68>)
 800b5ec:	6224      	str	r4, [r4, #32]
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d006      	beq.n	800b600 <std+0x48>
 800b5f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5f6:	4294      	cmp	r4, r2
 800b5f8:	d002      	beq.n	800b600 <std+0x48>
 800b5fa:	33d0      	adds	r3, #208	@ 0xd0
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	d105      	bne.n	800b60c <std+0x54>
 800b600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b608:	f000 b958 	b.w	800b8bc <__retarget_lock_init_recursive>
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800b73d 	.word	0x0800b73d
 800b614:	0800b75f 	.word	0x0800b75f
 800b618:	0800b797 	.word	0x0800b797
 800b61c:	0800b7bb 	.word	0x0800b7bb
 800b620:	20002058 	.word	0x20002058

0800b624 <stdio_exit_handler>:
 800b624:	4a02      	ldr	r2, [pc, #8]	@ (800b630 <stdio_exit_handler+0xc>)
 800b626:	4903      	ldr	r1, [pc, #12]	@ (800b634 <stdio_exit_handler+0x10>)
 800b628:	4803      	ldr	r0, [pc, #12]	@ (800b638 <stdio_exit_handler+0x14>)
 800b62a:	f000 b869 	b.w	800b700 <_fwalk_sglue>
 800b62e:	bf00      	nop
 800b630:	20000014 	.word	0x20000014
 800b634:	0800cf85 	.word	0x0800cf85
 800b638:	20000024 	.word	0x20000024

0800b63c <cleanup_stdio>:
 800b63c:	6841      	ldr	r1, [r0, #4]
 800b63e:	4b0c      	ldr	r3, [pc, #48]	@ (800b670 <cleanup_stdio+0x34>)
 800b640:	4299      	cmp	r1, r3
 800b642:	b510      	push	{r4, lr}
 800b644:	4604      	mov	r4, r0
 800b646:	d001      	beq.n	800b64c <cleanup_stdio+0x10>
 800b648:	f001 fc9c 	bl	800cf84 <_fflush_r>
 800b64c:	68a1      	ldr	r1, [r4, #8]
 800b64e:	4b09      	ldr	r3, [pc, #36]	@ (800b674 <cleanup_stdio+0x38>)
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <cleanup_stdio+0x1e>
 800b654:	4620      	mov	r0, r4
 800b656:	f001 fc95 	bl	800cf84 <_fflush_r>
 800b65a:	68e1      	ldr	r1, [r4, #12]
 800b65c:	4b06      	ldr	r3, [pc, #24]	@ (800b678 <cleanup_stdio+0x3c>)
 800b65e:	4299      	cmp	r1, r3
 800b660:	d004      	beq.n	800b66c <cleanup_stdio+0x30>
 800b662:	4620      	mov	r0, r4
 800b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b668:	f001 bc8c 	b.w	800cf84 <_fflush_r>
 800b66c:	bd10      	pop	{r4, pc}
 800b66e:	bf00      	nop
 800b670:	20002058 	.word	0x20002058
 800b674:	200020c0 	.word	0x200020c0
 800b678:	20002128 	.word	0x20002128

0800b67c <global_stdio_init.part.0>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <global_stdio_init.part.0+0x30>)
 800b680:	4c0b      	ldr	r4, [pc, #44]	@ (800b6b0 <global_stdio_init.part.0+0x34>)
 800b682:	4a0c      	ldr	r2, [pc, #48]	@ (800b6b4 <global_stdio_init.part.0+0x38>)
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	4620      	mov	r0, r4
 800b688:	2200      	movs	r2, #0
 800b68a:	2104      	movs	r1, #4
 800b68c:	f7ff ff94 	bl	800b5b8 <std>
 800b690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b694:	2201      	movs	r2, #1
 800b696:	2109      	movs	r1, #9
 800b698:	f7ff ff8e 	bl	800b5b8 <std>
 800b69c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a6:	2112      	movs	r1, #18
 800b6a8:	f7ff bf86 	b.w	800b5b8 <std>
 800b6ac:	20002190 	.word	0x20002190
 800b6b0:	20002058 	.word	0x20002058
 800b6b4:	0800b625 	.word	0x0800b625

0800b6b8 <__sfp_lock_acquire>:
 800b6b8:	4801      	ldr	r0, [pc, #4]	@ (800b6c0 <__sfp_lock_acquire+0x8>)
 800b6ba:	f000 b900 	b.w	800b8be <__retarget_lock_acquire_recursive>
 800b6be:	bf00      	nop
 800b6c0:	20002199 	.word	0x20002199

0800b6c4 <__sfp_lock_release>:
 800b6c4:	4801      	ldr	r0, [pc, #4]	@ (800b6cc <__sfp_lock_release+0x8>)
 800b6c6:	f000 b8fb 	b.w	800b8c0 <__retarget_lock_release_recursive>
 800b6ca:	bf00      	nop
 800b6cc:	20002199 	.word	0x20002199

0800b6d0 <__sinit>:
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	f7ff fff0 	bl	800b6b8 <__sfp_lock_acquire>
 800b6d8:	6a23      	ldr	r3, [r4, #32]
 800b6da:	b11b      	cbz	r3, 800b6e4 <__sinit+0x14>
 800b6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e0:	f7ff bff0 	b.w	800b6c4 <__sfp_lock_release>
 800b6e4:	4b04      	ldr	r3, [pc, #16]	@ (800b6f8 <__sinit+0x28>)
 800b6e6:	6223      	str	r3, [r4, #32]
 800b6e8:	4b04      	ldr	r3, [pc, #16]	@ (800b6fc <__sinit+0x2c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1f5      	bne.n	800b6dc <__sinit+0xc>
 800b6f0:	f7ff ffc4 	bl	800b67c <global_stdio_init.part.0>
 800b6f4:	e7f2      	b.n	800b6dc <__sinit+0xc>
 800b6f6:	bf00      	nop
 800b6f8:	0800b63d 	.word	0x0800b63d
 800b6fc:	20002190 	.word	0x20002190

0800b700 <_fwalk_sglue>:
 800b700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b704:	4607      	mov	r7, r0
 800b706:	4688      	mov	r8, r1
 800b708:	4614      	mov	r4, r2
 800b70a:	2600      	movs	r6, #0
 800b70c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b710:	f1b9 0901 	subs.w	r9, r9, #1
 800b714:	d505      	bpl.n	800b722 <_fwalk_sglue+0x22>
 800b716:	6824      	ldr	r4, [r4, #0]
 800b718:	2c00      	cmp	r4, #0
 800b71a:	d1f7      	bne.n	800b70c <_fwalk_sglue+0xc>
 800b71c:	4630      	mov	r0, r6
 800b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d907      	bls.n	800b738 <_fwalk_sglue+0x38>
 800b728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b72c:	3301      	adds	r3, #1
 800b72e:	d003      	beq.n	800b738 <_fwalk_sglue+0x38>
 800b730:	4629      	mov	r1, r5
 800b732:	4638      	mov	r0, r7
 800b734:	47c0      	blx	r8
 800b736:	4306      	orrs	r6, r0
 800b738:	3568      	adds	r5, #104	@ 0x68
 800b73a:	e7e9      	b.n	800b710 <_fwalk_sglue+0x10>

0800b73c <__sread>:
 800b73c:	b510      	push	{r4, lr}
 800b73e:	460c      	mov	r4, r1
 800b740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b744:	f000 f86c 	bl	800b820 <_read_r>
 800b748:	2800      	cmp	r0, #0
 800b74a:	bfab      	itete	ge
 800b74c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b74e:	89a3      	ldrhlt	r3, [r4, #12]
 800b750:	181b      	addge	r3, r3, r0
 800b752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b756:	bfac      	ite	ge
 800b758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b75a:	81a3      	strhlt	r3, [r4, #12]
 800b75c:	bd10      	pop	{r4, pc}

0800b75e <__swrite>:
 800b75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b762:	461f      	mov	r7, r3
 800b764:	898b      	ldrh	r3, [r1, #12]
 800b766:	05db      	lsls	r3, r3, #23
 800b768:	4605      	mov	r5, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	4616      	mov	r6, r2
 800b76e:	d505      	bpl.n	800b77c <__swrite+0x1e>
 800b770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b774:	2302      	movs	r3, #2
 800b776:	2200      	movs	r2, #0
 800b778:	f000 f840 	bl	800b7fc <_lseek_r>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	4632      	mov	r2, r6
 800b78a:	463b      	mov	r3, r7
 800b78c:	4628      	mov	r0, r5
 800b78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b792:	f000 b857 	b.w	800b844 <_write_r>

0800b796 <__sseek>:
 800b796:	b510      	push	{r4, lr}
 800b798:	460c      	mov	r4, r1
 800b79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79e:	f000 f82d 	bl	800b7fc <_lseek_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	bf15      	itete	ne
 800b7a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7b2:	81a3      	strheq	r3, [r4, #12]
 800b7b4:	bf18      	it	ne
 800b7b6:	81a3      	strhne	r3, [r4, #12]
 800b7b8:	bd10      	pop	{r4, pc}

0800b7ba <__sclose>:
 800b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7be:	f000 b80d 	b.w	800b7dc <_close_r>

0800b7c2 <memset>:
 800b7c2:	4402      	add	r2, r0
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d100      	bne.n	800b7cc <memset+0xa>
 800b7ca:	4770      	bx	lr
 800b7cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b7d0:	e7f9      	b.n	800b7c6 <memset+0x4>
	...

0800b7d4 <_localeconv_r>:
 800b7d4:	4800      	ldr	r0, [pc, #0]	@ (800b7d8 <_localeconv_r+0x4>)
 800b7d6:	4770      	bx	lr
 800b7d8:	20000160 	.word	0x20000160

0800b7dc <_close_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d06      	ldr	r5, [pc, #24]	@ (800b7f8 <_close_r+0x1c>)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	602b      	str	r3, [r5, #0]
 800b7e8:	f7f8 fa78 	bl	8003cdc <_close>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_close_r+0x1a>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_close_r+0x1a>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	20002194 	.word	0x20002194

0800b7fc <_lseek_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d07      	ldr	r5, [pc, #28]	@ (800b81c <_lseek_r+0x20>)
 800b800:	4604      	mov	r4, r0
 800b802:	4608      	mov	r0, r1
 800b804:	4611      	mov	r1, r2
 800b806:	2200      	movs	r2, #0
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f7f8 fa8d 	bl	8003d2a <_lseek>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_lseek_r+0x1e>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_lseek_r+0x1e>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20002194 	.word	0x20002194

0800b820 <_read_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d07      	ldr	r5, [pc, #28]	@ (800b840 <_read_r+0x20>)
 800b824:	4604      	mov	r4, r0
 800b826:	4608      	mov	r0, r1
 800b828:	4611      	mov	r1, r2
 800b82a:	2200      	movs	r2, #0
 800b82c:	602a      	str	r2, [r5, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f7f8 fa1b 	bl	8003c6a <_read>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_read_r+0x1e>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_read_r+0x1e>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	20002194 	.word	0x20002194

0800b844 <_write_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	@ (800b864 <_write_r+0x20>)
 800b848:	4604      	mov	r4, r0
 800b84a:	4608      	mov	r0, r1
 800b84c:	4611      	mov	r1, r2
 800b84e:	2200      	movs	r2, #0
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f7f8 fa26 	bl	8003ca4 <_write>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_write_r+0x1e>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_write_r+0x1e>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	20002194 	.word	0x20002194

0800b868 <__errno>:
 800b868:	4b01      	ldr	r3, [pc, #4]	@ (800b870 <__errno+0x8>)
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000020 	.word	0x20000020

0800b874 <__libc_init_array>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	4d0d      	ldr	r5, [pc, #52]	@ (800b8ac <__libc_init_array+0x38>)
 800b878:	4c0d      	ldr	r4, [pc, #52]	@ (800b8b0 <__libc_init_array+0x3c>)
 800b87a:	1b64      	subs	r4, r4, r5
 800b87c:	10a4      	asrs	r4, r4, #2
 800b87e:	2600      	movs	r6, #0
 800b880:	42a6      	cmp	r6, r4
 800b882:	d109      	bne.n	800b898 <__libc_init_array+0x24>
 800b884:	4d0b      	ldr	r5, [pc, #44]	@ (800b8b4 <__libc_init_array+0x40>)
 800b886:	4c0c      	ldr	r4, [pc, #48]	@ (800b8b8 <__libc_init_array+0x44>)
 800b888:	f001 febc 	bl	800d604 <_init>
 800b88c:	1b64      	subs	r4, r4, r5
 800b88e:	10a4      	asrs	r4, r4, #2
 800b890:	2600      	movs	r6, #0
 800b892:	42a6      	cmp	r6, r4
 800b894:	d105      	bne.n	800b8a2 <__libc_init_array+0x2e>
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89c:	4798      	blx	r3
 800b89e:	3601      	adds	r6, #1
 800b8a0:	e7ee      	b.n	800b880 <__libc_init_array+0xc>
 800b8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a6:	4798      	blx	r3
 800b8a8:	3601      	adds	r6, #1
 800b8aa:	e7f2      	b.n	800b892 <__libc_init_array+0x1e>
 800b8ac:	0800dd78 	.word	0x0800dd78
 800b8b0:	0800dd78 	.word	0x0800dd78
 800b8b4:	0800dd78 	.word	0x0800dd78
 800b8b8:	0800dd7c 	.word	0x0800dd7c

0800b8bc <__retarget_lock_init_recursive>:
 800b8bc:	4770      	bx	lr

0800b8be <__retarget_lock_acquire_recursive>:
 800b8be:	4770      	bx	lr

0800b8c0 <__retarget_lock_release_recursive>:
 800b8c0:	4770      	bx	lr

0800b8c2 <memcpy>:
 800b8c2:	440a      	add	r2, r1
 800b8c4:	4291      	cmp	r1, r2
 800b8c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b8ca:	d100      	bne.n	800b8ce <memcpy+0xc>
 800b8cc:	4770      	bx	lr
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8d8:	4291      	cmp	r1, r2
 800b8da:	d1f9      	bne.n	800b8d0 <memcpy+0xe>
 800b8dc:	bd10      	pop	{r4, pc}

0800b8de <quorem>:
 800b8de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e2:	6903      	ldr	r3, [r0, #16]
 800b8e4:	690c      	ldr	r4, [r1, #16]
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	db7e      	blt.n	800b9ea <quorem+0x10c>
 800b8ec:	3c01      	subs	r4, #1
 800b8ee:	f101 0814 	add.w	r8, r1, #20
 800b8f2:	00a3      	lsls	r3, r4, #2
 800b8f4:	f100 0514 	add.w	r5, r0, #20
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b908:	3301      	adds	r3, #1
 800b90a:	429a      	cmp	r2, r3
 800b90c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b910:	fbb2 f6f3 	udiv	r6, r2, r3
 800b914:	d32e      	bcc.n	800b974 <quorem+0x96>
 800b916:	f04f 0a00 	mov.w	sl, #0
 800b91a:	46c4      	mov	ip, r8
 800b91c:	46ae      	mov	lr, r5
 800b91e:	46d3      	mov	fp, sl
 800b920:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b924:	b298      	uxth	r0, r3
 800b926:	fb06 a000 	mla	r0, r6, r0, sl
 800b92a:	0c02      	lsrs	r2, r0, #16
 800b92c:	0c1b      	lsrs	r3, r3, #16
 800b92e:	fb06 2303 	mla	r3, r6, r3, r2
 800b932:	f8de 2000 	ldr.w	r2, [lr]
 800b936:	b280      	uxth	r0, r0
 800b938:	b292      	uxth	r2, r2
 800b93a:	1a12      	subs	r2, r2, r0
 800b93c:	445a      	add	r2, fp
 800b93e:	f8de 0000 	ldr.w	r0, [lr]
 800b942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b946:	b29b      	uxth	r3, r3
 800b948:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b94c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b950:	b292      	uxth	r2, r2
 800b952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b956:	45e1      	cmp	r9, ip
 800b958:	f84e 2b04 	str.w	r2, [lr], #4
 800b95c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b960:	d2de      	bcs.n	800b920 <quorem+0x42>
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	58eb      	ldr	r3, [r5, r3]
 800b966:	b92b      	cbnz	r3, 800b974 <quorem+0x96>
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	3b04      	subs	r3, #4
 800b96c:	429d      	cmp	r5, r3
 800b96e:	461a      	mov	r2, r3
 800b970:	d32f      	bcc.n	800b9d2 <quorem+0xf4>
 800b972:	613c      	str	r4, [r7, #16]
 800b974:	4638      	mov	r0, r7
 800b976:	f001 f979 	bl	800cc6c <__mcmp>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	db25      	blt.n	800b9ca <quorem+0xec>
 800b97e:	4629      	mov	r1, r5
 800b980:	2000      	movs	r0, #0
 800b982:	f858 2b04 	ldr.w	r2, [r8], #4
 800b986:	f8d1 c000 	ldr.w	ip, [r1]
 800b98a:	fa1f fe82 	uxth.w	lr, r2
 800b98e:	fa1f f38c 	uxth.w	r3, ip
 800b992:	eba3 030e 	sub.w	r3, r3, lr
 800b996:	4403      	add	r3, r0
 800b998:	0c12      	lsrs	r2, r2, #16
 800b99a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b99e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a8:	45c1      	cmp	r9, r8
 800b9aa:	f841 3b04 	str.w	r3, [r1], #4
 800b9ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9b2:	d2e6      	bcs.n	800b982 <quorem+0xa4>
 800b9b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9bc:	b922      	cbnz	r2, 800b9c8 <quorem+0xea>
 800b9be:	3b04      	subs	r3, #4
 800b9c0:	429d      	cmp	r5, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	d30b      	bcc.n	800b9de <quorem+0x100>
 800b9c6:	613c      	str	r4, [r7, #16]
 800b9c8:	3601      	adds	r6, #1
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	b003      	add	sp, #12
 800b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d2:	6812      	ldr	r2, [r2, #0]
 800b9d4:	3b04      	subs	r3, #4
 800b9d6:	2a00      	cmp	r2, #0
 800b9d8:	d1cb      	bne.n	800b972 <quorem+0x94>
 800b9da:	3c01      	subs	r4, #1
 800b9dc:	e7c6      	b.n	800b96c <quorem+0x8e>
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	d1ef      	bne.n	800b9c6 <quorem+0xe8>
 800b9e6:	3c01      	subs	r4, #1
 800b9e8:	e7ea      	b.n	800b9c0 <quorem+0xe2>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e7ee      	b.n	800b9cc <quorem+0xee>
	...

0800b9f0 <_dtoa_r>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	69c7      	ldr	r7, [r0, #28]
 800b9f6:	b099      	sub	sp, #100	@ 0x64
 800b9f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ba00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ba02:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba04:	4683      	mov	fp, r0
 800ba06:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba0a:	b97f      	cbnz	r7, 800ba2c <_dtoa_r+0x3c>
 800ba0c:	2010      	movs	r0, #16
 800ba0e:	f000 fdfd 	bl	800c60c <malloc>
 800ba12:	4602      	mov	r2, r0
 800ba14:	f8cb 001c 	str.w	r0, [fp, #28]
 800ba18:	b920      	cbnz	r0, 800ba24 <_dtoa_r+0x34>
 800ba1a:	4ba7      	ldr	r3, [pc, #668]	@ (800bcb8 <_dtoa_r+0x2c8>)
 800ba1c:	21ef      	movs	r1, #239	@ 0xef
 800ba1e:	48a7      	ldr	r0, [pc, #668]	@ (800bcbc <_dtoa_r+0x2cc>)
 800ba20:	f001 fae8 	bl	800cff4 <__assert_func>
 800ba24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba28:	6007      	str	r7, [r0, #0]
 800ba2a:	60c7      	str	r7, [r0, #12]
 800ba2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	b159      	cbz	r1, 800ba4c <_dtoa_r+0x5c>
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	604a      	str	r2, [r1, #4]
 800ba38:	2301      	movs	r3, #1
 800ba3a:	4093      	lsls	r3, r2
 800ba3c:	608b      	str	r3, [r1, #8]
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 feda 	bl	800c7f8 <_Bfree>
 800ba44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	1e2b      	subs	r3, r5, #0
 800ba4e:	bfb9      	ittee	lt
 800ba50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba54:	9303      	strlt	r3, [sp, #12]
 800ba56:	2300      	movge	r3, #0
 800ba58:	6033      	strge	r3, [r6, #0]
 800ba5a:	9f03      	ldr	r7, [sp, #12]
 800ba5c:	4b98      	ldr	r3, [pc, #608]	@ (800bcc0 <_dtoa_r+0x2d0>)
 800ba5e:	bfbc      	itt	lt
 800ba60:	2201      	movlt	r2, #1
 800ba62:	6032      	strlt	r2, [r6, #0]
 800ba64:	43bb      	bics	r3, r7
 800ba66:	d112      	bne.n	800ba8e <_dtoa_r+0x9e>
 800ba68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba74:	4323      	orrs	r3, r4
 800ba76:	f000 854d 	beq.w	800c514 <_dtoa_r+0xb24>
 800ba7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bcd4 <_dtoa_r+0x2e4>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 854f 	beq.w	800c524 <_dtoa_r+0xb34>
 800ba86:	f10a 0303 	add.w	r3, sl, #3
 800ba8a:	f000 bd49 	b.w	800c520 <_dtoa_r+0xb30>
 800ba8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba92:	2200      	movs	r2, #0
 800ba94:	ec51 0b17 	vmov	r0, r1, d7
 800ba98:	2300      	movs	r3, #0
 800ba9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba9e:	f7f5 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 800baa2:	4680      	mov	r8, r0
 800baa4:	b158      	cbz	r0, 800babe <_dtoa_r+0xce>
 800baa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800baa8:	2301      	movs	r3, #1
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baae:	b113      	cbz	r3, 800bab6 <_dtoa_r+0xc6>
 800bab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bab2:	4b84      	ldr	r3, [pc, #528]	@ (800bcc4 <_dtoa_r+0x2d4>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bcd8 <_dtoa_r+0x2e8>
 800baba:	f000 bd33 	b.w	800c524 <_dtoa_r+0xb34>
 800babe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bac2:	aa16      	add	r2, sp, #88	@ 0x58
 800bac4:	a917      	add	r1, sp, #92	@ 0x5c
 800bac6:	4658      	mov	r0, fp
 800bac8:	f001 f980 	bl	800cdcc <__d2b>
 800bacc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bad0:	4681      	mov	r9, r0
 800bad2:	2e00      	cmp	r6, #0
 800bad4:	d077      	beq.n	800bbc6 <_dtoa_r+0x1d6>
 800bad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bad8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800badc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800baec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800baf0:	4619      	mov	r1, r3
 800baf2:	2200      	movs	r2, #0
 800baf4:	4b74      	ldr	r3, [pc, #464]	@ (800bcc8 <_dtoa_r+0x2d8>)
 800baf6:	f7f4 fbc7 	bl	8000288 <__aeabi_dsub>
 800bafa:	a369      	add	r3, pc, #420	@ (adr r3, 800bca0 <_dtoa_r+0x2b0>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fd7a 	bl	80005f8 <__aeabi_dmul>
 800bb04:	a368      	add	r3, pc, #416	@ (adr r3, 800bca8 <_dtoa_r+0x2b8>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fbbf 	bl	800028c <__adddf3>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4630      	mov	r0, r6
 800bb12:	460d      	mov	r5, r1
 800bb14:	f7f4 fd06 	bl	8000524 <__aeabi_i2d>
 800bb18:	a365      	add	r3, pc, #404	@ (adr r3, 800bcb0 <_dtoa_r+0x2c0>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f7f4 fd6b 	bl	80005f8 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 fbaf 	bl	800028c <__adddf3>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	460d      	mov	r5, r1
 800bb32:	f7f5 f811 	bl	8000b58 <__aeabi_d2iz>
 800bb36:	2200      	movs	r2, #0
 800bb38:	4607      	mov	r7, r0
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800bb44:	b140      	cbz	r0, 800bb58 <_dtoa_r+0x168>
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7f4 fcec 	bl	8000524 <__aeabi_i2d>
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	462b      	mov	r3, r5
 800bb50:	f7f4 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb54:	b900      	cbnz	r0, 800bb58 <_dtoa_r+0x168>
 800bb56:	3f01      	subs	r7, #1
 800bb58:	2f16      	cmp	r7, #22
 800bb5a:	d851      	bhi.n	800bc00 <_dtoa_r+0x210>
 800bb5c:	4b5b      	ldr	r3, [pc, #364]	@ (800bccc <_dtoa_r+0x2dc>)
 800bb5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb6a:	f7f4 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d048      	beq.n	800bc04 <_dtoa_r+0x214>
 800bb72:	3f01      	subs	r7, #1
 800bb74:	2300      	movs	r3, #0
 800bb76:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb7a:	1b9b      	subs	r3, r3, r6
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	bf44      	itt	mi
 800bb80:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb84:	2300      	movmi	r3, #0
 800bb86:	9208      	str	r2, [sp, #32]
 800bb88:	bf54      	ite	pl
 800bb8a:	f04f 0800 	movpl.w	r8, #0
 800bb8e:	9308      	strmi	r3, [sp, #32]
 800bb90:	2f00      	cmp	r7, #0
 800bb92:	db39      	blt.n	800bc08 <_dtoa_r+0x218>
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb98:	443b      	add	r3, r7
 800bb9a:	9308      	str	r3, [sp, #32]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba2:	2b09      	cmp	r3, #9
 800bba4:	d864      	bhi.n	800bc70 <_dtoa_r+0x280>
 800bba6:	2b05      	cmp	r3, #5
 800bba8:	bfc4      	itt	gt
 800bbaa:	3b04      	subgt	r3, #4
 800bbac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb0:	f1a3 0302 	sub.w	r3, r3, #2
 800bbb4:	bfcc      	ite	gt
 800bbb6:	2400      	movgt	r4, #0
 800bbb8:	2401      	movle	r4, #1
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d863      	bhi.n	800bc86 <_dtoa_r+0x296>
 800bbbe:	e8df f003 	tbb	[pc, r3]
 800bbc2:	372a      	.short	0x372a
 800bbc4:	5535      	.short	0x5535
 800bbc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bbca:	441e      	add	r6, r3
 800bbcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	bfc1      	itttt	gt
 800bbd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbd8:	409f      	lslgt	r7, r3
 800bbda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbe2:	bfd6      	itet	le
 800bbe4:	f1c3 0320 	rsble	r3, r3, #32
 800bbe8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bbec:	fa04 f003 	lslle.w	r0, r4, r3
 800bbf0:	f7f4 fc88 	bl	8000504 <__aeabi_ui2d>
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbfa:	3e01      	subs	r6, #1
 800bbfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bbfe:	e777      	b.n	800baf0 <_dtoa_r+0x100>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e7b8      	b.n	800bb76 <_dtoa_r+0x186>
 800bc04:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc06:	e7b7      	b.n	800bb78 <_dtoa_r+0x188>
 800bc08:	427b      	negs	r3, r7
 800bc0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	eba8 0807 	sub.w	r8, r8, r7
 800bc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc14:	e7c4      	b.n	800bba0 <_dtoa_r+0x1b0>
 800bc16:	2300      	movs	r3, #0
 800bc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc35      	bgt.n	800bc8c <_dtoa_r+0x29c>
 800bc20:	2301      	movs	r3, #1
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	461a      	mov	r2, r3
 800bc28:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc2a:	e00b      	b.n	800bc44 <_dtoa_r+0x254>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e7f3      	b.n	800bc18 <_dtoa_r+0x228>
 800bc30:	2300      	movs	r3, #0
 800bc32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	9307      	str	r3, [sp, #28]
 800bc40:	bfb8      	it	lt
 800bc42:	2301      	movlt	r3, #1
 800bc44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	2204      	movs	r2, #4
 800bc4c:	f102 0514 	add.w	r5, r2, #20
 800bc50:	429d      	cmp	r5, r3
 800bc52:	d91f      	bls.n	800bc94 <_dtoa_r+0x2a4>
 800bc54:	6041      	str	r1, [r0, #4]
 800bc56:	4658      	mov	r0, fp
 800bc58:	f000 fd8e 	bl	800c778 <_Balloc>
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d13c      	bne.n	800bcdc <_dtoa_r+0x2ec>
 800bc62:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd0 <_dtoa_r+0x2e0>)
 800bc64:	4602      	mov	r2, r0
 800bc66:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc6a:	e6d8      	b.n	800ba1e <_dtoa_r+0x2e>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e7e0      	b.n	800bc32 <_dtoa_r+0x242>
 800bc70:	2401      	movs	r4, #1
 800bc72:	2300      	movs	r3, #0
 800bc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	9307      	str	r3, [sp, #28]
 800bc80:	2200      	movs	r2, #0
 800bc82:	2312      	movs	r3, #18
 800bc84:	e7d0      	b.n	800bc28 <_dtoa_r+0x238>
 800bc86:	2301      	movs	r3, #1
 800bc88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc8a:	e7f5      	b.n	800bc78 <_dtoa_r+0x288>
 800bc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	9307      	str	r3, [sp, #28]
 800bc92:	e7d7      	b.n	800bc44 <_dtoa_r+0x254>
 800bc94:	3101      	adds	r1, #1
 800bc96:	0052      	lsls	r2, r2, #1
 800bc98:	e7d8      	b.n	800bc4c <_dtoa_r+0x25c>
 800bc9a:	bf00      	nop
 800bc9c:	f3af 8000 	nop.w
 800bca0:	636f4361 	.word	0x636f4361
 800bca4:	3fd287a7 	.word	0x3fd287a7
 800bca8:	8b60c8b3 	.word	0x8b60c8b3
 800bcac:	3fc68a28 	.word	0x3fc68a28
 800bcb0:	509f79fb 	.word	0x509f79fb
 800bcb4:	3fd34413 	.word	0x3fd34413
 800bcb8:	0800da41 	.word	0x0800da41
 800bcbc:	0800da58 	.word	0x0800da58
 800bcc0:	7ff00000 	.word	0x7ff00000
 800bcc4:	0800da11 	.word	0x0800da11
 800bcc8:	3ff80000 	.word	0x3ff80000
 800bccc:	0800db50 	.word	0x0800db50
 800bcd0:	0800dab0 	.word	0x0800dab0
 800bcd4:	0800da3d 	.word	0x0800da3d
 800bcd8:	0800da10 	.word	0x0800da10
 800bcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bce0:	6018      	str	r0, [r3, #0]
 800bce2:	9b07      	ldr	r3, [sp, #28]
 800bce4:	2b0e      	cmp	r3, #14
 800bce6:	f200 80a4 	bhi.w	800be32 <_dtoa_r+0x442>
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	f000 80a1 	beq.w	800be32 <_dtoa_r+0x442>
 800bcf0:	2f00      	cmp	r7, #0
 800bcf2:	dd33      	ble.n	800bd5c <_dtoa_r+0x36c>
 800bcf4:	4bad      	ldr	r3, [pc, #692]	@ (800bfac <_dtoa_r+0x5bc>)
 800bcf6:	f007 020f 	and.w	r2, r7, #15
 800bcfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcfe:	ed93 7b00 	vldr	d7, [r3]
 800bd02:	05f8      	lsls	r0, r7, #23
 800bd04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd0c:	d516      	bpl.n	800bd3c <_dtoa_r+0x34c>
 800bd0e:	4ba8      	ldr	r3, [pc, #672]	@ (800bfb0 <_dtoa_r+0x5c0>)
 800bd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd18:	f7f4 fd98 	bl	800084c <__aeabi_ddiv>
 800bd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd20:	f004 040f 	and.w	r4, r4, #15
 800bd24:	2603      	movs	r6, #3
 800bd26:	4da2      	ldr	r5, [pc, #648]	@ (800bfb0 <_dtoa_r+0x5c0>)
 800bd28:	b954      	cbnz	r4, 800bd40 <_dtoa_r+0x350>
 800bd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd32:	f7f4 fd8b 	bl	800084c <__aeabi_ddiv>
 800bd36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd3a:	e028      	b.n	800bd8e <_dtoa_r+0x39e>
 800bd3c:	2602      	movs	r6, #2
 800bd3e:	e7f2      	b.n	800bd26 <_dtoa_r+0x336>
 800bd40:	07e1      	lsls	r1, r4, #31
 800bd42:	d508      	bpl.n	800bd56 <_dtoa_r+0x366>
 800bd44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd54:	3601      	adds	r6, #1
 800bd56:	1064      	asrs	r4, r4, #1
 800bd58:	3508      	adds	r5, #8
 800bd5a:	e7e5      	b.n	800bd28 <_dtoa_r+0x338>
 800bd5c:	f000 80d2 	beq.w	800bf04 <_dtoa_r+0x514>
 800bd60:	427c      	negs	r4, r7
 800bd62:	4b92      	ldr	r3, [pc, #584]	@ (800bfac <_dtoa_r+0x5bc>)
 800bd64:	4d92      	ldr	r5, [pc, #584]	@ (800bfb0 <_dtoa_r+0x5c0>)
 800bd66:	f004 020f 	and.w	r2, r4, #15
 800bd6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd76:	f7f4 fc3f 	bl	80005f8 <__aeabi_dmul>
 800bd7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd7e:	1124      	asrs	r4, r4, #4
 800bd80:	2300      	movs	r3, #0
 800bd82:	2602      	movs	r6, #2
 800bd84:	2c00      	cmp	r4, #0
 800bd86:	f040 80b2 	bne.w	800beee <_dtoa_r+0x4fe>
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1d3      	bne.n	800bd36 <_dtoa_r+0x346>
 800bd8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80b7 	beq.w	800bf08 <_dtoa_r+0x518>
 800bd9a:	4b86      	ldr	r3, [pc, #536]	@ (800bfb4 <_dtoa_r+0x5c4>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f000 80ae 	beq.w	800bf08 <_dtoa_r+0x518>
 800bdac:	9b07      	ldr	r3, [sp, #28]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 80aa 	beq.w	800bf08 <_dtoa_r+0x518>
 800bdb4:	9b00      	ldr	r3, [sp, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dd37      	ble.n	800be2a <_dtoa_r+0x43a>
 800bdba:	1e7b      	subs	r3, r7, #1
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4b7d      	ldr	r3, [pc, #500]	@ (800bfb8 <_dtoa_r+0x5c8>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdce:	9c00      	ldr	r4, [sp, #0]
 800bdd0:	3601      	adds	r6, #1
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7f4 fba6 	bl	8000524 <__aeabi_i2d>
 800bdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	4b76      	ldr	r3, [pc, #472]	@ (800bfbc <_dtoa_r+0x5cc>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	f7f4 fa52 	bl	800028c <__adddf3>
 800bde8:	4605      	mov	r5, r0
 800bdea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	f040 808d 	bne.w	800bf0e <_dtoa_r+0x51e>
 800bdf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf8:	4b71      	ldr	r3, [pc, #452]	@ (800bfc0 <_dtoa_r+0x5d0>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be08:	462a      	mov	r2, r5
 800be0a:	4633      	mov	r3, r6
 800be0c:	f7f4 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 800be10:	2800      	cmp	r0, #0
 800be12:	f040 828b 	bne.w	800c32c <_dtoa_r+0x93c>
 800be16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1a:	462a      	mov	r2, r5
 800be1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be20:	f7f4 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800be24:	2800      	cmp	r0, #0
 800be26:	f040 8128 	bne.w	800c07a <_dtoa_r+0x68a>
 800be2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800be2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800be32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be34:	2b00      	cmp	r3, #0
 800be36:	f2c0 815a 	blt.w	800c0ee <_dtoa_r+0x6fe>
 800be3a:	2f0e      	cmp	r7, #14
 800be3c:	f300 8157 	bgt.w	800c0ee <_dtoa_r+0x6fe>
 800be40:	4b5a      	ldr	r3, [pc, #360]	@ (800bfac <_dtoa_r+0x5bc>)
 800be42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be46:	ed93 7b00 	vldr	d7, [r3]
 800be4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	ed8d 7b00 	vstr	d7, [sp]
 800be52:	da03      	bge.n	800be5c <_dtoa_r+0x46c>
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f340 8101 	ble.w	800c05e <_dtoa_r+0x66e>
 800be5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be60:	4656      	mov	r6, sl
 800be62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fcef 	bl	800084c <__aeabi_ddiv>
 800be6e:	f7f4 fe73 	bl	8000b58 <__aeabi_d2iz>
 800be72:	4680      	mov	r8, r0
 800be74:	f7f4 fb56 	bl	8000524 <__aeabi_i2d>
 800be78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be8c:	f7f4 f9fc 	bl	8000288 <__aeabi_dsub>
 800be90:	f806 4b01 	strb.w	r4, [r6], #1
 800be94:	9d07      	ldr	r5, [sp, #28]
 800be96:	eba6 040a 	sub.w	r4, r6, sl
 800be9a:	42a5      	cmp	r5, r4
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	f040 8117 	bne.w	800c0d2 <_dtoa_r+0x6e2>
 800bea4:	f7f4 f9f2 	bl	800028c <__adddf3>
 800bea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	f7f4 fe32 	bl	8000b18 <__aeabi_dcmpgt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f040 80f9 	bne.w	800c0ac <_dtoa_r+0x6bc>
 800beba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec6:	b118      	cbz	r0, 800bed0 <_dtoa_r+0x4e0>
 800bec8:	f018 0f01 	tst.w	r8, #1
 800becc:	f040 80ee 	bne.w	800c0ac <_dtoa_r+0x6bc>
 800bed0:	4649      	mov	r1, r9
 800bed2:	4658      	mov	r0, fp
 800bed4:	f000 fc90 	bl	800c7f8 <_Bfree>
 800bed8:	2300      	movs	r3, #0
 800beda:	7033      	strb	r3, [r6, #0]
 800bedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bede:	3701      	adds	r7, #1
 800bee0:	601f      	str	r7, [r3, #0]
 800bee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 831d 	beq.w	800c524 <_dtoa_r+0xb34>
 800beea:	601e      	str	r6, [r3, #0]
 800beec:	e31a      	b.n	800c524 <_dtoa_r+0xb34>
 800beee:	07e2      	lsls	r2, r4, #31
 800bef0:	d505      	bpl.n	800befe <_dtoa_r+0x50e>
 800bef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bef6:	f7f4 fb7f 	bl	80005f8 <__aeabi_dmul>
 800befa:	3601      	adds	r6, #1
 800befc:	2301      	movs	r3, #1
 800befe:	1064      	asrs	r4, r4, #1
 800bf00:	3508      	adds	r5, #8
 800bf02:	e73f      	b.n	800bd84 <_dtoa_r+0x394>
 800bf04:	2602      	movs	r6, #2
 800bf06:	e742      	b.n	800bd8e <_dtoa_r+0x39e>
 800bf08:	9c07      	ldr	r4, [sp, #28]
 800bf0a:	9704      	str	r7, [sp, #16]
 800bf0c:	e761      	b.n	800bdd2 <_dtoa_r+0x3e2>
 800bf0e:	4b27      	ldr	r3, [pc, #156]	@ (800bfac <_dtoa_r+0x5bc>)
 800bf10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf1a:	4454      	add	r4, sl
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	d053      	beq.n	800bfc8 <_dtoa_r+0x5d8>
 800bf20:	4928      	ldr	r1, [pc, #160]	@ (800bfc4 <_dtoa_r+0x5d4>)
 800bf22:	2000      	movs	r0, #0
 800bf24:	f7f4 fc92 	bl	800084c <__aeabi_ddiv>
 800bf28:	4633      	mov	r3, r6
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf34:	4656      	mov	r6, sl
 800bf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3a:	f7f4 fe0d 	bl	8000b58 <__aeabi_d2iz>
 800bf3e:	4605      	mov	r5, r0
 800bf40:	f7f4 faf0 	bl	8000524 <__aeabi_i2d>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf4c:	f7f4 f99c 	bl	8000288 <__aeabi_dsub>
 800bf50:	3530      	adds	r5, #48	@ 0x30
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf5a:	f806 5b01 	strb.w	r5, [r6], #1
 800bf5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf62:	f7f4 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d171      	bne.n	800c04e <_dtoa_r+0x65e>
 800bf6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf6e:	4911      	ldr	r1, [pc, #68]	@ (800bfb4 <_dtoa_r+0x5c4>)
 800bf70:	2000      	movs	r0, #0
 800bf72:	f7f4 f989 	bl	8000288 <__aeabi_dsub>
 800bf76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf7a:	f7f4 fdaf 	bl	8000adc <__aeabi_dcmplt>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f040 8095 	bne.w	800c0ae <_dtoa_r+0x6be>
 800bf84:	42a6      	cmp	r6, r4
 800bf86:	f43f af50 	beq.w	800be2a <_dtoa_r+0x43a>
 800bf8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf8e:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb8 <_dtoa_r+0x5c8>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	f7f4 fb31 	bl	80005f8 <__aeabi_dmul>
 800bf96:	4b08      	ldr	r3, [pc, #32]	@ (800bfb8 <_dtoa_r+0x5c8>)
 800bf98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfa2:	f7f4 fb29 	bl	80005f8 <__aeabi_dmul>
 800bfa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfaa:	e7c4      	b.n	800bf36 <_dtoa_r+0x546>
 800bfac:	0800db50 	.word	0x0800db50
 800bfb0:	0800db28 	.word	0x0800db28
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	40240000 	.word	0x40240000
 800bfbc:	401c0000 	.word	0x401c0000
 800bfc0:	40140000 	.word	0x40140000
 800bfc4:	3fe00000 	.word	0x3fe00000
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f7f4 fb14 	bl	80005f8 <__aeabi_dmul>
 800bfd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfd4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bfd6:	4656      	mov	r6, sl
 800bfd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfdc:	f7f4 fdbc 	bl	8000b58 <__aeabi_d2iz>
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	f7f4 fa9f 	bl	8000524 <__aeabi_i2d>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfee:	f7f4 f94b 	bl	8000288 <__aeabi_dsub>
 800bff2:	3530      	adds	r5, #48	@ 0x30
 800bff4:	f806 5b01 	strb.w	r5, [r6], #1
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c002:	f04f 0200 	mov.w	r2, #0
 800c006:	d124      	bne.n	800c052 <_dtoa_r+0x662>
 800c008:	4bac      	ldr	r3, [pc, #688]	@ (800c2bc <_dtoa_r+0x8cc>)
 800c00a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c00e:	f7f4 f93d 	bl	800028c <__adddf3>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	f7f4 fd7d 	bl	8000b18 <__aeabi_dcmpgt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d145      	bne.n	800c0ae <_dtoa_r+0x6be>
 800c022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c026:	49a5      	ldr	r1, [pc, #660]	@ (800c2bc <_dtoa_r+0x8cc>)
 800c028:	2000      	movs	r0, #0
 800c02a:	f7f4 f92d 	bl	8000288 <__aeabi_dsub>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c036:	f7f4 fd51 	bl	8000adc <__aeabi_dcmplt>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f43f aef5 	beq.w	800be2a <_dtoa_r+0x43a>
 800c040:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c042:	1e73      	subs	r3, r6, #1
 800c044:	9315      	str	r3, [sp, #84]	@ 0x54
 800c046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c04a:	2b30      	cmp	r3, #48	@ 0x30
 800c04c:	d0f8      	beq.n	800c040 <_dtoa_r+0x650>
 800c04e:	9f04      	ldr	r7, [sp, #16]
 800c050:	e73e      	b.n	800bed0 <_dtoa_r+0x4e0>
 800c052:	4b9b      	ldr	r3, [pc, #620]	@ (800c2c0 <_dtoa_r+0x8d0>)
 800c054:	f7f4 fad0 	bl	80005f8 <__aeabi_dmul>
 800c058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c05c:	e7bc      	b.n	800bfd8 <_dtoa_r+0x5e8>
 800c05e:	d10c      	bne.n	800c07a <_dtoa_r+0x68a>
 800c060:	4b98      	ldr	r3, [pc, #608]	@ (800c2c4 <_dtoa_r+0x8d4>)
 800c062:	2200      	movs	r2, #0
 800c064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c068:	f7f4 fac6 	bl	80005f8 <__aeabi_dmul>
 800c06c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c070:	f7f4 fd48 	bl	8000b04 <__aeabi_dcmpge>
 800c074:	2800      	cmp	r0, #0
 800c076:	f000 8157 	beq.w	800c328 <_dtoa_r+0x938>
 800c07a:	2400      	movs	r4, #0
 800c07c:	4625      	mov	r5, r4
 800c07e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c080:	43db      	mvns	r3, r3
 800c082:	9304      	str	r3, [sp, #16]
 800c084:	4656      	mov	r6, sl
 800c086:	2700      	movs	r7, #0
 800c088:	4621      	mov	r1, r4
 800c08a:	4658      	mov	r0, fp
 800c08c:	f000 fbb4 	bl	800c7f8 <_Bfree>
 800c090:	2d00      	cmp	r5, #0
 800c092:	d0dc      	beq.n	800c04e <_dtoa_r+0x65e>
 800c094:	b12f      	cbz	r7, 800c0a2 <_dtoa_r+0x6b2>
 800c096:	42af      	cmp	r7, r5
 800c098:	d003      	beq.n	800c0a2 <_dtoa_r+0x6b2>
 800c09a:	4639      	mov	r1, r7
 800c09c:	4658      	mov	r0, fp
 800c09e:	f000 fbab 	bl	800c7f8 <_Bfree>
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	4658      	mov	r0, fp
 800c0a6:	f000 fba7 	bl	800c7f8 <_Bfree>
 800c0aa:	e7d0      	b.n	800c04e <_dtoa_r+0x65e>
 800c0ac:	9704      	str	r7, [sp, #16]
 800c0ae:	4633      	mov	r3, r6
 800c0b0:	461e      	mov	r6, r3
 800c0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0b6:	2a39      	cmp	r2, #57	@ 0x39
 800c0b8:	d107      	bne.n	800c0ca <_dtoa_r+0x6da>
 800c0ba:	459a      	cmp	sl, r3
 800c0bc:	d1f8      	bne.n	800c0b0 <_dtoa_r+0x6c0>
 800c0be:	9a04      	ldr	r2, [sp, #16]
 800c0c0:	3201      	adds	r2, #1
 800c0c2:	9204      	str	r2, [sp, #16]
 800c0c4:	2230      	movs	r2, #48	@ 0x30
 800c0c6:	f88a 2000 	strb.w	r2, [sl]
 800c0ca:	781a      	ldrb	r2, [r3, #0]
 800c0cc:	3201      	adds	r2, #1
 800c0ce:	701a      	strb	r2, [r3, #0]
 800c0d0:	e7bd      	b.n	800c04e <_dtoa_r+0x65e>
 800c0d2:	4b7b      	ldr	r3, [pc, #492]	@ (800c2c0 <_dtoa_r+0x8d0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	460d      	mov	r5, r1
 800c0e2:	f7f4 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	f43f aebb 	beq.w	800be62 <_dtoa_r+0x472>
 800c0ec:	e6f0      	b.n	800bed0 <_dtoa_r+0x4e0>
 800c0ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	f000 80db 	beq.w	800c2ac <_dtoa_r+0x8bc>
 800c0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0f8:	2a01      	cmp	r2, #1
 800c0fa:	f300 80bf 	bgt.w	800c27c <_dtoa_r+0x88c>
 800c0fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c100:	2a00      	cmp	r2, #0
 800c102:	f000 80b7 	beq.w	800c274 <_dtoa_r+0x884>
 800c106:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c10a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c10c:	4646      	mov	r6, r8
 800c10e:	9a08      	ldr	r2, [sp, #32]
 800c110:	2101      	movs	r1, #1
 800c112:	441a      	add	r2, r3
 800c114:	4658      	mov	r0, fp
 800c116:	4498      	add	r8, r3
 800c118:	9208      	str	r2, [sp, #32]
 800c11a:	f000 fc21 	bl	800c960 <__i2b>
 800c11e:	4605      	mov	r5, r0
 800c120:	b15e      	cbz	r6, 800c13a <_dtoa_r+0x74a>
 800c122:	9b08      	ldr	r3, [sp, #32]
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd08      	ble.n	800c13a <_dtoa_r+0x74a>
 800c128:	42b3      	cmp	r3, r6
 800c12a:	9a08      	ldr	r2, [sp, #32]
 800c12c:	bfa8      	it	ge
 800c12e:	4633      	movge	r3, r6
 800c130:	eba8 0803 	sub.w	r8, r8, r3
 800c134:	1af6      	subs	r6, r6, r3
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	9308      	str	r3, [sp, #32]
 800c13a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c13c:	b1f3      	cbz	r3, 800c17c <_dtoa_r+0x78c>
 800c13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 80b7 	beq.w	800c2b4 <_dtoa_r+0x8c4>
 800c146:	b18c      	cbz	r4, 800c16c <_dtoa_r+0x77c>
 800c148:	4629      	mov	r1, r5
 800c14a:	4622      	mov	r2, r4
 800c14c:	4658      	mov	r0, fp
 800c14e:	f000 fcc7 	bl	800cae0 <__pow5mult>
 800c152:	464a      	mov	r2, r9
 800c154:	4601      	mov	r1, r0
 800c156:	4605      	mov	r5, r0
 800c158:	4658      	mov	r0, fp
 800c15a:	f000 fc17 	bl	800c98c <__multiply>
 800c15e:	4649      	mov	r1, r9
 800c160:	9004      	str	r0, [sp, #16]
 800c162:	4658      	mov	r0, fp
 800c164:	f000 fb48 	bl	800c7f8 <_Bfree>
 800c168:	9b04      	ldr	r3, [sp, #16]
 800c16a:	4699      	mov	r9, r3
 800c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c16e:	1b1a      	subs	r2, r3, r4
 800c170:	d004      	beq.n	800c17c <_dtoa_r+0x78c>
 800c172:	4649      	mov	r1, r9
 800c174:	4658      	mov	r0, fp
 800c176:	f000 fcb3 	bl	800cae0 <__pow5mult>
 800c17a:	4681      	mov	r9, r0
 800c17c:	2101      	movs	r1, #1
 800c17e:	4658      	mov	r0, fp
 800c180:	f000 fbee 	bl	800c960 <__i2b>
 800c184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c186:	4604      	mov	r4, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 81cf 	beq.w	800c52c <_dtoa_r+0xb3c>
 800c18e:	461a      	mov	r2, r3
 800c190:	4601      	mov	r1, r0
 800c192:	4658      	mov	r0, fp
 800c194:	f000 fca4 	bl	800cae0 <__pow5mult>
 800c198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	4604      	mov	r4, r0
 800c19e:	f300 8095 	bgt.w	800c2cc <_dtoa_r+0x8dc>
 800c1a2:	9b02      	ldr	r3, [sp, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f040 8087 	bne.w	800c2b8 <_dtoa_r+0x8c8>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f040 8089 	bne.w	800c2c8 <_dtoa_r+0x8d8>
 800c1b6:	9b03      	ldr	r3, [sp, #12]
 800c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1bc:	0d1b      	lsrs	r3, r3, #20
 800c1be:	051b      	lsls	r3, r3, #20
 800c1c0:	b12b      	cbz	r3, 800c1ce <_dtoa_r+0x7de>
 800c1c2:	9b08      	ldr	r3, [sp, #32]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	9308      	str	r3, [sp, #32]
 800c1c8:	f108 0801 	add.w	r8, r8, #1
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 81b0 	beq.w	800c538 <_dtoa_r+0xb48>
 800c1d8:	6923      	ldr	r3, [r4, #16]
 800c1da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1de:	6918      	ldr	r0, [r3, #16]
 800c1e0:	f000 fb72 	bl	800c8c8 <__hi0bits>
 800c1e4:	f1c0 0020 	rsb	r0, r0, #32
 800c1e8:	9b08      	ldr	r3, [sp, #32]
 800c1ea:	4418      	add	r0, r3
 800c1ec:	f010 001f 	ands.w	r0, r0, #31
 800c1f0:	d077      	beq.n	800c2e2 <_dtoa_r+0x8f2>
 800c1f2:	f1c0 0320 	rsb	r3, r0, #32
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	dd6b      	ble.n	800c2d2 <_dtoa_r+0x8e2>
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	f1c0 001c 	rsb	r0, r0, #28
 800c200:	4403      	add	r3, r0
 800c202:	4480      	add	r8, r0
 800c204:	4406      	add	r6, r0
 800c206:	9308      	str	r3, [sp, #32]
 800c208:	f1b8 0f00 	cmp.w	r8, #0
 800c20c:	dd05      	ble.n	800c21a <_dtoa_r+0x82a>
 800c20e:	4649      	mov	r1, r9
 800c210:	4642      	mov	r2, r8
 800c212:	4658      	mov	r0, fp
 800c214:	f000 fcbe 	bl	800cb94 <__lshift>
 800c218:	4681      	mov	r9, r0
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd05      	ble.n	800c22c <_dtoa_r+0x83c>
 800c220:	4621      	mov	r1, r4
 800c222:	461a      	mov	r2, r3
 800c224:	4658      	mov	r0, fp
 800c226:	f000 fcb5 	bl	800cb94 <__lshift>
 800c22a:	4604      	mov	r4, r0
 800c22c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d059      	beq.n	800c2e6 <_dtoa_r+0x8f6>
 800c232:	4621      	mov	r1, r4
 800c234:	4648      	mov	r0, r9
 800c236:	f000 fd19 	bl	800cc6c <__mcmp>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	da53      	bge.n	800c2e6 <_dtoa_r+0x8f6>
 800c23e:	1e7b      	subs	r3, r7, #1
 800c240:	9304      	str	r3, [sp, #16]
 800c242:	4649      	mov	r1, r9
 800c244:	2300      	movs	r3, #0
 800c246:	220a      	movs	r2, #10
 800c248:	4658      	mov	r0, fp
 800c24a:	f000 faf7 	bl	800c83c <__multadd>
 800c24e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c250:	4681      	mov	r9, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 8172 	beq.w	800c53c <_dtoa_r+0xb4c>
 800c258:	2300      	movs	r3, #0
 800c25a:	4629      	mov	r1, r5
 800c25c:	220a      	movs	r2, #10
 800c25e:	4658      	mov	r0, fp
 800c260:	f000 faec 	bl	800c83c <__multadd>
 800c264:	9b00      	ldr	r3, [sp, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	4605      	mov	r5, r0
 800c26a:	dc67      	bgt.n	800c33c <_dtoa_r+0x94c>
 800c26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c26e:	2b02      	cmp	r3, #2
 800c270:	dc41      	bgt.n	800c2f6 <_dtoa_r+0x906>
 800c272:	e063      	b.n	800c33c <_dtoa_r+0x94c>
 800c274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c276:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c27a:	e746      	b.n	800c10a <_dtoa_r+0x71a>
 800c27c:	9b07      	ldr	r3, [sp, #28]
 800c27e:	1e5c      	subs	r4, r3, #1
 800c280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c282:	42a3      	cmp	r3, r4
 800c284:	bfbf      	itttt	lt
 800c286:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c288:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c28a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c28c:	1ae3      	sublt	r3, r4, r3
 800c28e:	bfb4      	ite	lt
 800c290:	18d2      	addlt	r2, r2, r3
 800c292:	1b1c      	subge	r4, r3, r4
 800c294:	9b07      	ldr	r3, [sp, #28]
 800c296:	bfbc      	itt	lt
 800c298:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c29a:	2400      	movlt	r4, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	bfb5      	itete	lt
 800c2a0:	eba8 0603 	sublt.w	r6, r8, r3
 800c2a4:	9b07      	ldrge	r3, [sp, #28]
 800c2a6:	2300      	movlt	r3, #0
 800c2a8:	4646      	movge	r6, r8
 800c2aa:	e730      	b.n	800c10e <_dtoa_r+0x71e>
 800c2ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c2ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c2b0:	4646      	mov	r6, r8
 800c2b2:	e735      	b.n	800c120 <_dtoa_r+0x730>
 800c2b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2b6:	e75c      	b.n	800c172 <_dtoa_r+0x782>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	e788      	b.n	800c1ce <_dtoa_r+0x7de>
 800c2bc:	3fe00000 	.word	0x3fe00000
 800c2c0:	40240000 	.word	0x40240000
 800c2c4:	40140000 	.word	0x40140000
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	e780      	b.n	800c1ce <_dtoa_r+0x7de>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2d0:	e782      	b.n	800c1d8 <_dtoa_r+0x7e8>
 800c2d2:	d099      	beq.n	800c208 <_dtoa_r+0x818>
 800c2d4:	9a08      	ldr	r2, [sp, #32]
 800c2d6:	331c      	adds	r3, #28
 800c2d8:	441a      	add	r2, r3
 800c2da:	4498      	add	r8, r3
 800c2dc:	441e      	add	r6, r3
 800c2de:	9208      	str	r2, [sp, #32]
 800c2e0:	e792      	b.n	800c208 <_dtoa_r+0x818>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	e7f6      	b.n	800c2d4 <_dtoa_r+0x8e4>
 800c2e6:	9b07      	ldr	r3, [sp, #28]
 800c2e8:	9704      	str	r7, [sp, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dc20      	bgt.n	800c330 <_dtoa_r+0x940>
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	dd1e      	ble.n	800c334 <_dtoa_r+0x944>
 800c2f6:	9b00      	ldr	r3, [sp, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f47f aec0 	bne.w	800c07e <_dtoa_r+0x68e>
 800c2fe:	4621      	mov	r1, r4
 800c300:	2205      	movs	r2, #5
 800c302:	4658      	mov	r0, fp
 800c304:	f000 fa9a 	bl	800c83c <__multadd>
 800c308:	4601      	mov	r1, r0
 800c30a:	4604      	mov	r4, r0
 800c30c:	4648      	mov	r0, r9
 800c30e:	f000 fcad 	bl	800cc6c <__mcmp>
 800c312:	2800      	cmp	r0, #0
 800c314:	f77f aeb3 	ble.w	800c07e <_dtoa_r+0x68e>
 800c318:	4656      	mov	r6, sl
 800c31a:	2331      	movs	r3, #49	@ 0x31
 800c31c:	f806 3b01 	strb.w	r3, [r6], #1
 800c320:	9b04      	ldr	r3, [sp, #16]
 800c322:	3301      	adds	r3, #1
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	e6ae      	b.n	800c086 <_dtoa_r+0x696>
 800c328:	9c07      	ldr	r4, [sp, #28]
 800c32a:	9704      	str	r7, [sp, #16]
 800c32c:	4625      	mov	r5, r4
 800c32e:	e7f3      	b.n	800c318 <_dtoa_r+0x928>
 800c330:	9b07      	ldr	r3, [sp, #28]
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 8104 	beq.w	800c544 <_dtoa_r+0xb54>
 800c33c:	2e00      	cmp	r6, #0
 800c33e:	dd05      	ble.n	800c34c <_dtoa_r+0x95c>
 800c340:	4629      	mov	r1, r5
 800c342:	4632      	mov	r2, r6
 800c344:	4658      	mov	r0, fp
 800c346:	f000 fc25 	bl	800cb94 <__lshift>
 800c34a:	4605      	mov	r5, r0
 800c34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d05a      	beq.n	800c408 <_dtoa_r+0xa18>
 800c352:	6869      	ldr	r1, [r5, #4]
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fa0f 	bl	800c778 <_Balloc>
 800c35a:	4606      	mov	r6, r0
 800c35c:	b928      	cbnz	r0, 800c36a <_dtoa_r+0x97a>
 800c35e:	4b84      	ldr	r3, [pc, #528]	@ (800c570 <_dtoa_r+0xb80>)
 800c360:	4602      	mov	r2, r0
 800c362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c366:	f7ff bb5a 	b.w	800ba1e <_dtoa_r+0x2e>
 800c36a:	692a      	ldr	r2, [r5, #16]
 800c36c:	3202      	adds	r2, #2
 800c36e:	0092      	lsls	r2, r2, #2
 800c370:	f105 010c 	add.w	r1, r5, #12
 800c374:	300c      	adds	r0, #12
 800c376:	f7ff faa4 	bl	800b8c2 <memcpy>
 800c37a:	2201      	movs	r2, #1
 800c37c:	4631      	mov	r1, r6
 800c37e:	4658      	mov	r0, fp
 800c380:	f000 fc08 	bl	800cb94 <__lshift>
 800c384:	f10a 0301 	add.w	r3, sl, #1
 800c388:	9307      	str	r3, [sp, #28]
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	4453      	add	r3, sl
 800c38e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c390:	9b02      	ldr	r3, [sp, #8]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	462f      	mov	r7, r5
 800c398:	930a      	str	r3, [sp, #40]	@ 0x28
 800c39a:	4605      	mov	r5, r0
 800c39c:	9b07      	ldr	r3, [sp, #28]
 800c39e:	4621      	mov	r1, r4
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	4648      	mov	r0, r9
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	f7ff fa9a 	bl	800b8de <quorem>
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	9002      	str	r0, [sp, #8]
 800c3ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f000 fc5a 	bl	800cc6c <__mcmp>
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	9008      	str	r0, [sp, #32]
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4658      	mov	r0, fp
 800c3c0:	f000 fc70 	bl	800cca4 <__mdiff>
 800c3c4:	68c2      	ldr	r2, [r0, #12]
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	bb02      	cbnz	r2, 800c40c <_dtoa_r+0xa1c>
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	4648      	mov	r0, r9
 800c3ce:	f000 fc4d 	bl	800cc6c <__mcmp>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4658      	mov	r0, fp
 800c3d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3da:	f000 fa0d 	bl	800c7f8 <_Bfree>
 800c3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3e2:	9e07      	ldr	r6, [sp, #28]
 800c3e4:	ea43 0102 	orr.w	r1, r3, r2
 800c3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ea:	4319      	orrs	r1, r3
 800c3ec:	d110      	bne.n	800c410 <_dtoa_r+0xa20>
 800c3ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3f2:	d029      	beq.n	800c448 <_dtoa_r+0xa58>
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dd02      	ble.n	800c400 <_dtoa_r+0xa10>
 800c3fa:	9b02      	ldr	r3, [sp, #8]
 800c3fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c400:	9b00      	ldr	r3, [sp, #0]
 800c402:	f883 8000 	strb.w	r8, [r3]
 800c406:	e63f      	b.n	800c088 <_dtoa_r+0x698>
 800c408:	4628      	mov	r0, r5
 800c40a:	e7bb      	b.n	800c384 <_dtoa_r+0x994>
 800c40c:	2201      	movs	r2, #1
 800c40e:	e7e1      	b.n	800c3d4 <_dtoa_r+0x9e4>
 800c410:	9b08      	ldr	r3, [sp, #32]
 800c412:	2b00      	cmp	r3, #0
 800c414:	db04      	blt.n	800c420 <_dtoa_r+0xa30>
 800c416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c418:	430b      	orrs	r3, r1
 800c41a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c41c:	430b      	orrs	r3, r1
 800c41e:	d120      	bne.n	800c462 <_dtoa_r+0xa72>
 800c420:	2a00      	cmp	r2, #0
 800c422:	dded      	ble.n	800c400 <_dtoa_r+0xa10>
 800c424:	4649      	mov	r1, r9
 800c426:	2201      	movs	r2, #1
 800c428:	4658      	mov	r0, fp
 800c42a:	f000 fbb3 	bl	800cb94 <__lshift>
 800c42e:	4621      	mov	r1, r4
 800c430:	4681      	mov	r9, r0
 800c432:	f000 fc1b 	bl	800cc6c <__mcmp>
 800c436:	2800      	cmp	r0, #0
 800c438:	dc03      	bgt.n	800c442 <_dtoa_r+0xa52>
 800c43a:	d1e1      	bne.n	800c400 <_dtoa_r+0xa10>
 800c43c:	f018 0f01 	tst.w	r8, #1
 800c440:	d0de      	beq.n	800c400 <_dtoa_r+0xa10>
 800c442:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c446:	d1d8      	bne.n	800c3fa <_dtoa_r+0xa0a>
 800c448:	9a00      	ldr	r2, [sp, #0]
 800c44a:	2339      	movs	r3, #57	@ 0x39
 800c44c:	7013      	strb	r3, [r2, #0]
 800c44e:	4633      	mov	r3, r6
 800c450:	461e      	mov	r6, r3
 800c452:	3b01      	subs	r3, #1
 800c454:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c458:	2a39      	cmp	r2, #57	@ 0x39
 800c45a:	d052      	beq.n	800c502 <_dtoa_r+0xb12>
 800c45c:	3201      	adds	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]
 800c460:	e612      	b.n	800c088 <_dtoa_r+0x698>
 800c462:	2a00      	cmp	r2, #0
 800c464:	dd07      	ble.n	800c476 <_dtoa_r+0xa86>
 800c466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c46a:	d0ed      	beq.n	800c448 <_dtoa_r+0xa58>
 800c46c:	9a00      	ldr	r2, [sp, #0]
 800c46e:	f108 0301 	add.w	r3, r8, #1
 800c472:	7013      	strb	r3, [r2, #0]
 800c474:	e608      	b.n	800c088 <_dtoa_r+0x698>
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	9a07      	ldr	r2, [sp, #28]
 800c47a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c480:	4293      	cmp	r3, r2
 800c482:	d028      	beq.n	800c4d6 <_dtoa_r+0xae6>
 800c484:	4649      	mov	r1, r9
 800c486:	2300      	movs	r3, #0
 800c488:	220a      	movs	r2, #10
 800c48a:	4658      	mov	r0, fp
 800c48c:	f000 f9d6 	bl	800c83c <__multadd>
 800c490:	42af      	cmp	r7, r5
 800c492:	4681      	mov	r9, r0
 800c494:	f04f 0300 	mov.w	r3, #0
 800c498:	f04f 020a 	mov.w	r2, #10
 800c49c:	4639      	mov	r1, r7
 800c49e:	4658      	mov	r0, fp
 800c4a0:	d107      	bne.n	800c4b2 <_dtoa_r+0xac2>
 800c4a2:	f000 f9cb 	bl	800c83c <__multadd>
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	9b07      	ldr	r3, [sp, #28]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	9307      	str	r3, [sp, #28]
 800c4b0:	e774      	b.n	800c39c <_dtoa_r+0x9ac>
 800c4b2:	f000 f9c3 	bl	800c83c <__multadd>
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	220a      	movs	r2, #10
 800c4be:	4658      	mov	r0, fp
 800c4c0:	f000 f9bc 	bl	800c83c <__multadd>
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	e7f0      	b.n	800c4aa <_dtoa_r+0xaba>
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	bfcc      	ite	gt
 800c4ce:	461e      	movgt	r6, r3
 800c4d0:	2601      	movle	r6, #1
 800c4d2:	4456      	add	r6, sl
 800c4d4:	2700      	movs	r7, #0
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4658      	mov	r0, fp
 800c4dc:	f000 fb5a 	bl	800cb94 <__lshift>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	f000 fbc2 	bl	800cc6c <__mcmp>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	dcb0      	bgt.n	800c44e <_dtoa_r+0xa5e>
 800c4ec:	d102      	bne.n	800c4f4 <_dtoa_r+0xb04>
 800c4ee:	f018 0f01 	tst.w	r8, #1
 800c4f2:	d1ac      	bne.n	800c44e <_dtoa_r+0xa5e>
 800c4f4:	4633      	mov	r3, r6
 800c4f6:	461e      	mov	r6, r3
 800c4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4fc:	2a30      	cmp	r2, #48	@ 0x30
 800c4fe:	d0fa      	beq.n	800c4f6 <_dtoa_r+0xb06>
 800c500:	e5c2      	b.n	800c088 <_dtoa_r+0x698>
 800c502:	459a      	cmp	sl, r3
 800c504:	d1a4      	bne.n	800c450 <_dtoa_r+0xa60>
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	3301      	adds	r3, #1
 800c50a:	9304      	str	r3, [sp, #16]
 800c50c:	2331      	movs	r3, #49	@ 0x31
 800c50e:	f88a 3000 	strb.w	r3, [sl]
 800c512:	e5b9      	b.n	800c088 <_dtoa_r+0x698>
 800c514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c516:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c574 <_dtoa_r+0xb84>
 800c51a:	b11b      	cbz	r3, 800c524 <_dtoa_r+0xb34>
 800c51c:	f10a 0308 	add.w	r3, sl, #8
 800c520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c522:	6013      	str	r3, [r2, #0]
 800c524:	4650      	mov	r0, sl
 800c526:	b019      	add	sp, #100	@ 0x64
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52e:	2b01      	cmp	r3, #1
 800c530:	f77f ae37 	ble.w	800c1a2 <_dtoa_r+0x7b2>
 800c534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c536:	930a      	str	r3, [sp, #40]	@ 0x28
 800c538:	2001      	movs	r0, #1
 800c53a:	e655      	b.n	800c1e8 <_dtoa_r+0x7f8>
 800c53c:	9b00      	ldr	r3, [sp, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f77f aed6 	ble.w	800c2f0 <_dtoa_r+0x900>
 800c544:	4656      	mov	r6, sl
 800c546:	4621      	mov	r1, r4
 800c548:	4648      	mov	r0, r9
 800c54a:	f7ff f9c8 	bl	800b8de <quorem>
 800c54e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c552:	f806 8b01 	strb.w	r8, [r6], #1
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	eba6 020a 	sub.w	r2, r6, sl
 800c55c:	4293      	cmp	r3, r2
 800c55e:	ddb3      	ble.n	800c4c8 <_dtoa_r+0xad8>
 800c560:	4649      	mov	r1, r9
 800c562:	2300      	movs	r3, #0
 800c564:	220a      	movs	r2, #10
 800c566:	4658      	mov	r0, fp
 800c568:	f000 f968 	bl	800c83c <__multadd>
 800c56c:	4681      	mov	r9, r0
 800c56e:	e7ea      	b.n	800c546 <_dtoa_r+0xb56>
 800c570:	0800dab0 	.word	0x0800dab0
 800c574:	0800da34 	.word	0x0800da34

0800c578 <_free_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4605      	mov	r5, r0
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d041      	beq.n	800c604 <_free_r+0x8c>
 800c580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c584:	1f0c      	subs	r4, r1, #4
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfb8      	it	lt
 800c58a:	18e4      	addlt	r4, r4, r3
 800c58c:	f000 f8e8 	bl	800c760 <__malloc_lock>
 800c590:	4a1d      	ldr	r2, [pc, #116]	@ (800c608 <_free_r+0x90>)
 800c592:	6813      	ldr	r3, [r2, #0]
 800c594:	b933      	cbnz	r3, 800c5a4 <_free_r+0x2c>
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	6014      	str	r4, [r2, #0]
 800c59a:	4628      	mov	r0, r5
 800c59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a0:	f000 b8e4 	b.w	800c76c <__malloc_unlock>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d908      	bls.n	800c5ba <_free_r+0x42>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	1821      	adds	r1, r4, r0
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	bf01      	itttt	eq
 800c5b0:	6819      	ldreq	r1, [r3, #0]
 800c5b2:	685b      	ldreq	r3, [r3, #4]
 800c5b4:	1809      	addeq	r1, r1, r0
 800c5b6:	6021      	streq	r1, [r4, #0]
 800c5b8:	e7ed      	b.n	800c596 <_free_r+0x1e>
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	b10b      	cbz	r3, 800c5c4 <_free_r+0x4c>
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	d9fa      	bls.n	800c5ba <_free_r+0x42>
 800c5c4:	6811      	ldr	r1, [r2, #0]
 800c5c6:	1850      	adds	r0, r2, r1
 800c5c8:	42a0      	cmp	r0, r4
 800c5ca:	d10b      	bne.n	800c5e4 <_free_r+0x6c>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	4401      	add	r1, r0
 800c5d0:	1850      	adds	r0, r2, r1
 800c5d2:	4283      	cmp	r3, r0
 800c5d4:	6011      	str	r1, [r2, #0]
 800c5d6:	d1e0      	bne.n	800c59a <_free_r+0x22>
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	6053      	str	r3, [r2, #4]
 800c5de:	4408      	add	r0, r1
 800c5e0:	6010      	str	r0, [r2, #0]
 800c5e2:	e7da      	b.n	800c59a <_free_r+0x22>
 800c5e4:	d902      	bls.n	800c5ec <_free_r+0x74>
 800c5e6:	230c      	movs	r3, #12
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	e7d6      	b.n	800c59a <_free_r+0x22>
 800c5ec:	6820      	ldr	r0, [r4, #0]
 800c5ee:	1821      	adds	r1, r4, r0
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	bf04      	itt	eq
 800c5f4:	6819      	ldreq	r1, [r3, #0]
 800c5f6:	685b      	ldreq	r3, [r3, #4]
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	bf04      	itt	eq
 800c5fc:	1809      	addeq	r1, r1, r0
 800c5fe:	6021      	streq	r1, [r4, #0]
 800c600:	6054      	str	r4, [r2, #4]
 800c602:	e7ca      	b.n	800c59a <_free_r+0x22>
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	200021a0 	.word	0x200021a0

0800c60c <malloc>:
 800c60c:	4b02      	ldr	r3, [pc, #8]	@ (800c618 <malloc+0xc>)
 800c60e:	4601      	mov	r1, r0
 800c610:	6818      	ldr	r0, [r3, #0]
 800c612:	f000 b825 	b.w	800c660 <_malloc_r>
 800c616:	bf00      	nop
 800c618:	20000020 	.word	0x20000020

0800c61c <sbrk_aligned>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	4e0f      	ldr	r6, [pc, #60]	@ (800c65c <sbrk_aligned+0x40>)
 800c620:	460c      	mov	r4, r1
 800c622:	6831      	ldr	r1, [r6, #0]
 800c624:	4605      	mov	r5, r0
 800c626:	b911      	cbnz	r1, 800c62e <sbrk_aligned+0x12>
 800c628:	f000 fcd4 	bl	800cfd4 <_sbrk_r>
 800c62c:	6030      	str	r0, [r6, #0]
 800c62e:	4621      	mov	r1, r4
 800c630:	4628      	mov	r0, r5
 800c632:	f000 fccf 	bl	800cfd4 <_sbrk_r>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d103      	bne.n	800c642 <sbrk_aligned+0x26>
 800c63a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c63e:	4620      	mov	r0, r4
 800c640:	bd70      	pop	{r4, r5, r6, pc}
 800c642:	1cc4      	adds	r4, r0, #3
 800c644:	f024 0403 	bic.w	r4, r4, #3
 800c648:	42a0      	cmp	r0, r4
 800c64a:	d0f8      	beq.n	800c63e <sbrk_aligned+0x22>
 800c64c:	1a21      	subs	r1, r4, r0
 800c64e:	4628      	mov	r0, r5
 800c650:	f000 fcc0 	bl	800cfd4 <_sbrk_r>
 800c654:	3001      	adds	r0, #1
 800c656:	d1f2      	bne.n	800c63e <sbrk_aligned+0x22>
 800c658:	e7ef      	b.n	800c63a <sbrk_aligned+0x1e>
 800c65a:	bf00      	nop
 800c65c:	2000219c 	.word	0x2000219c

0800c660 <_malloc_r>:
 800c660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c664:	1ccd      	adds	r5, r1, #3
 800c666:	f025 0503 	bic.w	r5, r5, #3
 800c66a:	3508      	adds	r5, #8
 800c66c:	2d0c      	cmp	r5, #12
 800c66e:	bf38      	it	cc
 800c670:	250c      	movcc	r5, #12
 800c672:	2d00      	cmp	r5, #0
 800c674:	4606      	mov	r6, r0
 800c676:	db01      	blt.n	800c67c <_malloc_r+0x1c>
 800c678:	42a9      	cmp	r1, r5
 800c67a:	d904      	bls.n	800c686 <_malloc_r+0x26>
 800c67c:	230c      	movs	r3, #12
 800c67e:	6033      	str	r3, [r6, #0]
 800c680:	2000      	movs	r0, #0
 800c682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c75c <_malloc_r+0xfc>
 800c68a:	f000 f869 	bl	800c760 <__malloc_lock>
 800c68e:	f8d8 3000 	ldr.w	r3, [r8]
 800c692:	461c      	mov	r4, r3
 800c694:	bb44      	cbnz	r4, 800c6e8 <_malloc_r+0x88>
 800c696:	4629      	mov	r1, r5
 800c698:	4630      	mov	r0, r6
 800c69a:	f7ff ffbf 	bl	800c61c <sbrk_aligned>
 800c69e:	1c43      	adds	r3, r0, #1
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	d158      	bne.n	800c756 <_malloc_r+0xf6>
 800c6a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c6a8:	4627      	mov	r7, r4
 800c6aa:	2f00      	cmp	r7, #0
 800c6ac:	d143      	bne.n	800c736 <_malloc_r+0xd6>
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	d04b      	beq.n	800c74a <_malloc_r+0xea>
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	eb04 0903 	add.w	r9, r4, r3
 800c6bc:	f000 fc8a 	bl	800cfd4 <_sbrk_r>
 800c6c0:	4581      	cmp	r9, r0
 800c6c2:	d142      	bne.n	800c74a <_malloc_r+0xea>
 800c6c4:	6821      	ldr	r1, [r4, #0]
 800c6c6:	1a6d      	subs	r5, r5, r1
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff ffa6 	bl	800c61c <sbrk_aligned>
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d03a      	beq.n	800c74a <_malloc_r+0xea>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	442b      	add	r3, r5
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	f8d8 3000 	ldr.w	r3, [r8]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	bb62      	cbnz	r2, 800c73c <_malloc_r+0xdc>
 800c6e2:	f8c8 7000 	str.w	r7, [r8]
 800c6e6:	e00f      	b.n	800c708 <_malloc_r+0xa8>
 800c6e8:	6822      	ldr	r2, [r4, #0]
 800c6ea:	1b52      	subs	r2, r2, r5
 800c6ec:	d420      	bmi.n	800c730 <_malloc_r+0xd0>
 800c6ee:	2a0b      	cmp	r2, #11
 800c6f0:	d917      	bls.n	800c722 <_malloc_r+0xc2>
 800c6f2:	1961      	adds	r1, r4, r5
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	6025      	str	r5, [r4, #0]
 800c6f8:	bf18      	it	ne
 800c6fa:	6059      	strne	r1, [r3, #4]
 800c6fc:	6863      	ldr	r3, [r4, #4]
 800c6fe:	bf08      	it	eq
 800c700:	f8c8 1000 	streq.w	r1, [r8]
 800c704:	5162      	str	r2, [r4, r5]
 800c706:	604b      	str	r3, [r1, #4]
 800c708:	4630      	mov	r0, r6
 800c70a:	f000 f82f 	bl	800c76c <__malloc_unlock>
 800c70e:	f104 000b 	add.w	r0, r4, #11
 800c712:	1d23      	adds	r3, r4, #4
 800c714:	f020 0007 	bic.w	r0, r0, #7
 800c718:	1ac2      	subs	r2, r0, r3
 800c71a:	bf1c      	itt	ne
 800c71c:	1a1b      	subne	r3, r3, r0
 800c71e:	50a3      	strne	r3, [r4, r2]
 800c720:	e7af      	b.n	800c682 <_malloc_r+0x22>
 800c722:	6862      	ldr	r2, [r4, #4]
 800c724:	42a3      	cmp	r3, r4
 800c726:	bf0c      	ite	eq
 800c728:	f8c8 2000 	streq.w	r2, [r8]
 800c72c:	605a      	strne	r2, [r3, #4]
 800c72e:	e7eb      	b.n	800c708 <_malloc_r+0xa8>
 800c730:	4623      	mov	r3, r4
 800c732:	6864      	ldr	r4, [r4, #4]
 800c734:	e7ae      	b.n	800c694 <_malloc_r+0x34>
 800c736:	463c      	mov	r4, r7
 800c738:	687f      	ldr	r7, [r7, #4]
 800c73a:	e7b6      	b.n	800c6aa <_malloc_r+0x4a>
 800c73c:	461a      	mov	r2, r3
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	42a3      	cmp	r3, r4
 800c742:	d1fb      	bne.n	800c73c <_malloc_r+0xdc>
 800c744:	2300      	movs	r3, #0
 800c746:	6053      	str	r3, [r2, #4]
 800c748:	e7de      	b.n	800c708 <_malloc_r+0xa8>
 800c74a:	230c      	movs	r3, #12
 800c74c:	6033      	str	r3, [r6, #0]
 800c74e:	4630      	mov	r0, r6
 800c750:	f000 f80c 	bl	800c76c <__malloc_unlock>
 800c754:	e794      	b.n	800c680 <_malloc_r+0x20>
 800c756:	6005      	str	r5, [r0, #0]
 800c758:	e7d6      	b.n	800c708 <_malloc_r+0xa8>
 800c75a:	bf00      	nop
 800c75c:	200021a0 	.word	0x200021a0

0800c760 <__malloc_lock>:
 800c760:	4801      	ldr	r0, [pc, #4]	@ (800c768 <__malloc_lock+0x8>)
 800c762:	f7ff b8ac 	b.w	800b8be <__retarget_lock_acquire_recursive>
 800c766:	bf00      	nop
 800c768:	20002198 	.word	0x20002198

0800c76c <__malloc_unlock>:
 800c76c:	4801      	ldr	r0, [pc, #4]	@ (800c774 <__malloc_unlock+0x8>)
 800c76e:	f7ff b8a7 	b.w	800b8c0 <__retarget_lock_release_recursive>
 800c772:	bf00      	nop
 800c774:	20002198 	.word	0x20002198

0800c778 <_Balloc>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	69c6      	ldr	r6, [r0, #28]
 800c77c:	4604      	mov	r4, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	b976      	cbnz	r6, 800c7a0 <_Balloc+0x28>
 800c782:	2010      	movs	r0, #16
 800c784:	f7ff ff42 	bl	800c60c <malloc>
 800c788:	4602      	mov	r2, r0
 800c78a:	61e0      	str	r0, [r4, #28]
 800c78c:	b920      	cbnz	r0, 800c798 <_Balloc+0x20>
 800c78e:	4b18      	ldr	r3, [pc, #96]	@ (800c7f0 <_Balloc+0x78>)
 800c790:	4818      	ldr	r0, [pc, #96]	@ (800c7f4 <_Balloc+0x7c>)
 800c792:	216b      	movs	r1, #107	@ 0x6b
 800c794:	f000 fc2e 	bl	800cff4 <__assert_func>
 800c798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c79c:	6006      	str	r6, [r0, #0]
 800c79e:	60c6      	str	r6, [r0, #12]
 800c7a0:	69e6      	ldr	r6, [r4, #28]
 800c7a2:	68f3      	ldr	r3, [r6, #12]
 800c7a4:	b183      	cbz	r3, 800c7c8 <_Balloc+0x50>
 800c7a6:	69e3      	ldr	r3, [r4, #28]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7ae:	b9b8      	cbnz	r0, 800c7e0 <_Balloc+0x68>
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c7b6:	1d72      	adds	r2, r6, #5
 800c7b8:	0092      	lsls	r2, r2, #2
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fc38 	bl	800d030 <_calloc_r>
 800c7c0:	b160      	cbz	r0, 800c7dc <_Balloc+0x64>
 800c7c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7c6:	e00e      	b.n	800c7e6 <_Balloc+0x6e>
 800c7c8:	2221      	movs	r2, #33	@ 0x21
 800c7ca:	2104      	movs	r1, #4
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 fc2f 	bl	800d030 <_calloc_r>
 800c7d2:	69e3      	ldr	r3, [r4, #28]
 800c7d4:	60f0      	str	r0, [r6, #12]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e4      	bne.n	800c7a6 <_Balloc+0x2e>
 800c7dc:	2000      	movs	r0, #0
 800c7de:	bd70      	pop	{r4, r5, r6, pc}
 800c7e0:	6802      	ldr	r2, [r0, #0]
 800c7e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7ec:	e7f7      	b.n	800c7de <_Balloc+0x66>
 800c7ee:	bf00      	nop
 800c7f0:	0800da41 	.word	0x0800da41
 800c7f4:	0800dac1 	.word	0x0800dac1

0800c7f8 <_Bfree>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	69c6      	ldr	r6, [r0, #28]
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	b976      	cbnz	r6, 800c820 <_Bfree+0x28>
 800c802:	2010      	movs	r0, #16
 800c804:	f7ff ff02 	bl	800c60c <malloc>
 800c808:	4602      	mov	r2, r0
 800c80a:	61e8      	str	r0, [r5, #28]
 800c80c:	b920      	cbnz	r0, 800c818 <_Bfree+0x20>
 800c80e:	4b09      	ldr	r3, [pc, #36]	@ (800c834 <_Bfree+0x3c>)
 800c810:	4809      	ldr	r0, [pc, #36]	@ (800c838 <_Bfree+0x40>)
 800c812:	218f      	movs	r1, #143	@ 0x8f
 800c814:	f000 fbee 	bl	800cff4 <__assert_func>
 800c818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c81c:	6006      	str	r6, [r0, #0]
 800c81e:	60c6      	str	r6, [r0, #12]
 800c820:	b13c      	cbz	r4, 800c832 <_Bfree+0x3a>
 800c822:	69eb      	ldr	r3, [r5, #28]
 800c824:	6862      	ldr	r2, [r4, #4]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c82c:	6021      	str	r1, [r4, #0]
 800c82e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c832:	bd70      	pop	{r4, r5, r6, pc}
 800c834:	0800da41 	.word	0x0800da41
 800c838:	0800dac1 	.word	0x0800dac1

0800c83c <__multadd>:
 800c83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c840:	690d      	ldr	r5, [r1, #16]
 800c842:	4607      	mov	r7, r0
 800c844:	460c      	mov	r4, r1
 800c846:	461e      	mov	r6, r3
 800c848:	f101 0c14 	add.w	ip, r1, #20
 800c84c:	2000      	movs	r0, #0
 800c84e:	f8dc 3000 	ldr.w	r3, [ip]
 800c852:	b299      	uxth	r1, r3
 800c854:	fb02 6101 	mla	r1, r2, r1, r6
 800c858:	0c1e      	lsrs	r6, r3, #16
 800c85a:	0c0b      	lsrs	r3, r1, #16
 800c85c:	fb02 3306 	mla	r3, r2, r6, r3
 800c860:	b289      	uxth	r1, r1
 800c862:	3001      	adds	r0, #1
 800c864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c868:	4285      	cmp	r5, r0
 800c86a:	f84c 1b04 	str.w	r1, [ip], #4
 800c86e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c872:	dcec      	bgt.n	800c84e <__multadd+0x12>
 800c874:	b30e      	cbz	r6, 800c8ba <__multadd+0x7e>
 800c876:	68a3      	ldr	r3, [r4, #8]
 800c878:	42ab      	cmp	r3, r5
 800c87a:	dc19      	bgt.n	800c8b0 <__multadd+0x74>
 800c87c:	6861      	ldr	r1, [r4, #4]
 800c87e:	4638      	mov	r0, r7
 800c880:	3101      	adds	r1, #1
 800c882:	f7ff ff79 	bl	800c778 <_Balloc>
 800c886:	4680      	mov	r8, r0
 800c888:	b928      	cbnz	r0, 800c896 <__multadd+0x5a>
 800c88a:	4602      	mov	r2, r0
 800c88c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c0 <__multadd+0x84>)
 800c88e:	480d      	ldr	r0, [pc, #52]	@ (800c8c4 <__multadd+0x88>)
 800c890:	21ba      	movs	r1, #186	@ 0xba
 800c892:	f000 fbaf 	bl	800cff4 <__assert_func>
 800c896:	6922      	ldr	r2, [r4, #16]
 800c898:	3202      	adds	r2, #2
 800c89a:	f104 010c 	add.w	r1, r4, #12
 800c89e:	0092      	lsls	r2, r2, #2
 800c8a0:	300c      	adds	r0, #12
 800c8a2:	f7ff f80e 	bl	800b8c2 <memcpy>
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f7ff ffa5 	bl	800c7f8 <_Bfree>
 800c8ae:	4644      	mov	r4, r8
 800c8b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8b4:	3501      	adds	r5, #1
 800c8b6:	615e      	str	r6, [r3, #20]
 800c8b8:	6125      	str	r5, [r4, #16]
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	0800dab0 	.word	0x0800dab0
 800c8c4:	0800dac1 	.word	0x0800dac1

0800c8c8 <__hi0bits>:
 800c8c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	bf36      	itet	cc
 800c8d0:	0403      	lslcc	r3, r0, #16
 800c8d2:	2000      	movcs	r0, #0
 800c8d4:	2010      	movcc	r0, #16
 800c8d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8da:	bf3c      	itt	cc
 800c8dc:	021b      	lslcc	r3, r3, #8
 800c8de:	3008      	addcc	r0, #8
 800c8e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8e4:	bf3c      	itt	cc
 800c8e6:	011b      	lslcc	r3, r3, #4
 800c8e8:	3004      	addcc	r0, #4
 800c8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ee:	bf3c      	itt	cc
 800c8f0:	009b      	lslcc	r3, r3, #2
 800c8f2:	3002      	addcc	r0, #2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	db05      	blt.n	800c904 <__hi0bits+0x3c>
 800c8f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8fc:	f100 0001 	add.w	r0, r0, #1
 800c900:	bf08      	it	eq
 800c902:	2020      	moveq	r0, #32
 800c904:	4770      	bx	lr

0800c906 <__lo0bits>:
 800c906:	6803      	ldr	r3, [r0, #0]
 800c908:	4602      	mov	r2, r0
 800c90a:	f013 0007 	ands.w	r0, r3, #7
 800c90e:	d00b      	beq.n	800c928 <__lo0bits+0x22>
 800c910:	07d9      	lsls	r1, r3, #31
 800c912:	d421      	bmi.n	800c958 <__lo0bits+0x52>
 800c914:	0798      	lsls	r0, r3, #30
 800c916:	bf49      	itett	mi
 800c918:	085b      	lsrmi	r3, r3, #1
 800c91a:	089b      	lsrpl	r3, r3, #2
 800c91c:	2001      	movmi	r0, #1
 800c91e:	6013      	strmi	r3, [r2, #0]
 800c920:	bf5c      	itt	pl
 800c922:	6013      	strpl	r3, [r2, #0]
 800c924:	2002      	movpl	r0, #2
 800c926:	4770      	bx	lr
 800c928:	b299      	uxth	r1, r3
 800c92a:	b909      	cbnz	r1, 800c930 <__lo0bits+0x2a>
 800c92c:	0c1b      	lsrs	r3, r3, #16
 800c92e:	2010      	movs	r0, #16
 800c930:	b2d9      	uxtb	r1, r3
 800c932:	b909      	cbnz	r1, 800c938 <__lo0bits+0x32>
 800c934:	3008      	adds	r0, #8
 800c936:	0a1b      	lsrs	r3, r3, #8
 800c938:	0719      	lsls	r1, r3, #28
 800c93a:	bf04      	itt	eq
 800c93c:	091b      	lsreq	r3, r3, #4
 800c93e:	3004      	addeq	r0, #4
 800c940:	0799      	lsls	r1, r3, #30
 800c942:	bf04      	itt	eq
 800c944:	089b      	lsreq	r3, r3, #2
 800c946:	3002      	addeq	r0, #2
 800c948:	07d9      	lsls	r1, r3, #31
 800c94a:	d403      	bmi.n	800c954 <__lo0bits+0x4e>
 800c94c:	085b      	lsrs	r3, r3, #1
 800c94e:	f100 0001 	add.w	r0, r0, #1
 800c952:	d003      	beq.n	800c95c <__lo0bits+0x56>
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	4770      	bx	lr
 800c958:	2000      	movs	r0, #0
 800c95a:	4770      	bx	lr
 800c95c:	2020      	movs	r0, #32
 800c95e:	4770      	bx	lr

0800c960 <__i2b>:
 800c960:	b510      	push	{r4, lr}
 800c962:	460c      	mov	r4, r1
 800c964:	2101      	movs	r1, #1
 800c966:	f7ff ff07 	bl	800c778 <_Balloc>
 800c96a:	4602      	mov	r2, r0
 800c96c:	b928      	cbnz	r0, 800c97a <__i2b+0x1a>
 800c96e:	4b05      	ldr	r3, [pc, #20]	@ (800c984 <__i2b+0x24>)
 800c970:	4805      	ldr	r0, [pc, #20]	@ (800c988 <__i2b+0x28>)
 800c972:	f240 1145 	movw	r1, #325	@ 0x145
 800c976:	f000 fb3d 	bl	800cff4 <__assert_func>
 800c97a:	2301      	movs	r3, #1
 800c97c:	6144      	str	r4, [r0, #20]
 800c97e:	6103      	str	r3, [r0, #16]
 800c980:	bd10      	pop	{r4, pc}
 800c982:	bf00      	nop
 800c984:	0800dab0 	.word	0x0800dab0
 800c988:	0800dac1 	.word	0x0800dac1

0800c98c <__multiply>:
 800c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	4614      	mov	r4, r2
 800c992:	690a      	ldr	r2, [r1, #16]
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	429a      	cmp	r2, r3
 800c998:	bfa8      	it	ge
 800c99a:	4623      	movge	r3, r4
 800c99c:	460f      	mov	r7, r1
 800c99e:	bfa4      	itt	ge
 800c9a0:	460c      	movge	r4, r1
 800c9a2:	461f      	movge	r7, r3
 800c9a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c9a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	6861      	ldr	r1, [r4, #4]
 800c9b0:	eb0a 0609 	add.w	r6, sl, r9
 800c9b4:	42b3      	cmp	r3, r6
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	bfb8      	it	lt
 800c9ba:	3101      	addlt	r1, #1
 800c9bc:	f7ff fedc 	bl	800c778 <_Balloc>
 800c9c0:	b930      	cbnz	r0, 800c9d0 <__multiply+0x44>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	4b44      	ldr	r3, [pc, #272]	@ (800cad8 <__multiply+0x14c>)
 800c9c6:	4845      	ldr	r0, [pc, #276]	@ (800cadc <__multiply+0x150>)
 800c9c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9cc:	f000 fb12 	bl	800cff4 <__assert_func>
 800c9d0:	f100 0514 	add.w	r5, r0, #20
 800c9d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9d8:	462b      	mov	r3, r5
 800c9da:	2200      	movs	r2, #0
 800c9dc:	4543      	cmp	r3, r8
 800c9de:	d321      	bcc.n	800ca24 <__multiply+0x98>
 800c9e0:	f107 0114 	add.w	r1, r7, #20
 800c9e4:	f104 0214 	add.w	r2, r4, #20
 800c9e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	1b13      	subs	r3, r2, r4
 800c9f4:	3b15      	subs	r3, #21
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	f104 0715 	add.w	r7, r4, #21
 800ca00:	42ba      	cmp	r2, r7
 800ca02:	bf38      	it	cc
 800ca04:	2304      	movcc	r3, #4
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	9b02      	ldr	r3, [sp, #8]
 800ca0a:	9103      	str	r1, [sp, #12]
 800ca0c:	428b      	cmp	r3, r1
 800ca0e:	d80c      	bhi.n	800ca2a <__multiply+0x9e>
 800ca10:	2e00      	cmp	r6, #0
 800ca12:	dd03      	ble.n	800ca1c <__multiply+0x90>
 800ca14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d05b      	beq.n	800cad4 <__multiply+0x148>
 800ca1c:	6106      	str	r6, [r0, #16]
 800ca1e:	b005      	add	sp, #20
 800ca20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca24:	f843 2b04 	str.w	r2, [r3], #4
 800ca28:	e7d8      	b.n	800c9dc <__multiply+0x50>
 800ca2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca2e:	f1ba 0f00 	cmp.w	sl, #0
 800ca32:	d024      	beq.n	800ca7e <__multiply+0xf2>
 800ca34:	f104 0e14 	add.w	lr, r4, #20
 800ca38:	46a9      	mov	r9, r5
 800ca3a:	f04f 0c00 	mov.w	ip, #0
 800ca3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca42:	f8d9 3000 	ldr.w	r3, [r9]
 800ca46:	fa1f fb87 	uxth.w	fp, r7
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca54:	f8d9 7000 	ldr.w	r7, [r9]
 800ca58:	4463      	add	r3, ip
 800ca5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca6c:	4572      	cmp	r2, lr
 800ca6e:	f849 3b04 	str.w	r3, [r9], #4
 800ca72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca76:	d8e2      	bhi.n	800ca3e <__multiply+0xb2>
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	f845 c003 	str.w	ip, [r5, r3]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca84:	3104      	adds	r1, #4
 800ca86:	f1b9 0f00 	cmp.w	r9, #0
 800ca8a:	d021      	beq.n	800cad0 <__multiply+0x144>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	f104 0c14 	add.w	ip, r4, #20
 800ca92:	46ae      	mov	lr, r5
 800ca94:	f04f 0a00 	mov.w	sl, #0
 800ca98:	f8bc b000 	ldrh.w	fp, [ip]
 800ca9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800caa0:	fb09 770b 	mla	r7, r9, fp, r7
 800caa4:	4457      	add	r7, sl
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800caac:	f84e 3b04 	str.w	r3, [lr], #4
 800cab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cab4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cab8:	f8be 3000 	ldrh.w	r3, [lr]
 800cabc:	fb09 330a 	mla	r3, r9, sl, r3
 800cac0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cac4:	4562      	cmp	r2, ip
 800cac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caca:	d8e5      	bhi.n	800ca98 <__multiply+0x10c>
 800cacc:	9f01      	ldr	r7, [sp, #4]
 800cace:	51eb      	str	r3, [r5, r7]
 800cad0:	3504      	adds	r5, #4
 800cad2:	e799      	b.n	800ca08 <__multiply+0x7c>
 800cad4:	3e01      	subs	r6, #1
 800cad6:	e79b      	b.n	800ca10 <__multiply+0x84>
 800cad8:	0800dab0 	.word	0x0800dab0
 800cadc:	0800dac1 	.word	0x0800dac1

0800cae0 <__pow5mult>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	4615      	mov	r5, r2
 800cae6:	f012 0203 	ands.w	r2, r2, #3
 800caea:	4607      	mov	r7, r0
 800caec:	460e      	mov	r6, r1
 800caee:	d007      	beq.n	800cb00 <__pow5mult+0x20>
 800caf0:	4c25      	ldr	r4, [pc, #148]	@ (800cb88 <__pow5mult+0xa8>)
 800caf2:	3a01      	subs	r2, #1
 800caf4:	2300      	movs	r3, #0
 800caf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cafa:	f7ff fe9f 	bl	800c83c <__multadd>
 800cafe:	4606      	mov	r6, r0
 800cb00:	10ad      	asrs	r5, r5, #2
 800cb02:	d03d      	beq.n	800cb80 <__pow5mult+0xa0>
 800cb04:	69fc      	ldr	r4, [r7, #28]
 800cb06:	b97c      	cbnz	r4, 800cb28 <__pow5mult+0x48>
 800cb08:	2010      	movs	r0, #16
 800cb0a:	f7ff fd7f 	bl	800c60c <malloc>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	61f8      	str	r0, [r7, #28]
 800cb12:	b928      	cbnz	r0, 800cb20 <__pow5mult+0x40>
 800cb14:	4b1d      	ldr	r3, [pc, #116]	@ (800cb8c <__pow5mult+0xac>)
 800cb16:	481e      	ldr	r0, [pc, #120]	@ (800cb90 <__pow5mult+0xb0>)
 800cb18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb1c:	f000 fa6a 	bl	800cff4 <__assert_func>
 800cb20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb24:	6004      	str	r4, [r0, #0]
 800cb26:	60c4      	str	r4, [r0, #12]
 800cb28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb30:	b94c      	cbnz	r4, 800cb46 <__pow5mult+0x66>
 800cb32:	f240 2171 	movw	r1, #625	@ 0x271
 800cb36:	4638      	mov	r0, r7
 800cb38:	f7ff ff12 	bl	800c960 <__i2b>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb42:	4604      	mov	r4, r0
 800cb44:	6003      	str	r3, [r0, #0]
 800cb46:	f04f 0900 	mov.w	r9, #0
 800cb4a:	07eb      	lsls	r3, r5, #31
 800cb4c:	d50a      	bpl.n	800cb64 <__pow5mult+0x84>
 800cb4e:	4631      	mov	r1, r6
 800cb50:	4622      	mov	r2, r4
 800cb52:	4638      	mov	r0, r7
 800cb54:	f7ff ff1a 	bl	800c98c <__multiply>
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4680      	mov	r8, r0
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	f7ff fe4b 	bl	800c7f8 <_Bfree>
 800cb62:	4646      	mov	r6, r8
 800cb64:	106d      	asrs	r5, r5, #1
 800cb66:	d00b      	beq.n	800cb80 <__pow5mult+0xa0>
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	b938      	cbnz	r0, 800cb7c <__pow5mult+0x9c>
 800cb6c:	4622      	mov	r2, r4
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7ff ff0b 	bl	800c98c <__multiply>
 800cb76:	6020      	str	r0, [r4, #0]
 800cb78:	f8c0 9000 	str.w	r9, [r0]
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	e7e4      	b.n	800cb4a <__pow5mult+0x6a>
 800cb80:	4630      	mov	r0, r6
 800cb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb86:	bf00      	nop
 800cb88:	0800db1c 	.word	0x0800db1c
 800cb8c:	0800da41 	.word	0x0800da41
 800cb90:	0800dac1 	.word	0x0800dac1

0800cb94 <__lshift>:
 800cb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb98:	460c      	mov	r4, r1
 800cb9a:	6849      	ldr	r1, [r1, #4]
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cba2:	68a3      	ldr	r3, [r4, #8]
 800cba4:	4607      	mov	r7, r0
 800cba6:	4691      	mov	r9, r2
 800cba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbac:	f108 0601 	add.w	r6, r8, #1
 800cbb0:	42b3      	cmp	r3, r6
 800cbb2:	db0b      	blt.n	800cbcc <__lshift+0x38>
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff fddf 	bl	800c778 <_Balloc>
 800cbba:	4605      	mov	r5, r0
 800cbbc:	b948      	cbnz	r0, 800cbd2 <__lshift+0x3e>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	4b28      	ldr	r3, [pc, #160]	@ (800cc64 <__lshift+0xd0>)
 800cbc2:	4829      	ldr	r0, [pc, #164]	@ (800cc68 <__lshift+0xd4>)
 800cbc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cbc8:	f000 fa14 	bl	800cff4 <__assert_func>
 800cbcc:	3101      	adds	r1, #1
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	e7ee      	b.n	800cbb0 <__lshift+0x1c>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f100 0114 	add.w	r1, r0, #20
 800cbd8:	f100 0210 	add.w	r2, r0, #16
 800cbdc:	4618      	mov	r0, r3
 800cbde:	4553      	cmp	r3, sl
 800cbe0:	db33      	blt.n	800cc4a <__lshift+0xb6>
 800cbe2:	6920      	ldr	r0, [r4, #16]
 800cbe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbe8:	f104 0314 	add.w	r3, r4, #20
 800cbec:	f019 091f 	ands.w	r9, r9, #31
 800cbf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbf8:	d02b      	beq.n	800cc52 <__lshift+0xbe>
 800cbfa:	f1c9 0e20 	rsb	lr, r9, #32
 800cbfe:	468a      	mov	sl, r1
 800cc00:	2200      	movs	r2, #0
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	fa00 f009 	lsl.w	r0, r0, r9
 800cc08:	4310      	orrs	r0, r2
 800cc0a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc12:	459c      	cmp	ip, r3
 800cc14:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc18:	d8f3      	bhi.n	800cc02 <__lshift+0x6e>
 800cc1a:	ebac 0304 	sub.w	r3, ip, r4
 800cc1e:	3b15      	subs	r3, #21
 800cc20:	f023 0303 	bic.w	r3, r3, #3
 800cc24:	3304      	adds	r3, #4
 800cc26:	f104 0015 	add.w	r0, r4, #21
 800cc2a:	4584      	cmp	ip, r0
 800cc2c:	bf38      	it	cc
 800cc2e:	2304      	movcc	r3, #4
 800cc30:	50ca      	str	r2, [r1, r3]
 800cc32:	b10a      	cbz	r2, 800cc38 <__lshift+0xa4>
 800cc34:	f108 0602 	add.w	r6, r8, #2
 800cc38:	3e01      	subs	r6, #1
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	612e      	str	r6, [r5, #16]
 800cc3e:	4621      	mov	r1, r4
 800cc40:	f7ff fdda 	bl	800c7f8 <_Bfree>
 800cc44:	4628      	mov	r0, r5
 800cc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc4e:	3301      	adds	r3, #1
 800cc50:	e7c5      	b.n	800cbde <__lshift+0x4a>
 800cc52:	3904      	subs	r1, #4
 800cc54:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc58:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc5c:	459c      	cmp	ip, r3
 800cc5e:	d8f9      	bhi.n	800cc54 <__lshift+0xc0>
 800cc60:	e7ea      	b.n	800cc38 <__lshift+0xa4>
 800cc62:	bf00      	nop
 800cc64:	0800dab0 	.word	0x0800dab0
 800cc68:	0800dac1 	.word	0x0800dac1

0800cc6c <__mcmp>:
 800cc6c:	690a      	ldr	r2, [r1, #16]
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6900      	ldr	r0, [r0, #16]
 800cc72:	1a80      	subs	r0, r0, r2
 800cc74:	b530      	push	{r4, r5, lr}
 800cc76:	d10e      	bne.n	800cc96 <__mcmp+0x2a>
 800cc78:	3314      	adds	r3, #20
 800cc7a:	3114      	adds	r1, #20
 800cc7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc8c:	4295      	cmp	r5, r2
 800cc8e:	d003      	beq.n	800cc98 <__mcmp+0x2c>
 800cc90:	d205      	bcs.n	800cc9e <__mcmp+0x32>
 800cc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc96:	bd30      	pop	{r4, r5, pc}
 800cc98:	42a3      	cmp	r3, r4
 800cc9a:	d3f3      	bcc.n	800cc84 <__mcmp+0x18>
 800cc9c:	e7fb      	b.n	800cc96 <__mcmp+0x2a>
 800cc9e:	2001      	movs	r0, #1
 800cca0:	e7f9      	b.n	800cc96 <__mcmp+0x2a>
	...

0800cca4 <__mdiff>:
 800cca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca8:	4689      	mov	r9, r1
 800ccaa:	4606      	mov	r6, r0
 800ccac:	4611      	mov	r1, r2
 800ccae:	4648      	mov	r0, r9
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	f7ff ffdb 	bl	800cc6c <__mcmp>
 800ccb6:	1e05      	subs	r5, r0, #0
 800ccb8:	d112      	bne.n	800cce0 <__mdiff+0x3c>
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f7ff fd5b 	bl	800c778 <_Balloc>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	b928      	cbnz	r0, 800ccd2 <__mdiff+0x2e>
 800ccc6:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc4 <__mdiff+0x120>)
 800ccc8:	f240 2137 	movw	r1, #567	@ 0x237
 800cccc:	483e      	ldr	r0, [pc, #248]	@ (800cdc8 <__mdiff+0x124>)
 800ccce:	f000 f991 	bl	800cff4 <__assert_func>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccd8:	4610      	mov	r0, r2
 800ccda:	b003      	add	sp, #12
 800ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce0:	bfbc      	itt	lt
 800cce2:	464b      	movlt	r3, r9
 800cce4:	46a1      	movlt	r9, r4
 800cce6:	4630      	mov	r0, r6
 800cce8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ccec:	bfba      	itte	lt
 800ccee:	461c      	movlt	r4, r3
 800ccf0:	2501      	movlt	r5, #1
 800ccf2:	2500      	movge	r5, #0
 800ccf4:	f7ff fd40 	bl	800c778 <_Balloc>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	b918      	cbnz	r0, 800cd04 <__mdiff+0x60>
 800ccfc:	4b31      	ldr	r3, [pc, #196]	@ (800cdc4 <__mdiff+0x120>)
 800ccfe:	f240 2145 	movw	r1, #581	@ 0x245
 800cd02:	e7e3      	b.n	800cccc <__mdiff+0x28>
 800cd04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd08:	6926      	ldr	r6, [r4, #16]
 800cd0a:	60c5      	str	r5, [r0, #12]
 800cd0c:	f109 0310 	add.w	r3, r9, #16
 800cd10:	f109 0514 	add.w	r5, r9, #20
 800cd14:	f104 0e14 	add.w	lr, r4, #20
 800cd18:	f100 0b14 	add.w	fp, r0, #20
 800cd1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	46d9      	mov	r9, fp
 800cd28:	f04f 0c00 	mov.w	ip, #0
 800cd2c:	9b01      	ldr	r3, [sp, #4]
 800cd2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	fa1f f38a 	uxth.w	r3, sl
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	b283      	uxth	r3, r0
 800cd40:	1acb      	subs	r3, r1, r3
 800cd42:	0c00      	lsrs	r0, r0, #16
 800cd44:	4463      	add	r3, ip
 800cd46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd54:	4576      	cmp	r6, lr
 800cd56:	f849 3b04 	str.w	r3, [r9], #4
 800cd5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd5e:	d8e5      	bhi.n	800cd2c <__mdiff+0x88>
 800cd60:	1b33      	subs	r3, r6, r4
 800cd62:	3b15      	subs	r3, #21
 800cd64:	f023 0303 	bic.w	r3, r3, #3
 800cd68:	3415      	adds	r4, #21
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	42a6      	cmp	r6, r4
 800cd6e:	bf38      	it	cc
 800cd70:	2304      	movcc	r3, #4
 800cd72:	441d      	add	r5, r3
 800cd74:	445b      	add	r3, fp
 800cd76:	461e      	mov	r6, r3
 800cd78:	462c      	mov	r4, r5
 800cd7a:	4544      	cmp	r4, r8
 800cd7c:	d30e      	bcc.n	800cd9c <__mdiff+0xf8>
 800cd7e:	f108 0103 	add.w	r1, r8, #3
 800cd82:	1b49      	subs	r1, r1, r5
 800cd84:	f021 0103 	bic.w	r1, r1, #3
 800cd88:	3d03      	subs	r5, #3
 800cd8a:	45a8      	cmp	r8, r5
 800cd8c:	bf38      	it	cc
 800cd8e:	2100      	movcc	r1, #0
 800cd90:	440b      	add	r3, r1
 800cd92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd96:	b191      	cbz	r1, 800cdbe <__mdiff+0x11a>
 800cd98:	6117      	str	r7, [r2, #16]
 800cd9a:	e79d      	b.n	800ccd8 <__mdiff+0x34>
 800cd9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cda0:	46e6      	mov	lr, ip
 800cda2:	0c08      	lsrs	r0, r1, #16
 800cda4:	fa1c fc81 	uxtah	ip, ip, r1
 800cda8:	4471      	add	r1, lr
 800cdaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cdae:	b289      	uxth	r1, r1
 800cdb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cdb4:	f846 1b04 	str.w	r1, [r6], #4
 800cdb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdbc:	e7dd      	b.n	800cd7a <__mdiff+0xd6>
 800cdbe:	3f01      	subs	r7, #1
 800cdc0:	e7e7      	b.n	800cd92 <__mdiff+0xee>
 800cdc2:	bf00      	nop
 800cdc4:	0800dab0 	.word	0x0800dab0
 800cdc8:	0800dac1 	.word	0x0800dac1

0800cdcc <__d2b>:
 800cdcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	ec59 8b10 	vmov	r8, r9, d0
 800cdd8:	4616      	mov	r6, r2
 800cdda:	f7ff fccd 	bl	800c778 <_Balloc>
 800cdde:	4604      	mov	r4, r0
 800cde0:	b930      	cbnz	r0, 800cdf0 <__d2b+0x24>
 800cde2:	4602      	mov	r2, r0
 800cde4:	4b23      	ldr	r3, [pc, #140]	@ (800ce74 <__d2b+0xa8>)
 800cde6:	4824      	ldr	r0, [pc, #144]	@ (800ce78 <__d2b+0xac>)
 800cde8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdec:	f000 f902 	bl	800cff4 <__assert_func>
 800cdf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdf8:	b10d      	cbz	r5, 800cdfe <__d2b+0x32>
 800cdfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	f1b8 0300 	subs.w	r3, r8, #0
 800ce04:	d023      	beq.n	800ce4e <__d2b+0x82>
 800ce06:	4668      	mov	r0, sp
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	f7ff fd7c 	bl	800c906 <__lo0bits>
 800ce0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce12:	b1d0      	cbz	r0, 800ce4a <__d2b+0x7e>
 800ce14:	f1c0 0320 	rsb	r3, r0, #32
 800ce18:	fa02 f303 	lsl.w	r3, r2, r3
 800ce1c:	430b      	orrs	r3, r1
 800ce1e:	40c2      	lsrs	r2, r0
 800ce20:	6163      	str	r3, [r4, #20]
 800ce22:	9201      	str	r2, [sp, #4]
 800ce24:	9b01      	ldr	r3, [sp, #4]
 800ce26:	61a3      	str	r3, [r4, #24]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	bf0c      	ite	eq
 800ce2c:	2201      	moveq	r2, #1
 800ce2e:	2202      	movne	r2, #2
 800ce30:	6122      	str	r2, [r4, #16]
 800ce32:	b1a5      	cbz	r5, 800ce5e <__d2b+0x92>
 800ce34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce38:	4405      	add	r5, r0
 800ce3a:	603d      	str	r5, [r7, #0]
 800ce3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce40:	6030      	str	r0, [r6, #0]
 800ce42:	4620      	mov	r0, r4
 800ce44:	b003      	add	sp, #12
 800ce46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	6161      	str	r1, [r4, #20]
 800ce4c:	e7ea      	b.n	800ce24 <__d2b+0x58>
 800ce4e:	a801      	add	r0, sp, #4
 800ce50:	f7ff fd59 	bl	800c906 <__lo0bits>
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	6163      	str	r3, [r4, #20]
 800ce58:	3020      	adds	r0, #32
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	e7e8      	b.n	800ce30 <__d2b+0x64>
 800ce5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce66:	6038      	str	r0, [r7, #0]
 800ce68:	6918      	ldr	r0, [r3, #16]
 800ce6a:	f7ff fd2d 	bl	800c8c8 <__hi0bits>
 800ce6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce72:	e7e5      	b.n	800ce40 <__d2b+0x74>
 800ce74:	0800dab0 	.word	0x0800dab0
 800ce78:	0800dac1 	.word	0x0800dac1

0800ce7c <__sflush_r>:
 800ce7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce84:	0716      	lsls	r6, r2, #28
 800ce86:	4605      	mov	r5, r0
 800ce88:	460c      	mov	r4, r1
 800ce8a:	d454      	bmi.n	800cf36 <__sflush_r+0xba>
 800ce8c:	684b      	ldr	r3, [r1, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	dc02      	bgt.n	800ce98 <__sflush_r+0x1c>
 800ce92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd48      	ble.n	800cf2a <__sflush_r+0xae>
 800ce98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce9a:	2e00      	cmp	r6, #0
 800ce9c:	d045      	beq.n	800cf2a <__sflush_r+0xae>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cea4:	682f      	ldr	r7, [r5, #0]
 800cea6:	6a21      	ldr	r1, [r4, #32]
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	d030      	beq.n	800cf0e <__sflush_r+0x92>
 800ceac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	0759      	lsls	r1, r3, #29
 800ceb2:	d505      	bpl.n	800cec0 <__sflush_r+0x44>
 800ceb4:	6863      	ldr	r3, [r4, #4]
 800ceb6:	1ad2      	subs	r2, r2, r3
 800ceb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ceba:	b10b      	cbz	r3, 800cec0 <__sflush_r+0x44>
 800cebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	2300      	movs	r3, #0
 800cec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cec4:	6a21      	ldr	r1, [r4, #32]
 800cec6:	4628      	mov	r0, r5
 800cec8:	47b0      	blx	r6
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	d106      	bne.n	800cede <__sflush_r+0x62>
 800ced0:	6829      	ldr	r1, [r5, #0]
 800ced2:	291d      	cmp	r1, #29
 800ced4:	d82b      	bhi.n	800cf2e <__sflush_r+0xb2>
 800ced6:	4a2a      	ldr	r2, [pc, #168]	@ (800cf80 <__sflush_r+0x104>)
 800ced8:	410a      	asrs	r2, r1
 800ceda:	07d6      	lsls	r6, r2, #31
 800cedc:	d427      	bmi.n	800cf2e <__sflush_r+0xb2>
 800cede:	2200      	movs	r2, #0
 800cee0:	6062      	str	r2, [r4, #4]
 800cee2:	04d9      	lsls	r1, r3, #19
 800cee4:	6922      	ldr	r2, [r4, #16]
 800cee6:	6022      	str	r2, [r4, #0]
 800cee8:	d504      	bpl.n	800cef4 <__sflush_r+0x78>
 800ceea:	1c42      	adds	r2, r0, #1
 800ceec:	d101      	bne.n	800cef2 <__sflush_r+0x76>
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	b903      	cbnz	r3, 800cef4 <__sflush_r+0x78>
 800cef2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cef6:	602f      	str	r7, [r5, #0]
 800cef8:	b1b9      	cbz	r1, 800cf2a <__sflush_r+0xae>
 800cefa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cefe:	4299      	cmp	r1, r3
 800cf00:	d002      	beq.n	800cf08 <__sflush_r+0x8c>
 800cf02:	4628      	mov	r0, r5
 800cf04:	f7ff fb38 	bl	800c578 <_free_r>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf0c:	e00d      	b.n	800cf2a <__sflush_r+0xae>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b0      	blx	r6
 800cf14:	4602      	mov	r2, r0
 800cf16:	1c50      	adds	r0, r2, #1
 800cf18:	d1c9      	bne.n	800ceae <__sflush_r+0x32>
 800cf1a:	682b      	ldr	r3, [r5, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0c6      	beq.n	800ceae <__sflush_r+0x32>
 800cf20:	2b1d      	cmp	r3, #29
 800cf22:	d001      	beq.n	800cf28 <__sflush_r+0xac>
 800cf24:	2b16      	cmp	r3, #22
 800cf26:	d11e      	bne.n	800cf66 <__sflush_r+0xea>
 800cf28:	602f      	str	r7, [r5, #0]
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	e022      	b.n	800cf74 <__sflush_r+0xf8>
 800cf2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf32:	b21b      	sxth	r3, r3
 800cf34:	e01b      	b.n	800cf6e <__sflush_r+0xf2>
 800cf36:	690f      	ldr	r7, [r1, #16]
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	d0f6      	beq.n	800cf2a <__sflush_r+0xae>
 800cf3c:	0793      	lsls	r3, r2, #30
 800cf3e:	680e      	ldr	r6, [r1, #0]
 800cf40:	bf08      	it	eq
 800cf42:	694b      	ldreq	r3, [r1, #20]
 800cf44:	600f      	str	r7, [r1, #0]
 800cf46:	bf18      	it	ne
 800cf48:	2300      	movne	r3, #0
 800cf4a:	eba6 0807 	sub.w	r8, r6, r7
 800cf4e:	608b      	str	r3, [r1, #8]
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	dde9      	ble.n	800cf2a <__sflush_r+0xae>
 800cf56:	6a21      	ldr	r1, [r4, #32]
 800cf58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf5a:	4643      	mov	r3, r8
 800cf5c:	463a      	mov	r2, r7
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b0      	blx	r6
 800cf62:	2800      	cmp	r0, #0
 800cf64:	dc08      	bgt.n	800cf78 <__sflush_r+0xfc>
 800cf66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf78:	4407      	add	r7, r0
 800cf7a:	eba8 0800 	sub.w	r8, r8, r0
 800cf7e:	e7e7      	b.n	800cf50 <__sflush_r+0xd4>
 800cf80:	dfbffffe 	.word	0xdfbffffe

0800cf84 <_fflush_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	690b      	ldr	r3, [r1, #16]
 800cf88:	4605      	mov	r5, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	b913      	cbnz	r3, 800cf94 <_fflush_r+0x10>
 800cf8e:	2500      	movs	r5, #0
 800cf90:	4628      	mov	r0, r5
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	b118      	cbz	r0, 800cf9e <_fflush_r+0x1a>
 800cf96:	6a03      	ldr	r3, [r0, #32]
 800cf98:	b90b      	cbnz	r3, 800cf9e <_fflush_r+0x1a>
 800cf9a:	f7fe fb99 	bl	800b6d0 <__sinit>
 800cf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0f3      	beq.n	800cf8e <_fflush_r+0xa>
 800cfa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfa8:	07d0      	lsls	r0, r2, #31
 800cfaa:	d404      	bmi.n	800cfb6 <_fflush_r+0x32>
 800cfac:	0599      	lsls	r1, r3, #22
 800cfae:	d402      	bmi.n	800cfb6 <_fflush_r+0x32>
 800cfb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfb2:	f7fe fc84 	bl	800b8be <__retarget_lock_acquire_recursive>
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	4621      	mov	r1, r4
 800cfba:	f7ff ff5f 	bl	800ce7c <__sflush_r>
 800cfbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfc0:	07da      	lsls	r2, r3, #31
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	d4e4      	bmi.n	800cf90 <_fflush_r+0xc>
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	059b      	lsls	r3, r3, #22
 800cfca:	d4e1      	bmi.n	800cf90 <_fflush_r+0xc>
 800cfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfce:	f7fe fc77 	bl	800b8c0 <__retarget_lock_release_recursive>
 800cfd2:	e7dd      	b.n	800cf90 <_fflush_r+0xc>

0800cfd4 <_sbrk_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d06      	ldr	r5, [pc, #24]	@ (800cff0 <_sbrk_r+0x1c>)
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4608      	mov	r0, r1
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	f7f6 feb0 	bl	8003d44 <_sbrk>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_sbrk_r+0x1a>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_sbrk_r+0x1a>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20002194 	.word	0x20002194

0800cff4 <__assert_func>:
 800cff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cff6:	4614      	mov	r4, r2
 800cff8:	461a      	mov	r2, r3
 800cffa:	4b09      	ldr	r3, [pc, #36]	@ (800d020 <__assert_func+0x2c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4605      	mov	r5, r0
 800d000:	68d8      	ldr	r0, [r3, #12]
 800d002:	b954      	cbnz	r4, 800d01a <__assert_func+0x26>
 800d004:	4b07      	ldr	r3, [pc, #28]	@ (800d024 <__assert_func+0x30>)
 800d006:	461c      	mov	r4, r3
 800d008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d00c:	9100      	str	r1, [sp, #0]
 800d00e:	462b      	mov	r3, r5
 800d010:	4905      	ldr	r1, [pc, #20]	@ (800d028 <__assert_func+0x34>)
 800d012:	f000 f841 	bl	800d098 <fiprintf>
 800d016:	f000 f851 	bl	800d0bc <abort>
 800d01a:	4b04      	ldr	r3, [pc, #16]	@ (800d02c <__assert_func+0x38>)
 800d01c:	e7f4      	b.n	800d008 <__assert_func+0x14>
 800d01e:	bf00      	nop
 800d020:	20000020 	.word	0x20000020
 800d024:	0800dc5d 	.word	0x0800dc5d
 800d028:	0800dc2f 	.word	0x0800dc2f
 800d02c:	0800dc22 	.word	0x0800dc22

0800d030 <_calloc_r>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	fba1 5402 	umull	r5, r4, r1, r2
 800d036:	b93c      	cbnz	r4, 800d048 <_calloc_r+0x18>
 800d038:	4629      	mov	r1, r5
 800d03a:	f7ff fb11 	bl	800c660 <_malloc_r>
 800d03e:	4606      	mov	r6, r0
 800d040:	b928      	cbnz	r0, 800d04e <_calloc_r+0x1e>
 800d042:	2600      	movs	r6, #0
 800d044:	4630      	mov	r0, r6
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	220c      	movs	r2, #12
 800d04a:	6002      	str	r2, [r0, #0]
 800d04c:	e7f9      	b.n	800d042 <_calloc_r+0x12>
 800d04e:	462a      	mov	r2, r5
 800d050:	4621      	mov	r1, r4
 800d052:	f7fe fbb6 	bl	800b7c2 <memset>
 800d056:	e7f5      	b.n	800d044 <_calloc_r+0x14>

0800d058 <__ascii_mbtowc>:
 800d058:	b082      	sub	sp, #8
 800d05a:	b901      	cbnz	r1, 800d05e <__ascii_mbtowc+0x6>
 800d05c:	a901      	add	r1, sp, #4
 800d05e:	b142      	cbz	r2, 800d072 <__ascii_mbtowc+0x1a>
 800d060:	b14b      	cbz	r3, 800d076 <__ascii_mbtowc+0x1e>
 800d062:	7813      	ldrb	r3, [r2, #0]
 800d064:	600b      	str	r3, [r1, #0]
 800d066:	7812      	ldrb	r2, [r2, #0]
 800d068:	1e10      	subs	r0, r2, #0
 800d06a:	bf18      	it	ne
 800d06c:	2001      	movne	r0, #1
 800d06e:	b002      	add	sp, #8
 800d070:	4770      	bx	lr
 800d072:	4610      	mov	r0, r2
 800d074:	e7fb      	b.n	800d06e <__ascii_mbtowc+0x16>
 800d076:	f06f 0001 	mvn.w	r0, #1
 800d07a:	e7f8      	b.n	800d06e <__ascii_mbtowc+0x16>

0800d07c <__ascii_wctomb>:
 800d07c:	4603      	mov	r3, r0
 800d07e:	4608      	mov	r0, r1
 800d080:	b141      	cbz	r1, 800d094 <__ascii_wctomb+0x18>
 800d082:	2aff      	cmp	r2, #255	@ 0xff
 800d084:	d904      	bls.n	800d090 <__ascii_wctomb+0x14>
 800d086:	228a      	movs	r2, #138	@ 0x8a
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d08e:	4770      	bx	lr
 800d090:	700a      	strb	r2, [r1, #0]
 800d092:	2001      	movs	r0, #1
 800d094:	4770      	bx	lr
	...

0800d098 <fiprintf>:
 800d098:	b40e      	push	{r1, r2, r3}
 800d09a:	b503      	push	{r0, r1, lr}
 800d09c:	4601      	mov	r1, r0
 800d09e:	ab03      	add	r3, sp, #12
 800d0a0:	4805      	ldr	r0, [pc, #20]	@ (800d0b8 <fiprintf+0x20>)
 800d0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a6:	6800      	ldr	r0, [r0, #0]
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	f000 f837 	bl	800d11c <_vfiprintf_r>
 800d0ae:	b002      	add	sp, #8
 800d0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0b4:	b003      	add	sp, #12
 800d0b6:	4770      	bx	lr
 800d0b8:	20000020 	.word	0x20000020

0800d0bc <abort>:
 800d0bc:	b508      	push	{r3, lr}
 800d0be:	2006      	movs	r0, #6
 800d0c0:	f000 fa00 	bl	800d4c4 <raise>
 800d0c4:	2001      	movs	r0, #1
 800d0c6:	f7f6 fdc5 	bl	8003c54 <_exit>

0800d0ca <__sfputc_r>:
 800d0ca:	6893      	ldr	r3, [r2, #8]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	b410      	push	{r4}
 800d0d2:	6093      	str	r3, [r2, #8]
 800d0d4:	da08      	bge.n	800d0e8 <__sfputc_r+0x1e>
 800d0d6:	6994      	ldr	r4, [r2, #24]
 800d0d8:	42a3      	cmp	r3, r4
 800d0da:	db01      	blt.n	800d0e0 <__sfputc_r+0x16>
 800d0dc:	290a      	cmp	r1, #10
 800d0de:	d103      	bne.n	800d0e8 <__sfputc_r+0x1e>
 800d0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0e4:	f000 b932 	b.w	800d34c <__swbuf_r>
 800d0e8:	6813      	ldr	r3, [r2, #0]
 800d0ea:	1c58      	adds	r0, r3, #1
 800d0ec:	6010      	str	r0, [r2, #0]
 800d0ee:	7019      	strb	r1, [r3, #0]
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <__sfputs_r>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	460f      	mov	r7, r1
 800d0fe:	4614      	mov	r4, r2
 800d100:	18d5      	adds	r5, r2, r3
 800d102:	42ac      	cmp	r4, r5
 800d104:	d101      	bne.n	800d10a <__sfputs_r+0x12>
 800d106:	2000      	movs	r0, #0
 800d108:	e007      	b.n	800d11a <__sfputs_r+0x22>
 800d10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d10e:	463a      	mov	r2, r7
 800d110:	4630      	mov	r0, r6
 800d112:	f7ff ffda 	bl	800d0ca <__sfputc_r>
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	d1f3      	bne.n	800d102 <__sfputs_r+0xa>
 800d11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d11c <_vfiprintf_r>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	460d      	mov	r5, r1
 800d122:	b09d      	sub	sp, #116	@ 0x74
 800d124:	4614      	mov	r4, r2
 800d126:	4698      	mov	r8, r3
 800d128:	4606      	mov	r6, r0
 800d12a:	b118      	cbz	r0, 800d134 <_vfiprintf_r+0x18>
 800d12c:	6a03      	ldr	r3, [r0, #32]
 800d12e:	b90b      	cbnz	r3, 800d134 <_vfiprintf_r+0x18>
 800d130:	f7fe face 	bl	800b6d0 <__sinit>
 800d134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d136:	07d9      	lsls	r1, r3, #31
 800d138:	d405      	bmi.n	800d146 <_vfiprintf_r+0x2a>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	059a      	lsls	r2, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_vfiprintf_r+0x2a>
 800d140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d142:	f7fe fbbc 	bl	800b8be <__retarget_lock_acquire_recursive>
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	071b      	lsls	r3, r3, #28
 800d14a:	d501      	bpl.n	800d150 <_vfiprintf_r+0x34>
 800d14c:	692b      	ldr	r3, [r5, #16]
 800d14e:	b99b      	cbnz	r3, 800d178 <_vfiprintf_r+0x5c>
 800d150:	4629      	mov	r1, r5
 800d152:	4630      	mov	r0, r6
 800d154:	f000 f938 	bl	800d3c8 <__swsetup_r>
 800d158:	b170      	cbz	r0, 800d178 <_vfiprintf_r+0x5c>
 800d15a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d15c:	07dc      	lsls	r4, r3, #31
 800d15e:	d504      	bpl.n	800d16a <_vfiprintf_r+0x4e>
 800d160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d164:	b01d      	add	sp, #116	@ 0x74
 800d166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16a:	89ab      	ldrh	r3, [r5, #12]
 800d16c:	0598      	lsls	r0, r3, #22
 800d16e:	d4f7      	bmi.n	800d160 <_vfiprintf_r+0x44>
 800d170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d172:	f7fe fba5 	bl	800b8c0 <__retarget_lock_release_recursive>
 800d176:	e7f3      	b.n	800d160 <_vfiprintf_r+0x44>
 800d178:	2300      	movs	r3, #0
 800d17a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d17c:	2320      	movs	r3, #32
 800d17e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d182:	f8cd 800c 	str.w	r8, [sp, #12]
 800d186:	2330      	movs	r3, #48	@ 0x30
 800d188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d338 <_vfiprintf_r+0x21c>
 800d18c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d190:	f04f 0901 	mov.w	r9, #1
 800d194:	4623      	mov	r3, r4
 800d196:	469a      	mov	sl, r3
 800d198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d19c:	b10a      	cbz	r2, 800d1a2 <_vfiprintf_r+0x86>
 800d19e:	2a25      	cmp	r2, #37	@ 0x25
 800d1a0:	d1f9      	bne.n	800d196 <_vfiprintf_r+0x7a>
 800d1a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a6:	d00b      	beq.n	800d1c0 <_vfiprintf_r+0xa4>
 800d1a8:	465b      	mov	r3, fp
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f7ff ffa2 	bl	800d0f8 <__sfputs_r>
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	f000 80a7 	beq.w	800d308 <_vfiprintf_r+0x1ec>
 800d1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1bc:	445a      	add	r2, fp
 800d1be:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 809f 	beq.w	800d308 <_vfiprintf_r+0x1ec>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d4:	f10a 0a01 	add.w	sl, sl, #1
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	9307      	str	r3, [sp, #28]
 800d1dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e2:	4654      	mov	r4, sl
 800d1e4:	2205      	movs	r2, #5
 800d1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ea:	4853      	ldr	r0, [pc, #332]	@ (800d338 <_vfiprintf_r+0x21c>)
 800d1ec:	f7f2 fff0 	bl	80001d0 <memchr>
 800d1f0:	9a04      	ldr	r2, [sp, #16]
 800d1f2:	b9d8      	cbnz	r0, 800d22c <_vfiprintf_r+0x110>
 800d1f4:	06d1      	lsls	r1, r2, #27
 800d1f6:	bf44      	itt	mi
 800d1f8:	2320      	movmi	r3, #32
 800d1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1fe:	0713      	lsls	r3, r2, #28
 800d200:	bf44      	itt	mi
 800d202:	232b      	movmi	r3, #43	@ 0x2b
 800d204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d208:	f89a 3000 	ldrb.w	r3, [sl]
 800d20c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d20e:	d015      	beq.n	800d23c <_vfiprintf_r+0x120>
 800d210:	9a07      	ldr	r2, [sp, #28]
 800d212:	4654      	mov	r4, sl
 800d214:	2000      	movs	r0, #0
 800d216:	f04f 0c0a 	mov.w	ip, #10
 800d21a:	4621      	mov	r1, r4
 800d21c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d220:	3b30      	subs	r3, #48	@ 0x30
 800d222:	2b09      	cmp	r3, #9
 800d224:	d94b      	bls.n	800d2be <_vfiprintf_r+0x1a2>
 800d226:	b1b0      	cbz	r0, 800d256 <_vfiprintf_r+0x13a>
 800d228:	9207      	str	r2, [sp, #28]
 800d22a:	e014      	b.n	800d256 <_vfiprintf_r+0x13a>
 800d22c:	eba0 0308 	sub.w	r3, r0, r8
 800d230:	fa09 f303 	lsl.w	r3, r9, r3
 800d234:	4313      	orrs	r3, r2
 800d236:	9304      	str	r3, [sp, #16]
 800d238:	46a2      	mov	sl, r4
 800d23a:	e7d2      	b.n	800d1e2 <_vfiprintf_r+0xc6>
 800d23c:	9b03      	ldr	r3, [sp, #12]
 800d23e:	1d19      	adds	r1, r3, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	9103      	str	r1, [sp, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	bfbb      	ittet	lt
 800d248:	425b      	neglt	r3, r3
 800d24a:	f042 0202 	orrlt.w	r2, r2, #2
 800d24e:	9307      	strge	r3, [sp, #28]
 800d250:	9307      	strlt	r3, [sp, #28]
 800d252:	bfb8      	it	lt
 800d254:	9204      	strlt	r2, [sp, #16]
 800d256:	7823      	ldrb	r3, [r4, #0]
 800d258:	2b2e      	cmp	r3, #46	@ 0x2e
 800d25a:	d10a      	bne.n	800d272 <_vfiprintf_r+0x156>
 800d25c:	7863      	ldrb	r3, [r4, #1]
 800d25e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d260:	d132      	bne.n	800d2c8 <_vfiprintf_r+0x1ac>
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	1d1a      	adds	r2, r3, #4
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	9203      	str	r2, [sp, #12]
 800d26a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d26e:	3402      	adds	r4, #2
 800d270:	9305      	str	r3, [sp, #20]
 800d272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d348 <_vfiprintf_r+0x22c>
 800d276:	7821      	ldrb	r1, [r4, #0]
 800d278:	2203      	movs	r2, #3
 800d27a:	4650      	mov	r0, sl
 800d27c:	f7f2 ffa8 	bl	80001d0 <memchr>
 800d280:	b138      	cbz	r0, 800d292 <_vfiprintf_r+0x176>
 800d282:	9b04      	ldr	r3, [sp, #16]
 800d284:	eba0 000a 	sub.w	r0, r0, sl
 800d288:	2240      	movs	r2, #64	@ 0x40
 800d28a:	4082      	lsls	r2, r0
 800d28c:	4313      	orrs	r3, r2
 800d28e:	3401      	adds	r4, #1
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d296:	4829      	ldr	r0, [pc, #164]	@ (800d33c <_vfiprintf_r+0x220>)
 800d298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d29c:	2206      	movs	r2, #6
 800d29e:	f7f2 ff97 	bl	80001d0 <memchr>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d03f      	beq.n	800d326 <_vfiprintf_r+0x20a>
 800d2a6:	4b26      	ldr	r3, [pc, #152]	@ (800d340 <_vfiprintf_r+0x224>)
 800d2a8:	bb1b      	cbnz	r3, 800d2f2 <_vfiprintf_r+0x1d6>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	3307      	adds	r3, #7
 800d2ae:	f023 0307 	bic.w	r3, r3, #7
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	9303      	str	r3, [sp, #12]
 800d2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b8:	443b      	add	r3, r7
 800d2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2bc:	e76a      	b.n	800d194 <_vfiprintf_r+0x78>
 800d2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	2001      	movs	r0, #1
 800d2c6:	e7a8      	b.n	800d21a <_vfiprintf_r+0xfe>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	3401      	adds	r4, #1
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	f04f 0c0a 	mov.w	ip, #10
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2da:	3a30      	subs	r2, #48	@ 0x30
 800d2dc:	2a09      	cmp	r2, #9
 800d2de:	d903      	bls.n	800d2e8 <_vfiprintf_r+0x1cc>
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d0c6      	beq.n	800d272 <_vfiprintf_r+0x156>
 800d2e4:	9105      	str	r1, [sp, #20]
 800d2e6:	e7c4      	b.n	800d272 <_vfiprintf_r+0x156>
 800d2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e7f0      	b.n	800d2d4 <_vfiprintf_r+0x1b8>
 800d2f2:	ab03      	add	r3, sp, #12
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4b12      	ldr	r3, [pc, #72]	@ (800d344 <_vfiprintf_r+0x228>)
 800d2fa:	a904      	add	r1, sp, #16
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f7fd fda3 	bl	800ae48 <_printf_float>
 800d302:	4607      	mov	r7, r0
 800d304:	1c78      	adds	r0, r7, #1
 800d306:	d1d6      	bne.n	800d2b6 <_vfiprintf_r+0x19a>
 800d308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d30a:	07d9      	lsls	r1, r3, #31
 800d30c:	d405      	bmi.n	800d31a <_vfiprintf_r+0x1fe>
 800d30e:	89ab      	ldrh	r3, [r5, #12]
 800d310:	059a      	lsls	r2, r3, #22
 800d312:	d402      	bmi.n	800d31a <_vfiprintf_r+0x1fe>
 800d314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d316:	f7fe fad3 	bl	800b8c0 <__retarget_lock_release_recursive>
 800d31a:	89ab      	ldrh	r3, [r5, #12]
 800d31c:	065b      	lsls	r3, r3, #25
 800d31e:	f53f af1f 	bmi.w	800d160 <_vfiprintf_r+0x44>
 800d322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d324:	e71e      	b.n	800d164 <_vfiprintf_r+0x48>
 800d326:	ab03      	add	r3, sp, #12
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	462a      	mov	r2, r5
 800d32c:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <_vfiprintf_r+0x228>)
 800d32e:	a904      	add	r1, sp, #16
 800d330:	4630      	mov	r0, r6
 800d332:	f7fe f821 	bl	800b378 <_printf_i>
 800d336:	e7e4      	b.n	800d302 <_vfiprintf_r+0x1e6>
 800d338:	0800dd5f 	.word	0x0800dd5f
 800d33c:	0800dd69 	.word	0x0800dd69
 800d340:	0800ae49 	.word	0x0800ae49
 800d344:	0800d0f9 	.word	0x0800d0f9
 800d348:	0800dd65 	.word	0x0800dd65

0800d34c <__swbuf_r>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	460e      	mov	r6, r1
 800d350:	4614      	mov	r4, r2
 800d352:	4605      	mov	r5, r0
 800d354:	b118      	cbz	r0, 800d35e <__swbuf_r+0x12>
 800d356:	6a03      	ldr	r3, [r0, #32]
 800d358:	b90b      	cbnz	r3, 800d35e <__swbuf_r+0x12>
 800d35a:	f7fe f9b9 	bl	800b6d0 <__sinit>
 800d35e:	69a3      	ldr	r3, [r4, #24]
 800d360:	60a3      	str	r3, [r4, #8]
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	071a      	lsls	r2, r3, #28
 800d366:	d501      	bpl.n	800d36c <__swbuf_r+0x20>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	b943      	cbnz	r3, 800d37e <__swbuf_r+0x32>
 800d36c:	4621      	mov	r1, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 f82a 	bl	800d3c8 <__swsetup_r>
 800d374:	b118      	cbz	r0, 800d37e <__swbuf_r+0x32>
 800d376:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d37a:	4638      	mov	r0, r7
 800d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	6922      	ldr	r2, [r4, #16]
 800d382:	1a98      	subs	r0, r3, r2
 800d384:	6963      	ldr	r3, [r4, #20]
 800d386:	b2f6      	uxtb	r6, r6
 800d388:	4283      	cmp	r3, r0
 800d38a:	4637      	mov	r7, r6
 800d38c:	dc05      	bgt.n	800d39a <__swbuf_r+0x4e>
 800d38e:	4621      	mov	r1, r4
 800d390:	4628      	mov	r0, r5
 800d392:	f7ff fdf7 	bl	800cf84 <_fflush_r>
 800d396:	2800      	cmp	r0, #0
 800d398:	d1ed      	bne.n	800d376 <__swbuf_r+0x2a>
 800d39a:	68a3      	ldr	r3, [r4, #8]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	60a3      	str	r3, [r4, #8]
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	1c5a      	adds	r2, r3, #1
 800d3a4:	6022      	str	r2, [r4, #0]
 800d3a6:	701e      	strb	r6, [r3, #0]
 800d3a8:	6962      	ldr	r2, [r4, #20]
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d004      	beq.n	800d3ba <__swbuf_r+0x6e>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	07db      	lsls	r3, r3, #31
 800d3b4:	d5e1      	bpl.n	800d37a <__swbuf_r+0x2e>
 800d3b6:	2e0a      	cmp	r6, #10
 800d3b8:	d1df      	bne.n	800d37a <__swbuf_r+0x2e>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f7ff fde1 	bl	800cf84 <_fflush_r>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0d9      	beq.n	800d37a <__swbuf_r+0x2e>
 800d3c6:	e7d6      	b.n	800d376 <__swbuf_r+0x2a>

0800d3c8 <__swsetup_r>:
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	4b29      	ldr	r3, [pc, #164]	@ (800d470 <__swsetup_r+0xa8>)
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	6818      	ldr	r0, [r3, #0]
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	b118      	cbz	r0, 800d3dc <__swsetup_r+0x14>
 800d3d4:	6a03      	ldr	r3, [r0, #32]
 800d3d6:	b90b      	cbnz	r3, 800d3dc <__swsetup_r+0x14>
 800d3d8:	f7fe f97a 	bl	800b6d0 <__sinit>
 800d3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e0:	0719      	lsls	r1, r3, #28
 800d3e2:	d422      	bmi.n	800d42a <__swsetup_r+0x62>
 800d3e4:	06da      	lsls	r2, r3, #27
 800d3e6:	d407      	bmi.n	800d3f8 <__swsetup_r+0x30>
 800d3e8:	2209      	movs	r2, #9
 800d3ea:	602a      	str	r2, [r5, #0]
 800d3ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3f6:	e033      	b.n	800d460 <__swsetup_r+0x98>
 800d3f8:	0758      	lsls	r0, r3, #29
 800d3fa:	d512      	bpl.n	800d422 <__swsetup_r+0x5a>
 800d3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3fe:	b141      	cbz	r1, 800d412 <__swsetup_r+0x4a>
 800d400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d404:	4299      	cmp	r1, r3
 800d406:	d002      	beq.n	800d40e <__swsetup_r+0x46>
 800d408:	4628      	mov	r0, r5
 800d40a:	f7ff f8b5 	bl	800c578 <_free_r>
 800d40e:	2300      	movs	r3, #0
 800d410:	6363      	str	r3, [r4, #52]	@ 0x34
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d418:	81a3      	strh	r3, [r4, #12]
 800d41a:	2300      	movs	r3, #0
 800d41c:	6063      	str	r3, [r4, #4]
 800d41e:	6923      	ldr	r3, [r4, #16]
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f043 0308 	orr.w	r3, r3, #8
 800d428:	81a3      	strh	r3, [r4, #12]
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	b94b      	cbnz	r3, 800d442 <__swsetup_r+0x7a>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d438:	d003      	beq.n	800d442 <__swsetup_r+0x7a>
 800d43a:	4621      	mov	r1, r4
 800d43c:	4628      	mov	r0, r5
 800d43e:	f000 f883 	bl	800d548 <__smakebuf_r>
 800d442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d446:	f013 0201 	ands.w	r2, r3, #1
 800d44a:	d00a      	beq.n	800d462 <__swsetup_r+0x9a>
 800d44c:	2200      	movs	r2, #0
 800d44e:	60a2      	str	r2, [r4, #8]
 800d450:	6962      	ldr	r2, [r4, #20]
 800d452:	4252      	negs	r2, r2
 800d454:	61a2      	str	r2, [r4, #24]
 800d456:	6922      	ldr	r2, [r4, #16]
 800d458:	b942      	cbnz	r2, 800d46c <__swsetup_r+0xa4>
 800d45a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d45e:	d1c5      	bne.n	800d3ec <__swsetup_r+0x24>
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	0799      	lsls	r1, r3, #30
 800d464:	bf58      	it	pl
 800d466:	6962      	ldrpl	r2, [r4, #20]
 800d468:	60a2      	str	r2, [r4, #8]
 800d46a:	e7f4      	b.n	800d456 <__swsetup_r+0x8e>
 800d46c:	2000      	movs	r0, #0
 800d46e:	e7f7      	b.n	800d460 <__swsetup_r+0x98>
 800d470:	20000020 	.word	0x20000020

0800d474 <_raise_r>:
 800d474:	291f      	cmp	r1, #31
 800d476:	b538      	push	{r3, r4, r5, lr}
 800d478:	4605      	mov	r5, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	d904      	bls.n	800d488 <_raise_r+0x14>
 800d47e:	2316      	movs	r3, #22
 800d480:	6003      	str	r3, [r0, #0]
 800d482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d486:	bd38      	pop	{r3, r4, r5, pc}
 800d488:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d48a:	b112      	cbz	r2, 800d492 <_raise_r+0x1e>
 800d48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d490:	b94b      	cbnz	r3, 800d4a6 <_raise_r+0x32>
 800d492:	4628      	mov	r0, r5
 800d494:	f000 f830 	bl	800d4f8 <_getpid_r>
 800d498:	4622      	mov	r2, r4
 800d49a:	4601      	mov	r1, r0
 800d49c:	4628      	mov	r0, r5
 800d49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a2:	f000 b817 	b.w	800d4d4 <_kill_r>
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d00a      	beq.n	800d4c0 <_raise_r+0x4c>
 800d4aa:	1c59      	adds	r1, r3, #1
 800d4ac:	d103      	bne.n	800d4b6 <_raise_r+0x42>
 800d4ae:	2316      	movs	r3, #22
 800d4b0:	6003      	str	r3, [r0, #0]
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	e7e7      	b.n	800d486 <_raise_r+0x12>
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4bc:	4620      	mov	r0, r4
 800d4be:	4798      	blx	r3
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7e0      	b.n	800d486 <_raise_r+0x12>

0800d4c4 <raise>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	@ (800d4d0 <raise+0xc>)
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	f7ff bfd3 	b.w	800d474 <_raise_r>
 800d4ce:	bf00      	nop
 800d4d0:	20000020 	.word	0x20000020

0800d4d4 <_kill_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d07      	ldr	r5, [pc, #28]	@ (800d4f4 <_kill_r+0x20>)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4608      	mov	r0, r1
 800d4de:	4611      	mov	r1, r2
 800d4e0:	602b      	str	r3, [r5, #0]
 800d4e2:	f7f6 fba7 	bl	8003c34 <_kill>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	d102      	bne.n	800d4f0 <_kill_r+0x1c>
 800d4ea:	682b      	ldr	r3, [r5, #0]
 800d4ec:	b103      	cbz	r3, 800d4f0 <_kill_r+0x1c>
 800d4ee:	6023      	str	r3, [r4, #0]
 800d4f0:	bd38      	pop	{r3, r4, r5, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20002194 	.word	0x20002194

0800d4f8 <_getpid_r>:
 800d4f8:	f7f6 bb94 	b.w	8003c24 <_getpid>

0800d4fc <__swhatbuf_r>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	460c      	mov	r4, r1
 800d500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d504:	2900      	cmp	r1, #0
 800d506:	b096      	sub	sp, #88	@ 0x58
 800d508:	4615      	mov	r5, r2
 800d50a:	461e      	mov	r6, r3
 800d50c:	da0d      	bge.n	800d52a <__swhatbuf_r+0x2e>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d514:	f04f 0100 	mov.w	r1, #0
 800d518:	bf14      	ite	ne
 800d51a:	2340      	movne	r3, #64	@ 0x40
 800d51c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d520:	2000      	movs	r0, #0
 800d522:	6031      	str	r1, [r6, #0]
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	b016      	add	sp, #88	@ 0x58
 800d528:	bd70      	pop	{r4, r5, r6, pc}
 800d52a:	466a      	mov	r2, sp
 800d52c:	f000 f848 	bl	800d5c0 <_fstat_r>
 800d530:	2800      	cmp	r0, #0
 800d532:	dbec      	blt.n	800d50e <__swhatbuf_r+0x12>
 800d534:	9901      	ldr	r1, [sp, #4]
 800d536:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d53a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d53e:	4259      	negs	r1, r3
 800d540:	4159      	adcs	r1, r3
 800d542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d546:	e7eb      	b.n	800d520 <__swhatbuf_r+0x24>

0800d548 <__smakebuf_r>:
 800d548:	898b      	ldrh	r3, [r1, #12]
 800d54a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d54c:	079d      	lsls	r5, r3, #30
 800d54e:	4606      	mov	r6, r0
 800d550:	460c      	mov	r4, r1
 800d552:	d507      	bpl.n	800d564 <__smakebuf_r+0x1c>
 800d554:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	6123      	str	r3, [r4, #16]
 800d55c:	2301      	movs	r3, #1
 800d55e:	6163      	str	r3, [r4, #20]
 800d560:	b003      	add	sp, #12
 800d562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d564:	ab01      	add	r3, sp, #4
 800d566:	466a      	mov	r2, sp
 800d568:	f7ff ffc8 	bl	800d4fc <__swhatbuf_r>
 800d56c:	9f00      	ldr	r7, [sp, #0]
 800d56e:	4605      	mov	r5, r0
 800d570:	4639      	mov	r1, r7
 800d572:	4630      	mov	r0, r6
 800d574:	f7ff f874 	bl	800c660 <_malloc_r>
 800d578:	b948      	cbnz	r0, 800d58e <__smakebuf_r+0x46>
 800d57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d57e:	059a      	lsls	r2, r3, #22
 800d580:	d4ee      	bmi.n	800d560 <__smakebuf_r+0x18>
 800d582:	f023 0303 	bic.w	r3, r3, #3
 800d586:	f043 0302 	orr.w	r3, r3, #2
 800d58a:	81a3      	strh	r3, [r4, #12]
 800d58c:	e7e2      	b.n	800d554 <__smakebuf_r+0xc>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	6020      	str	r0, [r4, #0]
 800d592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d596:	81a3      	strh	r3, [r4, #12]
 800d598:	9b01      	ldr	r3, [sp, #4]
 800d59a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d59e:	b15b      	cbz	r3, 800d5b8 <__smakebuf_r+0x70>
 800d5a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f000 f81d 	bl	800d5e4 <_isatty_r>
 800d5aa:	b128      	cbz	r0, 800d5b8 <__smakebuf_r+0x70>
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	f023 0303 	bic.w	r3, r3, #3
 800d5b2:	f043 0301 	orr.w	r3, r3, #1
 800d5b6:	81a3      	strh	r3, [r4, #12]
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	431d      	orrs	r5, r3
 800d5bc:	81a5      	strh	r5, [r4, #12]
 800d5be:	e7cf      	b.n	800d560 <__smakebuf_r+0x18>

0800d5c0 <_fstat_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	@ (800d5e0 <_fstat_r+0x20>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	f7f6 fb91 	bl	8003cf4 <_fstat>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	d102      	bne.n	800d5dc <_fstat_r+0x1c>
 800d5d6:	682b      	ldr	r3, [r5, #0]
 800d5d8:	b103      	cbz	r3, 800d5dc <_fstat_r+0x1c>
 800d5da:	6023      	str	r3, [r4, #0]
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	bf00      	nop
 800d5e0:	20002194 	.word	0x20002194

0800d5e4 <_isatty_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4d06      	ldr	r5, [pc, #24]	@ (800d600 <_isatty_r+0x1c>)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f6 fb90 	bl	8003d14 <_isatty>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_isatty_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_isatty_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20002194 	.word	0x20002194

0800d604 <_init>:
 800d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d606:	bf00      	nop
 800d608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60a:	bc08      	pop	{r3}
 800d60c:	469e      	mov	lr, r3
 800d60e:	4770      	bx	lr

0800d610 <_fini>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr
